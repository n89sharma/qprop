
;; Function motorq (motorq_, funcdef_no=0, decl_uid=3500, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=624, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=608, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 46:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 56:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 57:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 59:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 60:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 62:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 63:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 65:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 66:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 68:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 69:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 70:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 74:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 75:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 76:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 77:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 79:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 84:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 90:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 94:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 96:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 101:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 103:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 106:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 126:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 127:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 139:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 145:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 160:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 161:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 164:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 167:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 170:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 173:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 175:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 176:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 179:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 181:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 182:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 183:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 186:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 193:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 194:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 197:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 198:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 201:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 205:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 206:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 208:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 209:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 210:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 211:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 214:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 215
	 Choosing alt 1 in insn 215:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 216:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 217:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 219:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 220:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 222:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 223:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 228:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 229:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 231:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 233:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 242:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 245:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 246:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 247:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 249
	 Choosing alt 1 in insn 249:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 250:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 253:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 254:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 256:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 257:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=299 from oldreg=172, assigning class SSE_REGS to r299
  257: r299:SF=r299:SF*r172:SF
      REG_DEAD r172:SF
    Inserting insn reload before:
  426: r299:SF=r172:SF
    Inserting insn reload after:
  427: r173:SF=r299:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 258:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 259:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 260
	 Choosing alt 1 in insn 260:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 1 in insn 261:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 262:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 263
	 Choosing alt 1 in insn 263:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 264:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 266:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 267:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 268:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 269:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=300 from oldreg=137, assigning class SSE_REGS to r300
  269: r300:SF=r300:SF-r138:SF
      REG_DEAD r138:SF
      REG_DEAD r137:SF
    Inserting insn reload before:
  428: r300:SF=r137:SF
    Inserting insn reload after:
  429: r139:SF=r300:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 270:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 271:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 272:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 274:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 275:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =qm {*setcc_qi}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 281
	 Choosing alt 0 in insn 281:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) q {*cmpqi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 287:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 288:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 290:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 291:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) v  (1) vm {*cmpiusf}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 295:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 301:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 302:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 306:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 309:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 311:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 314:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 319:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 320:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 321:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 322:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 323:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 324:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 325:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 328:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 329:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 330:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 331:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 334:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 335:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 336:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 337:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 339:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 340:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 341:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 342:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 343
	 Choosing alt 1 in insn 343:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 344:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 346:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 347:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 349:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 350
	 Choosing alt 1 in insn 350:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 351:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 353:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 354:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 356:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 358:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 359:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 360:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 361:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 363:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 365:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 367:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 368:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 370:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 375:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 376:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 378:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 380:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 383:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 385:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 389:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 394:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 398:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 22
EBB 18
EBB 23
EBB 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 4
   Insn 51: point = 0, n_alt = 0
   Insn 50: point = 0, n_alt = 2
   Insn 49: point = 0, n_alt = 0
   Insn 48: point = 0, n_alt = 0
   Insn 47: point = 0, n_alt = -1
   Insn 46: point = 1, n_alt = 3
   Insn 45: point = 2, n_alt = 0
   Insn 44: point = 2, n_alt = -1
   Insn 43: point = 3, n_alt = -1
   Insn 42: point = 4, n_alt = 0
   Insn 41: point = 4, n_alt = 3
   Insn 40: point = 5, n_alt = 3
   Insn 39: point = 6, n_alt = 0
   Insn 38: point = 6, n_alt = -1
   Insn 37: point = 7, n_alt = 4
   Insn 36: point = 7, n_alt = 0
   Insn 35: point = 7, n_alt = 3
   Insn 34: point = 8, n_alt = 0
   Insn 33: point = 8, n_alt = -1
   Insn 32: point = 9, n_alt = 4
   Insn 31: point = 9, n_alt = 0
   Insn 30: point = 9, n_alt = 3
   Insn 29: point = 10, n_alt = 0
   Insn 28: point = 10, n_alt = -1
   Insn 27: point = 11, n_alt = 3
   Insn 26: point = 12, n_alt = 1
   Insn 25: point = 12, n_alt = 1
   Insn 24: point = 12, n_alt = 1
   Insn 23: point = 12, n_alt = 5
   Insn 22: point = 13, n_alt = 4
  BB 8
   Insn 155: point = 14, n_alt = 0
   Insn 154: point = 14, n_alt = 2
   Insn 153: point = 14, n_alt = 0
   Insn 152: point = 14, n_alt = 0
   Insn 151: point = 14, n_alt = -1
   Insn 150: point = 15, n_alt = 3
   Insn 149: point = 16, n_alt = 0
   Insn 148: point = 16, n_alt = -1
   Insn 147: point = 17, n_alt = -1
   Insn 146: point = 18, n_alt = 0
   Insn 145: point = 18, n_alt = 3
   Insn 144: point = 19, n_alt = 3
   Insn 143: point = 20, n_alt = 0
   Insn 142: point = 20, n_alt = -1
   Insn 141: point = 21, n_alt = 4
   Insn 140: point = 21, n_alt = 0
   Insn 139: point = 21, n_alt = 3
   Insn 138: point = 22, n_alt = 0
   Insn 137: point = 22, n_alt = -1
   Insn 136: point = 23, n_alt = 4
   Insn 135: point = 23, n_alt = 0
   Insn 134: point = 23, n_alt = 3
   Insn 133: point = 24, n_alt = 0
   Insn 132: point = 24, n_alt = -1
   Insn 131: point = 25, n_alt = 3
   Insn 130: point = 26, n_alt = 1
   Insn 129: point = 26, n_alt = 1
   Insn 128: point = 26, n_alt = 1
   Insn 127: point = 26, n_alt = 5
   Insn 126: point = 27, n_alt = 4
  BB 20
   Insn 399: point = 28, n_alt = 0
   Insn 398: point = 28, n_alt = 2
   Insn 397: point = 28, n_alt = 0
   Insn 396: point = 28, n_alt = 0
   Insn 395: point = 28, n_alt = -1
   Insn 394: point = 29, n_alt = 3
   Insn 393: point = 30, n_alt = 0
   Insn 392: point = 30, n_alt = -1
   Insn 391: point = 31, n_alt = -1
   Insn 390: point = 32, n_alt = 0
   Insn 389: point = 32, n_alt = 3
   Insn 388: point = 33, n_alt = 3
   Insn 387: point = 34, n_alt = 0
   Insn 386: point = 34, n_alt = -1
   Insn 385: point = 35, n_alt = 4
   Insn 384: point = 35, n_alt = 0
   Insn 383: point = 35, n_alt = 3
   Insn 382: point = 36, n_alt = 0
   Insn 381: point = 36, n_alt = -1
   Insn 380: point = 37, n_alt = 3
   Insn 379: point = 38, n_alt = 1
   Insn 378: point = 38, n_alt = 1
   Insn 377: point = 38, n_alt = 1
   Insn 376: point = 38, n_alt = 5
   Insn 375: point = 39, n_alt = 4
  BB 21
  BB 19
   Insn 415: point = 40, n_alt = -1
   Insn 370: point = 40, n_alt = 8
   Insn 369: point = 41, n_alt = 3
   Insn 368: point = 42, n_alt = 2
   Insn 367: point = 44, n_alt = 7
   Insn 366: point = 46, n_alt = 3
   Insn 365: point = 47, n_alt = 8
   Insn 364: point = 48, n_alt = 3
   Insn 363: point = 49, n_alt = 2
   Insn 362: point = 51, n_alt = -1
   Insn 361: point = 53, n_alt = 2
   Insn 360: point = 55, n_alt = 7
   Insn 359: point = 57, n_alt = 3
   Insn 358: point = 58, n_alt = 8
   Insn 357: point = 59, n_alt = 3
   Insn 356: point = 60, n_alt = 2
   Insn 355: point = 62, n_alt = -1
   Insn 354: point = 64, n_alt = 2
   Insn 353: point = 66, n_alt = 7
   Insn 352: point = 68, n_alt = 3
   Insn 351: point = 69, n_alt = 8
   Insn 350: point = 70, n_alt = 1
   Insn 349: point = 72, n_alt = 7
   Insn 348: point = 73, n_alt = 1
   Insn 347: point = 75, n_alt = 1
   Insn 346: point = 77, n_alt = 7
   Insn 345: point = 79, n_alt = 3
   Insn 344: point = 80, n_alt = 8
   Insn 343: point = 81, n_alt = 1
   Insn 342: point = 83, n_alt = 1
   Insn 341: point = 85, n_alt = 1
   Insn 340: point = 87, n_alt = 1
   Insn 339: point = 89, n_alt = 7
   Insn 338: point = 91, n_alt = 3
   Insn 337: point = 92, n_alt = 1
   Insn 336: point = 94, n_alt = 7
   Insn 335: point = 96, n_alt = 3
   Insn 334: point = 97, n_alt = 8
   Insn 333: point = 98, n_alt = 3
   Insn 332: point = 99, n_alt = 0
   Insn 331: point = 101, n_alt = 2
   Insn 330: point = 102, n_alt = 2
   Insn 329: point = 104, n_alt = 7
   Insn 328: point = 105, n_alt = 8
   Insn 327: point = 106, n_alt = 3
   Insn 326: point = 107, n_alt = 0
   Insn 325: point = 109, n_alt = 2
   Insn 324: point = 110, n_alt = 2
   Insn 323: point = 112, n_alt = 7
   Insn 322: point = 113, n_alt = 8
   Insn 321: point = 114, n_alt = 7
   Insn 320: point = 115, n_alt = 8
   Insn 319: point = 116, n_alt = 7
  BB 18
   Insn 420: point = 117, n_alt = -1
   Insn 316: point = 117, n_alt = 0
   Insn 315: point = 117, n_alt = -1
   Insn 314: point = 118, n_alt = 3
   Insn 313: point = 119, n_alt = 0
   Insn 312: point = 119, n_alt = -1
   Insn 311: point = 120, n_alt = 4
   Insn 310: point = 120, n_alt = 0
   Insn 309: point = 120, n_alt = 3
   Insn 308: point = 121, n_alt = 0
   Insn 307: point = 121, n_alt = -1
   Insn 306: point = 122, n_alt = 3
   Insn 305: point = 123, n_alt = 1
   Insn 304: point = 123, n_alt = 1
   Insn 303: point = 123, n_alt = 1
   Insn 302: point = 123, n_alt = 5
   Insn 301: point = 124, n_alt = 4
  BB 22
   Insn 419: point = 125, n_alt = -1
  BB 23
   Insn 424: point = 125, n_alt = -1
  BB 16
   Insn 293: point = 125, n_alt = -1
   Insn 292: point = 125, n_alt = 1
   Insn 291: point = 126, n_alt = 1
   Insn 290: point = 128, n_alt = 7
   Insn 289: point = 129, n_alt = 1
   Insn 288: point = 131, n_alt = 2
   Insn 287: point = 132, n_alt = 7
  BB 15
   Insn 9: point = 134, n_alt = -1
  BB 14
   Insn 283: point = 137, n_alt = -1
   Insn 282: point = 137, n_alt = 0
   Insn 281: point = 138, n_alt = 0
   Insn 280: point = 140, n_alt = 0
   Insn 279: point = 141, n_alt = 1
   Insn 278: point = 141, n_alt = 0
   Insn 277: point = 142, n_alt = 1
   Insn 276: point = 142, n_alt = 1
   Insn 275: point = 144, n_alt = 2
   Insn 274: point = 145, n_alt = 7
   Insn 273: point = 147, n_alt = 3
   Insn 272: point = 148, n_alt = 7
   Insn 271: point = 149, n_alt = 8
   Insn 270: point = 150, n_alt = 3
   Insn 429: point = 151, n_alt = -1
	Hard reg 21 is preferable by r300 with profit 1
   Insn 269: point = 153, n_alt = 2
   Insn 428: point = 154, n_alt = -1
	Hard reg 21 is preferable by r300 with profit 1
	Hard reg 22 is preferable by r300 with profit 1
   Insn 268: point = 156, n_alt = 2
   Insn 267: point = 158, n_alt = 7
   Insn 266: point = 159, n_alt = 7
   Insn 265: point = 161, n_alt = 3
   Insn 264: point = 162, n_alt = 8
   Insn 263: point = 163, n_alt = 1
   Insn 262: point = 165, n_alt = 7
   Insn 261: point = 166, n_alt = 1
   Insn 260: point = 168, n_alt = 1
   Insn 259: point = 170, n_alt = 7
   Insn 258: point = 171, n_alt = 7
   Insn 427: point = 172, n_alt = -1
	Hard reg 22 is preferable by r299 with profit 1
   Insn 257: point = 174, n_alt = 1
   Insn 426: point = 175, n_alt = -1
	Hard reg 22 is preferable by r299 with profit 1
	Hard reg 21 is preferable by r299 with profit 1
   Insn 256: point = 176, n_alt = 7
   Insn 255: point = 178, n_alt = 3
   Insn 254: point = 179, n_alt = 8
   Insn 253: point = 180, n_alt = 2
   Insn 252: point = 182, n_alt = 7
   Insn 251: point = 184, n_alt = 3
   Insn 250: point = 185, n_alt = 1
   Insn 249: point = 187, n_alt = 1
   Insn 248: point = 189, n_alt = -1
   Insn 247: point = 191, n_alt = 1
   Insn 246: point = 193, n_alt = 1
   Insn 245: point = 195, n_alt = 7
   Insn 244: point = 197, n_alt = 3
   Insn 243: point = 198, n_alt = 1
   Insn 242: point = 200, n_alt = 7
   Insn 241: point = 202, n_alt = 3
  BB 13
   Insn 239: point = 203, n_alt = -1
   Insn 238: point = 203, n_alt = 0
   Insn 237: point = 204, n_alt = 0
   Insn 236: point = 205, n_alt = 0
  BB 17
   Insn 413: point = 205, n_alt = -1
   Insn 295: point = 205, n_alt = 1
  BB 12
   Insn 234: point = 205, n_alt = 1
   Insn 233: point = 205, n_alt = 8
   Insn 232: point = 206, n_alt = 3
   Insn 231: point = 207, n_alt = 2
   Insn 230: point = 209, n_alt = -1
   Insn 229: point = 211, n_alt = 2
   Insn 228: point = 213, n_alt = 7
   Insn 227: point = 215, n_alt = 3
   Insn 226: point = 216, n_alt = 8
   Insn 225: point = 217, n_alt = 2
   Insn 224: point = 219, n_alt = -1
   Insn 223: point = 221, n_alt = 1
   Insn 222: point = 223, n_alt = 7
   Insn 221: point = 224, n_alt = 1
   Insn 220: point = 226, n_alt = 1
   Insn 219: point = 228, n_alt = 7
   Insn 218: point = 230, n_alt = 3
   Insn 217: point = 231, n_alt = 8
   Insn 216: point = 232, n_alt = 2
   Insn 215: point = 234, n_alt = 1
   Insn 214: point = 236, n_alt = 7
   Insn 213: point = 238, n_alt = 3
   Insn 212: point = 239, n_alt = -1
   Insn 211: point = 241, n_alt = 1
   Insn 210: point = 243, n_alt = 7
   Insn 209: point = 244, n_alt = 1
   Insn 208: point = 246, n_alt = 7
   Insn 207: point = 248, n_alt = 3
   Insn 206: point = 249, n_alt = 8
   Insn 205: point = 250, n_alt = 2
   Insn 204: point = 252, n_alt = 7
   Insn 203: point = 253, n_alt = 1
   Insn 202: point = 255, n_alt = 7
   Insn 201: point = 256, n_alt = 8
   Insn 200: point = 257, n_alt = 2
   Insn 199: point = 259, n_alt = 7
   Insn 198: point = 260, n_alt = 1
   Insn 197: point = 262, n_alt = 7
  BB 11
   Insn 194: point = 263, n_alt = 8
   Insn 193: point = 264, n_alt = 7
  BB 10
   Insn 188: point = 265, n_alt = -1
   Insn 187: point = 265, n_alt = 1
   Insn 186: point = 266, n_alt = 7
  BB 9
   Insn 185: point = 267, n_alt = -1
   Insn 184: point = 267, n_alt = 1
   Insn 183: point = 268, n_alt = 7
   Insn 182: point = 269, n_alt = 8
   Insn 181: point = 270, n_alt = 7
   Insn 180: point = 272, n_alt = 3
   Insn 179: point = 273, n_alt = 8
   Insn 178: point = 274, n_alt = 7
   Insn 177: point = 276, n_alt = 3
   Insn 176: point = 277, n_alt = 8
   Insn 175: point = 278, n_alt = 7
   Insn 174: point = 280, n_alt = 3
   Insn 173: point = 281, n_alt = 8
   Insn 172: point = 282, n_alt = 7
   Insn 171: point = 284, n_alt = 3
   Insn 170: point = 285, n_alt = 8
   Insn 169: point = 286, n_alt = 7
   Insn 168: point = 288, n_alt = 3
   Insn 167: point = 289, n_alt = 8
   Insn 166: point = 290, n_alt = 7
   Insn 165: point = 292, n_alt = 3
   Insn 164: point = 293, n_alt = 8
   Insn 163: point = 294, n_alt = 7
   Insn 162: point = 296, n_alt = 3
   Insn 161: point = 297, n_alt = 8
   Insn 160: point = 298, n_alt = 7
   Insn 159: point = 300, n_alt = 3
  BB 7
   Insn 124: point = 301, n_alt = -1
   Insn 123: point = 301, n_alt = 0
   Insn 122: point = 302, n_alt = 0
   Insn 121: point = 304, n_alt = 3
  BB 6
   Insn 119: point = 305, n_alt = -1
   Insn 118: point = 305, n_alt = 0
   Insn 117: point = 306, n_alt = 0
   Insn 116: point = 308, n_alt = 3
  BB 5
   Insn 411: point = 309, n_alt = -1
   Insn 111: point = 309, n_alt = 8
   Insn 110: point = 310, n_alt = 3
   Insn 109: point = 311, n_alt = 2
   Insn 108: point = 313, n_alt = 7
   Insn 107: point = 315, n_alt = 3
   Insn 106: point = 316, n_alt = 8
   Insn 105: point = 317, n_alt = 3
   Insn 104: point = 318, n_alt = 2
   Insn 103: point = 320, n_alt = 7
   Insn 102: point = 322, n_alt = 3
   Insn 101: point = 323, n_alt = 8
   Insn 100: point = 324, n_alt = 3
   Insn 99: point = 325, n_alt = 2
   Insn 98: point = 327, n_alt = -1
   Insn 97: point = 329, n_alt = 2
   Insn 96: point = 331, n_alt = 7
   Insn 95: point = 333, n_alt = 3
   Insn 94: point = 334, n_alt = 8
   Insn 93: point = 335, n_alt = 3
   Insn 92: point = 336, n_alt = 2
   Insn 91: point = 338, n_alt = 7
   Insn 90: point = 339, n_alt = 8
   Insn 89: point = 340, n_alt = 3
   Insn 88: point = 341, n_alt = 0
   Insn 87: point = 343, n_alt = 2
   Insn 86: point = 344, n_alt = 2
   Insn 85: point = 346, n_alt = 7
   Insn 84: point = 347, n_alt = 8
   Insn 83: point = 348, n_alt = 3
   Insn 82: point = 349, n_alt = 2
   Insn 81: point = 351, n_alt = -1
   Insn 80: point = 353, n_alt = 2
   Insn 79: point = 355, n_alt = 7
   Insn 78: point = 357, n_alt = 3
   Insn 77: point = 358, n_alt = 8
   Insn 76: point = 359, n_alt = 2
   Insn 75: point = 361, n_alt = 7
   Insn 74: point = 362, n_alt = 8
   Insn 73: point = 363, n_alt = 2
   Insn 72: point = 365, n_alt = 7
   Insn 71: point = 367, n_alt = 3
   Insn 70: point = 368, n_alt = 8
   Insn 69: point = 369, n_alt = 7
   Insn 68: point = 370, n_alt = 8
   Insn 67: point = 371, n_alt = 2
   Insn 66: point = 373, n_alt = 7
   Insn 65: point = 374, n_alt = 1
   Insn 64: point = 376, n_alt = 7
   Insn 63: point = 377, n_alt = 8
   Insn 62: point = 378, n_alt = 7
   Insn 61: point = 380, n_alt = 3
   Insn 60: point = 381, n_alt = 8
   Insn 59: point = 382, n_alt = 7
   Insn 58: point = 384, n_alt = 3
   Insn 57: point = 385, n_alt = 8
   Insn 56: point = 386, n_alt = 7
   Insn 55: point = 388, n_alt = 3
  BB 3
   Insn 20: point = 389, n_alt = -1
   Insn 19: point = 389, n_alt = 0
   Insn 18: point = 390, n_alt = 0
   Insn 17: point = 392, n_alt = 3
  BB 2
   Insn 15: point = 393, n_alt = -1
   Insn 14: point = 393, n_alt = 0
   Insn 13: point = 394, n_alt = 0
   Insn 12: point = 396, n_alt = 3
   Insn 7: point = 397, n_alt = 5
   Insn 6: point = 397, n_alt = 5
   Insn 5: point = 397, n_alt = 5
   Insn 4: point = 397, n_alt = 5
   Insn 3: point = 397, n_alt = 5
   Insn 2: point = 397, n_alt = 5
 r87: [393..394]
 r88: [389..390]
 r89: [375..376]
 r90: [372..374]
 r91: [364..365]
 r92: [354..355]
 r93: [352..353]
 r94: [350..351]
 r95: [347..349]
 r96: [342..344]
 r97: [339..341]
 r98: [334..336]
 r99: [330..331]
 r100: [328..329]
 r101: [326..327]
 r102: [323..325]
 r103: [319..320]
 r104: [316..318]
 r105: [312..313]
 r106: [309..311]
 r107: [305..306]
 r108: [301..302]
 r109: [261..262]
 r110: [258..260]
 r111: [254..255]
 r112: [251..253]
 r113: [245..246]
 r114: [242..244]
 r115: [240..241]
 r116: [235..239]
 r117: [235..236]
 r118: [233..234]
 r119: [227..228]
 r120: [225..226]
 r121: [222..224]
 r122: [220..221]
 r123: [218..219]
 r124: [212..213]
 r125: [210..211]
 r126: [208..209]
 r127: [205..207]
 r128: [188..195]
 r129: [192..193]
 r130: [190..191]
 r131: [188..189]
 r132: [186..187]
 r133: [181..185]
 r134: [181..182]
 r135: [167..168]
 r136: [164..166]
 r137: [155..159]
 r138: [153..156]
 r139: [149..151]
 r140: [143..145]
 r141: [139..141]
 r142: [139..140]
 r143: [137..138]
 r144: [125..129]
 r145: [127..128]
 r146: [125..126]
 r147: [108..110]
 r148: [105..107]
 r149: [100..102]
 r150: [97..99]
 r151: [88..89]
 r152: [86..87]
 r153: [82..85]
 r154: [82..83]
 r155: [76..77]
 r156: [74..75]
 r157: [71..73]
 r158: [65..66]
 r159: [63..64]
 r160: [61..62]
 r161: [58..60]
 r162: [54..55]
 r163: [52..53]
 r164: [50..51]
 r165: [47..49]
 r166: [43..44]
 r167: [40..42]
 r168: [137..148] [127..134]
 r169: [203..204]
 r170: [199..200]
 r171: [194..198]
 r172: [174..176]
 r173: [167..172]
 r174: [135..142]
 r175: [93..94]
 r176: [84..92]
 r177: [395..396]
 r178: [391..392]
 r179: [12..13]
 r180: [10..11]
 r181: [8..9]
 r182: [6..7]
 r183: [3..5]
 r184: [2..4]
 r185: [0..1]
 r186: [387..388]
 r187: [385..386]
 r188: [383..384]
 r189: [381..382]
 r190: [379..380]
 r191: [377..378]
 r192: [370..371]
 r193: [372..373]
 r194: [368..369]
 r195: [366..367]
 r196: [362..363]
 r197: [358..359]
 r198: [360..361]
 r199: [356..357]
 r200: [347..348]
 r201: [345..346]
 r202: [342..343]
 r203: [339..340]
 r204: [337..338]
 r205: [334..335]
 r206: [332..333]
 r207: [323..324]
 r208: [321..322]
 r209: [316..317]
 r210: [314..315]
 r211: [309..310]
 r212: [307..308]
 r213: [303..304]
 r214: [26..27]
 r215: [24..25]
 r216: [22..23]
 r217: [20..21]
 r218: [17..19]
 r219: [16..18]
 r220: [14..15]
 r221: [299..300]
 r222: [297..298]
 r223: [295..296]
 r224: [293..294]
 r225: [291..292]
 r226: [289..290]
 r227: [287..288]
 r228: [285..286]
 r229: [283..284]
 r230: [281..282]
 r231: [279..280]
 r232: [277..278]
 r233: [275..276]
 r234: [273..274]
 r235: [271..272]
 r236: [269..270]
 r237: [267..268]
 r238: [265..266]
 r239: [263..264]
 r240: [256..257]
 r241: [258..259]
 r242: [249..250]
 r243: [251..252]
 r244: [247..248]
 r245: [242..243]
 r246: [237..238]
 r247: [231..232]
 r248: [229..230]
 r249: [222..223]
 r250: [216..217]
 r251: [214..215]
 r252: [205..206]
 r253: [201..202]
 r254: [196..197]
 r255: [183..184]
 r256: [179..180]
 r257: [177..178]
 r258: [169..171]
 r259: [169..170]
 r260: [162..163]
 r261: [164..165]
 r262: [160..161]
 r263: [157..158]
 r264: [149..150]
 r265: [146..147]
 r266: [143..144]
 r267: [130..132]
 r268: [130..131]
 r269: [123..124]
 r270: [121..122]
 r271: [119..120]
 r272: [117..118]
 r273: [115..116]
 r274: [113..114]
 r275: [111..112]
 r276: [108..109]
 r277: [105..106]
 r278: [103..104]
 r279: [100..101]
 r280: [97..98]
 r281: [95..96]
 r282: [90..91]
 r283: [80..81]
 r284: [78..79]
 r285: [69..70]
 r286: [71..72]
 r287: [67..68]
 r288: [58..59]
 r289: [56..57]
 r290: [47..48]
 r291: [45..46]
 r292: [40..41]
 r293: [38..39]
 r294: [36..37]
 r295: [34..35]
 r296: [31..33]
 r297: [30..32]
 r298: [28..29]
 r299: [173..175]
 r300: [152..154]
Compressing live ranges: from 397 to 348 - 87%
Ranges after the compression:
 r87: [344..345]
 r88: [340..341]
 r89: [326..327]
 r90: [324..325]
 r91: [316..317]
 r92: [306..307]
 r93: [304..305]
 r94: [302..303]
 r95: [300..301]
 r96: [296..297]
 r97: [294..295]
 r98: [290..291]
 r99: [286..287]
 r100: [284..285]
 r101: [282..283]
 r102: [280..281]
 r103: [276..277]
 r104: [274..275]
 r105: [270..271]
 r106: [268..269]
 r107: [264..265]
 r108: [260..261]
 r109: [220..221]
 r110: [218..219]
 r111: [214..215]
 r112: [212..213]
 r113: [206..207]
 r114: [204..205]
 r115: [202..203]
 r116: [198..201]
 r117: [198..199]
 r118: [196..197]
 r119: [190..191]
 r120: [188..189]
 r121: [186..187]
 r122: [184..185]
 r123: [182..183]
 r124: [176..177]
 r125: [174..175]
 r126: [172..173]
 r127: [170..171]
 r128: [154..161]
 r129: [158..159]
 r130: [156..157]
 r131: [154..155]
 r132: [152..153]
 r133: [148..151]
 r134: [148..149]
 r135: [138..139]
 r136: [136..137]
 r137: [128..131]
 r138: [126..129]
 r139: [124..125]
 r140: [120..121]
 r141: [118..119]
 r142: [118..119]
 r143: [116..117]
 r144: [110..113]
 r145: [112..113]
 r146: [110..111]
 r147: [94..95]
 r148: [92..93]
 r149: [88..89]
 r150: [86..87]
 r151: [78..79]
 r152: [76..77]
 r153: [72..75]
 r154: [72..73]
 r155: [66..67]
 r156: [64..65]
 r157: [62..63]
 r158: [56..57]
 r159: [54..55]
 r160: [52..53]
 r161: [50..51]
 r162: [46..47]
 r163: [44..45]
 r164: [42..43]
 r165: [40..41]
 r166: [36..37]
 r167: [34..35]
 r168: [112..123]
 r169: [168..169]
 r170: [164..165]
 r171: [160..163]
 r172: [142..143]
 r173: [138..141]
 r174: [116..119]
 r175: [82..83]
 r176: [74..81]
 r177: [346..347]
 r178: [342..343]
 r179: [10..11]
 r180: [8..9]
 r181: [6..7]
 r182: [4..5]
 r183: [2..3]
 r184: [2..3]
 r185: [0..1]
 r186: [338..339]
 r187: [336..337]
 r188: [334..335]
 r189: [332..333]
 r190: [330..331]
 r191: [328..329]
 r192: [322..323]
 r193: [324..325]
 r194: [320..321]
 r195: [318..319]
 r196: [314..315]
 r197: [310..311]
 r198: [312..313]
 r199: [308..309]
 r200: [300..301]
 r201: [298..299]
 r202: [296..297]
 r203: [294..295]
 r204: [292..293]
 r205: [290..291]
 r206: [288..289]
 r207: [280..281]
 r208: [278..279]
 r209: [274..275]
 r210: [272..273]
 r211: [268..269]
 r212: [266..267]
 r213: [262..263]
 r214: [22..23]
 r215: [20..21]
 r216: [18..19]
 r217: [16..17]
 r218: [14..15]
 r219: [14..15]
 r220: [12..13]
 r221: [258..259]
 r222: [256..257]
 r223: [254..255]
 r224: [252..253]
 r225: [250..251]
 r226: [248..249]
 r227: [246..247]
 r228: [244..245]
 r229: [242..243]
 r230: [240..241]
 r231: [238..239]
 r232: [236..237]
 r233: [234..235]
 r234: [232..233]
 r235: [230..231]
 r236: [228..229]
 r237: [226..227]
 r238: [224..225]
 r239: [222..223]
 r240: [216..217]
 r241: [218..219]
 r242: [210..211]
 r243: [212..213]
 r244: [208..209]
 r245: [204..205]
 r246: [200..201]
 r247: [194..195]
 r248: [192..193]
 r249: [186..187]
 r250: [180..181]
 r251: [178..179]
 r252: [170..171]
 r253: [166..167]
 r254: [162..163]
 r255: [150..151]
 r256: [146..147]
 r257: [144..145]
 r258: [140..141]
 r259: [140..141]
 r260: [134..135]
 r261: [136..137]
 r262: [132..133]
 r263: [130..131]
 r264: [124..125]
 r265: [122..123]
 r266: [120..121]
 r267: [114..115]
 r268: [114..115]
 r269: [108..109]
 r270: [106..107]
 r271: [104..105]
 r272: [102..103]
 r273: [100..101]
 r274: [98..99]
 r275: [96..97]
 r276: [94..95]
 r277: [92..93]
 r278: [90..91]
 r279: [88..89]
 r280: [86..87]
 r281: [84..85]
 r282: [80..81]
 r283: [70..71]
 r284: [68..69]
 r285: [60..61]
 r286: [62..63]
 r287: [58..59]
 r288: [50..51]
 r289: [48..49]
 r290: [40..41]
 r291: [38..39]
 r292: [34..35]
 r293: [32..33]
 r294: [30..31]
 r295: [28..29]
 r296: [26..27]
 r297: [26..27]
 r298: [24..25]
 r299: [142..143]
 r300: [126..127]

********** Assignment #1: **********

	 Assigning to 299 (cl=SSE_REGS, orig=172, freq=3, tfirst=299, tfreq=3)...
	   Assign 22 to reload r299 (freq=3)
	 Assigning to 300 (cl=SSE_REGS, orig=137, freq=3, tfirst=300, tfreq=3)...
	   Assign 22 to reload r300 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=624, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=608, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 72
changing reg in insn 73
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 117
changing reg in insn 118
changing reg in insn 122
changing reg in insn 123
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 205
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 221
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 233
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 253
changing reg in insn 252
changing reg in insn 253
changing reg in insn 260
changing reg in insn 261
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 271
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 289
changing reg in insn 292
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 326
changing reg in insn 328
changing reg in insn 330
changing reg in insn 332
changing reg in insn 332
changing reg in insn 332
changing reg in insn 334
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 348
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 358
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 365
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 370
changing reg in insn 9
changing reg in insn 272
changing reg in insn 291
changing reg in insn 279
changing reg in insn 279
changing reg in insn 277
changing reg in insn 237
changing reg in insn 238
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 243
changing reg in insn 246
changing reg in insn 256
changing reg in insn 257
changing reg in insn 276
changing reg in insn 9
changing reg in insn 277
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 337
changing reg in insn 342
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 35
changing reg in insn 38
changing reg in insn 40
changing reg in insn 43
changing reg in insn 41
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 116
changing reg in insn 117
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 127
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 137
changing reg in insn 139
changing reg in insn 142
changing reg in insn 144
changing reg in insn 147
changing reg in insn 145
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 193
changing reg in insn 194
changing reg in insn 200
changing reg in insn 201
changing reg in insn 199
changing reg in insn 200
changing reg in insn 205
changing reg in insn 206
changing reg in insn 204
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 232
changing reg in insn 233
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 263
changing reg in insn 264
changing reg in insn 262
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 288
changing reg in insn 289
changing reg in insn 301
changing reg in insn 302
changing reg in insn 306
changing reg in insn 307
changing reg in insn 309
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 343
changing reg in insn 344
changing reg in insn 345
changing reg in insn 346
changing reg in insn 350
changing reg in insn 351
changing reg in insn 349
changing reg in insn 352
changing reg in insn 353
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 360
changing reg in insn 364
changing reg in insn 365
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 370
changing reg in insn 375
changing reg in insn 376
changing reg in insn 380
changing reg in insn 381
changing reg in insn 383
changing reg in insn 386
changing reg in insn 388
changing reg in insn 391
changing reg in insn 389
changing reg in insn 392
changing reg in insn 394
changing reg in insn 395
deleting insn with uid = 81.
deleting insn with uid = 98.
deleting insn with uid = 224.
deleting insn with uid = 230.
deleting insn with uid = 248.
deleting insn with uid = 427.
deleting insn with uid = 428.
deleting insn with uid = 355.
deleting insn with uid = 362.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 308.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 316.
verify found no changes in insn with uid = 382.
verify found no changes in insn with uid = 387.
verify found no changes in insn with uid = 393.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 399.


motorq

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9]
;;  ref usage 	r0={98d,77u} r1={31d,11u} r2={24d,4u} r4={33d,13u} r5={41d,21u} r6={1d,191u} r7={1d,43u} r8={20d} r9={20d} r10={20d} r11={20d} r12={20d} r13={20d} r14={20d} r15={20d} r17={56d,12u} r18={20d} r19={20d} r20={1d,1u} r21={120d,106u,3e} r22={45d,25u} r23={25d,4u,2e} r24={21d} r25={21d} r26={21d} r27={21d} r28={21d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={21d,1u} r38={21d,1u} r39={20d} r40={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} 
;;    total ref usage 2258{1743d,510u,5e} in 359{339 regular + 20 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 87 177
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])
        (reg:DI 5 di [ omega ])) "../src/motor.f":21 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])
        (reg:DI 4 si [ volt ])) "../src/motor.f":21 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])
        (reg:DI 1 dx [ imotype ])) "../src/motor.f":21 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])
        (reg:DI 2 cx [ parmot ])) "../src/motor.f":21 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])
        (reg:DI 37 r8 [ nmpar ])) "../src/motor.f":21 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 q+0 S8 A64])
        (reg:DI 38 r9 [ q ])) "../src/motor.f":21 81 {*movdi_internal}
     (nil))
(note 8 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 8 13 2 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":49 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [177]) [1 *imotype_91(D)+0 S4 A32])) "../src/motor.f":49 82 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 1 [0x1]))) "../src/motor.f":49 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) "../src/motor.f":49 617 {*jcc_1}
     (nil)
 -> 114)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 178
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])) "../src/motor.f":51 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (mem:SI (reg/f:DI 0 ax [178]) [1 *nmpar_102(D)+0 S4 A32])) "../src/motor.f":51 82 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 _2 ] [88])
            (const_int 2 [0x2]))) "../src/motor.f":51 7 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "../src/motor.f":51 617 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 179 180 181 182 183 184 185
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [179])
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.0.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [179])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.0.common.line+0 S4 A64])
        (const_int 53 [0x35])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.0.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.0.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 0 ax [180])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (nil))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(call_insn 29 28 30 4 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 0 ax [181])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":52 218 {*adddi_1}
     (nil))
(insn 31 30 32 4 (set (reg:SI 1 dx)
        (const_int 43 [0x2b])) "../src/motor.f":52 82 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC1") [flags 0x2]  <var_decl 0x1427fba20 *lC1>)) "../src/motor.f":52 81 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [181])) "../src/motor.f":52 81 {*movdi_internal}
     (nil))
(call_insn 34 33 35 4 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":52 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [182])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (nil))
(insn 36 35 37 4 (set (reg:SI 1 dx)
        (const_int 19 [0x13])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC2") [flags 0x2]  <var_decl 0x1427fbab0 *lC2>)) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [182])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(call_insn 39 38 40 4 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 40 39 41 4 (set (reg:DI 2 cx [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (nil))
(insn 42 41 43 4 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 4 si)
        (reg:DI 2 cx [183])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(call_insn 45 44 46 4 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_integer_write") [flags 0x41]  <function_decl 0x1427d4500 _gfortran_transfer_integer_write>) [0 _gfortran_transfer_integer_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 0 ax [185])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (nil))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [185])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(call_insn 48 47 49 4 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 4 (set (reg:SI 4 si)
        (const_int 0 [0])) "../src/motor.f":54 82 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 5 di)
        (const_int 0 [0])) "../src/motor.f":54 81 {*movdi_internal}
     (nil))
(call_insn 51 50 52 4 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/motor.f":54 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 53)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211
(code_label 53 52 54 5 3 (nil) [1 uses])
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 5 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":57 81 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:SF 21 xmm0 [187])
        (mem:SF (reg/f:DI 0 ax [186]) [2 *parmot_103(D)+0 S4 A32])) "../src/motor.f":57 127 {*movsf_internal}
     (nil))
(insn 57 56 58 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32])
        (reg:SF 21 xmm0 [187])) "../src/motor.f":57 127 {*movsf_internal}
     (nil))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":58 81 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:SF 21 xmm0 [189])
        (mem:SF (plus:DI (reg/f:DI 0 ax [188])
                (const_int 4 [0x4])) [2 *parmot_103(D)+4 S4 A32])) "../src/motor.f":58 127 {*movsf_internal}
     (nil))
(insn 60 59 61 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32])
        (reg:SF 21 xmm0 [189])) "../src/motor.f":58 127 {*movsf_internal}
     (nil))
(insn 61 60 62 5 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":59 81 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:SF 21 xmm0 [191])
        (mem:SF (plus:DI (reg/f:DI 0 ax [190])
                (const_int 8 [0x8])) [2 *parmot_103(D)+8 S4 A32])) "../src/motor.f":59 127 {*movsf_internal}
     (nil))
(insn 63 62 64 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32])
        (reg:SF 21 xmm0 [191])) "../src/motor.f":59 127 {*movsf_internal}
     (nil))
(insn 64 63 65 5 (set (reg:SF 21 xmm0 [orig:89 pi.7_3 ] [89])
        (mem/c:SF (symbol_ref:DI ("pi.3519") [flags 0x1c02]  <var_decl 0x142004f30 pi>) [2 pi+0 S4 A32])) "../src/motor.f":61 127 {*movsf_internal}
     (nil))
(insn 65 64 66 5 (set (reg:SF 21 xmm0 [orig:90 _4 ] [90])
        (mult:SF (reg:SF 21 xmm0 [orig:89 pi.7_3 ] [89])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":61 802 {*fop_sf_comm}
     (nil))
(insn 66 65 67 5 (set (reg:SF 22 xmm1 [193])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":61 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 67 66 68 5 (set (reg:SF 21 xmm0 [192])
        (div:SF (reg:SF 21 xmm0 [orig:90 _4 ] [90])
            (reg:SF 22 xmm1 [193]))) "../src/motor.f":61 805 {*fop_sf_1}
     (nil))
(insn 68 67 69 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32])
        (reg:SF 21 xmm0 [192])) "../src/motor.f":61 127 {*movsf_internal}
     (nil))
(insn 69 68 70 5 (set (reg:SF 21 xmm0 [194])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32])) "../src/motor.f":62 127 {*movsf_internal}
     (nil))
(insn 70 69 71 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32])
        (reg:SF 21 xmm0 [194])) "../src/motor.f":62 127 {*movsf_internal}
     (nil))
(insn 71 70 72 5 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":64 81 {*movdi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:SF 21 xmm0 [orig:91 _5 ] [91])
        (mem:SF (reg/f:DI 0 ax [195]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":64 127 {*movsf_internal}
     (nil))
(insn 73 72 74 5 (set (reg:SF 21 xmm0 [196])
        (div:SF (reg:SF 21 xmm0 [orig:91 _5 ] [91])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":64 805 {*fop_sf_1}
     (nil))
(insn 74 73 75 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32])
        (reg:SF 21 xmm0 [196])) "../src/motor.f":64 127 {*movsf_internal}
     (nil))
(insn 75 74 76 5 (set (reg:SF 21 xmm0 [198])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":65 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 76 75 77 5 (set (reg:SF 21 xmm0 [197])
        (div:SF (reg:SF 21 xmm0 [198])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":65 805 {*fop_sf_1}
     (nil))
(insn 77 76 78 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])
        (reg:SF 21 xmm0 [197])) "../src/motor.f":65 127 {*movsf_internal}
     (nil))
(insn 78 77 79 5 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":67 81 {*movdi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:SF 21 xmm0 [orig:92 _6 ] [92])
        (mem:SF (reg/f:DI 0 ax [199]) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":67 127 {*movsf_internal}
     (nil))
(insn 80 79 82 5 (set (reg:SF 21 xmm0 [orig:93 _7 ] [93])
        (minus:SF (reg:SF 21 xmm0 [orig:92 _6 ] [92])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32]))) "../src/motor.f":67 805 {*fop_sf_1}
     (nil))
(insn 82 80 83 5 (set (reg:SF 21 xmm0 [orig:95 _9 ] [95])
        (div:SF (reg:SF 21 xmm0 [orig:94 _8 ] [94])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32]))) "../src/motor.f":67 805 {*fop_sf_1}
     (nil))
(insn 83 82 84 5 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":67 81 {*movdi_internal}
     (nil))
(insn 84 83 85 5 (set (mem:SF (reg/f:DI 0 ax [200]) [2 *i_119(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:95 _9 ] [95])) "../src/motor.f":67 127 {*movsf_internal}
     (nil))
(insn 85 84 86 5 (set (reg:SF 21 xmm0 [201])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])) "../src/motor.f":68 127 {*movsf_internal}
     (nil))
(insn 86 85 87 5 (set (reg:SF 21 xmm0 [orig:96 _10 ] [96])
        (div:SF (reg:SF 21 xmm0 [201])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32]))) "../src/motor.f":68 805 {*fop_sf_1}
     (nil))
(insn 87 86 88 5 (set (reg:V4SF 22 xmm1 [202])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":68 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 88 87 89 5 (parallel [
            (set (reg:SF 21 xmm0 [orig:97 _11 ] [97])
                (neg:SF (reg:SF 21 xmm0 [orig:96 _10 ] [96])))
            (use (reg:V4SF 22 xmm1 [202]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":68 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:96 _10 ] [96]))
        (nil)))
(insn 89 88 90 5 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [10 i_omega+0 S8 A64])) "../src/motor.f":68 81 {*movdi_internal}
     (nil))
(insn 90 89 91 5 (set (mem:SF (reg/f:DI 0 ax [203]) [2 *i_omega_145(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:97 _11 ] [97])) "../src/motor.f":68 127 {*movsf_internal}
     (nil))
(insn 91 90 92 5 (set (reg:SF 21 xmm0 [204])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":69 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 92 91 93 5 (set (reg:SF 21 xmm0 [orig:98 _12 ] [98])
        (div:SF (reg:SF 21 xmm0 [204])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32]))) "../src/motor.f":69 805 {*fop_sf_1}
     (nil))
(insn 93 92 94 5 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [10 i_volt+0 S8 A64])) "../src/motor.f":69 81 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (set (mem:SF (reg/f:DI 0 ax [205]) [2 *i_volt_147(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:98 _12 ] [98])) "../src/motor.f":69 127 {*movsf_internal}
     (nil))
(insn 95 94 96 5 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":71 81 {*movdi_internal}
     (nil))
(insn 96 95 97 5 (set (reg:SF 21 xmm0 [orig:99 _13 ] [99])
        (mem:SF (reg/f:DI 0 ax [206]) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":71 127 {*movsf_internal}
     (nil))
(insn 97 96 99 5 (set (reg:SF 21 xmm0 [orig:100 _14 ] [100])
        (minus:SF (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32]))) "../src/motor.f":71 805 {*fop_sf_1}
     (nil))
(insn 99 97 100 5 (set (reg:SF 21 xmm0 [orig:102 _16 ] [102])
        (div:SF (reg:SF 21 xmm0 [orig:101 _15 ] [101])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":71 805 {*fop_sf_1}
     (nil))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 q+0 S8 A64])) "../src/motor.f":71 81 {*movdi_internal}
     (nil))
(insn 101 100 102 5 (set (mem:SF (reg/f:DI 0 ax [207]) [2 *q_153(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:102 _16 ] [102])) "../src/motor.f":71 127 {*movsf_internal}
     (nil))
(insn 102 101 103 5 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [10 i_omega+0 S8 A64])) "../src/motor.f":72 81 {*movdi_internal}
     (nil))
(insn 103 102 104 5 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (mem:SF (reg/f:DI 0 ax [208]) [2 *i_omega_145(D)+0 S4 A32])) "../src/motor.f":72 127 {*movsf_internal}
     (nil))
(insn 104 103 105 5 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (div:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":72 805 {*fop_sf_1}
     (nil))
(insn 105 104 106 5 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [10 q_omega+0 S8 A64])) "../src/motor.f":72 81 {*movdi_internal}
     (nil))
(insn 106 105 107 5 (set (mem:SF (reg/f:DI 0 ax [209]) [2 *q_omega_155(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:104 _18 ] [104])) "../src/motor.f":72 127 {*movsf_internal}
     (nil))
(insn 107 106 108 5 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [10 i_volt+0 S8 A64])) "../src/motor.f":73 81 {*movdi_internal}
     (nil))
(insn 108 107 109 5 (set (reg:SF 21 xmm0 [orig:105 _19 ] [105])
        (mem:SF (reg/f:DI 0 ax [210]) [2 *i_volt_147(D)+0 S4 A32])) "../src/motor.f":73 127 {*movsf_internal}
     (nil))
(insn 109 108 110 5 (set (reg:SF 21 xmm0 [orig:106 _20 ] [106])
        (div:SF (reg:SF 21 xmm0 [orig:105 _19 ] [105])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":73 805 {*fop_sf_1}
     (nil))
(insn 110 109 111 5 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [10 q_volt+0 S8 A64])) "../src/motor.f":73 81 {*movdi_internal}
     (nil))
(insn 111 110 411 5 (set (mem:SF (reg/f:DI 0 ax [211]) [2 *q_volt_157(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:106 _20 ] [106])) "../src/motor.f":73 127 {*movsf_internal}
     (nil))
(jump_insn 411 111 412 5 (set (pc)
        (label_ref 405)) "../src/motor.f":128 649 {jump}
     (nil)
 -> 405)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 412 411 114)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 212
(code_label 114 412 115 6 2 (nil) [1 uses])
(note 115 114 116 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 6 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":75 81 {*movdi_internal}
     (nil))
(insn 117 116 118 6 (set (reg:SI 0 ax [orig:107 _21 ] [107])
        (mem:SI (reg/f:DI 0 ax [212]) [1 *imotype_91(D)+0 S4 A32])) "../src/motor.f":75 82 {*movsi_internal}
     (nil))
(insn 118 117 119 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 _21 ] [107])
            (const_int 2 [0x2]))) "../src/motor.f":75 7 {*cmpsi_1}
     (nil))
(jump_insn 119 118 120 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 373)
            (pc))) "../src/motor.f":75 617 {*jcc_1}
     (nil)
 -> 373)
;;  succ:       7 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 213
(note 120 119 121 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 7 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])) "../src/motor.f":77 81 {*movdi_internal}
     (nil))
(insn 122 121 123 7 (set (reg:SI 0 ax [orig:108 _22 ] [108])
        (mem:SI (reg/f:DI 0 ax [213]) [1 *nmpar_102(D)+0 S4 A32])) "../src/motor.f":77 82 {*movsi_internal}
     (nil))
(insn 123 122 124 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:108 _22 ] [108])
            (const_int 2 [0x2]))) "../src/motor.f":77 7 {*cmpsi_1}
     (nil))
(jump_insn 124 123 125 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 157)
            (pc))) "../src/motor.f":77 617 {*jcc_1}
     (nil)
 -> 157)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 214 215 216 217 218 219 220
(note 125 124 126 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 8 (set (reg/f:DI 0 ax [214])
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 127 126 128 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.1.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [214])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 128 127 129 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.1.common.line+0 S4 A64])
        (const_int 79 [0x4f])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 129 128 130 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.1.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 130 129 131 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.1.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 131 130 132 8 (parallel [
            (set (reg:DI 0 ax [215])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (nil))
(insn 132 131 133 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [215])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(call_insn 133 132 134 8 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 134 133 135 8 (parallel [
            (set (reg:DI 0 ax [216])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":78 218 {*adddi_1}
     (nil))
(insn 135 134 136 8 (set (reg:SI 1 dx)
        (const_int 50 [0x32])) "../src/motor.f":78 82 {*movsi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC6") [flags 0x2]  <var_decl 0x1427fbb40 *lC6>)) "../src/motor.f":78 81 {*movdi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [216])) "../src/motor.f":78 81 {*movdi_internal}
     (nil))
(call_insn 138 137 139 8 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":78 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 0 ax [217])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (nil))
(insn 140 139 141 8 (set (reg:SI 1 dx)
        (const_int 19 [0x13])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 141 140 142 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC2") [flags 0x2]  <var_decl 0x1427fbab0 *lC2>)) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 142 141 143 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [217])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(call_insn 143 142 144 8 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 144 143 145 8 (set (reg:DI 2 cx [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (parallel [
            (set (reg:DI 0 ax [219])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (nil))
(insn 146 145 147 8 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 4 si)
        (reg:DI 2 cx [218])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 148 147 149 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [219])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(call_insn 149 148 150 8 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_integer_write") [flags 0x41]  <function_decl 0x1427d4500 _gfortran_transfer_integer_write>) [0 _gfortran_transfer_integer_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 150 149 151 8 (parallel [
            (set (reg:DI 0 ax [220])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (nil))
(insn 151 150 152 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [220])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(call_insn 152 151 153 8 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 152 154 8 (set (reg:SI 4 si)
        (const_int 0 [0])) "../src/motor.f":80 82 {*movsi_internal}
     (nil))
(insn 154 153 155 8 (set (reg:DI 5 di)
        (const_int 0 [0])) "../src/motor.f":80 81 {*movdi_internal}
     (nil))
(call_insn 155 154 156 8 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/motor.f":80 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 156 155 157)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237
(code_label 157 156 158 9 6 (nil) [1 uses])
(note 158 157 159 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 9 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":83 81 {*movdi_internal}
     (nil))
(insn 160 159 161 9 (set (reg:SF 21 xmm0 [222])
        (mem:SF (reg/f:DI 0 ax [221]) [2 *parmot_103(D)+0 S4 A32])) "../src/motor.f":83 127 {*movsf_internal}
     (nil))
(insn 161 160 162 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32])
        (reg:SF 21 xmm0 [222])) "../src/motor.f":83 127 {*movsf_internal}
     (nil))
(insn 162 161 163 9 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":84 81 {*movdi_internal}
     (nil))
(insn 163 162 164 9 (set (reg:SF 21 xmm0 [224])
        (mem:SF (plus:DI (reg/f:DI 0 ax [223])
                (const_int 4 [0x4])) [2 *parmot_103(D)+4 S4 A32])) "../src/motor.f":84 127 {*movsf_internal}
     (nil))
(insn 164 163 165 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 zloadi0+0 S4 A32])
        (reg:SF 21 xmm0 [224])) "../src/motor.f":84 127 {*movsf_internal}
     (nil))
(insn 165 164 166 9 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":85 81 {*movdi_internal}
     (nil))
(insn 166 165 167 9 (set (reg:SF 21 xmm0 [226])
        (mem:SF (plus:DI (reg/f:DI 0 ax [225])
                (const_int 8 [0x8])) [2 *parmot_103(D)+8 S4 A32])) "../src/motor.f":85 127 {*movsf_internal}
     (nil))
(insn 167 166 168 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32])
        (reg:SF 21 xmm0 [226])) "../src/motor.f":85 127 {*movsf_internal}
     (nil))
(insn 168 167 169 9 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":86 81 {*movdi_internal}
     (nil))
(insn 169 168 170 9 (set (reg:SF 21 xmm0 [228])
        (mem:SF (plus:DI (reg/f:DI 0 ax [227])
                (const_int 12 [0xc])) [2 *parmot_103(D)+12 S4 A32])) "../src/motor.f":86 127 {*movsf_internal}
     (nil))
(insn 170 169 171 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32])
        (reg:SF 21 xmm0 [228])) "../src/motor.f":86 127 {*movsf_internal}
     (nil))
(insn 171 170 172 9 (set (reg/f:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":87 81 {*movdi_internal}
     (nil))
(insn 172 171 173 9 (set (reg:SF 21 xmm0 [230])
        (mem:SF (plus:DI (reg/f:DI 0 ax [229])
                (const_int 16 [0x10])) [2 *parmot_103(D)+16 S4 A32])) "../src/motor.f":87 127 {*movsf_internal}
     (nil))
(insn 173 172 174 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 tau+0 S4 A32])
        (reg:SF 21 xmm0 [230])) "../src/motor.f":87 127 {*movsf_internal}
     (nil))
(insn 174 173 175 9 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":88 81 {*movdi_internal}
     (nil))
(insn 175 174 176 9 (set (reg:SF 21 xmm0 [232])
        (mem:SF (plus:DI (reg/f:DI 0 ax [231])
                (const_int 20 [0x14])) [2 *parmot_103(D)+20 S4 A32])) "../src/motor.f":88 127 {*movsf_internal}
     (nil))
(insn 176 175 177 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 zloadi1+0 S4 A32])
        (reg:SF 21 xmm0 [232])) "../src/motor.f":88 127 {*movsf_internal}
     (nil))
(insn 177 176 178 9 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":89 81 {*movdi_internal}
     (nil))
(insn 178 177 179 9 (set (reg:SF 21 xmm0 [234])
        (mem:SF (plus:DI (reg/f:DI 0 ax [233])
                (const_int 24 [0x18])) [2 *parmot_103(D)+24 S4 A32])) "../src/motor.f":89 127 {*movsf_internal}
     (nil))
(insn 179 178 180 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 zloadi2+0 S4 A32])
        (reg:SF 21 xmm0 [234])) "../src/motor.f":89 127 {*movsf_internal}
     (nil))
(insn 180 179 181 9 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":90 81 {*movdi_internal}
     (nil))
(insn 181 180 182 9 (set (reg:SF 21 xmm0 [236])
        (mem:SF (plus:DI (reg/f:DI 0 ax [235])
                (const_int 28 [0x1c])) [2 *parmot_103(D)+28 S4 A32])) "../src/motor.f":90 127 {*movsf_internal}
     (nil))
(insn 182 181 183 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 rmotor2+0 S4 A32])
        (reg:SF 21 xmm0 [236])) "../src/motor.f":90 127 {*movsf_internal}
     (nil))
(insn 183 182 184 9 (set (reg:SF 21 xmm0 [237])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [2  S4 A32])) "../src/motor.f":93 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 184 183 185 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [237])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32]))) "../src/motor.f":93 51 {*cmpiusf}
     (nil))
(jump_insn 185 184 407 9 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 195)
            (pc))) "../src/motor.f":93 617 {*jcc_1}
     (nil)
 -> 195)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238
(note 407 185 186 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 186 407 187 10 (set (reg:SF 21 xmm0 [238])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [2  S4 A32])) "../src/motor.f":93 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 187 186 188 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [238])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32]))) "../src/motor.f":93 51 {*cmpiusf}
     (nil))
(jump_insn 188 187 192 10 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 195)
            (pc))) "../src/motor.f":93 617 {*jcc_1}
     (nil)
 -> 195)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 239
(note 192 188 193 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 11 (set (reg:SF 21 xmm0 [239])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32])) "../src/motor.f":93 127 {*movsf_internal}
     (nil))
(insn 194 193 195 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32])
        (reg:SF 21 xmm0 [239])) "../src/motor.f":93 127 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              9
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 240 241 242 243 244 245 246 247 248 249 250 251 252
(code_label 195 194 196 12 7 (nil) [2 uses])
(note 196 195 197 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 197 196 198 12 (set (reg:SF 21 xmm0 [orig:109 pi.8_23 ] [109])
        (mem/c:SF (symbol_ref:DI ("pi.3519") [flags 0x1c02]  <var_decl 0x142004f30 pi>) [2 pi+0 S4 A32])) "../src/motor.f":95 127 {*movsf_internal}
     (nil))
(insn 198 197 199 12 (set (reg:SF 21 xmm0 [orig:110 _24 ] [110])
        (mult:SF (reg:SF 21 xmm0 [orig:109 pi.8_23 ] [109])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":95 802 {*fop_sf_comm}
     (nil))
(insn 199 198 200 12 (set (reg:SF 22 xmm1 [241])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":95 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 200 199 201 12 (set (reg:SF 21 xmm0 [240])
        (div:SF (reg:SF 21 xmm0 [orig:110 _24 ] [110])
            (reg:SF 22 xmm1 [241]))) "../src/motor.f":95 805 {*fop_sf_1}
     (nil))
(insn 201 200 202 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32])
        (reg:SF 21 xmm0 [240])) "../src/motor.f":95 127 {*movsf_internal}
     (nil))
(insn 202 201 203 12 (set (reg:SF 21 xmm0 [orig:111 pi.9_25 ] [111])
        (mem/c:SF (symbol_ref:DI ("pi.3519") [flags 0x1c02]  <var_decl 0x142004f30 pi>) [2 pi+0 S4 A32])) "../src/motor.f":96 127 {*movsf_internal}
     (nil))
(insn 203 202 204 12 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mult:SF (reg:SF 21 xmm0 [orig:111 pi.9_25 ] [111])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32]))) "../src/motor.f":96 802 {*fop_sf_comm}
     (nil))
(insn 204 203 205 12 (set (reg:SF 22 xmm1 [243])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":96 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 205 204 206 12 (set (reg:SF 21 xmm0 [242])
        (div:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [243]))) "../src/motor.f":96 805 {*fop_sf_1}
     (nil))
(insn 206 205 207 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32])
        (reg:SF 21 xmm0 [242])) "../src/motor.f":96 127 {*movsf_internal}
     (nil))
(insn 207 206 208 12 (set (reg/f:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":98 81 {*movdi_internal}
     (nil))
(insn 208 207 209 12 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (mem:SF (reg/f:DI 0 ax [244]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":98 127 {*movsf_internal}
     (nil))
(insn 209 208 210 12 (set (reg:SF 21 xmm0 [orig:114 _28 ] [114])
        (mult:SF (reg:SF 21 xmm0 [orig:113 _27 ] [113])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 tau+0 S4 A32]))) "../src/motor.f":98 802 {*fop_sf_comm}
     (nil))
(insn 210 209 211 12 (set (reg:SF 22 xmm1 [245])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":98 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 211 210 212 12 (set (reg:SF 21 xmm0 [orig:115 _29 ] [115])
        (plus:SF (reg:SF 21 xmm0 [orig:114 _28 ] [114])
            (reg:SF 22 xmm1 [245]))) "../src/motor.f":98 802 {*fop_sf_comm}
     (nil))
(insn 212 211 213 12 (set (reg:SF 22 xmm1 [orig:116 _30 ] [116])
        (reg:SF 21 xmm0 [orig:115 _29 ] [115])) "../src/motor.f":98 127 {*movsf_internal}
     (nil))
(insn 213 212 214 12 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":98 81 {*movdi_internal}
     (nil))
(insn 214 213 215 12 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (mem:SF (reg/f:DI 0 ax [246]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":98 127 {*movsf_internal}
     (nil))
(insn 215 214 216 12 (set (reg:SF 21 xmm0 [orig:118 _32 ] [118])
        (mult:SF (reg:SF 21 xmm0 [orig:117 _31 ] [117])
            (reg:SF 22 xmm1 [orig:116 _30 ] [116]))) "../src/motor.f":98 802 {*fop_sf_comm}
     (nil))
(insn 216 215 217 12 (set (reg:SF 21 xmm0 [247])
        (div:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":98 805 {*fop_sf_1}
     (nil))
(insn 217 216 218 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32])
        (reg:SF 21 xmm0 [247])) "../src/motor.f":98 127 {*movsf_internal}
     (nil))
(insn 218 217 219 12 (set (reg/f:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":99 81 {*movdi_internal}
     (nil))
(insn 219 218 220 12 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (mem:SF (reg/f:DI 0 ax [248]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":99 127 {*movsf_internal}
     (nil))
(insn 220 219 221 12 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (mult:SF (reg:SF 21 xmm0 [orig:119 _33 ] [119])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 tau+0 S4 A32]))) "../src/motor.f":99 802 {*fop_sf_comm}
     (nil))
(insn 221 220 222 12 (set (reg:SF 21 xmm0 [orig:121 _35 ] [121])
        (plus:SF (reg:SF 21 xmm0 [orig:120 _34 ] [120])
            (reg:SF 21 xmm0 [orig:120 _34 ] [120]))) "../src/motor.f":99 802 {*fop_sf_comm}
     (nil))
(insn 222 221 223 12 (set (reg:SF 22 xmm1 [249])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":99 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 223 222 225 12 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (plus:SF (reg:SF 21 xmm0 [orig:121 _35 ] [121])
            (reg:SF 22 xmm1 [249]))) "../src/motor.f":99 802 {*fop_sf_comm}
     (nil))
(insn 225 223 226 12 (set (reg:SF 21 xmm0 [250])
        (div:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":99 805 {*fop_sf_1}
     (nil))
(insn 226 225 227 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])
        (reg:SF 21 xmm0 [250])) "../src/motor.f":99 127 {*movsf_internal}
     (nil))
(insn 227 226 228 12 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":101 81 {*movdi_internal}
     (nil))
(insn 228 227 229 12 (set (reg:SF 21 xmm0 [orig:124 _38 ] [124])
        (mem:SF (reg/f:DI 0 ax [251]) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":101 127 {*movsf_internal}
     (nil))
(insn 229 228 231 12 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (minus:SF (reg:SF 21 xmm0 [orig:124 _38 ] [124])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32]))) "../src/motor.f":101 805 {*fop_sf_1}
     (nil))
(insn 231 229 232 12 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (div:SF (reg:SF 21 xmm0 [orig:126 _40 ] [126])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32]))) "../src/motor.f":101 805 {*fop_sf_1}
     (nil))
(insn 232 231 233 12 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":101 81 {*movdi_internal}
     (nil))
(insn 233 232 234 12 (set (mem:SF (reg/f:DI 0 ax [252]) [2 *i_119(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:127 _41 ] [127])) "../src/motor.f":101 127 {*movsf_internal}
     (nil))
(insn 234 233 296 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
        (const_int 1 [0x1])) "../src/motor.f":102 82 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              17 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169
(code_label 296 234 235 13 12 (nil) [1 uses])
(note 235 296 236 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
            (const_int 10 [0xa]))) "../src/motor.f":102 7 {*cmpsi_1}
     (nil))
(insn 237 236 238 13 (set (reg:QI 0 ax [orig:169 _123 ] [169])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/motor.f":102 613 {*setcc_qi}
     (nil))
(insn 238 237 239 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:169 _123 ] [169])
            (const_int 0 [0]))) "../src/motor.f":102 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 239 238 240 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) "../src/motor.f":102 617 {*jcc_1}
     (nil)
 -> 418)
;;  succ:       22
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 168 170 171 172 173 174 253 254 255 256 257 258 259 260 261 262 263 264 265 266
(note 240 239 241 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 14 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":103 81 {*movdi_internal}
     (nil))
(insn 242 241 243 14 (set (reg:SF 21 xmm0 [orig:170 _124 ] [170])
        (mem:SF (reg/f:DI 0 ax [253]) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":103 127 {*movsf_internal}
     (nil))
(insn 243 242 244 14 (set (reg:SF 21 xmm0 [orig:171 _125 ] [171])
        (mult:SF (reg:SF 21 xmm0 [orig:170 _124 ] [170])
            (reg:SF 21 xmm0 [orig:170 _124 ] [170]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (nil))
(insn 244 243 245 14 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":103 81 {*movdi_internal}
     (nil))
(insn 245 244 246 14 (set (reg:SF 22 xmm1 [orig:128 _42 ] [128])
        (mem:SF (reg/f:DI 0 ax [254]) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":103 127 {*movsf_internal}
     (nil))
(insn 246 245 247 14 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (mult:SF (reg:SF 21 xmm0 [orig:171 _125 ] [171])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 rmotor2+0 S4 A32]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (nil))
(insn 247 246 249 14 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (plus:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (nil))
(insn 249 247 250 14 (set (reg:SF 21 xmm0 [orig:132 _46 ] [132])
        (mult:SF (reg:SF 21 xmm0 [orig:131 _45 ] [131])
            (reg:SF 22 xmm1 [orig:128 _42 ] [128]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (nil))
(insn 250 249 251 14 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (plus:SF (reg:SF 21 xmm0 [orig:132 _46 ] [132])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (nil))
(insn 251 250 252 14 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":103 81 {*movdi_internal}
     (nil))
(insn 252 251 253 14 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (mem:SF (reg/f:DI 0 ax [255]) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":103 127 {*movsf_internal}
     (nil))
(insn 253 252 254 14 (set (reg:SF 21 xmm0 [256])
        (minus:SF (reg:SF 21 xmm0 [orig:133 _47 ] [133])
            (reg:SF 22 xmm1 [orig:134 _48 ] [134]))) "../src/motor.f":103 805 {*fop_sf_1}
     (nil))
(insn 254 253 255 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 res+0 S4 A32])
        (reg:SF 21 xmm0 [256])) "../src/motor.f":103 127 {*movsf_internal}
     (nil))
(insn 255 254 256 14 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":104 81 {*movdi_internal}
     (nil))
(insn 256 255 426 14 (set (reg:SF 21 xmm0 [orig:172 _127 ] [172])
        (mem:SF (reg/f:DI 0 ax [257]) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 426 256 257 14 (set (reg:SF 22 xmm1 [orig:172 _127 ] [172])
        (reg:SF 21 xmm0 [orig:172 _127 ] [172])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 257 426 258 14 (set (reg:SF 22 xmm1 [orig:172 _127 ] [172])
        (mult:SF (reg:SF 22 xmm1 [orig:172 _127 ] [172])
            (reg:SF 21 xmm0 [orig:172 _127 ] [172]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (nil))
(insn 258 257 259 14 (set (reg:SF 23 xmm2 [258])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 rmotor2+0 S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 259 258 260 14 (set (reg:SF 21 xmm0 [259])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [2  S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 260 259 261 14 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (mult:SF (reg:SF 21 xmm0 [259])
            (reg:SF 23 xmm2 [258]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (nil))
(insn 261 260 262 14 (set (reg:SF 21 xmm0 [orig:136 _50 ] [136])
        (mult:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (reg:SF 22 xmm1 [orig:173 _128 ] [173]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (nil))
(insn 262 261 263 14 (set (reg:SF 22 xmm1 [261])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 263 262 264 14 (set (reg:SF 21 xmm0 [260])
        (plus:SF (reg:SF 21 xmm0 [orig:136 _50 ] [136])
            (reg:SF 22 xmm1 [261]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (nil))
(insn 264 263 265 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32])
        (reg:SF 21 xmm0 [260])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 265 264 266 14 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":105 81 {*movdi_internal}
     (nil))
(insn 266 265 267 14 (set (reg:SF 22 xmm1 [orig:137 _51 ] [137])
        (mem:SF (reg/f:DI 0 ax [262]) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":105 127 {*movsf_internal}
     (nil))
(insn 267 266 268 14 (set (reg:SF 21 xmm0 [263])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 res+0 S4 A32])) "../src/motor.f":105 127 {*movsf_internal}
     (nil))
(insn 268 267 269 14 (set (reg:SF 21 xmm0 [orig:138 _52 ] [138])
        (div:SF (reg:SF 21 xmm0 [263])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32]))) "../src/motor.f":105 805 {*fop_sf_1}
     (nil))
(insn 269 268 429 14 (set (reg:SF 22 xmm1 [orig:137 _51 ] [137])
        (minus:SF (reg:SF 22 xmm1 [orig:137 _51 ] [137])
            (reg:SF 21 xmm0 [orig:138 _52 ] [138]))) "../src/motor.f":105 805 {*fop_sf_1}
     (nil))
(insn 429 269 270 14 (set (reg:SF 21 xmm0 [orig:139 _53 ] [139])
        (reg:SF 22 xmm1 [orig:137 _51 ] [137])) "../src/motor.f":105 127 {*movsf_internal}
     (nil))
(insn 270 429 271 14 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":105 81 {*movdi_internal}
     (nil))
(insn 271 270 272 14 (set (mem:SF (reg/f:DI 0 ax [264]) [2 *i_119(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:139 _53 ] [139])) "../src/motor.f":105 127 {*movsf_internal}
     (nil))
(insn 272 271 273 14 (set (reg:SF 21 xmm0 [orig:168 M.2_86 ] [168])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 273 272 274 14 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":106 81 {*movdi_internal}
     (nil))
(insn 274 273 275 14 (set (reg:SF 23 xmm2 [orig:140 _54 ] [140])
        (mem:SF (reg/f:DI 0 ax [265]) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (nil))
(insn 275 274 276 14 (set (reg:V4SF 22 xmm1 [266])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":106 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 276 275 277 14 (parallel [
            (set (reg:SF 22 xmm1 [orig:174 _132 ] [174])
                (abs:SF (reg:SF 23 xmm2 [orig:140 _54 ] [140])))
            (use (reg:V4SF 22 xmm1 [266]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":106 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 23 xmm2 [orig:140 _54 ] [140]))
        (nil)))
(insn 277 276 278 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [orig:174 _132 ] [174])
            (reg:SF 21 xmm0 [orig:168 M.2_86 ] [168]))) "../src/motor.f":106 51 {*cmpiusf}
     (nil))
(insn 278 277 279 14 (set (reg:QI 1 dx [orig:141 _55 ] [141])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":106 613 {*setcc_qi}
     (nil))
(insn 279 278 280 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:168 M.2_86 ] [168])
            (reg:SF 21 xmm0 [orig:168 M.2_86 ] [168]))) "../src/motor.f":106 51 {*cmpiusf}
     (nil))
(insn 280 279 281 14 (set (reg:QI 0 ax [orig:142 _56 ] [142])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":106 613 {*setcc_qi}
     (nil))
(insn 281 280 282 14 (parallel [
            (set (reg:QI 0 ax [orig:143 _57 ] [143])
                (ior:QI (reg:QI 0 ax [orig:142 _56 ] [142])
                    (reg:QI 1 dx [orig:141 _55 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":106 423 {*iorqi_1}
     (nil))
(insn 282 281 283 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:143 _57 ] [143])
            (const_int 0 [0]))) "../src/motor.f":106 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 283 282 284 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) "../src/motor.f":106 617 {*jcc_1}
     (nil)
 -> 285)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168 174

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174
;; lr  def 	 168
(note 284 283 9 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 9 284 285 15 (set (reg:SF 21 xmm0 [orig:168 M.2_86 ] [168])
        (reg:SF 22 xmm1 [orig:174 _132 ] [174])) "../src/motor.f":106 127 {*movsf_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  def 	 17 [flags] 144 145 146 267 268
(code_label 285 9 286 16 10 (nil) [1 uses])
(note 286 285 287 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 16 (set (reg:SF 23 xmm2 [267])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 res+0 S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (nil))
(insn 288 287 289 16 (set (reg:V4SF 22 xmm1 [268])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":106 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 289 288 290 16 (parallel [
            (set (reg:SF 22 xmm1 [orig:144 _58 ] [144])
                (abs:SF (reg:SF 23 xmm2 [267])))
            (use (reg:V4SF 22 xmm1 [268]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":106 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 23 xmm2 [267]))
        (nil)))
(insn 290 289 291 16 (set (reg:SF 23 xmm2 [orig:145 eps.10_59 ] [145])
        (mem/c:SF (symbol_ref:DI ("eps.3513") [flags 0x1c02]  <var_decl 0x142004bd0 eps>) [2 eps+0 S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (nil))
(insn 291 290 292 16 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (mult:SF (reg:SF 21 xmm0 [orig:168 M.2_86 ] [168])
            (reg:SF 23 xmm2 [orig:145 eps.10_59 ] [145]))) "../src/motor.f":106 802 {*fop_sf_comm}
     (nil))
(insn 292 291 293 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:146 _60 ] [146])
            (reg:SF 22 xmm1 [orig:144 _58 ] [144]))) "../src/motor.f":106 51 {*cmpiusf}
     (nil))
(jump_insn 293 292 294 16 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 423)
            (pc))) "../src/motor.f":106 617 {*jcc_1}
     (nil)
 -> 423)
;;  succ:       23
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 22, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 294 293 295 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 413 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":102 217 {*addsi_1}
     (nil))
(jump_insn 413 295 414 17 (set (pc)
        (label_ref 296)) "../src/motor.f":102 649 {jump}
     (nil)
 -> 296)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 414 413 418)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 18, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 418 414 417 22 15 (nil) [1 uses])
(note 417 418 419 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 419 417 299 22 (const_int 0 [0]) "../src/motor.f":106 682 {nop}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 23, flags: (RTL, MODIFIED)
;;  pred:       22 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 269 270 271 272
(code_label 299 419 300 18 9 (nil) [0 uses])
(note 300 299 301 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 18 (set (reg/f:DI 0 ax [269])
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(insn 302 301 303 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.3.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [269])) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(insn 303 302 304 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.3.common.line+0 S4 A64])
        (const_int 108 [0x6c])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 304 303 305 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.3.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 305 304 306 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.3.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 306 305 307 18 (parallel [
            (set (reg:DI 0 ax [270])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":108 218 {*adddi_1}
     (nil))
(insn 307 306 308 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [270])) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(call_insn 308 307 309 18 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":108 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 309 308 310 18 (parallel [
            (set (reg:DI 0 ax [271])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":108 218 {*adddi_1}
     (nil))
(insn 310 309 311 18 (set (reg:SI 1 dx)
        (const_int 33 [0x21])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 311 310 312 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC10") [flags 0x2]  <var_decl 0x1427fbbd0 *lC10>)) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(insn 312 311 313 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [271])) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(call_insn 313 312 314 18 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":108 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 314 313 315 18 (parallel [
            (set (reg:DI 0 ax [272])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":108 218 {*adddi_1}
     (nil))
(insn 315 314 316 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [272])) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(call_insn 316 315 420 18 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":108 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 420 316 421 18 (set (pc)
        (label_ref 317)) 649 {jump}
     (nil)
 -> 317)
;;  succ:       19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 421 420 423)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 423 421 422 23 16 (nil) [1 uses])
(note 422 423 424 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 424 422 317 23 (const_int 0 [0]) "../src/motor.f":108 682 {nop}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 20, flags: (RTL, MODIFIED)
;;  pred:       23 [100.0%]  (FALLTHRU)
;;              18
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 175 176 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292
(code_label 317 424 318 19 11 (nil) [1 uses])
(note 318 317 319 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 319 318 320 19 (set (reg:SF 21 xmm0 [273])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])) "../src/motor.f":110 127 {*movsf_internal}
     (nil))
(insn 320 319 321 19 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 res_omega+0 S4 A32])
        (reg:SF 21 xmm0 [273])) "../src/motor.f":110 127 {*movsf_internal}
     (nil))
(insn 321 320 322 19 (set (reg:SF 21 xmm0 [274])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [2  S4 A32])) "../src/motor.f":111 127 {*movsf_internal}
     (nil))
(insn 322 321 323 19 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [2 res_volt+0 S4 A32])
        (reg:SF 21 xmm0 [274])) "../src/motor.f":111 127 {*movsf_internal}
     (nil))
(insn 323 322 324 19 (set (reg:SF 21 xmm0 [275])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 res_omega+0 S4 A32])) "../src/motor.f":112 127 {*movsf_internal}
     (nil))
(insn 324 323 325 19 (set (reg:SF 21 xmm0 [orig:147 _61 ] [147])
        (div:SF (reg:SF 21 xmm0 [275])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32]))) "../src/motor.f":112 805 {*fop_sf_1}
     (nil))
(insn 325 324 326 19 (set (reg:V4SF 22 xmm1 [276])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":112 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 326 325 327 19 (parallel [
            (set (reg:SF 21 xmm0 [orig:148 _62 ] [148])
                (neg:SF (reg:SF 21 xmm0 [orig:147 _61 ] [147])))
            (use (reg:V4SF 22 xmm1 [276]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":112 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:147 _61 ] [147]))
        (nil)))
(insn 327 326 328 19 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [10 i_omega+0 S8 A64])) "../src/motor.f":112 81 {*movdi_internal}
     (nil))
(insn 328 327 329 19 (set (mem:SF (reg/f:DI 0 ax [277]) [2 *i_omega_145(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:148 _62 ] [148])) "../src/motor.f":112 127 {*movsf_internal}
     (nil))
(insn 329 328 330 19 (set (reg:SF 21 xmm0 [278])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [2 res_volt+0 S4 A32])) "../src/motor.f":113 127 {*movsf_internal}
     (nil))
(insn 330 329 331 19 (set (reg:SF 21 xmm0 [orig:149 _63 ] [149])
        (div:SF (reg:SF 21 xmm0 [278])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32]))) "../src/motor.f":113 805 {*fop_sf_1}
     (nil))
(insn 331 330 332 19 (set (reg:V4SF 22 xmm1 [279])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":113 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 332 331 333 19 (parallel [
            (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
                (neg:SF (reg:SF 21 xmm0 [orig:149 _63 ] [149])))
            (use (reg:V4SF 22 xmm1 [279]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":113 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:149 _63 ] [149]))
        (nil)))
(insn 333 332 334 19 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [10 i_volt+0 S8 A64])) "../src/motor.f":113 81 {*movdi_internal}
     (nil))
(insn 334 333 335 19 (set (mem:SF (reg/f:DI 0 ax [280]) [2 *i_volt_147(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:150 _64 ] [150])) "../src/motor.f":113 127 {*movsf_internal}
     (nil))
(insn 335 334 336 19 (set (reg/f:DI 0 ax [281])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":115 81 {*movdi_internal}
     (nil))
(insn 336 335 337 19 (set (reg:SF 21 xmm0 [orig:175 _149 ] [175])
        (mem:SF (reg/f:DI 0 ax [281]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":115 127 {*movsf_internal}
     (nil))
(insn 337 336 338 19 (set (reg:SF 21 xmm0 [orig:176 _150 ] [176])
        (mult:SF (reg:SF 21 xmm0 [orig:175 _149 ] [175])
            (reg:SF 21 xmm0 [orig:175 _149 ] [175]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (nil))
(insn 338 337 339 19 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":115 81 {*movdi_internal}
     (nil))
(insn 339 338 340 19 (set (reg:SF 22 xmm1 [orig:151 _65 ] [151])
        (mem:SF (reg/f:DI 0 ax [282]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":115 127 {*movsf_internal}
     (nil))
(insn 340 339 341 19 (set (reg:SF 22 xmm1 [orig:152 _66 ] [152])
        (mult:SF (reg:SF 22 xmm1 [orig:151 _65 ] [151])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 zloadi1+0 S4 A32]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (nil))
(insn 341 340 342 19 (set (reg:SF 22 xmm1 [orig:153 _67 ] [153])
        (plus:SF (reg:SF 22 xmm1 [orig:152 _66 ] [152])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [2 zloadi0+0 S4 A32]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (nil))
(insn 342 341 343 19 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (mult:SF (reg:SF 21 xmm0 [orig:176 _150 ] [176])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 zloadi2+0 S4 A32]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (nil))
(insn 343 342 344 19 (set (reg:SF 21 xmm0 [283])
        (plus:SF (reg:SF 21 xmm0 [orig:154 _68 ] [154])
            (reg:SF 22 xmm1 [orig:153 _67 ] [153]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (nil))
(insn 344 343 345 19 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32])
        (reg:SF 21 xmm0 [283])) "../src/motor.f":115 127 {*movsf_internal}
     (nil))
(insn 345 344 346 19 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":116 81 {*movdi_internal}
     (nil))
(insn 346 345 347 19 (set (reg:SF 21 xmm0 [orig:155 _69 ] [155])
        (mem:SF (reg/f:DI 0 ax [284]) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":116 127 {*movsf_internal}
     (nil))
(insn 347 346 348 19 (set (reg:SF 21 xmm0 [orig:156 _70 ] [156])
        (mult:SF (reg:SF 21 xmm0 [orig:155 _69 ] [155])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 zloadi2+0 S4 A32]))) "../src/motor.f":116 802 {*fop_sf_comm}
     (nil))
(insn 348 347 349 19 (set (reg:SF 21 xmm0 [orig:157 _71 ] [157])
        (plus:SF (reg:SF 21 xmm0 [orig:156 _70 ] [156])
            (reg:SF 21 xmm0 [orig:156 _70 ] [156]))) "../src/motor.f":116 802 {*fop_sf_comm}
     (nil))
(insn 349 348 350 19 (set (reg:SF 22 xmm1 [286])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 zloadi1+0 S4 A32])) "../src/motor.f":116 127 {*movsf_internal}
     (nil))
(insn 350 349 351 19 (set (reg:SF 21 xmm0 [285])
        (plus:SF (reg:SF 21 xmm0 [orig:157 _71 ] [157])
            (reg:SF 22 xmm1 [286]))) "../src/motor.f":116 802 {*fop_sf_comm}
     (nil))
(insn 351 350 352 19 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [2 zloadi_omega+0 S4 A32])
        (reg:SF 21 xmm0 [285])) "../src/motor.f":116 127 {*movsf_internal}
     (nil))
(insn 352 351 353 19 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 i+0 S8 A64])) "../src/motor.f":118 81 {*movdi_internal}
     (nil))
(insn 353 352 354 19 (set (reg:SF 21 xmm0 [orig:158 _72 ] [158])
        (mem:SF (reg/f:DI 0 ax [287]) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":118 127 {*movsf_internal}
     (nil))
(insn 354 353 356 19 (set (reg:SF 21 xmm0 [orig:159 _73 ] [159])
        (minus:SF (reg:SF 21 xmm0 [orig:158 _72 ] [158])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32]))) "../src/motor.f":118 805 {*fop_sf_1}
     (nil))
(insn 356 354 357 19 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (div:SF (reg:SF 21 xmm0 [orig:160 _74 ] [160])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":118 805 {*fop_sf_1}
     (nil))
(insn 357 356 358 19 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 q+0 S8 A64])) "../src/motor.f":118 81 {*movdi_internal}
     (nil))
(insn 358 357 359 19 (set (mem:SF (reg/f:DI 0 ax [288]) [2 *q_153(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:161 _75 ] [161])) "../src/motor.f":118 127 {*movsf_internal}
     (nil))
(insn 359 358 360 19 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [10 i_omega+0 S8 A64])) "../src/motor.f":119 81 {*movdi_internal}
     (nil))
(insn 360 359 361 19 (set (reg:SF 21 xmm0 [orig:162 _76 ] [162])
        (mem:SF (reg/f:DI 0 ax [289]) [2 *i_omega_145(D)+0 S4 A32])) "../src/motor.f":119 127 {*movsf_internal}
     (nil))
(insn 361 360 363 19 (set (reg:SF 21 xmm0 [orig:163 _77 ] [163])
        (minus:SF (reg:SF 21 xmm0 [orig:162 _76 ] [162])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [2 zloadi_omega+0 S4 A32]))) "../src/motor.f":119 805 {*fop_sf_1}
     (nil))
(insn 363 361 364 19 (set (reg:SF 21 xmm0 [orig:165 _79 ] [165])
        (div:SF (reg:SF 21 xmm0 [orig:164 _78 ] [164])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":119 805 {*fop_sf_1}
     (nil))
(insn 364 363 365 19 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [10 q_omega+0 S8 A64])) "../src/motor.f":119 81 {*movdi_internal}
     (nil))
(insn 365 364 366 19 (set (mem:SF (reg/f:DI 0 ax [290]) [2 *q_omega_155(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:165 _79 ] [165])) "../src/motor.f":119 127 {*movsf_internal}
     (nil))
(insn 366 365 367 19 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [10 i_volt+0 S8 A64])) "../src/motor.f":120 81 {*movdi_internal}
     (nil))
(insn 367 366 368 19 (set (reg:SF 21 xmm0 [orig:166 _80 ] [166])
        (mem:SF (reg/f:DI 0 ax [291]) [2 *i_volt_147(D)+0 S4 A32])) "../src/motor.f":120 127 {*movsf_internal}
     (nil))
(insn 368 367 369 19 (set (reg:SF 21 xmm0 [orig:167 _81 ] [167])
        (div:SF (reg:SF 21 xmm0 [orig:166 _80 ] [166])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":120 805 {*fop_sf_1}
     (nil))
(insn 369 368 370 19 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [10 q_volt+0 S8 A64])) "../src/motor.f":120 81 {*movdi_internal}
     (nil))
(insn 370 369 415 19 (set (mem:SF (reg/f:DI 0 ax [292]) [2 *q_volt_157(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:167 _81 ] [167])) "../src/motor.f":120 127 {*movsf_internal}
     (nil))
(jump_insn 415 370 416 19 (set (pc)
        (label_ref 405)) "../src/motor.f":128 649 {jump}
     (nil)
 -> 405)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 416 415 373)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 293 294 295 296 297 298
(code_label 373 416 374 20 5 (nil) [1 uses])
(note 374 373 375 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 20 (set (reg/f:DI 0 ax [293])
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 376 375 377 20 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.4.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [293])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 377 376 378 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.4.common.line+0 S4 A64])
        (const_int 124 [0x7c])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 378 377 379 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.4.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 379 378 380 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.4.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 380 379 381 20 (parallel [
            (set (reg:DI 0 ax [294])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (nil))
(insn 381 380 382 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [294])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(call_insn 382 381 383 20 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 383 382 384 20 (parallel [
            (set (reg:DI 0 ax [295])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (nil))
(insn 384 383 385 20 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 385 384 386 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC12") [flags 0x2]  <var_decl 0x1427fbc60 *lC12>)) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 386 385 387 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [295])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(call_insn 387 386 388 20 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 388 387 389 20 (set (reg:DI 2 cx [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 389 388 390 20 (parallel [
            (set (reg:DI 0 ax [297])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (nil))
(insn 390 389 391 20 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 391 390 392 20 (set (reg:DI 4 si)
        (reg:DI 2 cx [296])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 392 391 393 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [297])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(call_insn 393 392 394 20 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_integer_write") [flags 0x41]  <function_decl 0x1427d4500 _gfortran_transfer_integer_write>) [0 _gfortran_transfer_integer_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 394 393 395 20 (parallel [
            (set (reg:DI 0 ax [298])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (nil))
(insn 395 394 396 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [298])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(call_insn 396 395 397 20 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 397 396 398 20 (set (reg:SI 4 si)
        (const_int 0 [0])) "../src/motor.f":125 82 {*movsi_internal}
     (nil))
(insn 398 397 399 20 (set (reg:DI 5 di)
        (const_int 0 [0])) "../src/motor.f":125 81 {*movdi_internal}
     (nil))
(call_insn 399 398 400 20 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/motor.f":125 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 400 399 405)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 405 400 406 21 1 (nil) [2 uses])
(note 406 405 425 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 425 406 0 NOTE_INSN_DELETED)

;; Function voltm (voltm_, funcdef_no=1, decl_uid=3557, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=624, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=608, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 18:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 19:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 21:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 24:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 25:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 26:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 27:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 30:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 32:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 34:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 35:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 38:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 40:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 41:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=209 from oldreg=93, assigning class SSE_REGS to r209
   41: r209:SF=r209:SF*[frame:DI-0xc]
      REG_DEAD r93:SF
    Inserting insn reload before:
  250: r209:SF=r93:SF
    Inserting insn reload after:
  251: r94:SF=r209:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 43:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 1 in insn 45:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 47:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 58:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 59:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 61:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 62:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 65:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 66:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 67:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 70:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 71:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 72:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 74:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 75:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 76:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 78:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 80:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 81:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=210 from oldreg=104, assigning class SSE_REGS to r210
   81: r210:SF=r210:SF*[frame:DI-0xc]
      REG_DEAD r104:SF
    Inserting insn reload before:
  252: r210:SF=r104:SF
    Inserting insn reload after:
  253: r105:SF=r210:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 83:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 1 in insn 85:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 94:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 111:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) rBwBz {*call} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 133:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 135:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 140:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 144:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =qm {*setcc_qi}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 150
	 Choosing alt 0 in insn 150:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) q {*cmpqi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 159:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) v  (1) vm {*cmpiusf}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 165:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 166:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 168:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 169:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 175:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 176:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 185:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 188:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 189:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 194:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 200:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 201:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 202:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 205:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 208:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 209:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 210:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 211:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 214:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 216:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 217:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 1 in insn 218:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 219:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 220:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 222:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 225:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 226
	 Choosing alt 1 in insn 226:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 228:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 15
EBB 13
EBB 16
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 234: point = 0, n_alt = -1
   Insn 228: point = 0, n_alt = 8
   Insn 227: point = 1, n_alt = 3
   Insn 226: point = 2, n_alt = 1
   Insn 225: point = 4, n_alt = 7
   Insn 224: point = 5, n_alt = 7
   Insn 223: point = 7, n_alt = 3
   Insn 222: point = 8, n_alt = 8
   Insn 221: point = 9, n_alt = 3
   Insn 220: point = 10, n_alt = 1
   Insn 219: point = 12, n_alt = 7
   Insn 218: point = 13, n_alt = 1
   Insn 217: point = 15, n_alt = 7
   Insn 216: point = 16, n_alt = 7
   Insn 215: point = 18, n_alt = 3
   Insn 214: point = 19, n_alt = 8
   Insn 213: point = 20, n_alt = 3
   Insn 212: point = 21, n_alt = 0
   Insn 211: point = 23, n_alt = 2
   Insn 210: point = 24, n_alt = 2
   Insn 209: point = 26, n_alt = 7
   Insn 208: point = 27, n_alt = 8
   Insn 207: point = 28, n_alt = 3
   Insn 206: point = 29, n_alt = 0
   Insn 205: point = 31, n_alt = 2
   Insn 204: point = 32, n_alt = 2
   Insn 203: point = 34, n_alt = 7
   Insn 202: point = 35, n_alt = 8
   Insn 201: point = 36, n_alt = 7
   Insn 200: point = 37, n_alt = 8
   Insn 199: point = 38, n_alt = 7
  BB 13
   Insn 244: point = 39, n_alt = -1
   Insn 196: point = 39, n_alt = 0
   Insn 195: point = 39, n_alt = -1
   Insn 194: point = 40, n_alt = 3
   Insn 193: point = 41, n_alt = 0
   Insn 192: point = 41, n_alt = -1
   Insn 191: point = 42, n_alt = -1
   Insn 190: point = 43, n_alt = 0
   Insn 189: point = 43, n_alt = 3
   Insn 188: point = 44, n_alt = 3
   Insn 187: point = 45, n_alt = 0
   Insn 186: point = 45, n_alt = -1
   Insn 185: point = 46, n_alt = 4
   Insn 184: point = 46, n_alt = 0
   Insn 183: point = 46, n_alt = 3
   Insn 182: point = 47, n_alt = 0
   Insn 181: point = 47, n_alt = -1
   Insn 180: point = 48, n_alt = 3
   Insn 179: point = 49, n_alt = 1
   Insn 178: point = 49, n_alt = 1
   Insn 177: point = 49, n_alt = 1
   Insn 176: point = 49, n_alt = 5
   Insn 175: point = 50, n_alt = 4
  BB 15
   Insn 243: point = 51, n_alt = -1
  BB 16
   Insn 248: point = 51, n_alt = -1
  BB 11
   Insn 162: point = 51, n_alt = -1
   Insn 161: point = 51, n_alt = 1
   Insn 160: point = 52, n_alt = 1
   Insn 159: point = 54, n_alt = 7
   Insn 158: point = 55, n_alt = 1
   Insn 157: point = 57, n_alt = 2
   Insn 156: point = 58, n_alt = 7
  BB 10
   Insn 9: point = 60, n_alt = -1
  BB 9
   Insn 152: point = 63, n_alt = -1
   Insn 151: point = 63, n_alt = 0
   Insn 150: point = 64, n_alt = 0
   Insn 149: point = 66, n_alt = 0
   Insn 148: point = 67, n_alt = 1
   Insn 147: point = 67, n_alt = 0
   Insn 146: point = 68, n_alt = 1
   Insn 145: point = 68, n_alt = 1
   Insn 144: point = 70, n_alt = 2
   Insn 143: point = 71, n_alt = 7
   Insn 142: point = 73, n_alt = 3
   Insn 141: point = 74, n_alt = 7
   Insn 140: point = 75, n_alt = 8
   Insn 139: point = 76, n_alt = 0
   Insn 138: point = 78, n_alt = 2
   Insn 137: point = 79, n_alt = 2
   Insn 136: point = 81, n_alt = 7
   Insn 135: point = 82, n_alt = 8
   Insn 134: point = 83, n_alt = 7
   Insn 133: point = 84, n_alt = 8
   Insn 132: point = 85, n_alt = 2
   Insn 131: point = 87, n_alt = 7
   Insn 130: point = 89, n_alt = 3
   Insn 129: point = 90, n_alt = 7
   Insn 128: point = 91, n_alt = 0
   Insn 127: point = 91, n_alt = 0
   Insn 126: point = 91, n_alt = -1
   Insn 125: point = 92, n_alt = -1
   Insn 124: point = 93, n_alt = -1
   Insn 123: point = 94, n_alt = -1
   Insn 122: point = 95, n_alt = -1
   Insn 121: point = 96, n_alt = -1
   Insn 120: point = 97, n_alt = 0
   Insn 119: point = 98, n_alt = 3
   Insn 118: point = 99, n_alt = 0
   Insn 117: point = 100, n_alt = 3
   Insn 116: point = 101, n_alt = 0
   Insn 115: point = 102, n_alt = 3
   Insn 114: point = 103, n_alt = 0
   Insn 113: point = 104, n_alt = 3
   Insn 112: point = 105, n_alt = 0
   Insn 111: point = 106, n_alt = 3
   Insn 110: point = 107, n_alt = 0
   Insn 109: point = 107, n_alt = 3
   Insn 108: point = 108, n_alt = 3
   Insn 107: point = 109, n_alt = 3
   Insn 106: point = 110, n_alt = 3
   Insn 105: point = 111, n_alt = 3
   Insn 104: point = 112, n_alt = 3
  BB 8
   Insn 102: point = 113, n_alt = -1
   Insn 101: point = 113, n_alt = 0
   Insn 100: point = 114, n_alt = 0
   Insn 99: point = 115, n_alt = 0
  BB 12
   Insn 239: point = 115, n_alt = -1
   Insn 169: point = 115, n_alt = 1
   Insn 168: point = 115, n_alt = 8
   Insn 167: point = 116, n_alt = 3
   Insn 166: point = 117, n_alt = 1
   Insn 165: point = 119, n_alt = 7
   Insn 164: point = 121, n_alt = 3
  BB 7
   Insn 97: point = 122, n_alt = 1
  BB 5
   Insn 237: point = 122, n_alt = -1
   Insn 87: point = 122, n_alt = 8
   Insn 86: point = 123, n_alt = 3
   Insn 85: point = 124, n_alt = 1
   Insn 84: point = 126, n_alt = 2
   Insn 83: point = 128, n_alt = 7
   Insn 82: point = 130, n_alt = 3
   Insn 253: point = 131, n_alt = -1
	Hard reg 22 is preferable by r210 with profit 1
   Insn 81: point = 133, n_alt = 1
   Insn 252: point = 133, n_alt = -1
	Hard reg 22 is preferable by r210 with profit 1
	Hard reg 21 is preferable by r210 with profit 1
   Insn 80: point = 135, n_alt = 7
   Insn 79: point = 137, n_alt = 3
   Insn 78: point = 138, n_alt = 8
   Insn 77: point = 139, n_alt = 3
   Insn 76: point = 140, n_alt = 1
   Insn 75: point = 142, n_alt = 1
   Insn 74: point = 144, n_alt = 7
   Insn 73: point = 146, n_alt = 3
   Insn 72: point = 147, n_alt = 8
   Insn 71: point = 148, n_alt = 7
   Insn 70: point = 149, n_alt = 8
   Insn 69: point = 150, n_alt = 2
   Insn 68: point = 152, n_alt = 7
   Insn 67: point = 153, n_alt = 1
   Insn 66: point = 155, n_alt = 7
   Insn 65: point = 156, n_alt = 8
   Insn 64: point = 157, n_alt = 7
   Insn 63: point = 159, n_alt = 3
   Insn 62: point = 160, n_alt = 8
   Insn 61: point = 161, n_alt = 7
   Insn 60: point = 163, n_alt = 3
   Insn 59: point = 164, n_alt = 8
   Insn 58: point = 165, n_alt = 7
   Insn 57: point = 167, n_alt = 3
  BB 3
   Insn 235: point = 168, n_alt = -1
   Insn 47: point = 168, n_alt = 8
   Insn 46: point = 169, n_alt = 3
   Insn 45: point = 170, n_alt = 1
   Insn 44: point = 172, n_alt = 2
   Insn 43: point = 174, n_alt = 7
   Insn 42: point = 176, n_alt = 3
   Insn 251: point = 177, n_alt = -1
	Hard reg 22 is preferable by r209 with profit 1
   Insn 41: point = 179, n_alt = 1
   Insn 250: point = 179, n_alt = -1
	Hard reg 22 is preferable by r209 with profit 1
	Hard reg 21 is preferable by r209 with profit 1
   Insn 40: point = 181, n_alt = 7
   Insn 39: point = 183, n_alt = 3
   Insn 38: point = 184, n_alt = 8
   Insn 37: point = 185, n_alt = 3
   Insn 36: point = 186, n_alt = 1
   Insn 35: point = 188, n_alt = 1
   Insn 34: point = 190, n_alt = 7
   Insn 33: point = 192, n_alt = 3
   Insn 32: point = 193, n_alt = 8
   Insn 31: point = 194, n_alt = 7
   Insn 30: point = 195, n_alt = 8
   Insn 29: point = 196, n_alt = 2
   Insn 28: point = 198, n_alt = 7
   Insn 27: point = 199, n_alt = 1
   Insn 26: point = 201, n_alt = 7
   Insn 25: point = 202, n_alt = 8
   Insn 24: point = 203, n_alt = 7
   Insn 23: point = 205, n_alt = 3
   Insn 22: point = 206, n_alt = 8
   Insn 21: point = 207, n_alt = 7
   Insn 20: point = 209, n_alt = 3
   Insn 19: point = 210, n_alt = 8
   Insn 18: point = 211, n_alt = 7
   Insn 17: point = 213, n_alt = 3
  BB 6
   Insn 94: point = 214, n_alt = 8
   Insn 93: point = 215, n_alt = 7
   Insn 92: point = 216, n_alt = 3
  BB 4
   Insn 55: point = 217, n_alt = -1
   Insn 54: point = 217, n_alt = 0
   Insn 53: point = 218, n_alt = 0
   Insn 52: point = 220, n_alt = 3
  BB 2
   Insn 15: point = 221, n_alt = -1
   Insn 14: point = 221, n_alt = 0
   Insn 13: point = 222, n_alt = 0
   Insn 12: point = 224, n_alt = 3
   Insn 7: point = 225, n_alt = 5
   Insn 6: point = 225, n_alt = 5
   Insn 5: point = 225, n_alt = 5
   Insn 4: point = 225, n_alt = 5
   Insn 3: point = 225, n_alt = 5
   Insn 2: point = 225, n_alt = 5
 r87: [221..222]
 r88: [200..201]
 r89: [197..199]
 r90: [189..190]
 r91: [187..188]
 r92: [184..186]
 r93: [180..181]
 r94: [171..177]
 r95: [173..174]
 r96: [171..172]
 r97: [168..170]
 r98: [217..218]
 r99: [154..155]
 r100: [151..153]
 r101: [143..144]
 r102: [141..142]
 r103: [138..140]
 r104: [134..135]
 r105: [125..131]
 r106: [127..128]
 r107: [125..126]
 r108: [122..124]
 r109: [86..90]
 r110: [86..87]
 r111: [84..85]
 r112: [80..81]
 r113: [77..79]
 r114: [69..71]
 r115: [65..67]
 r116: [65..66]
 r117: [63..64]
 r118: [51..55]
 r119: [53..54]
 r120: [51..52]
 r121: [118..119]
 r122: [115..117]
 r123: [30..32]
 r124: [27..29]
 r125: [22..24]
 r126: [19..21]
 r127: [14..16]
 r128: [14..15]
 r129: [11..13]
 r130: [11..12]
 r131: [8..10]
 r132: [3..5]
 r133: [3..4]
 r134: [0..2]
 r135: [63..74] [53..60]
 r136: [113..114]
 r137: [61..68]
 r138: [223..224]
 r139: [212..213]
 r140: [210..211]
 r141: [208..209]
 r142: [206..207]
 r143: [204..205]
 r144: [202..203]
 r145: [195..196]
 r146: [197..198]
 r147: [193..194]
 r148: [191..192]
 r149: [184..185]
 r150: [182..183]
 r151: [175..176]
 r152: [168..169]
 r153: [219..220]
 r154: [166..167]
 r155: [164..165]
 r156: [162..163]
 r157: [160..161]
 r158: [158..159]
 r159: [156..157]
 r160: [149..150]
 r161: [151..152]
 r162: [147..148]
 r163: [145..146]
 r164: [138..139]
 r165: [136..137]
 r166: [129..130]
 r167: [122..123]
 r168: [214..216]
 r169: [214..215]
 r170: [96..112]
 r171: [95..111]
 r172: [94..110]
 r173: [93..109]
 r174: [92..108]
 r175: [91..107]
 r176: [105..106]
 r177: [103..104]
 r178: [101..102]
 r179: [99..100]
 r180: [97..98]
 r181: [88..89]
 r182: [82..83]
 r183: [75..76]
 r184: [77..78]
 r185: [72..73]
 r186: [69..70]
 r187: [56..58]
 r188: [56..57]
 r189: [120..121]
 r190: [115..116]
 r191: [49..50]
 r192: [47..48]
 r193: [45..46]
 r194: [42..44]
 r195: [41..43]
 r196: [39..40]
 r197: [37..38]
 r198: [35..36]
 r199: [33..34]
 r200: [30..31]
 r201: [27..28]
 r202: [25..26]
 r203: [22..23]
 r204: [19..20]
 r205: [17..18]
 r206: [8..9]
 r207: [6..7]
 r208: [0..1]
 r209: [178..179]
 r210: [132..133]
Compressing live ranges: from 225 to 180 - 80%
Ranges after the compression:
 r87: [176..177]
 r88: [156..157]
 r89: [154..155]
 r90: [146..147]
 r91: [144..145]
 r92: [142..143]
 r93: [138..139]
 r94: [130..135]
 r95: [132..133]
 r96: [130..131]
 r97: [128..129]
 r98: [172..173]
 r99: [114..115]
 r100: [112..113]
 r101: [104..105]
 r102: [102..103]
 r103: [100..101]
 r104: [96..97]
 r105: [88..93]
 r106: [90..91]
 r107: [88..89]
 r108: [86..87]
 r109: [64..67]
 r110: [64..65]
 r111: [62..63]
 r112: [58..59]
 r113: [56..57]
 r114: [50..51]
 r115: [48..49]
 r116: [48..49]
 r117: [46..47]
 r118: [40..43]
 r119: [42..43]
 r120: [40..41]
 r121: [82..83]
 r122: [80..81]
 r123: [22..23]
 r124: [20..21]
 r125: [16..17]
 r126: [14..15]
 r127: [10..11]
 r128: [10..11]
 r129: [8..9]
 r130: [8..9]
 r131: [6..7]
 r132: [2..3]
 r133: [2..3]
 r134: [0..1]
 r135: [42..53]
 r136: [78..79]
 r137: [46..49]
 r138: [178..179]
 r139: [168..169]
 r140: [166..167]
 r141: [164..165]
 r142: [162..163]
 r143: [160..161]
 r144: [158..159]
 r145: [152..153]
 r146: [154..155]
 r147: [150..151]
 r148: [148..149]
 r149: [142..143]
 r150: [140..141]
 r151: [134..135]
 r152: [128..129]
 r153: [174..175]
 r154: [126..127]
 r155: [124..125]
 r156: [122..123]
 r157: [120..121]
 r158: [118..119]
 r159: [116..117]
 r160: [110..111]
 r161: [112..113]
 r162: [108..109]
 r163: [106..107]
 r164: [100..101]
 r165: [98..99]
 r166: [92..93]
 r167: [86..87]
 r168: [170..171]
 r169: [170..171]
 r170: [68..77]
 r171: [68..77]
 r172: [68..77]
 r173: [68..77]
 r174: [68..77]
 r175: [68..77]
 r176: [76..77]
 r177: [74..75]
 r178: [72..73]
 r179: [70..71]
 r180: [68..69]
 r181: [66..67]
 r182: [60..61]
 r183: [54..55]
 r184: [56..57]
 r185: [52..53]
 r186: [50..51]
 r187: [44..45]
 r188: [44..45]
 r189: [84..85]
 r190: [80..81]
 r191: [38..39]
 r192: [36..37]
 r193: [34..35]
 r194: [32..33]
 r195: [32..33]
 r196: [30..31]
 r197: [28..29]
 r198: [26..27]
 r199: [24..25]
 r200: [22..23]
 r201: [20..21]
 r202: [18..19]
 r203: [16..17]
 r204: [14..15]
 r205: [12..13]
 r206: [6..7]
 r207: [4..5]
 r208: [0..1]
 r209: [136..137]
 r210: [94..95]

********** Assignment #1: **********

	 Assigning to 209 (cl=SSE_REGS, orig=93, freq=3, tfirst=209, tfreq=3)...
	   Assign 22 to reload r209 (freq=3)
	 Assigning to 210 (cl=SSE_REGS, orig=104, freq=3, tfirst=210, tfreq=3)...
	   Assign 22 to reload r210 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=624, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=608, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 53
changing reg in insn 54
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 69
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 129
changing reg in insn 132
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 143
changing reg in insn 145
changing reg in insn 145
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 158
changing reg in insn 161
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 204
changing reg in insn 206
changing reg in insn 206
changing reg in insn 206
changing reg in insn 208
changing reg in insn 210
changing reg in insn 212
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 9
changing reg in insn 141
changing reg in insn 160
changing reg in insn 148
changing reg in insn 148
changing reg in insn 146
changing reg in insn 100
changing reg in insn 101
changing reg in insn 145
changing reg in insn 9
changing reg in insn 146
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 92
changing reg in insn 94
changing reg in insn 93
changing reg in insn 94
changing reg in insn 104
changing reg in insn 121
changing reg in insn 105
changing reg in insn 122
changing reg in insn 106
changing reg in insn 123
changing reg in insn 107
changing reg in insn 124
changing reg in insn 108
changing reg in insn 125
changing reg in insn 109
changing reg in insn 126
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 156
changing reg in insn 158
changing reg in insn 158
changing reg in insn 157
changing reg in insn 158
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 175
changing reg in insn 176
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 188
changing reg in insn 191
changing reg in insn 189
changing reg in insn 192
changing reg in insn 194
changing reg in insn 195
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
deleting insn with uid = 251.
deleting insn with uid = 253.
deleting insn with uid = 121.
deleting insn with uid = 122.
deleting insn with uid = 123.
deleting insn with uid = 124.
deleting insn with uid = 125.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 196.


voltm

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9]
;;  ref usage 	r0={46d,40u} r1={10d,5u} r2={8d,3u} r4={9d,4u} r5={16d,11u} r6={1d,116u} r7={8d,30u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={33d,8u} r18={5d} r19={5d} r20={1d,1u} r21={59d,55u,3e} r22={23d,18u} r23={9d,3u,2e} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,2u} r38={7d,2u} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 850{547d,298u,5e} in 203{198 regular + 5 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 87 138
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])
        (reg:DI 5 di [ omega ])) "../src/motor.f":133 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])
        (reg:DI 4 si [ q ])) "../src/motor.f":133 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])
        (reg:DI 1 dx [ imotype ])) "../src/motor.f":133 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])
        (reg:DI 2 cx [ parmot ])) "../src/motor.f":133 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])
        (reg:DI 37 r8 [ nmpar ])) "../src/motor.f":133 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])
        (reg:DI 38 r9 [ volt ])) "../src/motor.f":133 81 {*movdi_internal}
     (nil))
(note 8 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 8 13 2 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":163 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [138]) [1 *imotype_57(D)+0 S4 A32])) "../src/motor.f":163 82 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 1 [0x1]))) "../src/motor.f":163 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "../src/motor.f":163 617 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88 89 90 91 92 93 94 95 96 97 139 140 141 142 143 144 145 146 147 148 149 150 151 152
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":164 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SF 21 xmm0 [140])
        (mem:SF (reg/f:DI 0 ax [139]) [2 *parmot_60(D)+0 S4 A32])) "../src/motor.f":164 127 {*movsf_internal}
     (nil))
(insn 19 18 20 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32])
        (reg:SF 21 xmm0 [140])) "../src/motor.f":164 127 {*movsf_internal}
     (nil))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":165 81 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SF 21 xmm0 [142])
        (mem:SF (plus:DI (reg/f:DI 0 ax [141])
                (const_int 4 [0x4])) [2 *parmot_60(D)+4 S4 A32])) "../src/motor.f":165 127 {*movsf_internal}
     (nil))
(insn 22 21 23 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32])
        (reg:SF 21 xmm0 [142])) "../src/motor.f":165 127 {*movsf_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":166 81 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:SF 21 xmm0 [144])
        (mem:SF (plus:DI (reg/f:DI 0 ax [143])
                (const_int 8 [0x8])) [2 *parmot_60(D)+8 S4 A32])) "../src/motor.f":166 127 {*movsf_internal}
     (nil))
(insn 25 24 26 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32])
        (reg:SF 21 xmm0 [144])) "../src/motor.f":166 127 {*movsf_internal}
     (nil))
(insn 26 25 27 3 (set (reg:SF 21 xmm0 [orig:88 pi.11_2 ] [88])
        (mem/c:SF (symbol_ref:DI ("pi.3579") [flags 0x1c02]  <var_decl 0x1427f25a0 pi>) [2 pi+0 S4 A32])) "../src/motor.f":167 127 {*movsf_internal}
     (nil))
(insn 27 26 28 3 (set (reg:SF 21 xmm0 [orig:89 _3 ] [89])
        (mult:SF (reg:SF 21 xmm0 [orig:88 pi.11_2 ] [88])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":167 802 {*fop_sf_comm}
     (nil))
(insn 28 27 29 3 (set (reg:SF 22 xmm1 [146])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":167 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 29 28 30 3 (set (reg:SF 21 xmm0 [145])
        (div:SF (reg:SF 21 xmm0 [orig:89 _3 ] [89])
            (reg:SF 22 xmm1 [146]))) "../src/motor.f":167 805 {*fop_sf_1}
     (nil))
(insn 30 29 31 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])
        (reg:SF 21 xmm0 [145])) "../src/motor.f":167 127 {*movsf_internal}
     (nil))
(insn 31 30 32 3 (set (reg:SF 21 xmm0 [147])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])) "../src/motor.f":168 127 {*movsf_internal}
     (nil))
(insn 32 31 33 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32])
        (reg:SF 21 xmm0 [147])) "../src/motor.f":168 127 {*movsf_internal}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])) "../src/motor.f":169 81 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:SF 21 xmm0 [orig:90 _4 ] [90])
        (mem:SF (reg/f:DI 0 ax [148]) [2 *q_66(D)+0 S4 A32])) "../src/motor.f":169 127 {*movsf_internal}
     (nil))
(insn 35 34 36 3 (set (reg:SF 21 xmm0 [orig:91 _5 ] [91])
        (mult:SF (reg:SF 21 xmm0 [orig:90 _4 ] [90])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32]))) "../src/motor.f":169 802 {*fop_sf_comm}
     (nil))
(insn 36 35 37 3 (set (reg:SF 21 xmm0 [orig:92 _6 ] [92])
        (plus:SF (reg:SF 21 xmm0 [orig:91 _5 ] [91])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32]))) "../src/motor.f":169 802 {*fop_sf_comm}
     (nil))
(insn 37 36 38 3 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 amps+0 S8 A64])) "../src/motor.f":169 81 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (mem:SF (reg/f:DI 0 ax [149]) [2 *amps_67(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:92 _6 ] [92])) "../src/motor.f":169 127 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 amps+0 S8 A64])) "../src/motor.f":170 81 {*movdi_internal}
     (nil))
(insn 40 39 250 3 (set (reg:SF 21 xmm0 [orig:93 _7 ] [93])
        (mem:SF (reg/f:DI 0 ax [150]) [2 *amps_67(D)+0 S4 A32])) "../src/motor.f":170 127 {*movsf_internal}
     (nil))
(insn 250 40 41 3 (set (reg:SF 22 xmm1 [orig:93 _7 ] [93])
        (reg:SF 21 xmm0 [orig:93 _7 ] [93])) "../src/motor.f":170 127 {*movsf_internal}
     (nil))
(insn 41 250 42 3 (set (reg:SF 22 xmm1 [orig:93 _7 ] [93])
        (mult:SF (reg:SF 22 xmm1 [orig:93 _7 ] [93])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32]))) "../src/motor.f":170 802 {*fop_sf_comm}
     (nil))
(insn 42 41 43 3 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":170 81 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:SF 21 xmm0 [orig:95 _9 ] [95])
        (mem:SF (reg/f:DI 0 ax [151]) [2 *omega_69(D)+0 S4 A32])) "../src/motor.f":170 127 {*movsf_internal}
     (nil))
(insn 44 43 45 3 (set (reg:SF 21 xmm0 [orig:96 _10 ] [96])
        (div:SF (reg:SF 21 xmm0 [orig:95 _9 ] [95])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32]))) "../src/motor.f":170 805 {*fop_sf_1}
     (nil))
(insn 45 44 46 3 (set (reg:SF 21 xmm0 [orig:97 _11 ] [97])
        (plus:SF (reg:SF 21 xmm0 [orig:96 _10 ] [96])
            (reg:SF 22 xmm1 [orig:94 _8 ] [94]))) "../src/motor.f":170 802 {*fop_sf_comm}
     (nil))
(insn 46 45 47 3 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":170 81 {*movdi_internal}
     (nil))
(insn 47 46 235 3 (set (mem:SF (reg/f:DI 0 ax [152]) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:97 _11 ] [97])) "../src/motor.f":170 127 {*movsf_internal}
     (nil))
(jump_insn 235 47 236 3 (set (pc)
        (label_ref 95)) 649 {jump}
     (nil)
 -> 95)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 236 235 50)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 153
(code_label 50 236 51 4 18 (nil) [1 uses])
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 4 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":171 81 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SI 0 ax [orig:98 _12 ] [98])
        (mem:SI (reg/f:DI 0 ax [153]) [1 *imotype_57(D)+0 S4 A32])) "../src/motor.f":171 82 {*movsi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 _12 ] [98])
            (const_int 2 [0x2]))) "../src/motor.f":171 7 {*cmpsi_1}
     (nil))
(jump_insn 55 54 56 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) "../src/motor.f":171 617 {*jcc_1}
     (nil)
 -> 90)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 99 100 101 102 103 104 105 106 107 108 154 155 156 157 158 159 160 161 162 163 164 165 166 167
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":172 81 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:SF 21 xmm0 [155])
        (mem:SF (reg/f:DI 0 ax [154]) [2 *parmot_60(D)+0 S4 A32])) "../src/motor.f":172 127 {*movsf_internal}
     (nil))
(insn 59 58 60 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32])
        (reg:SF 21 xmm0 [155])) "../src/motor.f":172 127 {*movsf_internal}
     (nil))
(insn 60 59 61 5 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":173 81 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:SF 21 xmm0 [157])
        (mem:SF (plus:DI (reg/f:DI 0 ax [156])
                (const_int 4 [0x4])) [2 *parmot_60(D)+4 S4 A32])) "../src/motor.f":173 127 {*movsf_internal}
     (nil))
(insn 62 61 63 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32])
        (reg:SF 21 xmm0 [157])) "../src/motor.f":173 127 {*movsf_internal}
     (nil))
(insn 63 62 64 5 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":174 81 {*movdi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:SF 21 xmm0 [159])
        (mem:SF (plus:DI (reg/f:DI 0 ax [158])
                (const_int 8 [0x8])) [2 *parmot_60(D)+8 S4 A32])) "../src/motor.f":174 127 {*movsf_internal}
     (nil))
(insn 65 64 66 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32])
        (reg:SF 21 xmm0 [159])) "../src/motor.f":174 127 {*movsf_internal}
     (nil))
(insn 66 65 67 5 (set (reg:SF 21 xmm0 [orig:99 pi.12_13 ] [99])
        (mem/c:SF (symbol_ref:DI ("pi.3579") [flags 0x1c02]  <var_decl 0x1427f25a0 pi>) [2 pi+0 S4 A32])) "../src/motor.f":175 127 {*movsf_internal}
     (nil))
(insn 67 66 68 5 (set (reg:SF 21 xmm0 [orig:100 _14 ] [100])
        (mult:SF (reg:SF 21 xmm0 [orig:99 pi.12_13 ] [99])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":175 802 {*fop_sf_comm}
     (nil))
(insn 68 67 69 5 (set (reg:SF 22 xmm1 [161])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":175 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 69 68 70 5 (set (reg:SF 21 xmm0 [160])
        (div:SF (reg:SF 21 xmm0 [orig:100 _14 ] [100])
            (reg:SF 22 xmm1 [161]))) "../src/motor.f":175 805 {*fop_sf_1}
     (nil))
(insn 70 69 71 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])
        (reg:SF 21 xmm0 [160])) "../src/motor.f":175 127 {*movsf_internal}
     (nil))
(insn 71 70 72 5 (set (reg:SF 21 xmm0 [162])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])) "../src/motor.f":176 127 {*movsf_internal}
     (nil))
(insn 72 71 73 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32])
        (reg:SF 21 xmm0 [162])) "../src/motor.f":176 127 {*movsf_internal}
     (nil))
(insn 73 72 74 5 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])) "../src/motor.f":177 81 {*movdi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:SF 21 xmm0 [orig:101 _15 ] [101])
        (mem:SF (reg/f:DI 0 ax [163]) [2 *q_66(D)+0 S4 A32])) "../src/motor.f":177 127 {*movsf_internal}
     (nil))
(insn 75 74 76 5 (set (reg:SF 21 xmm0 [orig:102 _16 ] [102])
        (mult:SF (reg:SF 21 xmm0 [orig:101 _15 ] [101])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32]))) "../src/motor.f":177 802 {*fop_sf_comm}
     (nil))
(insn 76 75 77 5 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (plus:SF (reg:SF 21 xmm0 [orig:102 _16 ] [102])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32]))) "../src/motor.f":177 802 {*fop_sf_comm}
     (nil))
(insn 77 76 78 5 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 amps+0 S8 A64])) "../src/motor.f":177 81 {*movdi_internal}
     (nil))
(insn 78 77 79 5 (set (mem:SF (reg/f:DI 0 ax [164]) [2 *amps_67(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:103 _17 ] [103])) "../src/motor.f":177 127 {*movsf_internal}
     (nil))
(insn 79 78 80 5 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [10 amps+0 S8 A64])) "../src/motor.f":178 81 {*movdi_internal}
     (nil))
(insn 80 79 252 5 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (reg/f:DI 0 ax [165]) [2 *amps_67(D)+0 S4 A32])) "../src/motor.f":178 127 {*movsf_internal}
     (nil))
(insn 252 80 81 5 (set (reg:SF 22 xmm1 [orig:104 _18 ] [104])
        (reg:SF 21 xmm0 [orig:104 _18 ] [104])) "../src/motor.f":178 127 {*movsf_internal}
     (nil))
(insn 81 252 82 5 (set (reg:SF 22 xmm1 [orig:104 _18 ] [104])
        (mult:SF (reg:SF 22 xmm1 [orig:104 _18 ] [104])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32]))) "../src/motor.f":178 802 {*fop_sf_comm}
     (nil))
(insn 82 81 83 5 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":178 81 {*movdi_internal}
     (nil))
(insn 83 82 84 5 (set (reg:SF 21 xmm0 [orig:106 _20 ] [106])
        (mem:SF (reg/f:DI 0 ax [166]) [2 *omega_69(D)+0 S4 A32])) "../src/motor.f":178 127 {*movsf_internal}
     (nil))
(insn 84 83 85 5 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (div:SF (reg:SF 21 xmm0 [orig:106 _20 ] [106])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32]))) "../src/motor.f":178 805 {*fop_sf_1}
     (nil))
(insn 85 84 86 5 (set (reg:SF 21 xmm0 [orig:108 _22 ] [108])
        (plus:SF (reg:SF 21 xmm0 [orig:107 _21 ] [107])
            (reg:SF 22 xmm1 [orig:105 _19 ] [105]))) "../src/motor.f":178 802 {*fop_sf_comm}
     (nil))
(insn 86 85 87 5 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":178 81 {*movdi_internal}
     (nil))
(insn 87 86 237 5 (set (mem:SF (reg/f:DI 0 ax [167]) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:108 _22 ] [108])) "../src/motor.f":178 127 {*movsf_internal}
     (nil))
(jump_insn 237 87 238 5 (set (pc)
        (label_ref 95)) 649 {jump}
     (nil)
 -> 95)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 238 237 90)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 168 169
(code_label 90 238 91 6 20 (nil) [1 uses])
(note 91 90 92 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 6 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":181 81 {*movdi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:SF 21 xmm0 [169])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":181 127 {*movsf_internal}
     (nil))
(insn 94 93 95 6 (set (mem:SF (reg/f:DI 0 ax [168]) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 21 xmm0 [169])) "../src/motor.f":181 127 {*movsf_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              3 [100.0%] 
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 95 94 96 7 19 (nil) [2 uses])
(note 96 95 97 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 170 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
        (const_int 1 [0x1])) "../src/motor.f":184 82 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              12 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136
(code_label 170 97 98 8 24 (nil) [1 uses])
(note 98 170 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
            (const_int 20 [0x14]))) "../src/motor.f":184 7 {*cmpsi_1}
     (nil))
(insn 100 99 101 8 (set (reg:QI 0 ax [orig:136 _80 ] [136])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/motor.f":184 613 {*setcc_qi}
     (nil))
(insn 101 100 102 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:136 _80 ] [136])
            (const_int 0 [0]))) "../src/motor.f":184 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 102 101 103 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 242)
            (pc))) "../src/motor.f":184 617 {*jcc_1}
     (nil)
 -> 242)
;;  succ:       15
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 112 113 114 115 116 117 135 137 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186
(note 103 102 104 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 9 (parallel [
            (set (reg:DI 38 r9 [170])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (nil))
(insn 105 104 106 9 (set (reg:DI 37 r8 [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg:DI 2 cx [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (set (reg:DI 1 dx [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 108 107 109 9 (set (reg:DI 4 si [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 109 108 110 9 (set (reg:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 110 109 111 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 111 110 112 9 (parallel [
            (set (reg:DI 5 di [176])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (nil))
(insn 112 111 113 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 5 di [176])) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 113 112 114 9 (parallel [
            (set (reg:DI 5 di [177])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (nil))
(insn 114 113 115 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 5 di [177])) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 115 114 116 9 (parallel [
            (set (reg:DI 5 di [178])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (nil))
(insn 116 115 117 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 5 di [178])) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 117 116 118 9 (parallel [
            (set (reg:DI 5 di [179])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (nil))
(insn 118 117 119 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 5 di [179])) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 119 118 120 9 (parallel [
            (set (reg:DI 5 di [180])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (nil))
(insn 120 119 126 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 5 di [180])) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 126 120 127 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [175])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(call_insn 127 126 128 9 (call (mem:QI (symbol_ref:DI ("motorq_") [flags 0x403]  <function_decl 0x1427e4800 motorq>) [0 motorq S1 A8])
        (const_int 48 [0x30])) "../src/motor.f":187 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 128 127 129 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 129 128 130 9 (set (reg:SF 21 xmm0 [orig:109 qm.13_23 ] [109])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 qm+0 S4 A64])) "../src/motor.f":189 127 {*movsf_internal}
     (nil))
(insn 130 129 131 9 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])) "../src/motor.f":189 81 {*movdi_internal}
     (nil))
(insn 131 130 132 9 (set (reg:SF 22 xmm1 [orig:110 _24 ] [110])
        (mem:SF (reg/f:DI 0 ax [181]) [2 *q_66(D)+0 S4 A32])) "../src/motor.f":189 127 {*movsf_internal}
     (nil))
(insn 132 131 133 9 (set (reg:SF 21 xmm0 [orig:111 _25 ] [111])
        (minus:SF (reg:SF 21 xmm0 [orig:109 qm.13_23 ] [109])
            (reg:SF 22 xmm1 [orig:110 _24 ] [110]))) "../src/motor.f":189 805 {*fop_sf_1}
     (nil))
(insn 133 132 134 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [2 res+0 S4 A32])
        (reg:SF 21 xmm0 [orig:111 _25 ] [111])) "../src/motor.f":189 127 {*movsf_internal}
     (nil))
(insn 134 133 135 9 (set (reg:SF 21 xmm0 [182])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 qm_volt+0 S4 A64])) "../src/motor.f":190 127 {*movsf_internal}
     (nil))
(insn 135 134 136 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32])
        (reg:SF 21 xmm0 [182])) "../src/motor.f":190 127 {*movsf_internal}
     (nil))
(insn 136 135 137 9 (set (reg:SF 21 xmm0 [orig:112 res.14_26 ] [112])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [2 res+0 S4 A32])) "../src/motor.f":192 127 {*movsf_internal}
     (nil))
(insn 137 136 138 9 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (div:SF (reg:SF 21 xmm0 [orig:112 res.14_26 ] [112])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32]))) "../src/motor.f":192 805 {*fop_sf_1}
     (nil))
(insn 138 137 139 9 (set (reg:V4SF 22 xmm1 [184])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":192 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 139 138 140 9 (parallel [
            (set (reg:SF 21 xmm0 [183])
                (neg:SF (reg:SF 21 xmm0 [orig:113 _27 ] [113])))
            (use (reg:V4SF 22 xmm1 [184]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":192 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:113 _27 ] [113]))
        (nil)))
(insn 140 139 141 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 dvolt+0 S4 A32])
        (reg:SF 21 xmm0 [183])) "../src/motor.f":192 127 {*movsf_internal}
     (nil))
(insn 141 140 142 9 (set (reg:SF 21 xmm0 [orig:135 M.5_52 ] [135])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 142 141 143 9 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":194 81 {*movdi_internal}
     (nil))
(insn 143 142 144 9 (set (reg:SF 23 xmm2 [orig:114 _28 ] [114])
        (mem:SF (reg/f:DI 0 ax [185]) [2 *volt_58(D)+0 S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (nil))
(insn 144 143 145 9 (set (reg:V4SF 22 xmm1 [186])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":194 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 145 144 146 9 (parallel [
            (set (reg:SF 22 xmm1 [orig:137 _87 ] [137])
                (abs:SF (reg:SF 23 xmm2 [orig:114 _28 ] [114])))
            (use (reg:V4SF 22 xmm1 [186]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":194 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 23 xmm2 [orig:114 _28 ] [114]))
        (nil)))
(insn 146 145 147 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [orig:137 _87 ] [137])
            (reg:SF 21 xmm0 [orig:135 M.5_52 ] [135]))) "../src/motor.f":194 51 {*cmpiusf}
     (nil))
(insn 147 146 148 9 (set (reg:QI 1 dx [orig:115 _29 ] [115])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":194 613 {*setcc_qi}
     (nil))
(insn 148 147 149 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:135 M.5_52 ] [135])
            (reg:SF 21 xmm0 [orig:135 M.5_52 ] [135]))) "../src/motor.f":194 51 {*cmpiusf}
     (nil))
(insn 149 148 150 9 (set (reg:QI 0 ax [orig:116 _30 ] [116])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":194 613 {*setcc_qi}
     (nil))
(insn 150 149 151 9 (parallel [
            (set (reg:QI 0 ax [orig:117 _31 ] [117])
                (ior:QI (reg:QI 0 ax [orig:116 _30 ] [116])
                    (reg:QI 1 dx [orig:115 _29 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":194 423 {*iorqi_1}
     (nil))
(insn 151 150 152 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 0 [0]))) "../src/motor.f":194 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 152 151 153 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "../src/motor.f":194 617 {*jcc_1}
     (nil)
 -> 154)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135 137

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  def 	 135
(note 153 152 9 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 9 153 154 10 (set (reg:SF 21 xmm0 [orig:135 M.5_52 ] [135])
        (reg:SF 22 xmm1 [orig:137 _87 ] [137])) "../src/motor.f":194 127 {*movsf_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135
;; lr  def 	 17 [flags] 118 119 120 187 188
(code_label 154 9 155 11 22 (nil) [1 uses])
(note 155 154 156 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 11 (set (reg:SF 23 xmm2 [187])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 dvolt+0 S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (nil))
(insn 157 156 158 11 (set (reg:V4SF 22 xmm1 [188])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":194 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 158 157 159 11 (parallel [
            (set (reg:SF 22 xmm1 [orig:118 _32 ] [118])
                (abs:SF (reg:SF 23 xmm2 [187])))
            (use (reg:V4SF 22 xmm1 [188]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":194 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 23 xmm2 [187]))
        (nil)))
(insn 159 158 160 11 (set (reg:SF 23 xmm2 [orig:119 eps.15_33 ] [119])
        (mem/c:SF (symbol_ref:DI ("eps.3574") [flags 0x1c02]  <var_decl 0x1427f22d0 eps>) [2 eps+0 S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (nil))
(insn 160 159 161 11 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (mult:SF (reg:SF 21 xmm0 [orig:135 M.5_52 ] [135])
            (reg:SF 23 xmm2 [orig:119 eps.15_33 ] [119]))) "../src/motor.f":194 802 {*fop_sf_comm}
     (nil))
(insn 161 160 162 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:120 _34 ] [120])
            (reg:SF 22 xmm1 [orig:118 _32 ] [118]))) "../src/motor.f":194 51 {*cmpiusf}
     (nil))
(jump_insn 162 161 163 11 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "../src/motor.f":194 617 {*jcc_1}
     (nil)
 -> 247)
;;  succ:       16
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 15, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 189 190
(note 163 162 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 12 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":196 81 {*movdi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:SF 21 xmm0 [orig:121 _35 ] [121])
        (mem:SF (reg/f:DI 0 ax [189]) [2 *volt_58(D)+0 S4 A32])) "../src/motor.f":196 127 {*movsf_internal}
     (nil))
(insn 166 165 167 12 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (plus:SF (reg:SF 21 xmm0 [orig:121 _35 ] [121])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 dvolt+0 S4 A32]))) "../src/motor.f":196 802 {*fop_sf_comm}
     (nil))
(insn 167 166 168 12 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":196 81 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (set (mem:SF (reg/f:DI 0 ax [190]) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:122 _36 ] [122])) "../src/motor.f":196 127 {*movsf_internal}
     (nil))
(insn 169 168 239 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":184 217 {*addsi_1}
     (nil))
(jump_insn 239 169 240 12 (set (pc)
        (label_ref 170)) "../src/motor.f":184 649 {jump}
     (nil)
 -> 170)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 242)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 242 240 241 15 26 (nil) [1 uses])
(note 241 242 243 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 243 241 173 15 (const_int 0 [0]) "../src/motor.f":196 682 {nop}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 16, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 191 192 193 194 195 196
(code_label 173 243 174 13 21 (nil) [0 uses])
(note 174 173 175 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 13 (set (reg/f:DI 0 ax [191])
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(insn 176 175 177 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.6.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [191])) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(insn 177 176 178 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.6.common.line+0 S4 A64])
        (const_int 198 [0xc6])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 178 177 179 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.6.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 179 178 180 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.6.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 180 179 181 13 (parallel [
            (set (reg:DI 0 ax [192])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (nil))
(insn 181 180 182 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [192])) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(call_insn 182 181 183 13 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 183 182 184 13 (parallel [
            (set (reg:DI 0 ax [193])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (nil))
(insn 184 183 185 13 (set (reg:SI 1 dx)
        (const_int 43 [0x2b])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 185 184 186 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC13") [flags 0x2]  <var_decl 0x143234c60 *lC13>)) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(insn 186 185 187 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(call_insn 187 186 188 13 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 188 187 189 13 (parallel [
            (set (reg:DI 2 cx [194])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (nil))
(insn 189 188 190 13 (parallel [
            (set (reg:DI 0 ax [195])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (nil))
(insn 190 189 191 13 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 191 190 192 13 (set (reg:DI 4 si)
        (reg:DI 2 cx [194])) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(insn 192 191 193 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [195])) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(call_insn 193 192 194 13 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 194 193 195 13 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (nil))
(insn 195 194 196 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [196])) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(call_insn 196 195 244 13 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 244 196 245 13 (set (pc)
        (label_ref 197)) 649 {jump}
     (nil)
 -> 197)
;;  succ:       14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 247)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 247 245 246 16 27 (nil) [1 uses])
(note 246 247 248 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 248 246 197 16 (const_int 0 [0]) "../src/motor.f":198 682 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 1, flags: (RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              13
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 126 127 128 129 130 131 132 133 134 197 198 199 200 201 202 203 204 205 206 207 208
(code_label 197 248 198 14 23 (nil) [1 uses])
(note 198 197 199 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 14 (set (reg:SF 21 xmm0 [197])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 qm_omega+0 S4 A32])) "../src/motor.f":201 127 {*movsf_internal}
     (nil))
(insn 200 199 201 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 res_omega+0 S4 A32])
        (reg:SF 21 xmm0 [197])) "../src/motor.f":201 127 {*movsf_internal}
     (nil))
(insn 201 200 202 14 (set (reg:SF 21 xmm0 [198])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [2  S4 A32])) "../src/motor.f":202 127 {*movsf_internal}
     (nil))
(insn 202 201 203 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 res_q+0 S4 A32])
        (reg:SF 21 xmm0 [198])) "../src/motor.f":202 127 {*movsf_internal}
     (nil))
(insn 203 202 204 14 (set (reg:SF 21 xmm0 [199])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 res_omega+0 S4 A32])) "../src/motor.f":204 127 {*movsf_internal}
     (nil))
(insn 204 203 205 14 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (div:SF (reg:SF 21 xmm0 [199])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32]))) "../src/motor.f":204 805 {*fop_sf_1}
     (nil))
(insn 205 204 206 14 (set (reg:V4SF 22 xmm1 [200])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":204 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 206 205 207 14 (parallel [
            (set (reg:SF 21 xmm0 [orig:124 _38 ] [124])
                (neg:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123])))
            (use (reg:V4SF 22 xmm1 [200]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":204 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123]))
        (nil)))
(insn 207 206 208 14 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [10 volt_omega+0 S8 A64])) "../src/motor.f":204 81 {*movdi_internal}
     (nil))
(insn 208 207 209 14 (set (mem:SF (reg/f:DI 0 ax [201]) [2 *volt_omega_102(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:124 _38 ] [124])) "../src/motor.f":204 127 {*movsf_internal}
     (nil))
(insn 209 208 210 14 (set (reg:SF 21 xmm0 [202])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 res_q+0 S4 A32])) "../src/motor.f":205 127 {*movsf_internal}
     (nil))
(insn 210 209 211 14 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (div:SF (reg:SF 21 xmm0 [202])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32]))) "../src/motor.f":205 805 {*fop_sf_1}
     (nil))
(insn 211 210 212 14 (set (reg:V4SF 22 xmm1 [203])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":205 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 212 211 213 14 (parallel [
            (set (reg:SF 21 xmm0 [orig:126 _40 ] [126])
                (neg:SF (reg:SF 21 xmm0 [orig:125 _39 ] [125])))
            (use (reg:V4SF 22 xmm1 [203]))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":205 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:125 _39 ] [125]))
        (nil)))
(insn 213 212 214 14 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [10 volt_q+0 S8 A64])) "../src/motor.f":205 81 {*movdi_internal}
     (nil))
(insn 214 213 215 14 (set (mem:SF (reg/f:DI 0 ax [204]) [2 *volt_q_104(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:126 _40 ] [126])) "../src/motor.f":205 127 {*movsf_internal}
     (nil))
(insn 215 214 216 14 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [10 volt_omega+0 S8 A64])) "../src/motor.f":207 81 {*movdi_internal}
     (nil))
(insn 216 215 217 14 (set (reg:SF 22 xmm1 [orig:127 _41 ] [127])
        (mem:SF (reg/f:DI 0 ax [205]) [2 *volt_omega_102(D)+0 S4 A32])) "../src/motor.f":207 127 {*movsf_internal}
     (nil))
(insn 217 216 218 14 (set (reg:SF 21 xmm0 [orig:128 am_volt.16_42 ] [128])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 am_volt+0 S4 A32])) "../src/motor.f":207 127 {*movsf_internal}
     (nil))
(insn 218 217 219 14 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (mult:SF (reg:SF 21 xmm0 [orig:128 am_volt.16_42 ] [128])
            (reg:SF 22 xmm1 [orig:127 _41 ] [127]))) "../src/motor.f":207 802 {*fop_sf_comm}
     (nil))
(insn 219 218 220 14 (set (reg:SF 22 xmm1 [orig:130 am_omega.17_44 ] [130])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 am_omega+0 S4 A64])) "../src/motor.f":207 127 {*movsf_internal}
     (nil))
(insn 220 219 221 14 (set (reg:SF 21 xmm0 [orig:131 _45 ] [131])
        (plus:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (reg:SF 22 xmm1 [orig:130 am_omega.17_44 ] [130]))) "../src/motor.f":207 802 {*fop_sf_comm}
     (nil))
(insn 221 220 222 14 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [10 amps_omega+0 S8 A64])) "../src/motor.f":207 81 {*movdi_internal}
     (nil))
(insn 222 221 223 14 (set (mem:SF (reg/f:DI 0 ax [206]) [2 *amps_omega_106(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:131 _45 ] [131])) "../src/motor.f":207 127 {*movsf_internal}
     (nil))
(insn 223 222 224 14 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [10 volt_q+0 S8 A64])) "../src/motor.f":208 81 {*movdi_internal}
     (nil))
(insn 224 223 225 14 (set (reg:SF 22 xmm1 [orig:132 _46 ] [132])
        (mem:SF (reg/f:DI 0 ax [207]) [2 *volt_q_104(D)+0 S4 A32])) "../src/motor.f":208 127 {*movsf_internal}
     (nil))
(insn 225 224 226 14 (set (reg:SF 21 xmm0 [orig:133 am_volt.18_47 ] [133])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [2 am_volt+0 S4 A32])) "../src/motor.f":208 127 {*movsf_internal}
     (nil))
(insn 226 225 227 14 (set (reg:SF 21 xmm0 [orig:134 _48 ] [134])
        (mult:SF (reg:SF 21 xmm0 [orig:133 am_volt.18_47 ] [133])
            (reg:SF 22 xmm1 [orig:132 _46 ] [132]))) "../src/motor.f":208 802 {*fop_sf_comm}
     (nil))
(insn 227 226 228 14 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [10 amps_q+0 S8 A64])) "../src/motor.f":208 81 {*movdi_internal}
     (nil))
(insn 228 227 234 14 (set (mem:SF (reg/f:DI 0 ax [208]) [2 *amps_q_108(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:134 _48 ] [134])) "../src/motor.f":208 127 {*movsf_internal}
     (nil))
(insn 234 228 249 14 (const_int 0 [0]) "../src/motor.f":210 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 249 234 0 NOTE_INSN_DELETED)
