
;; Function motorq (motorq_, funcdef_no=0, decl_uid=3500, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 24 n_edges 29 count 24 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 22 18 23 19 20 21
;;
;; Loop 1
;;  header 13, latch 17
;;  depth 1, outer 0
;;  nodes: 13 17 16 14 15
;; 2 succs { 3 6 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 21 }
;; 6 succs { 7 20 }
;; 7 succs { 8 9 }
;; 8 succs { }
;; 9 succs { 12 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 22 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 23 17 }
;; 17 succs { 13 }
;; 22 succs { 18 }
;; 18 succs { 19 }
;; 23 succs { 19 }
;; 19 succs { 21 }
;; 20 succs { }
;; 21 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 308.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 316.
verify found no changes in insn with uid = 382.
verify found no changes in insn with uid = 387.
verify found no changes in insn with uid = 393.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 399.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r298: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r298,l0) best DIREG, allocno GENERAL_REGS
    r297: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r297,l0) best DIREG, allocno GENERAL_REGS
    r296: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r296,l0) best SIREG, allocno GENERAL_REGS
    r295: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r295,l0) best DIREG, allocno GENERAL_REGS
    r294: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r294,l0) best DIREG, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a24 (r286,l0) best SSE_REGS, allocno SSE_REGS
    r285: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a22 (r285,l0) best SSE_REGS, allocno SSE_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a28 (r283,l0) best SSE_REGS, allocno SSE_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a40 (r279,l0) best SSE_REGS, allocno SSE_REGS
    r278: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a41 (r278,l0) best SSE_REGS, allocno SSE_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a45 (r276,l0) best SSE_REGS, allocno SSE_REGS
    r275: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a46 (r275,l0) best SSE_REGS, allocno SSE_REGS
    r274: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a47 (r274,l0) best SSE_REGS, allocno SSE_REGS
    r273: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a48 (r273,l0) best SSE_REGS, allocno SSE_REGS
    r272: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r272,l0) best DIREG, allocno GENERAL_REGS
    r271: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r271,l0) best DIREG, allocno GENERAL_REGS
    r270: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r270,l0) best DIREG, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a58 (r268,l0) best SSE_REGS, allocno SSE_REGS
    r267: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a57 (r267,l0) best SSE_REGS, allocno SSE_REGS
    r266: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a64 (r266,l0) best SSE_REGS, allocno SSE_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a70 (r263,l0) best SSE_REGS, allocno SSE_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a74 (r261,l0) best SSE_REGS, allocno SSE_REGS
    r260: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a72 (r260,l0) best SSE_REGS, allocno SSE_REGS
    r259: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a77 (r259,l0) best SSE_REGS, allocno SSE_REGS
    r258: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a78 (r258,l0) best SSE_REGS, allocno SSE_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a81 (r256,l0) best SSE_REGS, allocno SSE_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a101 (r250,l0) best SSE_REGS, allocno SSE_REGS
    r249: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a104 (r249,l0) best SSE_REGS, allocno SSE_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a109 (r247,l0) best SSE_REGS, allocno SSE_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a115 (r245,l0) best SSE_REGS, allocno SSE_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a120 (r243,l0) best SSE_REGS, allocno SSE_REGS
    r242: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a119 (r242,l0) best SSE_REGS, allocno SSE_REGS
    r241: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a124 (r241,l0) best SSE_REGS, allocno SSE_REGS
    r240: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a123 (r240,l0) best SSE_REGS, allocno SSE_REGS
    r239: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a127 (r239,l0) best SSE_REGS, allocno SSE_REGS
    r238: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a128 (r238,l0) best SSE_REGS, allocno SSE_REGS
    r237: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a129 (r237,l0) best SSE_REGS, allocno SSE_REGS
    r236: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a130 (r236,l0) best SSE_REGS, allocno SSE_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a132 (r234,l0) best SSE_REGS, allocno SSE_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a134 (r232,l0) best SSE_REGS, allocno SSE_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a136 (r230,l0) best SSE_REGS, allocno SSE_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a138 (r228,l0) best SSE_REGS, allocno SSE_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a140 (r226,l0) best SSE_REGS, allocno SSE_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a142 (r224,l0) best SSE_REGS, allocno SSE_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a144 (r222,l0) best SSE_REGS, allocno SSE_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a146 (r220,l0) best DIREG, allocno GENERAL_REGS
    r219: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a147 (r219,l0) best DIREG, allocno GENERAL_REGS
    r218: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a148 (r218,l0) best SIREG, allocno GENERAL_REGS
    r217: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a149 (r217,l0) best DIREG, allocno GENERAL_REGS
    r216: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a150 (r216,l0) best DIREG, allocno GENERAL_REGS
    r215: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a151 (r215,l0) best DIREG, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a173 (r204,l0) best SSE_REGS, allocno SSE_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a177 (r202,l0) best SSE_REGS, allocno SSE_REGS
    r201: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a178 (r201,l0) best SSE_REGS, allocno SSE_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a186 (r198,l0) best SSE_REGS, allocno SSE_REGS
    r197: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a185 (r197,l0) best SSE_REGS, allocno SSE_REGS
    r196: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a187 (r196,l0) best SSE_REGS, allocno SSE_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a190 (r194,l0) best SSE_REGS, allocno SSE_REGS
    r193: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a192 (r193,l0) best SSE_REGS, allocno SSE_REGS
    r192: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a191 (r192,l0) best SSE_REGS, allocno SSE_REGS
    r191: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a195 (r191,l0) best SSE_REGS, allocno SSE_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a197 (r189,l0) best SSE_REGS, allocno SSE_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a199 (r187,l0) best SSE_REGS, allocno SSE_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a201 (r185,l0) best DIREG, allocno GENERAL_REGS
    r184: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a202 (r184,l0) best DIREG, allocno GENERAL_REGS
    r183: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a203 (r183,l0) best SIREG, allocno GENERAL_REGS
    r182: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a204 (r182,l0) best DIREG, allocno GENERAL_REGS
    r181: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a205 (r181,l0) best DIREG, allocno GENERAL_REGS
    r180: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a206 (r180,l0) best DIREG, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a31 (r176,l0) best SSE_REGS, allocno SSE_REGS
    r175: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a35 (r175,l0) best SSE_REGS, allocno SSE_REGS
    r174: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a59 (r174,l0) best SSE_REGS, allocno SSE_REGS
    r173: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a76 (r173,l0) best SSE_REGS, allocno SSE_REGS
    r172: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a79 (r172,l0) best SSE_REGS, allocno SSE_REGS
    r171: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a90 (r171,l0) best SSE_REGS, allocno SSE_REGS
    r170: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a92 (r170,l0) best SSE_REGS, allocno SSE_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a56 (r168,l0) best SSE_REGS, allocno SSE_REGS
    r167: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a7 (r167,l0) best SSE_REGS, allocno SSE_REGS
    r166: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a8 (r166,l0) best SSE_REGS, allocno SSE_REGS
    r165: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a11 (r165,l0) best SSE_REGS, allocno SSE_REGS
    r164: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a12 (r164,l0) best SSE_REGS, allocno SSE_REGS
    r163: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a13 (r163,l0) best SSE_REGS, allocno SSE_REGS
    r162: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a14 (r162,l0) best SSE_REGS, allocno SSE_REGS
    r161: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a17 (r161,l0) best SSE_REGS, allocno SSE_REGS
    r160: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a18 (r160,l0) best SSE_REGS, allocno SSE_REGS
    r159: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a19 (r159,l0) best SSE_REGS, allocno SSE_REGS
    r158: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a20 (r158,l0) best SSE_REGS, allocno SSE_REGS
    r157: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a23 (r157,l0) best SSE_REGS, allocno SSE_REGS
    r156: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a25 (r156,l0) best SSE_REGS, allocno SSE_REGS
    r155: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a26 (r155,l0) best SSE_REGS, allocno SSE_REGS
    r154: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a29 (r154,l0) best SSE_REGS, allocno SSE_REGS
    r153: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a30 (r153,l0) best SSE_REGS, allocno SSE_REGS
    r152: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a32 (r152,l0) best SSE_REGS, allocno SSE_REGS
    r151: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a33 (r151,l0) best SSE_REGS, allocno SSE_REGS
    r150: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a38 (r150,l0) best SSE_REGS, allocno SSE_REGS
    r149: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a39 (r149,l0) best SSE_REGS, allocno SSE_REGS
    r148: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a43 (r148,l0) best SSE_REGS, allocno SSE_REGS
    r147: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a44 (r147,l0) best SSE_REGS, allocno SSE_REGS
    r146: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a54 (r146,l0) best SSE_REGS, allocno SSE_REGS
    r145: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a55 (r145,l0) best SSE_REGS, allocno SSE_REGS
    r144: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a53 (r144,l0) best SSE_REGS, allocno SSE_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a63 (r140,l0) best SSE_REGS, allocno SSE_REGS
    r139: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a67 (r139,l0) best SSE_REGS, allocno SSE_REGS
    r138: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a68 (r138,l0) best SSE_REGS, allocno SSE_REGS
    r137: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a69 (r137,l0) best SSE_REGS, allocno SSE_REGS
    r136: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a73 (r136,l0) best SSE_REGS, allocno SSE_REGS
    r135: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a75 (r135,l0) best SSE_REGS, allocno SSE_REGS
    r134: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a82 (r134,l0) best SSE_REGS, allocno SSE_REGS
    r133: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a83 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a85 (r132,l0) best SSE_REGS, allocno SSE_REGS
    r131: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a86 (r131,l0) best SSE_REGS, allocno SSE_REGS
    r130: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a88 (r130,l0) best SSE_REGS, allocno SSE_REGS
    r129: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a89 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a87 (r128,l0) best SSE_REGS, allocno SSE_REGS
    r127: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a96 (r127,l0) best SSE_REGS, allocno SSE_REGS
    r126: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a97 (r126,l0) best SSE_REGS, allocno SSE_REGS
    r125: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a98 (r125,l0) best SSE_REGS, allocno SSE_REGS
    r124: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a99 (r124,l0) best SSE_REGS, allocno SSE_REGS
    r123: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a102 (r123,l0) best SSE_REGS, allocno SSE_REGS
    r122: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a103 (r122,l0) best SSE_REGS, allocno SSE_REGS
    r121: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a105 (r121,l0) best SSE_REGS, allocno SSE_REGS
    r120: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a106 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a107 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a110 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a111 (r117,l0) best SSE_REGS, allocno SSE_REGS
    r116: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a112 (r116,l0) best SSE_REGS, allocno SSE_REGS
    r115: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a114 (r115,l0) best SSE_REGS, allocno SSE_REGS
    r114: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a116 (r114,l0) best SSE_REGS, allocno SSE_REGS
    r113: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a117 (r113,l0) best SSE_REGS, allocno SSE_REGS
    r112: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a121 (r112,l0) best SSE_REGS, allocno SSE_REGS
    r111: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a122 (r111,l0) best SSE_REGS, allocno SSE_REGS
    r110: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a125 (r110,l0) best SSE_REGS, allocno SSE_REGS
    r109: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a126 (r109,l0) best SSE_REGS, allocno SSE_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a158 (r106,l0) best SSE_REGS, allocno SSE_REGS
    r105: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a159 (r105,l0) best SSE_REGS, allocno SSE_REGS
    r104: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a162 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a163 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a166 (r102,l0) best SSE_REGS, allocno SSE_REGS
    r101: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a167 (r101,l0) best SSE_REGS, allocno SSE_REGS
    r100: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a168 (r100,l0) best SSE_REGS, allocno SSE_REGS
    r99: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a169 (r99,l0) best SSE_REGS, allocno SSE_REGS
    r98: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a172 (r98,l0) best SSE_REGS, allocno SSE_REGS
    r97: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a175 (r97,l0) best SSE_REGS, allocno SSE_REGS
    r96: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a176 (r96,l0) best SSE_REGS, allocno SSE_REGS
    r95: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a180 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a181 (r94,l0) best SSE_REGS, allocno SSE_REGS
    r93: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a182 (r93,l0) best SSE_REGS, allocno SSE_REGS
    r92: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a183 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r91: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a188 (r91,l0) best SSE_REGS, allocno SSE_REGS
    r90: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a193 (r90,l0) best SSE_REGS, allocno SSE_REGS
    r89: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a194 (r89,l0) best SSE_REGS, allocno SSE_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a1(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a2(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a3(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a4(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a5(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8 NO_REX_SSE_REGS:8 SSE_REGS:8 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a6(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a7(r167,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a8(r166,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a9(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a10(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a11(r165,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a12(r164,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:9
  a13(r163,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a14(r162,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a15(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a16(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a17(r161,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a18(r160,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:9
  a19(r159,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a20(r158,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a21(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a22(r285,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a23(r157,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a24(r286,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a25(r156,l0) costs: AREG:24 DREG:24 CREG:24 BREG:24 SIREG:24 DIREG:24 AD_REGS:24 CLOBBERED_REGS:24 Q_REGS:24 NON_Q_REGS:24 TLS_GOTBASE_REGS:24 GENERAL_REGS:24 FP_TOP_REG:63 FP_SECOND_REG:63 FLOAT_REGS:63 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:51 FP_TOP_SSE_REGS:63 FP_SECOND_SSE_REGS:63 FLOAT_SSE_REGS:63 FLOAT_INT_REGS:63 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:63 ALL_REGS:63 MEM:22
  a26(r155,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a27(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a28(r283,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a29(r154,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a30(r153,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a31(r176,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a32(r152,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a33(r151,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a34(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a35(r175,l0) costs: AREG:18 DREG:18 CREG:18 BREG:18 SIREG:18 DIREG:18 AD_REGS:18 CLOBBERED_REGS:18 Q_REGS:18 NON_Q_REGS:18 TLS_GOTBASE_REGS:18 GENERAL_REGS:18 FP_TOP_REG:54 FP_SECOND_REG:54 FLOAT_REGS:54 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:48 FP_TOP_SSE_REGS:56 FP_SECOND_SSE_REGS:56 FLOAT_SSE_REGS:56 FLOAT_INT_REGS:54 INT_SSE_REGS:37 FLOAT_INT_SSE_REGS:56 ALL_REGS:56 MEM:20
  a36(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a37(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a38(r150,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a39(r149,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a40(r279,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a41(r278,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a42(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a43(r148,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a44(r147,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a45(r276,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a46(r275,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a47(r274,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a48(r273,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a49(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a50(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a51(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a52(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8 NO_REX_SSE_REGS:8 SSE_REGS:8 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a53(r144,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a54(r146,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a55(r145,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a56(r168,l0) costs: AREG:36 DREG:36 CREG:36 BREG:36 SIREG:36 DIREG:36 AD_REGS:36 CLOBBERED_REGS:36 Q_REGS:36 NON_Q_REGS:36 TLS_GOTBASE_REGS:36 GENERAL_REGS:36 FP_TOP_REG:102 FP_SECOND_REG:102 FLOAT_REGS:102 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:90 FP_TOP_SSE_REGS:106 FP_SECOND_SSE_REGS:106 FLOAT_SSE_REGS:106 FLOAT_INT_REGS:102 INT_SSE_REGS:71 FLOAT_INT_SSE_REGS:106 ALL_REGS:106 MEM:36
  a57(r267,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a58(r268,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a59(r174,l0) costs: AREG:18 DREG:18 CREG:18 BREG:18 SIREG:18 DIREG:18 AD_REGS:18 CLOBBERED_REGS:18 Q_REGS:18 NON_Q_REGS:18 TLS_GOTBASE_REGS:18 GENERAL_REGS:18 FP_TOP_REG:54 FP_SECOND_REG:54 FLOAT_REGS:54 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:42 FP_TOP_SSE_REGS:54 FP_SECOND_SSE_REGS:54 FLOAT_SSE_REGS:54 FLOAT_INT_REGS:54 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:54 ALL_REGS:54 MEM:17
  a60(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:5
  a61(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:4
  a62(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:4
  a63(r140,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a64(r266,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a65(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a66(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a67(r139,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a68(r138,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a69(r137,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a70(r263,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a71(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a72(r260,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a73(r136,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a74(r261,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a75(r135,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a76(r173,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a77(r259,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a78(r258,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a79(r172,l0) costs: AREG:18 DREG:18 CREG:18 BREG:18 SIREG:18 DIREG:18 AD_REGS:18 CLOBBERED_REGS:18 Q_REGS:18 NON_Q_REGS:18 TLS_GOTBASE_REGS:18 GENERAL_REGS:18 FP_TOP_REG:54 FP_SECOND_REG:54 FLOAT_REGS:54 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:48 FP_TOP_SSE_REGS:56 FP_SECOND_SSE_REGS:56 FLOAT_SSE_REGS:56 FLOAT_INT_REGS:54 INT_SSE_REGS:37 FLOAT_INT_SSE_REGS:56 ALL_REGS:56 MEM:20
  a80(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a81(r256,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a82(r134,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a83(r133,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a84(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a85(r132,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a86(r131,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:8
  a87(r128,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a88(r130,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a89(r129,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a90(r171,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a91(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a92(r170,l0) costs: AREG:18 DREG:18 CREG:18 BREG:18 SIREG:18 DIREG:18 AD_REGS:18 CLOBBERED_REGS:18 Q_REGS:18 NON_Q_REGS:18 TLS_GOTBASE_REGS:18 GENERAL_REGS:18 FP_TOP_REG:54 FP_SECOND_REG:54 FLOAT_REGS:54 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:48 FP_TOP_SSE_REGS:56 FP_SECOND_SSE_REGS:56 FLOAT_SSE_REGS:56 FLOAT_INT_REGS:54 INT_SSE_REGS:37 FLOAT_INT_SSE_REGS:56 ALL_REGS:56 MEM:20
  a93(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a94(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7
  a95(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a96(r127,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a97(r126,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:9
  a98(r125,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a99(r124,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a100(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a101(r250,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a102(r123,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:9
  a103(r122,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a104(r249,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a105(r121,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a106(r120,l0) costs: AREG:24 DREG:24 CREG:24 BREG:24 SIREG:24 DIREG:24 AD_REGS:24 CLOBBERED_REGS:24 Q_REGS:24 NON_Q_REGS:24 TLS_GOTBASE_REGS:24 GENERAL_REGS:24 FP_TOP_REG:63 FP_SECOND_REG:63 FLOAT_REGS:63 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:51 FP_TOP_SSE_REGS:63 FP_SECOND_SSE_REGS:63 FLOAT_SSE_REGS:63 FLOAT_INT_REGS:63 INT_SSE_REGS:39 FLOAT_INT_SSE_REGS:63 ALL_REGS:63 MEM:22
  a107(r119,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a108(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a109(r247,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a110(r118,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a111(r117,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a112(r116,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:8
  a113(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a114(r115,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a115(r245,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a116(r114,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a117(r113,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a118(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a119(r242,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a120(r243,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a121(r112,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a122(r111,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a123(r240,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a124(r241,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a125(r110,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a126(r109,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a127(r239,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a128(r238,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a129(r237,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a130(r236,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a131(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a132(r234,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a133(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a134(r232,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a135(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a136(r230,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a137(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a138(r228,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a139(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a140(r226,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a141(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a142(r224,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a143(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a144(r222,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a145(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a146(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a147(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a148(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a149(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a150(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a151(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a152(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8 NO_REX_SSE_REGS:8 SSE_REGS:8 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a153(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a154(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a155(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a156(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a157(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a158(r106,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a159(r105,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a160(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a161(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a162(r104,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a163(r103,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a164(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a165(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a166(r102,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a167(r101,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:9
  a168(r100,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a169(r99,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a170(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a171(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a172(r98,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a173(r204,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a174(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a175(r97,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a176(r96,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a177(r202,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a178(r201,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a179(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a180(r95,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a181(r94,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:29 MEM:9
  a182(r93,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:9
  a183(r92,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a184(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a185(r197,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a186(r198,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a187(r196,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a188(r91,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a189(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a190(r194,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a191(r192,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a192(r193,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a193(r90,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a194(r89,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a195(r191,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a196(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a197(r189,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a198(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a199(r187,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a200(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a201(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a202(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a203(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a204(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a205(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a206(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a207(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8 NO_REX_SSE_REGS:8 SSE_REGS:8 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a208(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a209(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a210(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a211(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8

   Insn 399(l0): point = 1
   Insn 398(l0): point = 3
   Insn 397(l0): point = 5
   Insn 396(l0): point = 7
   Insn 395(l0): point = 9
   Insn 394(l0): point = 11
   Insn 393(l0): point = 13
   Insn 392(l0): point = 15
   Insn 391(l0): point = 17
   Insn 390(l0): point = 19
   Insn 389(l0): point = 21
   Insn 388(l0): point = 23
   Insn 387(l0): point = 25
   Insn 386(l0): point = 27
   Insn 385(l0): point = 29
   Insn 384(l0): point = 31
   Insn 383(l0): point = 33
   Insn 382(l0): point = 35
   Insn 381(l0): point = 37
   Insn 380(l0): point = 39
   Insn 379(l0): point = 41
   Insn 378(l0): point = 43
   Insn 377(l0): point = 45
   Insn 376(l0): point = 47
   Insn 375(l0): point = 49
   Insn 415(l0): point = 52
   Insn 370(l0): point = 54
   Insn 369(l0): point = 56
   Insn 368(l0): point = 58
   Insn 367(l0): point = 60
   Insn 366(l0): point = 62
   Insn 365(l0): point = 64
   Insn 364(l0): point = 66
   Insn 363(l0): point = 68
   Insn 362(l0): point = 70
   Insn 361(l0): point = 72
   Insn 360(l0): point = 74
   Insn 359(l0): point = 76
   Insn 358(l0): point = 78
   Insn 357(l0): point = 80
   Insn 356(l0): point = 82
   Insn 355(l0): point = 84
   Insn 354(l0): point = 86
   Insn 353(l0): point = 88
   Insn 352(l0): point = 90
   Insn 351(l0): point = 92
   Insn 350(l0): point = 94
   Insn 349(l0): point = 96
   Insn 348(l0): point = 98
   Insn 347(l0): point = 100
   Insn 346(l0): point = 102
   Insn 345(l0): point = 104
   Insn 344(l0): point = 106
   Insn 343(l0): point = 108
   Insn 342(l0): point = 110
   Insn 341(l0): point = 112
   Insn 340(l0): point = 114
   Insn 339(l0): point = 116
   Insn 338(l0): point = 118
   Insn 337(l0): point = 120
   Insn 336(l0): point = 122
   Insn 335(l0): point = 124
   Insn 334(l0): point = 126
   Insn 333(l0): point = 128
   Insn 332(l0): point = 130
   Insn 331(l0): point = 132
   Insn 330(l0): point = 134
   Insn 329(l0): point = 136
   Insn 328(l0): point = 138
   Insn 327(l0): point = 140
   Insn 326(l0): point = 142
   Insn 325(l0): point = 144
   Insn 324(l0): point = 146
   Insn 323(l0): point = 148
   Insn 322(l0): point = 150
   Insn 321(l0): point = 152
   Insn 320(l0): point = 154
   Insn 319(l0): point = 156
   Insn 424(l0): point = 159
   Insn 420(l0): point = 162
   Insn 316(l0): point = 164
   Insn 315(l0): point = 166
   Insn 314(l0): point = 168
   Insn 313(l0): point = 170
   Insn 312(l0): point = 172
   Insn 311(l0): point = 174
   Insn 310(l0): point = 176
   Insn 309(l0): point = 178
   Insn 308(l0): point = 180
   Insn 307(l0): point = 182
   Insn 306(l0): point = 184
   Insn 305(l0): point = 186
   Insn 304(l0): point = 188
   Insn 303(l0): point = 190
   Insn 302(l0): point = 192
   Insn 301(l0): point = 194
   Insn 419(l0): point = 197
   Insn 239(l0): point = 200
   Insn 238(l0): point = 202
   Insn 237(l0): point = 204
   Insn 236(l0): point = 206
   Insn 413(l0): point = 209
   Insn 295(l0): point = 211
   Insn 293(l0): point = 214
   Insn 292(l0): point = 216
   Insn 291(l0): point = 218
   Insn 290(l0): point = 220
   Insn 289(l0): point = 222
   Insn 288(l0): point = 224
   Insn 287(l0): point = 226
   Insn 283(l0): point = 229
   Insn 282(l0): point = 231
   Insn 281(l0): point = 233
   Insn 280(l0): point = 235
   Insn 279(l0): point = 237
   Insn 278(l0): point = 239
   Insn 277(l0): point = 241
   Insn 276(l0): point = 243
   Insn 275(l0): point = 245
   Insn 274(l0): point = 247
   Insn 273(l0): point = 249
   Insn 272(l0): point = 251
   Insn 271(l0): point = 253
   Insn 270(l0): point = 255
   Insn 269(l0): point = 257
   Insn 268(l0): point = 259
   Insn 267(l0): point = 261
   Insn 266(l0): point = 263
   Insn 265(l0): point = 265
   Insn 264(l0): point = 267
   Insn 263(l0): point = 269
   Insn 262(l0): point = 271
   Insn 261(l0): point = 273
   Insn 260(l0): point = 275
   Insn 259(l0): point = 277
   Insn 258(l0): point = 279
   Insn 257(l0): point = 281
   Insn 256(l0): point = 283
   Insn 255(l0): point = 285
   Insn 254(l0): point = 287
   Insn 253(l0): point = 289
   Insn 252(l0): point = 291
   Insn 251(l0): point = 293
   Insn 250(l0): point = 295
   Insn 249(l0): point = 297
   Insn 248(l0): point = 299
   Insn 247(l0): point = 301
   Insn 246(l0): point = 303
   Insn 245(l0): point = 305
   Insn 244(l0): point = 307
   Insn 243(l0): point = 309
   Insn 242(l0): point = 311
   Insn 241(l0): point = 313
   Insn 9(l0): point = 316
   Insn 234(l0): point = 319
   Insn 233(l0): point = 321
   Insn 232(l0): point = 323
   Insn 231(l0): point = 325
   Insn 230(l0): point = 327
   Insn 229(l0): point = 329
   Insn 228(l0): point = 331
   Insn 227(l0): point = 333
   Insn 226(l0): point = 335
   Insn 225(l0): point = 337
   Insn 224(l0): point = 339
   Insn 223(l0): point = 341
   Insn 222(l0): point = 343
   Insn 221(l0): point = 345
   Insn 220(l0): point = 347
   Insn 219(l0): point = 349
   Insn 218(l0): point = 351
   Insn 217(l0): point = 353
   Insn 216(l0): point = 355
   Insn 215(l0): point = 357
   Insn 214(l0): point = 359
   Insn 213(l0): point = 361
   Insn 212(l0): point = 363
   Insn 211(l0): point = 365
   Insn 210(l0): point = 367
   Insn 209(l0): point = 369
   Insn 208(l0): point = 371
   Insn 207(l0): point = 373
   Insn 206(l0): point = 375
   Insn 205(l0): point = 377
   Insn 204(l0): point = 379
   Insn 203(l0): point = 381
   Insn 202(l0): point = 383
   Insn 201(l0): point = 385
   Insn 200(l0): point = 387
   Insn 199(l0): point = 389
   Insn 198(l0): point = 391
   Insn 197(l0): point = 393
   Insn 194(l0): point = 396
   Insn 193(l0): point = 398
   Insn 188(l0): point = 401
   Insn 187(l0): point = 403
   Insn 186(l0): point = 405
   Insn 185(l0): point = 408
   Insn 184(l0): point = 410
   Insn 183(l0): point = 412
   Insn 182(l0): point = 414
   Insn 181(l0): point = 416
   Insn 180(l0): point = 418
   Insn 179(l0): point = 420
   Insn 178(l0): point = 422
   Insn 177(l0): point = 424
   Insn 176(l0): point = 426
   Insn 175(l0): point = 428
   Insn 174(l0): point = 430
   Insn 173(l0): point = 432
   Insn 172(l0): point = 434
   Insn 171(l0): point = 436
   Insn 170(l0): point = 438
   Insn 169(l0): point = 440
   Insn 168(l0): point = 442
   Insn 167(l0): point = 444
   Insn 166(l0): point = 446
   Insn 165(l0): point = 448
   Insn 164(l0): point = 450
   Insn 163(l0): point = 452
   Insn 162(l0): point = 454
   Insn 161(l0): point = 456
   Insn 160(l0): point = 458
   Insn 159(l0): point = 460
   Insn 155(l0): point = 463
   Insn 154(l0): point = 465
   Insn 153(l0): point = 467
   Insn 152(l0): point = 469
   Insn 151(l0): point = 471
   Insn 150(l0): point = 473
   Insn 149(l0): point = 475
   Insn 148(l0): point = 477
   Insn 147(l0): point = 479
   Insn 146(l0): point = 481
   Insn 145(l0): point = 483
   Insn 144(l0): point = 485
   Insn 143(l0): point = 487
   Insn 142(l0): point = 489
   Insn 141(l0): point = 491
   Insn 140(l0): point = 493
   Insn 139(l0): point = 495
   Insn 138(l0): point = 497
   Insn 137(l0): point = 499
   Insn 136(l0): point = 501
   Insn 135(l0): point = 503
   Insn 134(l0): point = 505
   Insn 133(l0): point = 507
   Insn 132(l0): point = 509
   Insn 131(l0): point = 511
   Insn 130(l0): point = 513
   Insn 129(l0): point = 515
   Insn 128(l0): point = 517
   Insn 127(l0): point = 519
   Insn 126(l0): point = 521
   Insn 124(l0): point = 524
   Insn 123(l0): point = 526
   Insn 122(l0): point = 528
   Insn 121(l0): point = 530
   Insn 119(l0): point = 533
   Insn 118(l0): point = 535
   Insn 117(l0): point = 537
   Insn 116(l0): point = 539
   Insn 411(l0): point = 542
   Insn 111(l0): point = 544
   Insn 110(l0): point = 546
   Insn 109(l0): point = 548
   Insn 108(l0): point = 550
   Insn 107(l0): point = 552
   Insn 106(l0): point = 554
   Insn 105(l0): point = 556
   Insn 104(l0): point = 558
   Insn 103(l0): point = 560
   Insn 102(l0): point = 562
   Insn 101(l0): point = 564
   Insn 100(l0): point = 566
   Insn 99(l0): point = 568
   Insn 98(l0): point = 570
   Insn 97(l0): point = 572
   Insn 96(l0): point = 574
   Insn 95(l0): point = 576
   Insn 94(l0): point = 578
   Insn 93(l0): point = 580
   Insn 92(l0): point = 582
   Insn 91(l0): point = 584
   Insn 90(l0): point = 586
   Insn 89(l0): point = 588
   Insn 88(l0): point = 590
   Insn 87(l0): point = 592
   Insn 86(l0): point = 594
   Insn 85(l0): point = 596
   Insn 84(l0): point = 598
   Insn 83(l0): point = 600
   Insn 82(l0): point = 602
   Insn 81(l0): point = 604
   Insn 80(l0): point = 606
   Insn 79(l0): point = 608
   Insn 78(l0): point = 610
   Insn 77(l0): point = 612
   Insn 76(l0): point = 614
   Insn 75(l0): point = 616
   Insn 74(l0): point = 618
   Insn 73(l0): point = 620
   Insn 72(l0): point = 622
   Insn 71(l0): point = 624
   Insn 70(l0): point = 626
   Insn 69(l0): point = 628
   Insn 68(l0): point = 630
   Insn 67(l0): point = 632
   Insn 66(l0): point = 634
   Insn 65(l0): point = 636
   Insn 64(l0): point = 638
   Insn 63(l0): point = 640
   Insn 62(l0): point = 642
   Insn 61(l0): point = 644
   Insn 60(l0): point = 646
   Insn 59(l0): point = 648
   Insn 58(l0): point = 650
   Insn 57(l0): point = 652
   Insn 56(l0): point = 654
   Insn 55(l0): point = 656
   Insn 51(l0): point = 659
   Insn 50(l0): point = 661
   Insn 49(l0): point = 663
   Insn 48(l0): point = 665
   Insn 47(l0): point = 667
   Insn 46(l0): point = 669
   Insn 45(l0): point = 671
   Insn 44(l0): point = 673
   Insn 43(l0): point = 675
   Insn 42(l0): point = 677
   Insn 41(l0): point = 679
   Insn 40(l0): point = 681
   Insn 39(l0): point = 683
   Insn 38(l0): point = 685
   Insn 37(l0): point = 687
   Insn 36(l0): point = 689
   Insn 35(l0): point = 691
   Insn 34(l0): point = 693
   Insn 33(l0): point = 695
   Insn 32(l0): point = 697
   Insn 31(l0): point = 699
   Insn 30(l0): point = 701
   Insn 29(l0): point = 703
   Insn 28(l0): point = 705
   Insn 27(l0): point = 707
   Insn 26(l0): point = 709
   Insn 25(l0): point = 711
   Insn 24(l0): point = 713
   Insn 23(l0): point = 715
   Insn 22(l0): point = 717
   Insn 20(l0): point = 720
   Insn 19(l0): point = 722
   Insn 18(l0): point = 724
   Insn 17(l0): point = 726
   Insn 15(l0): point = 729
   Insn 14(l0): point = 731
   Insn 13(l0): point = 733
   Insn 12(l0): point = 735
   Insn 7(l0): point = 737
   Insn 6(l0): point = 739
   Insn 5(l0): point = 741
   Insn 4(l0): point = 743
   Insn 3(l0): point = 745
   Insn 2(l0): point = 747
 a0(r298): [10..11]
 a1(r297): [16..21]
 a2(r296): [18..23]
 a3(r295): [28..33]
 a4(r294): [38..39]
 a5(r293): [48..49]
 a6(r292): [55..56]
 a7(r167): [55..58]
 a8(r166): [59..60]
 a9(r291): [61..62]
 a10(r290): [65..66]
 a11(r165): [65..68]
 a12(r164): [69..70]
 a13(r163): [71..72]
 a14(r162): [73..74]
 a15(r289): [75..76]
 a16(r288): [79..80]
 a17(r161): [79..82]
 a18(r160): [83..84]
 a19(r159): [85..86]
 a20(r158): [87..88]
 a21(r287): [89..90]
 a22(r285): [93..94]
 a23(r157): [95..98]
 a24(r286): [95..96]
 a25(r156): [99..100]
 a26(r155): [101..102]
 a27(r284): [103..104]
 a28(r283): [107..108]
 a29(r154): [109..110]
 a30(r153): [109..112]
 a31(r176): [111..120]
 a32(r152): [113..114]
 a33(r151): [115..116]
 a34(r282): [117..118]
 a35(r175): [121..122]
 a36(r281): [123..124]
 a37(r280): [127..128]
 a38(r150): [127..130]
 a39(r149): [131..134]
 a40(r279): [131..132]
 a41(r278): [135..136]
 a42(r277): [139..140]
 a43(r148): [139..142]
 a44(r147): [143..146]
 a45(r276): [143..144]
 a46(r275): [147..148]
 a47(r274): [151..152]
 a48(r273): [155..156]
 a49(r272): [167..168]
 a50(r271): [173..178]
 a51(r270): [183..184]
 a52(r269): [193..194]
 a53(r144): [217..222]
 a54(r146): [217..218]
 a55(r145): [219..220]
 a56(r168): [316..316] [219..251]
 a57(r267): [223..226]
 a58(r268): [223..224]
 a59(r174): [317..318] [229..243]
 a60(r143): [232..233]
 a61(r142): [234..235]
 a62(r141): [234..239]
 a63(r140): [244..247]
 a64(r266): [244..245]
 a65(r265): [248..249]
 a66(r264): [254..255]
 a67(r139): [254..257]
 a68(r138): [258..259]
 a69(r137): [258..263]
 a70(r263): [260..261]
 a71(r262): [264..265]
 a72(r260): [268..269]
 a73(r136): [270..273]
 a74(r261): [270..271]
 a75(r135): [274..275]
 a76(r173): [274..281]
 a77(r259): [276..277]
 a78(r258): [276..279]
 a79(r172): [282..283]
 a80(r257): [284..285]
 a81(r256): [288..289]
 a82(r134): [290..291]
 a83(r133): [290..295]
 a84(r255): [292..293]
 a85(r132): [296..297]
 a86(r131): [298..299]
 a87(r128): [298..305]
 a88(r130): [300..301]
 a89(r129): [302..303]
 a90(r171): [304..309]
 a91(r254): [306..307]
 a92(r170): [310..311]
 a93(r253): [312..313]
 a94(r169): [203..204]
 a95(r252): [322..323]
 a96(r127): [322..325]
 a97(r126): [326..327]
 a98(r125): [328..329]
 a99(r124): [330..331]
 a100(r251): [332..333]
 a101(r250): [336..337]
 a102(r123): [338..339]
 a103(r122): [340..341]
 a104(r249): [342..343]
 a105(r121): [342..345]
 a106(r120): [346..347]
 a107(r119): [348..349]
 a108(r248): [350..351]
 a109(r247): [354..355]
 a110(r118): [356..357]
 a111(r117): [358..359]
 a112(r116): [358..363]
 a113(r246): [360..361]
 a114(r115): [364..365]
 a115(r245): [366..367]
 a116(r114): [366..369]
 a117(r113): [370..371]
 a118(r244): [372..373]
 a119(r242): [376..377]
 a120(r243): [378..379]
 a121(r112): [378..381]
 a122(r111): [382..383]
 a123(r240): [386..387]
 a124(r241): [388..389]
 a125(r110): [388..391]
 a126(r109): [392..393]
 a127(r239): [397..398]
 a128(r238): [404..405]
 a129(r237): [411..412]
 a130(r236): [415..416]
 a131(r235): [417..418]
 a132(r234): [421..422]
 a133(r233): [423..424]
 a134(r232): [427..428]
 a135(r231): [429..430]
 a136(r230): [433..434]
 a137(r229): [435..436]
 a138(r228): [439..440]
 a139(r227): [441..442]
 a140(r226): [445..446]
 a141(r225): [447..448]
 a142(r224): [451..452]
 a143(r223): [453..454]
 a144(r222): [457..458]
 a145(r221): [459..460]
 a146(r220): [472..473]
 a147(r219): [478..483]
 a148(r218): [480..485]
 a149(r217): [490..495]
 a150(r216): [500..505]
 a151(r215): [510..511]
 a152(r214): [520..521]
 a153(r108): [527..528]
 a154(r213): [529..530]
 a155(r107): [536..537]
 a156(r212): [538..539]
 a157(r211): [545..546]
 a158(r106): [545..548]
 a159(r105): [549..550]
 a160(r210): [551..552]
 a161(r209): [555..556]
 a162(r104): [555..558]
 a163(r103): [559..560]
 a164(r208): [561..562]
 a165(r207): [565..566]
 a166(r102): [565..568]
 a167(r101): [569..570]
 a168(r100): [571..572]
 a169(r99): [573..574]
 a170(r206): [575..576]
 a171(r205): [579..580]
 a172(r98): [579..582]
 a173(r204): [583..584]
 a174(r203): [587..588]
 a175(r97): [587..590]
 a176(r96): [591..594]
 a177(r202): [591..592]
 a178(r201): [595..596]
 a179(r200): [599..600]
 a180(r95): [599..602]
 a181(r94): [603..604]
 a182(r93): [605..606]
 a183(r92): [607..608]
 a184(r199): [609..610]
 a185(r197): [613..614]
 a186(r198): [615..616]
 a187(r196): [619..620]
 a188(r91): [621..622]
 a189(r195): [623..624]
 a190(r194): [627..628]
 a191(r192): [631..632]
 a192(r193): [633..634]
 a193(r90): [633..636]
 a194(r89): [637..638]
 a195(r191): [641..642]
 a196(r190): [643..644]
 a197(r189): [647..648]
 a198(r188): [649..650]
 a199(r187): [653..654]
 a200(r186): [655..656]
 a201(r185): [668..669]
 a202(r184): [674..679]
 a203(r183): [676..681]
 a204(r182): [686..691]
 a205(r181): [696..701]
 a206(r180): [706..707]
 a207(r179): [716..717]
 a208(r88): [723..724]
 a209(r178): [725..726]
 a210(r87): [732..733]
 a211(r177): [734..735]
Compressing live ranges: from 750 to 349 - 46%
Ranges after the compression:
 a0(r298): [0..1]
 a1(r297): [2..3]
 a2(r296): [2..3]
 a3(r295): [4..5]
 a4(r294): [6..7]
 a5(r293): [8..9]
 a6(r292): [10..11]
 a7(r167): [10..11]
 a8(r166): [12..13]
 a9(r291): [14..15]
 a10(r290): [16..17]
 a11(r165): [16..17]
 a12(r164): [18..19]
 a13(r163): [20..21]
 a14(r162): [22..23]
 a15(r289): [24..25]
 a16(r288): [26..27]
 a17(r161): [26..27]
 a18(r160): [28..29]
 a19(r159): [30..31]
 a20(r158): [32..33]
 a21(r287): [34..35]
 a22(r285): [36..37]
 a23(r157): [38..39]
 a24(r286): [38..39]
 a25(r156): [40..41]
 a26(r155): [42..43]
 a27(r284): [44..45]
 a28(r283): [46..47]
 a29(r154): [48..49]
 a30(r153): [48..51]
 a31(r176): [50..57]
 a32(r152): [52..53]
 a33(r151): [54..55]
 a34(r282): [56..57]
 a35(r175): [58..59]
 a36(r281): [60..61]
 a37(r280): [62..63]
 a38(r150): [62..63]
 a39(r149): [64..65]
 a40(r279): [64..65]
 a41(r278): [66..67]
 a42(r277): [68..69]
 a43(r148): [68..69]
 a44(r147): [70..71]
 a45(r276): [70..71]
 a46(r275): [72..73]
 a47(r274): [74..75]
 a48(r273): [76..77]
 a49(r272): [78..79]
 a50(r271): [80..81]
 a51(r270): [82..83]
 a52(r269): [84..85]
 a53(r144): [88..91]
 a54(r146): [88..89]
 a55(r145): [90..91]
 a56(r168): [144..144] [90..101]
 a57(r267): [92..93]
 a58(r268): [92..93]
 a59(r174): [145..146] [94..97]
 a60(r143): [94..95]
 a61(r142): [96..97]
 a62(r141): [96..97]
 a63(r140): [98..99]
 a64(r266): [98..99]
 a65(r265): [100..101]
 a66(r264): [102..103]
 a67(r139): [102..103]
 a68(r138): [104..105]
 a69(r137): [104..107]
 a70(r263): [106..107]
 a71(r262): [108..109]
 a72(r260): [110..111]
 a73(r136): [112..113]
 a74(r261): [112..113]
 a75(r135): [114..115]
 a76(r173): [114..117]
 a77(r259): [116..117]
 a78(r258): [116..117]
 a79(r172): [118..119]
 a80(r257): [120..121]
 a81(r256): [122..123]
 a82(r134): [124..125]
 a83(r133): [124..127]
 a84(r255): [126..127]
 a85(r132): [128..129]
 a86(r131): [130..131]
 a87(r128): [130..137]
 a88(r130): [132..133]
 a89(r129): [134..135]
 a90(r171): [136..139]
 a91(r254): [138..139]
 a92(r170): [140..141]
 a93(r253): [142..143]
 a94(r169): [86..87]
 a95(r252): [147..148]
 a96(r127): [147..148]
 a97(r126): [149..150]
 a98(r125): [151..152]
 a99(r124): [153..154]
 a100(r251): [155..156]
 a101(r250): [157..158]
 a102(r123): [159..160]
 a103(r122): [161..162]
 a104(r249): [163..164]
 a105(r121): [163..164]
 a106(r120): [165..166]
 a107(r119): [167..168]
 a108(r248): [169..170]
 a109(r247): [171..172]
 a110(r118): [173..174]
 a111(r117): [175..176]
 a112(r116): [175..178]
 a113(r246): [177..178]
 a114(r115): [179..180]
 a115(r245): [181..182]
 a116(r114): [181..182]
 a117(r113): [183..184]
 a118(r244): [185..186]
 a119(r242): [187..188]
 a120(r243): [189..190]
 a121(r112): [189..190]
 a122(r111): [191..192]
 a123(r240): [193..194]
 a124(r241): [195..196]
 a125(r110): [195..196]
 a126(r109): [197..198]
 a127(r239): [199..200]
 a128(r238): [201..202]
 a129(r237): [203..204]
 a130(r236): [205..206]
 a131(r235): [207..208]
 a132(r234): [209..210]
 a133(r233): [211..212]
 a134(r232): [213..214]
 a135(r231): [215..216]
 a136(r230): [217..218]
 a137(r229): [219..220]
 a138(r228): [221..222]
 a139(r227): [223..224]
 a140(r226): [225..226]
 a141(r225): [227..228]
 a142(r224): [229..230]
 a143(r223): [231..232]
 a144(r222): [233..234]
 a145(r221): [235..236]
 a146(r220): [237..238]
 a147(r219): [239..240]
 a148(r218): [239..240]
 a149(r217): [241..242]
 a150(r216): [243..244]
 a151(r215): [245..246]
 a152(r214): [247..248]
 a153(r108): [249..250]
 a154(r213): [251..252]
 a155(r107): [253..254]
 a156(r212): [255..256]
 a157(r211): [257..258]
 a158(r106): [257..258]
 a159(r105): [259..260]
 a160(r210): [261..262]
 a161(r209): [263..264]
 a162(r104): [263..264]
 a163(r103): [265..266]
 a164(r208): [267..268]
 a165(r207): [269..270]
 a166(r102): [269..270]
 a167(r101): [271..272]
 a168(r100): [273..274]
 a169(r99): [275..276]
 a170(r206): [277..278]
 a171(r205): [279..280]
 a172(r98): [279..280]
 a173(r204): [281..282]
 a174(r203): [283..284]
 a175(r97): [283..284]
 a176(r96): [285..286]
 a177(r202): [285..286]
 a178(r201): [287..288]
 a179(r200): [289..290]
 a180(r95): [289..290]
 a181(r94): [291..292]
 a182(r93): [293..294]
 a183(r92): [295..296]
 a184(r199): [297..298]
 a185(r197): [299..300]
 a186(r198): [301..302]
 a187(r196): [303..304]
 a188(r91): [305..306]
 a189(r195): [307..308]
 a190(r194): [309..310]
 a191(r192): [311..312]
 a192(r193): [313..314]
 a193(r90): [313..314]
 a194(r89): [315..316]
 a195(r191): [317..318]
 a196(r190): [319..320]
 a197(r189): [321..322]
 a198(r188): [323..324]
 a199(r187): [325..326]
 a200(r186): [327..328]
 a201(r185): [329..330]
 a202(r184): [331..332]
 a203(r183): [331..332]
 a204(r182): [333..334]
 a205(r181): [335..336]
 a206(r180): [337..338]
 a207(r179): [339..340]
 a208(r88): [341..342]
 a209(r178): [343..344]
 a210(r87): [345..346]
 a211(r177): [347..348]
  regions=1, blocks=24, points=349
    allocnos=212 (big 0), copies=0, conflicts=0, ranges=214
Disposition:
  210:r87  l0     0  208:r88  l0     0  194:r89  l0    21  193:r90  l0    21
  188:r91  l0    21  183:r92  l0    21  182:r93  l0    21  181:r94  l0    21
  180:r95  l0    21  176:r96  l0    21  175:r97  l0    21  172:r98  l0    21
  169:r99  l0    21  168:r100 l0    21  167:r101 l0    21  166:r102 l0    21
  163:r103 l0    21  162:r104 l0    21  159:r105 l0    21  158:r106 l0    21
  155:r107 l0     0  153:r108 l0     0  126:r109 l0    21  125:r110 l0    21
  122:r111 l0    21  121:r112 l0    21  117:r113 l0    21  116:r114 l0    21
  114:r115 l0    21  112:r116 l0    22  111:r117 l0    21  110:r118 l0    21
  107:r119 l0    21  106:r120 l0    21  105:r121 l0    21  103:r122 l0    21
  102:r123 l0    21   99:r124 l0    21   98:r125 l0    21   97:r126 l0    21
   96:r127 l0    21   87:r128 l0    22   89:r129 l0    21   88:r130 l0    21
   86:r131 l0    21   85:r132 l0    21   83:r133 l0    21   82:r134 l0    22
   75:r135 l0    21   73:r136 l0    21   69:r137 l0    22   68:r138 l0    21
   67:r139 l0    21   63:r140 l0    23   62:r141 l0     1   61:r142 l0     0
   60:r143 l0     0   53:r144 l0    22   55:r145 l0    23   54:r146 l0    21
   44:r147 l0    21   43:r148 l0    21   39:r149 l0    21   38:r150 l0    21
   33:r151 l0    22   32:r152 l0    22   30:r153 l0    22   29:r154 l0    21
   26:r155 l0    21   25:r156 l0    21   23:r157 l0    21   20:r158 l0    21
   19:r159 l0    21   18:r160 l0    21   17:r161 l0    21   14:r162 l0    21
   13:r163 l0    21   12:r164 l0    21   11:r165 l0    21    8:r166 l0    21
    7:r167 l0    21   56:r168 l0    21   94:r169 l0     0   92:r170 l0    21
   90:r171 l0    21   79:r172 l0    21   76:r173 l0    22   59:r174 l0    22
   35:r175 l0    21   31:r176 l0    21  211:r177 l0     0  209:r178 l0     0
  207:r179 l0     0  206:r180 l0     0  205:r181 l0     0  204:r182 l0     0
  203:r183 l0     2  202:r184 l0     0  201:r185 l0     0  200:r186 l0     0
  199:r187 l0    21  198:r188 l0     0  197:r189 l0    21  196:r190 l0     0
  195:r191 l0    21  191:r192 l0    21  192:r193 l0    22  190:r194 l0    21
  189:r195 l0     0  187:r196 l0    21  185:r197 l0    21  186:r198 l0    21
  184:r199 l0     0  179:r200 l0     0  178:r201 l0    21  177:r202 l0    22
  174:r203 l0     0  173:r204 l0    21  171:r205 l0     0  170:r206 l0     0
  165:r207 l0     0  164:r208 l0     0  161:r209 l0     0  160:r210 l0     0
  157:r211 l0     0  156:r212 l0     0  154:r213 l0     0  152:r214 l0     0
  151:r215 l0     0  150:r216 l0     0  149:r217 l0     0  148:r218 l0     2
  147:r219 l0     0  146:r220 l0     0  145:r221 l0     0  144:r222 l0    21
  143:r223 l0     0  142:r224 l0    21  141:r225 l0     0  140:r226 l0    21
  139:r227 l0     0  138:r228 l0    21  137:r229 l0     0  136:r230 l0    21
  135:r231 l0     0  134:r232 l0    21  133:r233 l0     0  132:r234 l0    21
  131:r235 l0     0  130:r236 l0    21  129:r237 l0    21  128:r238 l0    21
  127:r239 l0    21  123:r240 l0    21  124:r241 l0    22  119:r242 l0    21
  120:r243 l0    22  118:r244 l0     0  115:r245 l0    22  113:r246 l0     0
  109:r247 l0    21  108:r248 l0     0  104:r249 l0    22  101:r250 l0    21
  100:r251 l0     0   95:r252 l0     0   93:r253 l0     0   91:r254 l0     0
   84:r255 l0     0   81:r256 l0    21   80:r257 l0     0   78:r258 l0    23
   77:r259 l0    21   72:r260 l0    21   74:r261 l0    22   71:r262 l0     0
   70:r263 l0    21   66:r264 l0     0   65:r265 l0     0   64:r266 l0    22
   57:r267 l0    23   58:r268 l0    22   52:r269 l0     0   51:r270 l0     0
   50:r271 l0     0   49:r272 l0     0   48:r273 l0    21   47:r274 l0    21
   46:r275 l0    21   45:r276 l0    22   42:r277 l0     0   41:r278 l0    21
   40:r279 l0    22   37:r280 l0     0   36:r281 l0     0   34:r282 l0     0
   28:r283 l0    21   27:r284 l0     0   22:r285 l0    21   24:r286 l0    22
   21:r287 l0     0   16:r288 l0     0   15:r289 l0     0   10:r290 l0     0
    9:r291 l0     0    6:r292 l0     0    5:r293 l0     0    4:r294 l0     0
    3:r295 l0     0    2:r296 l0     2    1:r297 l0     0    0:r298 l0     0
+++Costs: overall -20, reg -20, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


motorq

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={21d} r1={30d,10u} r2={21d,1u} r4={33d,13u} r5={41d,21u} r6={1d,23u} r7={1d,43u} r8={20d} r9={20d} r10={20d} r11={20d} r12={20d} r13={20d} r14={20d} r15={20d} r16={1d,43u} r17={56d,12u} r18={20d} r19={20d} r20={1d,170u} r21={21d} r22={21d} r23={21d} r24={21d} r25={21d} r26={21d} r27={21d} r28={21d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={21d,1u} r38={21d,1u} r39={20d} r40={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u,1e} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,2u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u,1e} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u,1e} r148={1d,1u} r149={1d,1u,1e} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,2u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={2d,4u} r169={1d,1u} r170={1d,2u} r171={1d,1u} r172={1d,2u} r173={1d,1u} r174={1d,2u} r175={1d,2u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u,1e} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} 
;;    total ref usage 2313{1749d,559u,5e} in 364{344 regular + 20 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 87 177
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])
        (reg:DI 5 di [ omega ])) "../src/motor.f":21 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ omega ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])
        (reg:DI 4 si [ volt ])) "../src/motor.f":21 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ volt ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])
        (reg:DI 1 dx [ imotype ])) "../src/motor.f":21 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ imotype ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])
        (reg:DI 2 cx [ parmot ])) "../src/motor.f":21 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ parmot ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])
        (reg:DI 37 r8 [ nmpar ])) "../src/motor.f":21 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ nmpar ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 q+0 S8 A64])
        (reg:DI 38 r9 [ q ])) "../src/motor.f":21 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ q ])
        (nil)))
(note 8 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 8 13 2 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":49 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 177) [1 *imotype_91(D)+0 S4 A32])) "../src/motor.f":49 82 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 1 [0x1]))) "../src/motor.f":49 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) "../src/motor.f":49 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 114)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 178
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])) "../src/motor.f":51 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 88 [ _2 ])
        (mem:SI (reg/f:DI 178) [1 *nmpar_102(D)+0 S4 A32])) "../src/motor.f":51 82 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (nil)))
(insn 19 18 20 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88 [ _2 ])
            (const_int 2 [0x2]))) "../src/motor.f":51 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "../src/motor.f":51 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 53)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 179 180 181 182 183 184 185
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 179)
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.0.common.filename+0 S8 A64])
        (reg/f:DI 179)) "../src/motor.f":53 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 24 23 25 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.0.common.line+0 S4 A64])
        (const_int 53 [0x35])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.0.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.0.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 180)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg:DI 180)) "../src/motor.f":53 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 180)
        (nil)))
(call_insn 29 28 30 4 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 181)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":52 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 4 (set (reg:SI 1 dx)
        (const_int 43 [0x2b])) "../src/motor.f":52 82 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC1") [flags 0x2]  <var_decl 0x1427fba20 *lC1>)) "../src/motor.f":52 81 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 181)) "../src/motor.f":52 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 181)
        (nil)))
(call_insn 34 33 35 4 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":52 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 182)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 36 35 37 4 (set (reg:SI 1 dx)
        (const_int 19 [0x13])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC2") [flags 0x2]  <var_decl 0x1427fbab0 *lC2>)) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 5 di)
        (reg:DI 182)) "../src/motor.f":53 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 182)
        (nil)))
(call_insn 39 38 40 4 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 40 39 41 4 (set (reg:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":53 81 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 184)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 42 41 43 4 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":53 82 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 4 si)
        (reg:DI 183)) "../src/motor.f":53 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 183)
        (nil)))
(insn 44 43 45 4 (set (reg:DI 5 di)
        (reg:DI 184)) "../src/motor.f":53 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 184)
        (nil)))
(call_insn 45 44 46 4 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_integer_write") [flags 0x41]  <function_decl 0x1427d4500 _gfortran_transfer_integer_write>) [0 _gfortran_transfer_integer_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 185)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":53 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (reg:DI 185)) "../src/motor.f":53 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 185)
        (nil)))
(call_insn 48 47 49 4 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":53 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 4 (set (reg:SI 4 si)
        (const_int 0 [0])) "../src/motor.f":54 82 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 5 di)
        (const_int 0 [0])) "../src/motor.f":54 81 {*movdi_internal}
     (nil))
(call_insn 51 50 52 4 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/motor.f":54 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 53)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211
(code_label 53 52 54 5 3 (nil) [1 uses])
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 5 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":57 81 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:SF 187)
        (mem:SF (reg/f:DI 186) [2 *parmot_103(D)+0 S4 A32])) "../src/motor.f":57 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (nil)))
(insn 57 56 58 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32])
        (reg:SF 187)) "../src/motor.f":57 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 187)
        (nil)))
(insn 58 57 59 5 (set (reg/f:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":58 81 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:SF 189)
        (mem:SF (plus:DI (reg/f:DI 188)
                (const_int 4 [0x4])) [2 *parmot_103(D)+4 S4 A32])) "../src/motor.f":58 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 188)
        (nil)))
(insn 60 59 61 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32])
        (reg:SF 189)) "../src/motor.f":58 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 189)
        (nil)))
(insn 61 60 62 5 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":59 81 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:SF 191)
        (mem:SF (plus:DI (reg/f:DI 190)
                (const_int 8 [0x8])) [2 *parmot_103(D)+8 S4 A32])) "../src/motor.f":59 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 63 62 64 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32])
        (reg:SF 191)) "../src/motor.f":59 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 191)
        (nil)))
(insn 64 63 65 5 (set (reg:SF 89 [ pi.7_3 ])
        (mem/c:SF (symbol_ref:DI ("pi.3519") [flags 0x1c02]  <var_decl 0x142004f30 pi>) [2 pi+0 S4 A32])) "../src/motor.f":61 127 {*movsf_internal}
     (nil))
(insn 65 64 66 5 (set (reg:SF 90 [ _4 ])
        (mult:SF (reg:SF 89 [ pi.7_3 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":61 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 89 [ pi.7_3 ])
        (nil)))
(insn 66 65 67 5 (set (reg:SF 193)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":61 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 67 66 68 5 (set (reg:SF 192)
        (div:SF (reg:SF 90 [ _4 ])
            (reg:SF 193))) "../src/motor.f":61 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 193)
        (expr_list:REG_DEAD (reg:SF 90 [ _4 ])
            (nil))))
(insn 68 67 69 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32])
        (reg:SF 192)) "../src/motor.f":61 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 192)
        (nil)))
(insn 69 68 70 5 (set (reg:SF 194)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32])) "../src/motor.f":62 127 {*movsf_internal}
     (nil))
(insn 70 69 71 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32])
        (reg:SF 194)) "../src/motor.f":62 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 194)
        (nil)))
(insn 71 70 72 5 (set (reg/f:DI 195)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":64 81 {*movdi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:SF 91 [ _5 ])
        (mem:SF (reg/f:DI 195) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":64 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 195)
        (nil)))
(insn 73 72 74 5 (set (reg:SF 196)
        (div:SF (reg:SF 91 [ _5 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":64 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 91 [ _5 ])
        (nil)))
(insn 74 73 75 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32])
        (reg:SF 196)) "../src/motor.f":64 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 196)
        (nil)))
(insn 75 74 76 5 (set (reg:SF 198)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":65 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 76 75 77 5 (set (reg:SF 197)
        (div:SF (reg:SF 198)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":65 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 198)
        (nil)))
(insn 77 76 78 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])
        (reg:SF 197)) "../src/motor.f":65 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 197)
        (nil)))
(insn 78 77 79 5 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":67 81 {*movdi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:SF 92 [ _6 ])
        (mem:SF (reg/f:DI 199) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":67 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (nil)))
(insn 80 79 81 5 (set (reg:SF 93 [ _7 ])
        (minus:SF (reg:SF 92 [ _6 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32]))) "../src/motor.f":67 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 92 [ _6 ])
        (nil)))
(insn 81 80 82 5 (set (reg:SF 94 [ _8 ])
        (reg:SF 93 [ _7 ])) "../src/motor.f":67 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 93 [ _7 ])
        (nil)))
(insn 82 81 83 5 (set (reg:SF 95 [ _9 ])
        (div:SF (reg:SF 94 [ _8 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32]))) "../src/motor.f":67 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 94 [ _8 ])
        (nil)))
(insn 83 82 84 5 (set (reg/f:DI 200)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":67 81 {*movdi_internal}
     (nil))
(insn 84 83 85 5 (set (mem:SF (reg/f:DI 200) [2 *i_119(D)+0 S4 A32])
        (reg:SF 95 [ _9 ])) "../src/motor.f":67 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 200)
        (expr_list:REG_DEAD (reg:SF 95 [ _9 ])
            (nil))))
(insn 85 84 86 5 (set (reg:SF 201)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])) "../src/motor.f":68 127 {*movsf_internal}
     (nil))
(insn 86 85 87 5 (set (reg:SF 96 [ _10 ])
        (div:SF (reg:SF 201)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32]))) "../src/motor.f":68 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 201)
        (nil)))
(insn 87 86 88 5 (set (reg:V4SF 202)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":68 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 88 87 89 5 (parallel [
            (set (reg:SF 97 [ _11 ])
                (neg:SF (reg:SF 96 [ _10 ])))
            (use (reg:V4SF 202))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":68 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 202)
        (expr_list:REG_DEAD (reg:SF 96 [ _10 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 96 [ _10 ]))
                    (nil))))))
(insn 89 88 90 5 (set (reg/f:DI 203)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [10 i_omega+0 S8 A64])) "../src/motor.f":68 81 {*movdi_internal}
     (nil))
(insn 90 89 91 5 (set (mem:SF (reg/f:DI 203) [2 *i_omega_145(D)+0 S4 A32])
        (reg:SF 97 [ _11 ])) "../src/motor.f":68 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 203)
        (expr_list:REG_DEAD (reg:SF 97 [ _11 ])
            (nil))))
(insn 91 90 92 5 (set (reg:SF 204)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":69 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 92 91 93 5 (set (reg:SF 98 [ _12 ])
        (div:SF (reg:SF 204)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [2 rmotor+0 S4 A32]))) "../src/motor.f":69 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 204)
        (nil)))
(insn 93 92 94 5 (set (reg/f:DI 205)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [10 i_volt+0 S8 A64])) "../src/motor.f":69 81 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (set (mem:SF (reg/f:DI 205) [2 *i_volt_147(D)+0 S4 A32])
        (reg:SF 98 [ _12 ])) "../src/motor.f":69 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 205)
        (expr_list:REG_DEAD (reg:SF 98 [ _12 ])
            (nil))))
(insn 95 94 96 5 (set (reg/f:DI 206)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":71 81 {*movdi_internal}
     (nil))
(insn 96 95 97 5 (set (reg:SF 99 [ _13 ])
        (mem:SF (reg/f:DI 206) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":71 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 206)
        (nil)))
(insn 97 96 98 5 (set (reg:SF 100 [ _14 ])
        (minus:SF (reg:SF 99 [ _13 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32]))) "../src/motor.f":71 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 99 [ _13 ])
        (nil)))
(insn 98 97 99 5 (set (reg:SF 101 [ _15 ])
        (reg:SF 100 [ _14 ])) "../src/motor.f":71 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 100 [ _14 ])
        (nil)))
(insn 99 98 100 5 (set (reg:SF 102 [ _16 ])
        (div:SF (reg:SF 101 [ _15 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":71 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 101 [ _15 ])
        (nil)))
(insn 100 99 101 5 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 q+0 S8 A64])) "../src/motor.f":71 81 {*movdi_internal}
     (nil))
(insn 101 100 102 5 (set (mem:SF (reg/f:DI 207) [2 *q_153(D)+0 S4 A32])
        (reg:SF 102 [ _16 ])) "../src/motor.f":71 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (expr_list:REG_DEAD (reg:SF 102 [ _16 ])
            (nil))))
(insn 102 101 103 5 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [10 i_omega+0 S8 A64])) "../src/motor.f":72 81 {*movdi_internal}
     (nil))
(insn 103 102 104 5 (set (reg:SF 103 [ _17 ])
        (mem:SF (reg/f:DI 208) [2 *i_omega_145(D)+0 S4 A32])) "../src/motor.f":72 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (nil)))
(insn 104 103 105 5 (set (reg:SF 104 [ _18 ])
        (div:SF (reg:SF 103 [ _17 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":72 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 103 [ _17 ])
        (nil)))
(insn 105 104 106 5 (set (reg/f:DI 209)
        (mem/f/c:DI (reg/f:DI 16 argp) [10 q_omega+0 S8 A64])) "../src/motor.f":72 81 {*movdi_internal}
     (nil))
(insn 106 105 107 5 (set (mem:SF (reg/f:DI 209) [2 *q_omega_155(D)+0 S4 A32])
        (reg:SF 104 [ _18 ])) "../src/motor.f":72 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 209)
        (expr_list:REG_DEAD (reg:SF 104 [ _18 ])
            (nil))))
(insn 107 106 108 5 (set (reg/f:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [10 i_volt+0 S8 A64])) "../src/motor.f":73 81 {*movdi_internal}
     (nil))
(insn 108 107 109 5 (set (reg:SF 105 [ _19 ])
        (mem:SF (reg/f:DI 210) [2 *i_volt_147(D)+0 S4 A32])) "../src/motor.f":73 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 210)
        (nil)))
(insn 109 108 110 5 (set (reg:SF 106 [ _20 ])
        (div:SF (reg:SF 105 [ _19 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":73 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 105 [ _19 ])
        (nil)))
(insn 110 109 111 5 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [10 q_volt+0 S8 A64])) "../src/motor.f":73 81 {*movdi_internal}
     (nil))
(insn 111 110 411 5 (set (mem:SF (reg/f:DI 211) [2 *q_volt_157(D)+0 S4 A32])
        (reg:SF 106 [ _20 ])) "../src/motor.f":73 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (expr_list:REG_DEAD (reg:SF 106 [ _20 ])
            (nil))))
(jump_insn 411 111 412 5 (set (pc)
        (label_ref 405)) "../src/motor.f":128 649 {jump}
     (nil)
 -> 405)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 412 411 114)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       2
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 212
(code_label 114 412 115 6 2 (nil) [1 uses])
(note 115 114 116 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 6 (set (reg/f:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":75 81 {*movdi_internal}
     (nil))
(insn 117 116 118 6 (set (reg:SI 107 [ _21 ])
        (mem:SI (reg/f:DI 212) [1 *imotype_91(D)+0 S4 A32])) "../src/motor.f":75 82 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 212)
        (nil)))
(insn 118 117 119 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 107 [ _21 ])
            (const_int 2 [0x2]))) "../src/motor.f":75 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 107 [ _21 ])
        (nil)))
(jump_insn 119 118 120 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 373)
            (pc))) "../src/motor.f":75 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 373)
;;  succ:       7 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 213
(note 120 119 121 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 7 (set (reg/f:DI 213)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])) "../src/motor.f":77 81 {*movdi_internal}
     (nil))
(insn 122 121 123 7 (set (reg:SI 108 [ _22 ])
        (mem:SI (reg/f:DI 213) [1 *nmpar_102(D)+0 S4 A32])) "../src/motor.f":77 82 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 213)
        (nil)))
(insn 123 122 124 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 108 [ _22 ])
            (const_int 2 [0x2]))) "../src/motor.f":77 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 108 [ _22 ])
        (nil)))
(jump_insn 124 123 125 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 157)
            (pc))) "../src/motor.f":77 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 157)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 214 215 216 217 218 219 220
(note 125 124 126 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 8 (set (reg/f:DI 214)
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 127 126 128 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.1.common.filename+0 S8 A64])
        (reg/f:DI 214)) "../src/motor.f":79 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 214)
        (nil)))
(insn 128 127 129 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.1.common.line+0 S4 A64])
        (const_int 79 [0x4f])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 129 128 130 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.1.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 130 129 131 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.1.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 131 130 132 8 (parallel [
            (set (reg:DI 215)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 132 131 133 8 (set (reg:DI 5 di)
        (reg:DI 215)) "../src/motor.f":79 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 215)
        (nil)))
(call_insn 133 132 134 8 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 134 133 135 8 (parallel [
            (set (reg:DI 216)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":78 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 135 134 136 8 (set (reg:SI 1 dx)
        (const_int 50 [0x32])) "../src/motor.f":78 82 {*movsi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC6") [flags 0x2]  <var_decl 0x1427fbb40 *lC6>)) "../src/motor.f":78 81 {*movdi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:DI 5 di)
        (reg:DI 216)) "../src/motor.f":78 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 216)
        (nil)))
(call_insn 138 137 139 8 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":78 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 217)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 140 139 141 8 (set (reg:SI 1 dx)
        (const_int 19 [0x13])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 141 140 142 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC2") [flags 0x2]  <var_decl 0x1427fbab0 *lC2>)) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 142 141 143 8 (set (reg:DI 5 di)
        (reg:DI 217)) "../src/motor.f":79 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 217)
        (nil)))
(call_insn 143 142 144 8 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 144 143 145 8 (set (reg:DI 218)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":79 81 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (parallel [
            (set (reg:DI 219)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 146 145 147 8 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":79 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 4 si)
        (reg:DI 218)) "../src/motor.f":79 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 218)
        (nil)))
(insn 148 147 149 8 (set (reg:DI 5 di)
        (reg:DI 219)) "../src/motor.f":79 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 219)
        (nil)))
(call_insn 149 148 150 8 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_integer_write") [flags 0x41]  <function_decl 0x1427d4500 _gfortran_transfer_integer_write>) [0 _gfortran_transfer_integer_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 150 149 151 8 (parallel [
            (set (reg:DI 220)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":79 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 151 150 152 8 (set (reg:DI 5 di)
        (reg:DI 220)) "../src/motor.f":79 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 220)
        (nil)))
(call_insn 152 151 153 8 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":79 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 152 154 8 (set (reg:SI 4 si)
        (const_int 0 [0])) "../src/motor.f":80 82 {*movsi_internal}
     (nil))
(insn 154 153 155 8 (set (reg:DI 5 di)
        (const_int 0 [0])) "../src/motor.f":80 81 {*movdi_internal}
     (nil))
(call_insn 155 154 156 8 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/motor.f":80 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 156 155 157)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237
(code_label 157 156 158 9 6 (nil) [1 uses])
(note 158 157 159 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 9 (set (reg/f:DI 221)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":83 81 {*movdi_internal}
     (nil))
(insn 160 159 161 9 (set (reg:SF 222)
        (mem:SF (reg/f:DI 221) [2 *parmot_103(D)+0 S4 A32])) "../src/motor.f":83 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 221)
        (nil)))
(insn 161 160 162 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32])
        (reg:SF 222)) "../src/motor.f":83 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 222)
        (nil)))
(insn 162 161 163 9 (set (reg/f:DI 223)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":84 81 {*movdi_internal}
     (nil))
(insn 163 162 164 9 (set (reg:SF 224)
        (mem:SF (plus:DI (reg/f:DI 223)
                (const_int 4 [0x4])) [2 *parmot_103(D)+4 S4 A32])) "../src/motor.f":84 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 223)
        (nil)))
(insn 164 163 165 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [2 zloadi0+0 S4 A32])
        (reg:SF 224)) "../src/motor.f":84 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 224)
        (nil)))
(insn 165 164 166 9 (set (reg/f:DI 225)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":85 81 {*movdi_internal}
     (nil))
(insn 166 165 167 9 (set (reg:SF 226)
        (mem:SF (plus:DI (reg/f:DI 225)
                (const_int 8 [0x8])) [2 *parmot_103(D)+8 S4 A32])) "../src/motor.f":85 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 225)
        (nil)))
(insn 167 166 168 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32])
        (reg:SF 226)) "../src/motor.f":85 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 226)
        (nil)))
(insn 168 167 169 9 (set (reg/f:DI 227)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":86 81 {*movdi_internal}
     (nil))
(insn 169 168 170 9 (set (reg:SF 228)
        (mem:SF (plus:DI (reg/f:DI 227)
                (const_int 12 [0xc])) [2 *parmot_103(D)+12 S4 A32])) "../src/motor.f":86 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 227)
        (nil)))
(insn 170 169 171 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32])
        (reg:SF 228)) "../src/motor.f":86 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 228)
        (nil)))
(insn 171 170 172 9 (set (reg/f:DI 229)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":87 81 {*movdi_internal}
     (nil))
(insn 172 171 173 9 (set (reg:SF 230)
        (mem:SF (plus:DI (reg/f:DI 229)
                (const_int 16 [0x10])) [2 *parmot_103(D)+16 S4 A32])) "../src/motor.f":87 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 229)
        (nil)))
(insn 173 172 174 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 tau+0 S4 A32])
        (reg:SF 230)) "../src/motor.f":87 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 230)
        (nil)))
(insn 174 173 175 9 (set (reg/f:DI 231)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":88 81 {*movdi_internal}
     (nil))
(insn 175 174 176 9 (set (reg:SF 232)
        (mem:SF (plus:DI (reg/f:DI 231)
                (const_int 20 [0x14])) [2 *parmot_103(D)+20 S4 A32])) "../src/motor.f":88 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 231)
        (nil)))
(insn 176 175 177 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 zloadi1+0 S4 A32])
        (reg:SF 232)) "../src/motor.f":88 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 232)
        (nil)))
(insn 177 176 178 9 (set (reg/f:DI 233)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":89 81 {*movdi_internal}
     (nil))
(insn 178 177 179 9 (set (reg:SF 234)
        (mem:SF (plus:DI (reg/f:DI 233)
                (const_int 24 [0x18])) [2 *parmot_103(D)+24 S4 A32])) "../src/motor.f":89 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 233)
        (nil)))
(insn 179 178 180 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 zloadi2+0 S4 A32])
        (reg:SF 234)) "../src/motor.f":89 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 234)
        (nil)))
(insn 180 179 181 9 (set (reg/f:DI 235)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":90 81 {*movdi_internal}
     (nil))
(insn 181 180 182 9 (set (reg:SF 236)
        (mem:SF (plus:DI (reg/f:DI 235)
                (const_int 28 [0x1c])) [2 *parmot_103(D)+28 S4 A32])) "../src/motor.f":90 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 235)
        (nil)))
(insn 182 181 183 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 rmotor2+0 S4 A32])
        (reg:SF 236)) "../src/motor.f":90 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 236)
        (nil)))
(insn 183 182 184 9 (set (reg:SF 237)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [2  S4 A32])) "../src/motor.f":93 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 184 183 185 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 237)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32]))) "../src/motor.f":93 51 {*cmpiusf}
     (expr_list:REG_DEAD (reg:SF 237)
        (nil)))
(jump_insn 185 184 407 9 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 195)
            (pc))) "../src/motor.f":93 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 195)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238
(note 407 185 186 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 186 407 187 10 (set (reg:SF 238)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [2  S4 A32])) "../src/motor.f":93 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 187 186 188 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 238)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32]))) "../src/motor.f":93 51 {*cmpiusf}
     (expr_list:REG_DEAD (reg:SF 238)
        (nil)))
(jump_insn 188 187 192 10 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 195)
            (pc))) "../src/motor.f":93 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 195)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 239
(note 192 188 193 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 11 (set (reg:SF 239)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32])) "../src/motor.f":93 127 {*movsf_internal}
     (nil))
(insn 194 193 195 11 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32])
        (reg:SF 239)) "../src/motor.f":93 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 239)
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;;              9
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 240 241 242 243 244 245 246 247 248 249 250 251 252
(code_label 195 194 196 12 7 (nil) [2 uses])
(note 196 195 197 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 197 196 198 12 (set (reg:SF 109 [ pi.8_23 ])
        (mem/c:SF (symbol_ref:DI ("pi.3519") [flags 0x1c02]  <var_decl 0x142004f30 pi>) [2 pi+0 S4 A32])) "../src/motor.f":95 127 {*movsf_internal}
     (nil))
(insn 198 197 199 12 (set (reg:SF 110 [ _24 ])
        (mult:SF (reg:SF 109 [ pi.8_23 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":95 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 109 [ pi.8_23 ])
        (nil)))
(insn 199 198 200 12 (set (reg:SF 241)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":95 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 200 199 201 12 (set (reg:SF 240)
        (div:SF (reg:SF 110 [ _24 ])
            (reg:SF 241))) "../src/motor.f":95 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 241)
        (expr_list:REG_DEAD (reg:SF 110 [ _24 ])
            (nil))))
(insn 201 200 202 12 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32])
        (reg:SF 240)) "../src/motor.f":95 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 240)
        (nil)))
(insn 202 201 203 12 (set (reg:SF 111 [ pi.9_25 ])
        (mem/c:SF (symbol_ref:DI ("pi.3519") [flags 0x1c02]  <var_decl 0x142004f30 pi>) [2 pi+0 S4 A32])) "../src/motor.f":96 127 {*movsf_internal}
     (nil))
(insn 203 202 204 12 (set (reg:SF 112 [ _26 ])
        (mult:SF (reg:SF 111 [ pi.9_25 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 kqrpm+0 S4 A32]))) "../src/motor.f":96 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 111 [ pi.9_25 ])
        (nil)))
(insn 204 203 205 12 (set (reg:SF 243)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":96 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 205 204 206 12 (set (reg:SF 242)
        (div:SF (reg:SF 112 [ _26 ])
            (reg:SF 243))) "../src/motor.f":96 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 243)
        (expr_list:REG_DEAD (reg:SF 112 [ _26 ])
            (nil))))
(insn 206 205 207 12 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32])
        (reg:SF 242)) "../src/motor.f":96 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 242)
        (nil)))
(insn 207 206 208 12 (set (reg/f:DI 244)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":98 81 {*movdi_internal}
     (nil))
(insn 208 207 209 12 (set (reg:SF 113 [ _27 ])
        (mem:SF (reg/f:DI 244) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":98 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 244)
        (nil)))
(insn 209 208 210 12 (set (reg:SF 114 [ _28 ])
        (mult:SF (reg:SF 113 [ _27 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [2 tau+0 S4 A32]))) "../src/motor.f":98 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 113 [ _27 ])
        (nil)))
(insn 210 209 211 12 (set (reg:SF 245)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":98 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 211 210 212 12 (set (reg:SF 115 [ _29 ])
        (plus:SF (reg:SF 114 [ _28 ])
            (reg:SF 245))) "../src/motor.f":98 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 245)
        (expr_list:REG_DEAD (reg:SF 114 [ _28 ])
            (nil))))
(insn 212 211 213 12 (set (reg:SF 116 [ _30 ])
        (reg:SF 115 [ _29 ])) "../src/motor.f":98 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 115 [ _29 ])
        (nil)))
(insn 213 212 214 12 (set (reg/f:DI 246)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":98 81 {*movdi_internal}
     (nil))
(insn 214 213 215 12 (set (reg:SF 117 [ _31 ])
        (mem:SF (reg/f:DI 246) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":98 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 246)
        (nil)))
(insn 215 214 216 12 (set (reg:SF 118 [ _32 ])
        (mult:SF (reg:SF 116 [ _30 ])
            (reg:SF 117 [ _31 ]))) "../src/motor.f":98 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 117 [ _31 ])
        (expr_list:REG_DEAD (reg:SF 116 [ _30 ])
            (nil))))
(insn 216 215 217 12 (set (reg:SF 247)
        (div:SF (reg:SF 118 [ _32 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":98 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 118 [ _32 ])
        (nil)))
(insn 217 216 218 12 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32])
        (reg:SF 247)) "../src/motor.f":98 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 247)
        (nil)))
(insn 218 217 219 12 (set (reg/f:DI 248)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":99 81 {*movdi_internal}
     (nil))
(insn 219 218 220 12 (set (reg:SF 119 [ _33 ])
        (mem:SF (reg/f:DI 248) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":99 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 248)
        (nil)))
(insn 220 219 221 12 (set (reg:SF 120 [ _34 ])
        (mult:SF (reg:SF 119 [ _33 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [2 tau+0 S4 A32]))) "../src/motor.f":99 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 119 [ _33 ])
        (nil)))
(insn 221 220 222 12 (set (reg:SF 121 [ _35 ])
        (plus:SF (reg:SF 120 [ _34 ])
            (reg:SF 120 [ _34 ]))) "../src/motor.f":99 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 120 [ _34 ])
        (nil)))
(insn 222 221 223 12 (set (reg:SF 249)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":99 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 223 222 224 12 (set (reg:SF 122 [ _36 ])
        (plus:SF (reg:SF 121 [ _35 ])
            (reg:SF 249))) "../src/motor.f":99 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 249)
        (expr_list:REG_DEAD (reg:SF 121 [ _35 ])
            (nil))))
(insn 224 223 225 12 (set (reg:SF 123 [ _37 ])
        (reg:SF 122 [ _36 ])) "../src/motor.f":99 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 122 [ _36 ])
        (nil)))
(insn 225 224 226 12 (set (reg:SF 250)
        (div:SF (reg:SF 123 [ _37 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [2 kvrad+0 S4 A32]))) "../src/motor.f":99 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 123 [ _37 ])
        (nil)))
(insn 226 225 227 12 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])
        (reg:SF 250)) "../src/motor.f":99 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 250)
        (nil)))
(insn 227 226 228 12 (set (reg/f:DI 251)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":101 81 {*movdi_internal}
     (nil))
(insn 228 227 229 12 (set (reg:SF 124 [ _38 ])
        (mem:SF (reg/f:DI 251) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":101 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 251)
        (nil)))
(insn 229 228 230 12 (set (reg:SF 125 [ _39 ])
        (minus:SF (reg:SF 124 [ _38 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32]))) "../src/motor.f":101 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 124 [ _38 ])
        (nil)))
(insn 230 229 231 12 (set (reg:SF 126 [ _40 ])
        (reg:SF 125 [ _39 ])) "../src/motor.f":101 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 125 [ _39 ])
        (nil)))
(insn 231 230 232 12 (set (reg:SF 127 [ _41 ])
        (div:SF (reg:SF 126 [ _40 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32]))) "../src/motor.f":101 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 126 [ _40 ])
        (nil)))
(insn 232 231 233 12 (set (reg/f:DI 252)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":101 81 {*movdi_internal}
     (nil))
(insn 233 232 234 12 (set (mem:SF (reg/f:DI 252) [2 *i_119(D)+0 S4 A32])
        (reg:SF 127 [ _41 ])) "../src/motor.f":101 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 252)
        (expr_list:REG_DEAD (reg:SF 127 [ _41 ])
            (nil))))
(insn 234 233 296 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
        (const_int 1 [0x1])) "../src/motor.f":102 82 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;;              17 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169
(code_label 296 234 235 13 12 (nil) [1 uses])
(note 235 296 236 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
            (const_int 10 [0xa]))) "../src/motor.f":102 7 {*cmpsi_1}
     (nil))
(insn 237 236 238 13 (set (reg:QI 169 [ _123 ])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/motor.f":102 613 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 238 237 239 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 169 [ _123 ])
            (const_int 0 [0]))) "../src/motor.f":102 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 169 [ _123 ])
        (nil)))
(jump_insn 239 238 240 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 418)
            (pc))) "../src/motor.f":102 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 418)
;;  succ:       22
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 168 170 171 172 173 174 253 254 255 256 257 258 259 260 261 262 263 264 265 266
(note 240 239 241 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 14 (set (reg/f:DI 253)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":103 81 {*movdi_internal}
     (nil))
(insn 242 241 243 14 (set (reg:SF 170 [ _124 ])
        (mem:SF (reg/f:DI 253) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":103 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 253)
        (nil)))
(insn 243 242 244 14 (set (reg:SF 171 [ _125 ])
        (mult:SF (reg:SF 170 [ _124 ])
            (reg:SF 170 [ _124 ]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 170 [ _124 ])
        (nil)))
(insn 244 243 245 14 (set (reg/f:DI 254)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":103 81 {*movdi_internal}
     (nil))
(insn 245 244 246 14 (set (reg:SF 128 [ _42 ])
        (mem:SF (reg/f:DI 254) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":103 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 254)
        (nil)))
(insn 246 245 247 14 (set (reg:SF 129 [ _43 ])
        (mult:SF (reg:SF 171 [ _125 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 rmotor2+0 S4 A32]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 171 [ _125 ])
        (nil)))
(insn 247 246 248 14 (set (reg:SF 130 [ _44 ])
        (plus:SF (reg:SF 129 [ _43 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 129 [ _43 ])
        (nil)))
(insn 248 247 249 14 (set (reg:SF 131 [ _45 ])
        (reg:SF 130 [ _44 ])) "../src/motor.f":103 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 130 [ _44 ])
        (nil)))
(insn 249 248 250 14 (set (reg:SF 132 [ _46 ])
        (mult:SF (reg:SF 128 [ _42 ])
            (reg:SF 131 [ _45 ]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 131 [ _45 ])
        (expr_list:REG_DEAD (reg:SF 128 [ _42 ])
            (nil))))
(insn 250 249 251 14 (set (reg:SF 133 [ _47 ])
        (plus:SF (reg:SF 132 [ _46 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [2 vm+0 S4 A32]))) "../src/motor.f":103 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 132 [ _46 ])
        (nil)))
(insn 251 250 252 14 (set (reg/f:DI 255)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":103 81 {*movdi_internal}
     (nil))
(insn 252 251 253 14 (set (reg:SF 134 [ _48 ])
        (mem:SF (reg/f:DI 255) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":103 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 255)
        (nil)))
(insn 253 252 254 14 (set (reg:SF 256)
        (minus:SF (reg:SF 133 [ _47 ])
            (reg:SF 134 [ _48 ]))) "../src/motor.f":103 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 134 [ _48 ])
        (expr_list:REG_DEAD (reg:SF 133 [ _47 ])
            (nil))))
(insn 254 253 255 14 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [2 res+0 S4 A32])
        (reg:SF 256)) "../src/motor.f":103 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 256)
        (nil)))
(insn 255 254 256 14 (set (reg/f:DI 257)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":104 81 {*movdi_internal}
     (nil))
(insn 256 255 257 14 (set (reg:SF 172 [ _127 ])
        (mem:SF (reg/f:DI 257) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 257)
        (nil)))
(insn 257 256 258 14 (set (reg:SF 173 [ _128 ])
        (mult:SF (reg:SF 172 [ _127 ])
            (reg:SF 172 [ _127 ]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 172 [ _127 ])
        (nil)))
(insn 258 257 259 14 (set (reg:SF 258)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 rmotor2+0 S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 259 258 260 14 (set (reg:SF 259)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [2  S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 260 259 261 14 (set (reg:SF 135 [ _49 ])
        (mult:SF (reg:SF 258)
            (reg:SF 259))) "../src/motor.f":104 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 259)
        (expr_list:REG_DEAD (reg:SF 258)
            (nil))))
(insn 261 260 262 14 (set (reg:SF 136 [ _50 ])
        (mult:SF (reg:SF 173 [ _128 ])
            (reg:SF 135 [ _49 ]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 173 [ _128 ])
        (expr_list:REG_DEAD (reg:SF 135 [ _49 ])
            (nil))))
(insn 262 261 263 14 (set (reg:SF 261)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 rmotor0+0 S4 A32])) "../src/motor.f":104 127 {*movsf_internal}
     (nil))
(insn 263 262 264 14 (set (reg:SF 260)
        (plus:SF (reg:SF 261)
            (reg:SF 136 [ _50 ]))) "../src/motor.f":104 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 261)
        (expr_list:REG_DEAD (reg:SF 136 [ _50 ])
            (nil))))
(insn 264 263 265 14 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32])
        (reg:SF 260)) "../src/motor.f":104 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 260)
        (nil)))
(insn 265 264 266 14 (set (reg/f:DI 262)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":105 81 {*movdi_internal}
     (nil))
(insn 266 265 267 14 (set (reg:SF 137 [ _51 ])
        (mem:SF (reg/f:DI 262) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":105 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 262)
        (nil)))
(insn 267 266 268 14 (set (reg:SF 263)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [2 res+0 S4 A32])) "../src/motor.f":105 127 {*movsf_internal}
     (nil))
(insn 268 267 269 14 (set (reg:SF 138 [ _52 ])
        (div:SF (reg:SF 263)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32]))) "../src/motor.f":105 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 263)
        (nil)))
(insn 269 268 270 14 (set (reg:SF 139 [ _53 ])
        (minus:SF (reg:SF 137 [ _51 ])
            (reg:SF 138 [ _52 ]))) "../src/motor.f":105 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 138 [ _52 ])
        (expr_list:REG_DEAD (reg:SF 137 [ _51 ])
            (nil))))
(insn 270 269 271 14 (set (reg/f:DI 264)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":105 81 {*movdi_internal}
     (nil))
(insn 271 270 272 14 (set (mem:SF (reg/f:DI 264) [2 *i_119(D)+0 S4 A32])
        (reg:SF 139 [ _53 ])) "../src/motor.f":105 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 264)
        (expr_list:REG_DEAD (reg:SF 139 [ _53 ])
            (nil))))
(insn 272 271 273 14 (set (reg:SF 168 [ M.2_86 ])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 273 272 274 14 (set (reg/f:DI 265)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 volt+0 S8 A64])) "../src/motor.f":106 81 {*movdi_internal}
     (nil))
(insn 274 273 275 14 (set (reg:SF 140 [ _54 ])
        (mem:SF (reg/f:DI 265) [2 *volt_118(D)+0 S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 265)
        (nil)))
(insn 275 274 276 14 (set (reg:V4SF 266)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":106 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 276 275 277 14 (parallel [
            (set (reg:SF 174 [ _132 ])
                (abs:SF (reg:SF 140 [ _54 ])))
            (use (reg:V4SF 266))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":106 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 266)
        (expr_list:REG_DEAD (reg:SF 140 [ _54 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 140 [ _54 ]))
                    (nil))))))
(insn 277 276 278 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 174 [ _132 ])
            (reg:SF 168 [ M.2_86 ]))) "../src/motor.f":106 51 {*cmpiusf}
     (nil))
(insn 278 277 279 14 (set (reg:QI 141 [ _55 ])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":106 613 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
(insn 279 278 280 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 168 [ M.2_86 ])
            (reg:SF 168 [ M.2_86 ]))) "../src/motor.f":106 51 {*cmpiusf}
     (nil))
(insn 280 279 281 14 (set (reg:QI 142 [ _56 ])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":106 613 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
(insn 281 280 282 14 (parallel [
            (set (reg:QI 143 [ _57 ])
                (ior:QI (reg:QI 141 [ _55 ])
                    (reg:QI 142 [ _56 ])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":106 423 {*iorqi_1}
     (expr_list:REG_DEAD (reg:QI 142 [ _56 ])
        (expr_list:REG_DEAD (reg:QI 141 [ _55 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 282 281 283 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 143 [ _57 ])
            (const_int 0 [0]))) "../src/motor.f":106 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 143 [ _57 ])
        (nil)))
(jump_insn 283 282 284 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) "../src/motor.f":106 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 285)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168 174

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174
;; lr  def 	 168
(note 284 283 9 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 9 284 285 15 (set (reg:SF 168 [ M.2_86 ])
        (reg:SF 174 [ _132 ])) "../src/motor.f":106 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 174 [ _132 ])
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  def 	 17 [flags] 144 145 146 267 268
(code_label 285 9 286 16 10 (nil) [1 uses])
(note 286 285 287 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 16 (set (reg:SF 267)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [2 res+0 S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (nil))
(insn 288 287 289 16 (set (reg:V4SF 268)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":106 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 289 288 290 16 (parallel [
            (set (reg:SF 144 [ _58 ])
                (abs:SF (reg:SF 267)))
            (use (reg:V4SF 268))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":106 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 268)
        (expr_list:REG_DEAD (reg:SF 267)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 267))
                    (nil))))))
(insn 290 289 291 16 (set (reg:SF 145 [ eps.10_59 ])
        (mem/c:SF (symbol_ref:DI ("eps.3513") [flags 0x1c02]  <var_decl 0x142004bd0 eps>) [2 eps+0 S4 A32])) "../src/motor.f":106 127 {*movsf_internal}
     (nil))
(insn 291 290 292 16 (set (reg:SF 146 [ _60 ])
        (mult:SF (reg:SF 168 [ M.2_86 ])
            (reg:SF 145 [ eps.10_59 ]))) "../src/motor.f":106 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 168 [ M.2_86 ])
        (expr_list:REG_DEAD (reg:SF 145 [ eps.10_59 ])
            (nil))))
(insn 292 291 293 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 146 [ _60 ])
            (reg:SF 144 [ _58 ]))) "../src/motor.f":106 51 {*cmpiusf}
     (expr_list:REG_DEAD (reg:SF 146 [ _60 ])
        (expr_list:REG_DEAD (reg:SF 144 [ _58 ])
            (nil))))
(jump_insn 293 292 294 16 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 423)
            (pc))) "../src/motor.f":106 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 423)
;;  succ:       23
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 22, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 294 293 295 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 413 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":102 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 413 295 414 17 (set (pc)
        (label_ref 296)) "../src/motor.f":102 649 {jump}
     (nil)
 -> 296)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 414 413 418)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 18, flags: (RTL)
;;  pred:       13
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 418 414 417 22 15 (nil) [1 uses])
(note 417 418 419 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 419 417 299 22 (const_int 0 [0]) "../src/motor.f":106 682 {nop}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 23, flags: (RTL)
;;  pred:       22 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 269 270 271 272
(code_label 299 419 300 18 9 (nil) [0 uses])
(note 300 299 301 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 18 (set (reg/f:DI 269)
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(insn 302 301 303 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.3.common.filename+0 S8 A64])
        (reg/f:DI 269)) "../src/motor.f":108 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 269)
        (nil)))
(insn 303 302 304 18 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.3.common.line+0 S4 A64])
        (const_int 108 [0x6c])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 304 303 305 18 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.3.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 305 304 306 18 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.3.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 306 305 307 18 (parallel [
            (set (reg:DI 270)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":108 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 307 306 308 18 (set (reg:DI 5 di)
        (reg:DI 270)) "../src/motor.f":108 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 270)
        (nil)))
(call_insn 308 307 309 18 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":108 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 309 308 310 18 (parallel [
            (set (reg:DI 271)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":108 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 310 309 311 18 (set (reg:SI 1 dx)
        (const_int 33 [0x21])) "../src/motor.f":108 82 {*movsi_internal}
     (nil))
(insn 311 310 312 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC10") [flags 0x2]  <var_decl 0x1427fbbd0 *lC10>)) "../src/motor.f":108 81 {*movdi_internal}
     (nil))
(insn 312 311 313 18 (set (reg:DI 5 di)
        (reg:DI 271)) "../src/motor.f":108 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 271)
        (nil)))
(call_insn 313 312 314 18 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":108 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 314 313 315 18 (parallel [
            (set (reg:DI 272)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":108 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 315 314 316 18 (set (reg:DI 5 di)
        (reg:DI 272)) "../src/motor.f":108 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 272)
        (nil)))
(call_insn 316 315 420 18 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":108 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 420 316 421 18 (set (pc)
        (label_ref 317)) 649 {jump}
     (nil)
 -> 317)
;;  succ:       19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 421 420 423)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 19, flags: (RTL)
;;  pred:       16
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 423 421 422 23 16 (nil) [1 uses])
(note 422 423 424 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 424 422 317 23 (const_int 0 [0]) "../src/motor.f":108 682 {nop}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 20, flags: (RTL)
;;  pred:       23 [100.0%]  (FALLTHRU)
;;              18
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 175 176 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292
(code_label 317 424 318 19 11 (nil) [1 uses])
(note 318 317 319 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 319 318 320 19 (set (reg:SF 273)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 vm_omega+0 S4 A32])) "../src/motor.f":110 127 {*movsf_internal}
     (nil))
(insn 320 319 321 19 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 res_omega+0 S4 A32])
        (reg:SF 273)) "../src/motor.f":110 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 273)
        (nil)))
(insn 321 320 322 19 (set (reg:SF 274)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [2  S4 A32])) "../src/motor.f":111 127 {*movsf_internal}
     (nil))
(insn 322 321 323 19 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [2 res_volt+0 S4 A32])
        (reg:SF 274)) "../src/motor.f":111 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 274)
        (nil)))
(insn 323 322 324 19 (set (reg:SF 275)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 res_omega+0 S4 A32])) "../src/motor.f":112 127 {*movsf_internal}
     (nil))
(insn 324 323 325 19 (set (reg:SF 147 [ _61 ])
        (div:SF (reg:SF 275)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32]))) "../src/motor.f":112 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 275)
        (nil)))
(insn 325 324 326 19 (set (reg:V4SF 276)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":112 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 326 325 327 19 (parallel [
            (set (reg:SF 148 [ _62 ])
                (neg:SF (reg:SF 147 [ _61 ])))
            (use (reg:V4SF 276))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":112 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 276)
        (expr_list:REG_DEAD (reg:SF 147 [ _61 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 147 [ _61 ]))
                    (nil))))))
(insn 327 326 328 19 (set (reg/f:DI 277)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [10 i_omega+0 S8 A64])) "../src/motor.f":112 81 {*movdi_internal}
     (nil))
(insn 328 327 329 19 (set (mem:SF (reg/f:DI 277) [2 *i_omega_145(D)+0 S4 A32])
        (reg:SF 148 [ _62 ])) "../src/motor.f":112 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 277)
        (expr_list:REG_DEAD (reg:SF 148 [ _62 ])
            (nil))))
(insn 329 328 330 19 (set (reg:SF 278)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [2 res_volt+0 S4 A32])) "../src/motor.f":113 127 {*movsf_internal}
     (nil))
(insn 330 329 331 19 (set (reg:SF 149 [ _63 ])
        (div:SF (reg:SF 278)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 res_i+0 S4 A32]))) "../src/motor.f":113 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 278)
        (nil)))
(insn 331 330 332 19 (set (reg:V4SF 279)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":113 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 332 331 333 19 (parallel [
            (set (reg:SF 150 [ _64 ])
                (neg:SF (reg:SF 149 [ _63 ])))
            (use (reg:V4SF 279))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":113 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 279)
        (expr_list:REG_DEAD (reg:SF 149 [ _63 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 149 [ _63 ]))
                    (nil))))))
(insn 333 332 334 19 (set (reg/f:DI 280)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [10 i_volt+0 S8 A64])) "../src/motor.f":113 81 {*movdi_internal}
     (nil))
(insn 334 333 335 19 (set (mem:SF (reg/f:DI 280) [2 *i_volt_147(D)+0 S4 A32])
        (reg:SF 150 [ _64 ])) "../src/motor.f":113 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 280)
        (expr_list:REG_DEAD (reg:SF 150 [ _64 ])
            (nil))))
(insn 335 334 336 19 (set (reg/f:DI 281)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":115 81 {*movdi_internal}
     (nil))
(insn 336 335 337 19 (set (reg:SF 175 [ _149 ])
        (mem:SF (reg/f:DI 281) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":115 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 281)
        (nil)))
(insn 337 336 338 19 (set (reg:SF 176 [ _150 ])
        (mult:SF (reg:SF 175 [ _149 ])
            (reg:SF 175 [ _149 ]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 175 [ _149 ])
        (nil)))
(insn 338 337 339 19 (set (reg/f:DI 282)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":115 81 {*movdi_internal}
     (nil))
(insn 339 338 340 19 (set (reg:SF 151 [ _65 ])
        (mem:SF (reg/f:DI 282) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":115 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 282)
        (nil)))
(insn 340 339 341 19 (set (reg:SF 152 [ _66 ])
        (mult:SF (reg:SF 151 [ _65 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [2 zloadi1+0 S4 A32]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 151 [ _65 ])
        (nil)))
(insn 341 340 342 19 (set (reg:SF 153 [ _67 ])
        (plus:SF (reg:SF 152 [ _66 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 zloadi0+0 S4 A32]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 152 [ _66 ])
        (nil)))
(insn 342 341 343 19 (set (reg:SF 154 [ _68 ])
        (mult:SF (reg:SF 176 [ _150 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [2 zloadi2+0 S4 A32]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 176 [ _150 ])
        (nil)))
(insn 343 342 344 19 (set (reg:SF 283)
        (plus:SF (reg:SF 153 [ _67 ])
            (reg:SF 154 [ _68 ]))) "../src/motor.f":115 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 154 [ _68 ])
        (expr_list:REG_DEAD (reg:SF 153 [ _67 ])
            (nil))))
(insn 344 343 345 19 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32])
        (reg:SF 283)) "../src/motor.f":115 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 283)
        (nil)))
(insn 345 344 346 19 (set (reg/f:DI 284)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":116 81 {*movdi_internal}
     (nil))
(insn 346 345 347 19 (set (reg:SF 155 [ _69 ])
        (mem:SF (reg/f:DI 284) [2 *omega_115(D)+0 S4 A32])) "../src/motor.f":116 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 284)
        (nil)))
(insn 347 346 348 19 (set (reg:SF 156 [ _70 ])
        (mult:SF (reg:SF 155 [ _69 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [2 zloadi2+0 S4 A32]))) "../src/motor.f":116 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 155 [ _69 ])
        (nil)))
(insn 348 347 349 19 (set (reg:SF 157 [ _71 ])
        (plus:SF (reg:SF 156 [ _70 ])
            (reg:SF 156 [ _70 ]))) "../src/motor.f":116 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 156 [ _70 ])
        (nil)))
(insn 349 348 350 19 (set (reg:SF 286)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 zloadi1+0 S4 A32])) "../src/motor.f":116 127 {*movsf_internal}
     (nil))
(insn 350 349 351 19 (set (reg:SF 285)
        (plus:SF (reg:SF 286)
            (reg:SF 157 [ _71 ]))) "../src/motor.f":116 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 286)
        (expr_list:REG_DEAD (reg:SF 157 [ _71 ])
            (nil))))
(insn 351 350 352 19 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -76 [0xffffffffffffffb4])) [2 zloadi_omega+0 S4 A32])
        (reg:SF 285)) "../src/motor.f":116 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 285)
        (nil)))
(insn 352 351 353 19 (set (reg/f:DI 287)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 i+0 S8 A64])) "../src/motor.f":118 81 {*movdi_internal}
     (nil))
(insn 353 352 354 19 (set (reg:SF 158 [ _72 ])
        (mem:SF (reg/f:DI 287) [2 *i_119(D)+0 S4 A32])) "../src/motor.f":118 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 287)
        (nil)))
(insn 354 353 355 19 (set (reg:SF 159 [ _73 ])
        (minus:SF (reg:SF 158 [ _72 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [2 zloadi+0 S4 A32]))) "../src/motor.f":118 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 158 [ _72 ])
        (nil)))
(insn 355 354 356 19 (set (reg:SF 160 [ _74 ])
        (reg:SF 159 [ _73 ])) "../src/motor.f":118 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 159 [ _73 ])
        (nil)))
(insn 356 355 357 19 (set (reg:SF 161 [ _75 ])
        (div:SF (reg:SF 160 [ _74 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":118 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 160 [ _74 ])
        (nil)))
(insn 357 356 358 19 (set (reg/f:DI 288)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 q+0 S8 A64])) "../src/motor.f":118 81 {*movdi_internal}
     (nil))
(insn 358 357 359 19 (set (mem:SF (reg/f:DI 288) [2 *q_153(D)+0 S4 A32])
        (reg:SF 161 [ _75 ])) "../src/motor.f":118 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 288)
        (expr_list:REG_DEAD (reg:SF 161 [ _75 ])
            (nil))))
(insn 359 358 360 19 (set (reg/f:DI 289)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [10 i_omega+0 S8 A64])) "../src/motor.f":119 81 {*movdi_internal}
     (nil))
(insn 360 359 361 19 (set (reg:SF 162 [ _76 ])
        (mem:SF (reg/f:DI 289) [2 *i_omega_145(D)+0 S4 A32])) "../src/motor.f":119 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 289)
        (nil)))
(insn 361 360 362 19 (set (reg:SF 163 [ _77 ])
        (minus:SF (reg:SF 162 [ _76 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -76 [0xffffffffffffffb4])) [2 zloadi_omega+0 S4 A32]))) "../src/motor.f":119 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 162 [ _76 ])
        (nil)))
(insn 362 361 363 19 (set (reg:SF 164 [ _78 ])
        (reg:SF 163 [ _77 ])) "../src/motor.f":119 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 163 [ _77 ])
        (nil)))
(insn 363 362 364 19 (set (reg:SF 165 [ _79 ])
        (div:SF (reg:SF 164 [ _78 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":119 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 164 [ _78 ])
        (nil)))
(insn 364 363 365 19 (set (reg/f:DI 290)
        (mem/f/c:DI (reg/f:DI 16 argp) [10 q_omega+0 S8 A64])) "../src/motor.f":119 81 {*movdi_internal}
     (nil))
(insn 365 364 366 19 (set (mem:SF (reg/f:DI 290) [2 *q_omega_155(D)+0 S4 A32])
        (reg:SF 165 [ _79 ])) "../src/motor.f":119 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 290)
        (expr_list:REG_DEAD (reg:SF 165 [ _79 ])
            (nil))))
(insn 366 365 367 19 (set (reg/f:DI 291)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [10 i_volt+0 S8 A64])) "../src/motor.f":120 81 {*movdi_internal}
     (nil))
(insn 367 366 368 19 (set (reg:SF 166 [ _80 ])
        (mem:SF (reg/f:DI 291) [2 *i_volt_147(D)+0 S4 A32])) "../src/motor.f":120 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 291)
        (nil)))
(insn 368 367 369 19 (set (reg:SF 167 [ _81 ])
        (div:SF (reg:SF 166 [ _80 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 kqrad+0 S4 A32]))) "../src/motor.f":120 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 166 [ _80 ])
        (nil)))
(insn 369 368 370 19 (set (reg/f:DI 292)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [10 q_volt+0 S8 A64])) "../src/motor.f":120 81 {*movdi_internal}
     (nil))
(insn 370 369 415 19 (set (mem:SF (reg/f:DI 292) [2 *q_volt_157(D)+0 S4 A32])
        (reg:SF 167 [ _81 ])) "../src/motor.f":120 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 292)
        (expr_list:REG_DEAD (reg:SF 167 [ _81 ])
            (nil))))
(jump_insn 415 370 416 19 (set (pc)
        (label_ref 405)) "../src/motor.f":128 649 {jump}
     (nil)
 -> 405)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 416 415 373)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       6
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 293 294 295 296 297 298
(code_label 373 416 374 20 5 (nil) [1 uses])
(note 374 373 375 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 20 (set (reg/f:DI 293)
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 376 375 377 20 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.4.common.filename+0 S8 A64])
        (reg/f:DI 293)) "../src/motor.f":124 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 293)
        (nil)))
(insn 377 376 378 20 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.4.common.line+0 S4 A64])
        (const_int 124 [0x7c])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 378 377 379 20 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.4.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 379 378 380 20 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.4.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 380 379 381 20 (parallel [
            (set (reg:DI 294)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 381 380 382 20 (set (reg:DI 5 di)
        (reg:DI 294)) "../src/motor.f":124 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 294)
        (nil)))
(call_insn 382 381 383 20 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 383 382 384 20 (parallel [
            (set (reg:DI 295)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 384 383 385 20 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 385 384 386 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC12") [flags 0x2]  <var_decl 0x1427fbc60 *lC12>)) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 386 385 387 20 (set (reg:DI 5 di)
        (reg:DI 295)) "../src/motor.f":124 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 295)
        (nil)))
(call_insn 387 386 388 20 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 388 387 389 20 (set (reg:DI 296)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":124 81 {*movdi_internal}
     (nil))
(insn 389 388 390 20 (parallel [
            (set (reg:DI 297)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 390 389 391 20 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":124 82 {*movsi_internal}
     (nil))
(insn 391 390 392 20 (set (reg:DI 4 si)
        (reg:DI 296)) "../src/motor.f":124 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 296)
        (nil)))
(insn 392 391 393 20 (set (reg:DI 5 di)
        (reg:DI 297)) "../src/motor.f":124 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 297)
        (nil)))
(call_insn 393 392 394 20 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_integer_write") [flags 0x41]  <function_decl 0x1427d4500 _gfortran_transfer_integer_write>) [0 _gfortran_transfer_integer_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 394 393 395 20 (parallel [
            (set (reg:DI 298)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":124 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 395 394 396 20 (set (reg:DI 5 di)
        (reg:DI 298)) "../src/motor.f":124 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 298)
        (nil)))
(call_insn 396 395 397 20 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":124 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 397 396 398 20 (set (reg:SI 4 si)
        (const_int 0 [0])) "../src/motor.f":125 82 {*movsi_internal}
     (nil))
(insn 398 397 399 20 (set (reg:DI 5 di)
        (const_int 0 [0])) "../src/motor.f":125 81 {*movdi_internal}
     (nil))
(call_insn 399 398 400 20 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/motor.f":125 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 400 399 405)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       5 [100.0%] 
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 405 400 406 21 1 (nil) [2 uses])
(note 406 405 0 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function voltm (voltm_, funcdef_no=1, decl_uid=3557, cgraph_uid=1, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 21 count 17 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 15 13 16 14
;;
;; Loop 1
;;  header 8, latch 12
;;  depth 1, outer 0
;;  nodes: 8 12 11 9 10
;; 2 succs { 3 4 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 15 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 16 12 }
;; 12 succs { 8 }
;; 15 succs { 13 }
;; 13 succs { 14 }
;; 16 succs { 14 }
;; 14 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 196.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a15 (r203,l0) best SSE_REGS, allocno SSE_REGS
    r202: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a16 (r202,l0) best SSE_REGS, allocno SSE_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a20 (r200,l0) best SSE_REGS, allocno SSE_REGS
    r199: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a21 (r199,l0) best SSE_REGS, allocno SSE_REGS
    r198: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a22 (r198,l0) best SSE_REGS, allocno SSE_REGS
    r197: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a23 (r197,l0) best SSE_REGS, allocno SSE_REGS
    r196: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r196,l0) best DIREG, allocno GENERAL_REGS
    r195: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r195,l0) best DIREG, allocno GENERAL_REGS
    r194: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r194,l0) best SIREG, allocno GENERAL_REGS
    r193: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r193,l0) best DIREG, allocno GENERAL_REGS
    r192: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r192,l0) best DIREG, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a39 (r188,l0) best SSE_REGS, allocno SSE_REGS
    r187: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a38 (r187,l0) best SSE_REGS, allocno SSE_REGS
    r186: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a45 (r186,l0) best SSE_REGS, allocno SSE_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a49 (r184,l0) best SSE_REGS, allocno SSE_REGS
    r183: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a47 (r183,l0) best SSE_REGS, allocno SSE_REGS
    r182: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a51 (r182,l0) best SSE_REGS, allocno SSE_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r175,l0) best DIREG, allocno GENERAL_REGS
    r174: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a57 (r174,l0) best SIREG, allocno GENERAL_REGS
    r173: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a58 (r173,l0) best DREG, allocno GENERAL_REGS
    r172: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r172,l0) best CREG, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a69 (r169,l0) best SSE_REGS, allocno SSE_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a83 (r162,l0) best SSE_REGS, allocno SSE_REGS
    r161: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a85 (r161,l0) best SSE_REGS, allocno SSE_REGS
    r160: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a84 (r160,l0) best SSE_REGS, allocno SSE_REGS
    r159: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a88 (r159,l0) best SSE_REGS, allocno SSE_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a90 (r157,l0) best SSE_REGS, allocno SSE_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a92 (r155,l0) best SSE_REGS, allocno SSE_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a109 (r147,l0) best SSE_REGS, allocno SSE_REGS
    r146: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a111 (r146,l0) best SSE_REGS, allocno SSE_REGS
    r145: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a110 (r145,l0) best SSE_REGS, allocno SSE_REGS
    r144: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a114 (r144,l0) best SSE_REGS, allocno SSE_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a116 (r142,l0) best SSE_REGS, allocno SSE_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a118 (r140,l0) best SSE_REGS, allocno SSE_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a40 (r137,l0) best SSE_REGS, allocno SSE_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a37 (r135,l0) best SSE_REGS, allocno SSE_REGS
    r134: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r134,l0) best SSE_REGS, allocno SSE_REGS
    r133: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a3 (r132,l0) best SSE_REGS, allocno SSE_REGS
    r131: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a6 (r131,l0) best SSE_REGS, allocno SSE_REGS
    r130: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a7 (r130,l0) best SSE_REGS, allocno SSE_REGS
    r129: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a8 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a9 (r128,l0) best SSE_REGS, allocno SSE_REGS
    r127: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a10 (r127,l0) best SSE_REGS, allocno SSE_REGS
    r126: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a13 (r126,l0) best SSE_REGS, allocno SSE_REGS
    r125: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a14 (r125,l0) best SSE_REGS, allocno SSE_REGS
    r124: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a18 (r124,l0) best SSE_REGS, allocno SSE_REGS
    r123: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a19 (r123,l0) best SSE_REGS, allocno SSE_REGS
    r122: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a31 (r122,l0) best SSE_REGS, allocno SSE_REGS
    r121: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a32 (r121,l0) best SSE_REGS, allocno SSE_REGS
    r120: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a35 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a36 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a34 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a44 (r114,l0) best SSE_REGS, allocno SSE_REGS
    r113: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a48 (r113,l0) best SSE_REGS, allocno SSE_REGS
    r112: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a50 (r112,l0) best SSE_REGS, allocno SSE_REGS
    r111: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a52 (r111,l0) best SSE_REGS, allocno SSE_REGS
    r110: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a53 (r110,l0) best SSE_REGS, allocno SSE_REGS
    r109: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a54 (r109,l0) best SSE_REGS, allocno SSE_REGS
    r108: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a71 (r108,l0) best SSE_REGS, allocno SSE_REGS
    r107: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a72 (r107,l0) best SSE_REGS, allocno SSE_REGS
    r106: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a74 (r106,l0) best SSE_REGS, allocno SSE_REGS
    r105: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a73 (r105,l0) best SSE_REGS, allocno SSE_REGS
    r104: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a76 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a79 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a80 (r102,l0) best SSE_REGS, allocno SSE_REGS
    r101: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a81 (r101,l0) best SSE_REGS, allocno SSE_REGS
    r100: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a86 (r100,l0) best SSE_REGS, allocno SSE_REGS
    r99: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a87 (r99,l0) best SSE_REGS, allocno SSE_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a97 (r97,l0) best SSE_REGS, allocno SSE_REGS
    r96: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a98 (r96,l0) best SSE_REGS, allocno SSE_REGS
    r95: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a100 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a99 (r94,l0) best SSE_REGS, allocno SSE_REGS
    r93: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a102 (r93,l0) best SSE_REGS, allocno SSE_REGS
    r92: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a105 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r91: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a106 (r91,l0) best SSE_REGS, allocno SSE_REGS
    r90: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a107 (r90,l0) best SSE_REGS, allocno SSE_REGS
    r89: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a112 (r89,l0) best SSE_REGS, allocno SSE_REGS
    r88: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a113 (r88,l0) best SSE_REGS, allocno SSE_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a1(r134,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a2(r133,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a3(r132,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a4(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a5(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a6(r131,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a7(r130,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a8(r129,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a9(r128,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a10(r127,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a11(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a12(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a13(r126,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a14(r125,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a15(r203,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a16(r202,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a17(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a18(r124,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a19(r123,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a20(r200,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a21(r199,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a22(r198,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a23(r197,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a24(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a25(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a26(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a27(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a28(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a29(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8 NO_REX_SSE_REGS:8 SSE_REGS:8 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a30(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a31(r122,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a32(r121,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a33(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a34(r118,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a35(r120,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a36(r119,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a37(r135,l0) costs: AREG:36 DREG:36 CREG:36 BREG:36 SIREG:36 DIREG:36 AD_REGS:36 CLOBBERED_REGS:36 Q_REGS:36 NON_Q_REGS:36 TLS_GOTBASE_REGS:36 GENERAL_REGS:36 FP_TOP_REG:102 FP_SECOND_REG:102 FLOAT_REGS:102 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:90 FP_TOP_SSE_REGS:106 FP_SECOND_SSE_REGS:106 FLOAT_SSE_REGS:106 FLOAT_INT_REGS:102 INT_SSE_REGS:71 FLOAT_INT_SSE_REGS:106 ALL_REGS:106 MEM:36
  a38(r187,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a39(r188,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a40(r137,l0) costs: AREG:18 DREG:18 CREG:18 BREG:18 SIREG:18 DIREG:18 AD_REGS:18 CLOBBERED_REGS:18 Q_REGS:18 NON_Q_REGS:18 TLS_GOTBASE_REGS:18 GENERAL_REGS:18 FP_TOP_REG:54 FP_SECOND_REG:54 FLOAT_REGS:54 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:42 FP_TOP_SSE_REGS:54 FP_SECOND_SSE_REGS:54 FLOAT_SSE_REGS:54 FLOAT_INT_REGS:54 INT_SSE_REGS:34 FLOAT_INT_SSE_REGS:54 ALL_REGS:54 MEM:17
  a41(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:5
  a42(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:4
  a43(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:4
  a44(r114,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a45(r186,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a46(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a47(r183,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a48(r113,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a49(r184,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:15
  a50(r112,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a51(r182,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a52(r111,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a53(r110,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a54(r109,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a55(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a56(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a57(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a58(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a59(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a60(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a61(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:7
  a62(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:8
  a63(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:8
  a64(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:8
  a65(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:8
  a66(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:26 INT_SSE_REGS:18 ALL_REGS:416 MEM:8
  a67(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7
  a68(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a69(r169,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a70(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a71(r108,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a72(r107,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a73(r105,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a74(r106,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a75(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a76(r104,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a77(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a78(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a79(r103,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a80(r102,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a81(r101,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a82(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a83(r162,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a84(r160,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a85(r161,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a86(r100,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a87(r99,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a88(r159,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a89(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a90(r157,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a91(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a92(r155,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a93(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a94(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a95(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a96(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a97(r97,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a98(r96,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a99(r94,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a100(r95,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a101(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a102(r93,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a103(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a104(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a105(r92,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a106(r91,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a107(r90,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a108(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a109(r147,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a110(r145,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a111(r146,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a112(r89,l0) costs: AREG:16 DREG:16 CREG:16 BREG:16 SIREG:16 DIREG:16 AD_REGS:16 CLOBBERED_REGS:16 Q_REGS:16 NON_Q_REGS:16 TLS_GOTBASE_REGS:16 GENERAL_REGS:16 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:16
  a113(r88,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 CLOBBERED_REGS:10 Q_REGS:10 NON_Q_REGS:10 TLS_GOTBASE_REGS:10 GENERAL_REGS:10 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a114(r144,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a115(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a116(r142,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a117(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a118(r140,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 CLOBBERED_REGS:4 Q_REGS:4 NON_Q_REGS:4 TLS_GOTBASE_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a119(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8
  a120(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:7
  a121(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:25 INT_SSE_REGS:18 ALL_REGS:312 MEM:8

   Insn 234(l0): point = 0
   Insn 228(l0): point = 2
   Insn 227(l0): point = 4
   Insn 226(l0): point = 6
   Insn 225(l0): point = 8
   Insn 224(l0): point = 10
   Insn 223(l0): point = 12
   Insn 222(l0): point = 14
   Insn 221(l0): point = 16
   Insn 220(l0): point = 18
   Insn 219(l0): point = 20
   Insn 218(l0): point = 22
   Insn 217(l0): point = 24
   Insn 216(l0): point = 26
   Insn 215(l0): point = 28
   Insn 214(l0): point = 30
   Insn 213(l0): point = 32
   Insn 212(l0): point = 34
   Insn 211(l0): point = 36
   Insn 210(l0): point = 38
   Insn 209(l0): point = 40
   Insn 208(l0): point = 42
   Insn 207(l0): point = 44
   Insn 206(l0): point = 46
   Insn 205(l0): point = 48
   Insn 204(l0): point = 50
   Insn 203(l0): point = 52
   Insn 202(l0): point = 54
   Insn 201(l0): point = 56
   Insn 200(l0): point = 58
   Insn 199(l0): point = 60
   Insn 248(l0): point = 63
   Insn 244(l0): point = 66
   Insn 196(l0): point = 68
   Insn 195(l0): point = 70
   Insn 194(l0): point = 72
   Insn 193(l0): point = 74
   Insn 192(l0): point = 76
   Insn 191(l0): point = 78
   Insn 190(l0): point = 80
   Insn 189(l0): point = 82
   Insn 188(l0): point = 84
   Insn 187(l0): point = 86
   Insn 186(l0): point = 88
   Insn 185(l0): point = 90
   Insn 184(l0): point = 92
   Insn 183(l0): point = 94
   Insn 182(l0): point = 96
   Insn 181(l0): point = 98
   Insn 180(l0): point = 100
   Insn 179(l0): point = 102
   Insn 178(l0): point = 104
   Insn 177(l0): point = 106
   Insn 176(l0): point = 108
   Insn 175(l0): point = 110
   Insn 243(l0): point = 113
   Insn 102(l0): point = 116
   Insn 101(l0): point = 118
   Insn 100(l0): point = 120
   Insn 99(l0): point = 122
   Insn 239(l0): point = 125
   Insn 169(l0): point = 127
   Insn 168(l0): point = 129
   Insn 167(l0): point = 131
   Insn 166(l0): point = 133
   Insn 165(l0): point = 135
   Insn 164(l0): point = 137
   Insn 162(l0): point = 140
   Insn 161(l0): point = 142
   Insn 160(l0): point = 144
   Insn 159(l0): point = 146
   Insn 158(l0): point = 148
   Insn 157(l0): point = 150
   Insn 156(l0): point = 152
   Insn 152(l0): point = 155
   Insn 151(l0): point = 157
   Insn 150(l0): point = 159
   Insn 149(l0): point = 161
   Insn 148(l0): point = 163
   Insn 147(l0): point = 165
   Insn 146(l0): point = 167
   Insn 145(l0): point = 169
   Insn 144(l0): point = 171
   Insn 143(l0): point = 173
   Insn 142(l0): point = 175
   Insn 141(l0): point = 177
   Insn 140(l0): point = 179
   Insn 139(l0): point = 181
   Insn 138(l0): point = 183
   Insn 137(l0): point = 185
   Insn 136(l0): point = 187
   Insn 135(l0): point = 189
   Insn 134(l0): point = 191
   Insn 133(l0): point = 193
   Insn 132(l0): point = 195
   Insn 131(l0): point = 197
   Insn 130(l0): point = 199
   Insn 129(l0): point = 201
   Insn 128(l0): point = 203
   Insn 127(l0): point = 205
   Insn 126(l0): point = 207
   Insn 125(l0): point = 209
   Insn 124(l0): point = 211
   Insn 123(l0): point = 213
   Insn 122(l0): point = 215
   Insn 121(l0): point = 217
   Insn 120(l0): point = 219
   Insn 119(l0): point = 221
   Insn 118(l0): point = 223
   Insn 117(l0): point = 225
   Insn 116(l0): point = 227
   Insn 115(l0): point = 229
   Insn 114(l0): point = 231
   Insn 113(l0): point = 233
   Insn 112(l0): point = 235
   Insn 111(l0): point = 237
   Insn 110(l0): point = 239
   Insn 109(l0): point = 241
   Insn 108(l0): point = 243
   Insn 107(l0): point = 245
   Insn 106(l0): point = 247
   Insn 105(l0): point = 249
   Insn 104(l0): point = 251
   Insn 9(l0): point = 254
   Insn 97(l0): point = 257
   Insn 94(l0): point = 260
   Insn 93(l0): point = 262
   Insn 92(l0): point = 264
   Insn 237(l0): point = 267
   Insn 87(l0): point = 269
   Insn 86(l0): point = 271
   Insn 85(l0): point = 273
   Insn 84(l0): point = 275
   Insn 83(l0): point = 277
   Insn 82(l0): point = 279
   Insn 81(l0): point = 281
   Insn 80(l0): point = 283
   Insn 79(l0): point = 285
   Insn 78(l0): point = 287
   Insn 77(l0): point = 289
   Insn 76(l0): point = 291
   Insn 75(l0): point = 293
   Insn 74(l0): point = 295
   Insn 73(l0): point = 297
   Insn 72(l0): point = 299
   Insn 71(l0): point = 301
   Insn 70(l0): point = 303
   Insn 69(l0): point = 305
   Insn 68(l0): point = 307
   Insn 67(l0): point = 309
   Insn 66(l0): point = 311
   Insn 65(l0): point = 313
   Insn 64(l0): point = 315
   Insn 63(l0): point = 317
   Insn 62(l0): point = 319
   Insn 61(l0): point = 321
   Insn 60(l0): point = 323
   Insn 59(l0): point = 325
   Insn 58(l0): point = 327
   Insn 57(l0): point = 329
   Insn 55(l0): point = 332
   Insn 54(l0): point = 334
   Insn 53(l0): point = 336
   Insn 52(l0): point = 338
   Insn 235(l0): point = 341
   Insn 47(l0): point = 343
   Insn 46(l0): point = 345
   Insn 45(l0): point = 347
   Insn 44(l0): point = 349
   Insn 43(l0): point = 351
   Insn 42(l0): point = 353
   Insn 41(l0): point = 355
   Insn 40(l0): point = 357
   Insn 39(l0): point = 359
   Insn 38(l0): point = 361
   Insn 37(l0): point = 363
   Insn 36(l0): point = 365
   Insn 35(l0): point = 367
   Insn 34(l0): point = 369
   Insn 33(l0): point = 371
   Insn 32(l0): point = 373
   Insn 31(l0): point = 375
   Insn 30(l0): point = 377
   Insn 29(l0): point = 379
   Insn 28(l0): point = 381
   Insn 27(l0): point = 383
   Insn 26(l0): point = 385
   Insn 25(l0): point = 387
   Insn 24(l0): point = 389
   Insn 23(l0): point = 391
   Insn 22(l0): point = 393
   Insn 21(l0): point = 395
   Insn 20(l0): point = 397
   Insn 19(l0): point = 399
   Insn 18(l0): point = 401
   Insn 17(l0): point = 403
   Insn 15(l0): point = 406
   Insn 14(l0): point = 408
   Insn 13(l0): point = 410
   Insn 12(l0): point = 412
   Insn 7(l0): point = 414
   Insn 6(l0): point = 416
   Insn 5(l0): point = 418
   Insn 4(l0): point = 420
   Insn 3(l0): point = 422
   Insn 2(l0): point = 424
 a0(r208): [3..4]
 a1(r134): [3..6]
 a2(r133): [7..8]
 a3(r132): [7..10]
 a4(r207): [11..12]
 a5(r206): [15..16]
 a6(r131): [15..18]
 a7(r130): [19..20]
 a8(r129): [19..22]
 a9(r128): [23..24]
 a10(r127): [23..26]
 a11(r205): [27..28]
 a12(r204): [31..32]
 a13(r126): [31..34]
 a14(r125): [35..38]
 a15(r203): [35..36]
 a16(r202): [39..40]
 a17(r201): [43..44]
 a18(r124): [43..46]
 a19(r123): [47..50]
 a20(r200): [47..48]
 a21(r199): [51..52]
 a22(r198): [55..56]
 a23(r197): [59..60]
 a24(r196): [71..72]
 a25(r195): [77..82]
 a26(r194): [79..84]
 a27(r193): [89..94]
 a28(r192): [99..100]
 a29(r191): [109..110]
 a30(r190): [130..131]
 a31(r122): [130..133]
 a32(r121): [134..135]
 a33(r189): [136..137]
 a34(r118): [143..148]
 a35(r120): [143..144]
 a36(r119): [145..146]
 a37(r135): [254..254] [145..177]
 a38(r187): [149..152]
 a39(r188): [149..150]
 a40(r137): [255..256] [155..169]
 a41(r117): [158..159]
 a42(r116): [160..161]
 a43(r115): [160..165]
 a44(r114): [170..173]
 a45(r186): [170..171]
 a46(r185): [174..175]
 a47(r183): [180..181]
 a48(r113): [182..185]
 a49(r184): [182..183]
 a50(r112): [186..187]
 a51(r182): [190..191]
 a52(r111): [194..195]
 a53(r110): [196..197]
 a54(r109): [196..201]
 a55(r181): [198..199]
 a56(r175): [208..241]
 a57(r174): [210..243]
 a58(r173): [212..245]
 a59(r172): [214..247]
 a60(r171): [216..249]
 a61(r170): [218..251]
 a62(r180): [220..221]
 a63(r179): [224..225]
 a64(r178): [228..229]
 a65(r177): [232..233]
 a66(r176): [236..237]
 a67(r136): [119..120]
 a68(r168): [261..264]
 a69(r169): [261..262]
 a70(r167): [270..271]
 a71(r108): [270..273]
 a72(r107): [274..275]
 a73(r105): [274..281]
 a74(r106): [276..277]
 a75(r166): [278..279]
 a76(r104): [282..283]
 a77(r165): [284..285]
 a78(r164): [288..289]
 a79(r103): [288..291]
 a80(r102): [292..293]
 a81(r101): [294..295]
 a82(r163): [296..297]
 a83(r162): [300..301]
 a84(r160): [304..305]
 a85(r161): [306..307]
 a86(r100): [306..309]
 a87(r99): [310..311]
 a88(r159): [314..315]
 a89(r158): [316..317]
 a90(r157): [320..321]
 a91(r156): [322..323]
 a92(r155): [326..327]
 a93(r154): [328..329]
 a94(r98): [335..336]
 a95(r153): [337..338]
 a96(r152): [344..345]
 a97(r97): [344..347]
 a98(r96): [348..349]
 a99(r94): [348..355]
 a100(r95): [350..351]
 a101(r151): [352..353]
 a102(r93): [356..357]
 a103(r150): [358..359]
 a104(r149): [362..363]
 a105(r92): [362..365]
 a106(r91): [366..367]
 a107(r90): [368..369]
 a108(r148): [370..371]
 a109(r147): [374..375]
 a110(r145): [378..379]
 a111(r146): [380..381]
 a112(r89): [380..383]
 a113(r88): [384..385]
 a114(r144): [388..389]
 a115(r143): [390..391]
 a116(r142): [394..395]
 a117(r141): [396..397]
 a118(r140): [400..401]
 a119(r139): [402..403]
 a120(r87): [409..410]
 a121(r138): [411..412]
Compressing live ranges: from 427 to 179 - 41%
Ranges after the compression:
 a0(r208): [0..1]
 a1(r134): [0..1]
 a2(r133): [2..3]
 a3(r132): [2..3]
 a4(r207): [4..5]
 a5(r206): [6..7]
 a6(r131): [6..7]
 a7(r130): [8..9]
 a8(r129): [8..9]
 a9(r128): [10..11]
 a10(r127): [10..11]
 a11(r205): [12..13]
 a12(r204): [14..15]
 a13(r126): [14..15]
 a14(r125): [16..17]
 a15(r203): [16..17]
 a16(r202): [18..19]
 a17(r201): [20..21]
 a18(r124): [20..21]
 a19(r123): [22..23]
 a20(r200): [22..23]
 a21(r199): [24..25]
 a22(r198): [26..27]
 a23(r197): [28..29]
 a24(r196): [30..31]
 a25(r195): [32..33]
 a26(r194): [32..33]
 a27(r193): [34..35]
 a28(r192): [36..37]
 a29(r191): [38..39]
 a30(r190): [42..43]
 a31(r122): [42..43]
 a32(r121): [44..45]
 a33(r189): [46..47]
 a34(r118): [48..51]
 a35(r120): [48..49]
 a36(r119): [50..51]
 a37(r135): [86..86] [50..61]
 a38(r187): [52..53]
 a39(r188): [52..53]
 a40(r137): [87..88] [54..57]
 a41(r117): [54..55]
 a42(r116): [56..57]
 a43(r115): [56..57]
 a44(r114): [58..59]
 a45(r186): [58..59]
 a46(r185): [60..61]
 a47(r183): [62..63]
 a48(r113): [64..65]
 a49(r184): [64..65]
 a50(r112): [66..67]
 a51(r182): [68..69]
 a52(r111): [70..71]
 a53(r110): [72..73]
 a54(r109): [72..75]
 a55(r181): [74..75]
 a56(r175): [76..85]
 a57(r174): [76..85]
 a58(r173): [76..85]
 a59(r172): [76..85]
 a60(r171): [76..85]
 a61(r170): [76..85]
 a62(r180): [76..77]
 a63(r179): [78..79]
 a64(r178): [80..81]
 a65(r177): [82..83]
 a66(r176): [84..85]
 a67(r136): [40..41]
 a68(r168): [89..90]
 a69(r169): [89..90]
 a70(r167): [91..92]
 a71(r108): [91..92]
 a72(r107): [93..94]
 a73(r105): [93..98]
 a74(r106): [95..96]
 a75(r166): [97..98]
 a76(r104): [99..100]
 a77(r165): [101..102]
 a78(r164): [103..104]
 a79(r103): [103..104]
 a80(r102): [105..106]
 a81(r101): [107..108]
 a82(r163): [109..110]
 a83(r162): [111..112]
 a84(r160): [113..114]
 a85(r161): [115..116]
 a86(r100): [115..116]
 a87(r99): [117..118]
 a88(r159): [119..120]
 a89(r158): [121..122]
 a90(r157): [123..124]
 a91(r156): [125..126]
 a92(r155): [127..128]
 a93(r154): [129..130]
 a94(r98): [131..132]
 a95(r153): [133..134]
 a96(r152): [135..136]
 a97(r97): [135..136]
 a98(r96): [137..138]
 a99(r94): [137..142]
 a100(r95): [139..140]
 a101(r151): [141..142]
 a102(r93): [143..144]
 a103(r150): [145..146]
 a104(r149): [147..148]
 a105(r92): [147..148]
 a106(r91): [149..150]
 a107(r90): [151..152]
 a108(r148): [153..154]
 a109(r147): [155..156]
 a110(r145): [157..158]
 a111(r146): [159..160]
 a112(r89): [159..160]
 a113(r88): [161..162]
 a114(r144): [163..164]
 a115(r143): [165..166]
 a116(r142): [167..168]
 a117(r141): [169..170]
 a118(r140): [171..172]
 a119(r139): [173..174]
 a120(r87): [175..176]
 a121(r138): [177..178]
  regions=1, blocks=17, points=179
    allocnos=122 (big 0), copies=0, conflicts=0, ranges=124
Disposition:
  120:r87  l0     0  113:r88  l0    21  112:r89  l0    21  107:r90  l0    21
  106:r91  l0    21  105:r92  l0    21  102:r93  l0    21   99:r94  l0    22
  100:r95  l0    21   98:r96  l0    21   97:r97  l0    21   94:r98  l0     0
   87:r99  l0    21   86:r100 l0    21   81:r101 l0    21   80:r102 l0    21
   79:r103 l0    21   76:r104 l0    21   73:r105 l0    22   74:r106 l0    21
   72:r107 l0    21   71:r108 l0    21   54:r109 l0    21   53:r110 l0    22
   52:r111 l0    21   50:r112 l0    21   48:r113 l0    21   44:r114 l0    23
   43:r115 l0     1   42:r116 l0     0   41:r117 l0     0   34:r118 l0    22
   36:r119 l0    23   35:r120 l0    21   32:r121 l0    21   31:r122 l0    21
   19:r123 l0    21   18:r124 l0    21   14:r125 l0    21   13:r126 l0    21
   10:r127 l0    22    9:r128 l0    21    8:r129 l0    21    7:r130 l0    22
    6:r131 l0    21    3:r132 l0    22    2:r133 l0    21    1:r134 l0    21
   37:r135 l0    21   67:r136 l0     0   40:r137 l0    22  121:r138 l0     0
  119:r139 l0     0  118:r140 l0    21  117:r141 l0     0  116:r142 l0    21
  115:r143 l0     0  114:r144 l0    21  110:r145 l0    21  111:r146 l0    22
  109:r147 l0    21  108:r148 l0     0  104:r149 l0     0  103:r150 l0     0
  101:r151 l0     0   96:r152 l0     0   95:r153 l0     0   93:r154 l0     0
   92:r155 l0    21   91:r156 l0     0   90:r157 l0    21   89:r158 l0     0
   88:r159 l0    21   84:r160 l0    21   85:r161 l0    22   83:r162 l0    21
   82:r163 l0     0   78:r164 l0     0   77:r165 l0     0   75:r166 l0     0
   70:r167 l0     0   68:r168 l0     0   69:r169 l0    21   61:r170 l0    38
   60:r171 l0    37   59:r172 l0     2   58:r173 l0     1   57:r174 l0     4
   56:r175 l0     0   66:r176 l0     5   65:r177 l0     5   64:r178 l0     5
   63:r179 l0     5   62:r180 l0     5   55:r181 l0     0   51:r182 l0    21
   47:r183 l0    21   49:r184 l0    22   46:r185 l0     0   45:r186 l0    22
   38:r187 l0    23   39:r188 l0    22   33:r189 l0     0   30:r190 l0     0
   29:r191 l0     0   28:r192 l0     0   27:r193 l0     0   26:r194 l0     2
   25:r195 l0     0   24:r196 l0     0   23:r197 l0    21   22:r198 l0    21
   21:r199 l0    21   20:r200 l0    22   17:r201 l0     0   16:r202 l0    21
   15:r203 l0    22   12:r204 l0     0   11:r205 l0     0    5:r206 l0     0
    4:r207 l0     0    0:r208 l0     0
+++Costs: overall -9, reg -9, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


voltm

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={6d} r1={9d,4u} r2={7d,2u} r4={9d,4u} r5={11d,6u} r6={1d,16u} r7={8d,30u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1d,25u} r17={33d,8u} r18={5d} r19={5d} r20={1d,106u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,2u} r38={7d,2u} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u,1e} r114={1d,1u,1e} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u,1e} r124={1d,1u} r125={1d,1u,1e} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={2d,4u} r136={1d,1u} r137={1d,2u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u,1e} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} 
;;    total ref usage 887{551d,331u,5e} in 206{201 regular + 5 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 87 138
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])
        (reg:DI 5 di [ omega ])) "../src/motor.f":133 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ omega ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])
        (reg:DI 4 si [ q ])) "../src/motor.f":133 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ q ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])
        (reg:DI 1 dx [ imotype ])) "../src/motor.f":133 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ imotype ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])
        (reg:DI 2 cx [ parmot ])) "../src/motor.f":133 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ parmot ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])
        (reg:DI 37 r8 [ nmpar ])) "../src/motor.f":133 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ nmpar ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])
        (reg:DI 38 r9 [ volt ])) "../src/motor.f":133 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ volt ])
        (nil)))
(note 8 7 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 8 13 2 (set (reg/f:DI 138)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":163 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (reg/f:DI 138) [1 *imotype_57(D)+0 S4 A32])) "../src/motor.f":163 82 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 1 [0x1]))) "../src/motor.f":163 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "../src/motor.f":163 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 50)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88 89 90 91 92 93 94 95 96 97 139 140 141 142 143 144 145 146 147 148 149 150 151 152
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 139)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":164 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SF 140)
        (mem:SF (reg/f:DI 139) [2 *parmot_60(D)+0 S4 A32])) "../src/motor.f":164 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 139)
        (nil)))
(insn 19 18 20 3 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32])
        (reg:SF 140)) "../src/motor.f":164 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 140)
        (nil)))
(insn 20 19 21 3 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":165 81 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SF 142)
        (mem:SF (plus:DI (reg/f:DI 141)
                (const_int 4 [0x4])) [2 *parmot_60(D)+4 S4 A32])) "../src/motor.f":165 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 22 21 23 3 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32])
        (reg:SF 142)) "../src/motor.f":165 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 142)
        (nil)))
(insn 23 22 24 3 (set (reg/f:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":166 81 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:SF 144)
        (mem:SF (plus:DI (reg/f:DI 143)
                (const_int 8 [0x8])) [2 *parmot_60(D)+8 S4 A32])) "../src/motor.f":166 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 143)
        (nil)))
(insn 25 24 26 3 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32])
        (reg:SF 144)) "../src/motor.f":166 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 144)
        (nil)))
(insn 26 25 27 3 (set (reg:SF 88 [ pi.11_2 ])
        (mem/c:SF (symbol_ref:DI ("pi.3579") [flags 0x1c02]  <var_decl 0x1427f25a0 pi>) [2 pi+0 S4 A32])) "../src/motor.f":167 127 {*movsf_internal}
     (nil))
(insn 27 26 28 3 (set (reg:SF 89 [ _3 ])
        (mult:SF (reg:SF 88 [ pi.11_2 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":167 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 88 [ pi.11_2 ])
        (nil)))
(insn 28 27 29 3 (set (reg:SF 146)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":167 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 29 28 30 3 (set (reg:SF 145)
        (div:SF (reg:SF 89 [ _3 ])
            (reg:SF 146))) "../src/motor.f":167 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 146)
        (expr_list:REG_DEAD (reg:SF 89 [ _3 ])
            (nil))))
(insn 30 29 31 3 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])
        (reg:SF 145)) "../src/motor.f":167 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 145)
        (nil)))
(insn 31 30 32 3 (set (reg:SF 147)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])) "../src/motor.f":168 127 {*movsf_internal}
     (nil))
(insn 32 31 33 3 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32])
        (reg:SF 147)) "../src/motor.f":168 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 147)
        (nil)))
(insn 33 32 34 3 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])) "../src/motor.f":169 81 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:SF 90 [ _4 ])
        (mem:SF (reg/f:DI 148) [2 *q_66(D)+0 S4 A32])) "../src/motor.f":169 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (nil)))
(insn 35 34 36 3 (set (reg:SF 91 [ _5 ])
        (mult:SF (reg:SF 90 [ _4 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32]))) "../src/motor.f":169 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 90 [ _4 ])
        (nil)))
(insn 36 35 37 3 (set (reg:SF 92 [ _6 ])
        (plus:SF (reg:SF 91 [ _5 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32]))) "../src/motor.f":169 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 91 [ _5 ])
        (nil)))
(insn 37 36 38 3 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 amps+0 S8 A64])) "../src/motor.f":169 81 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (mem:SF (reg/f:DI 149) [2 *amps_67(D)+0 S4 A32])
        (reg:SF 92 [ _6 ])) "../src/motor.f":169 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (expr_list:REG_DEAD (reg:SF 92 [ _6 ])
            (nil))))
(insn 39 38 40 3 (set (reg/f:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 amps+0 S8 A64])) "../src/motor.f":170 81 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:SF 93 [ _7 ])
        (mem:SF (reg/f:DI 150) [2 *amps_67(D)+0 S4 A32])) "../src/motor.f":170 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 150)
        (nil)))
(insn 41 40 42 3 (set (reg:SF 94 [ _8 ])
        (mult:SF (reg:SF 93 [ _7 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32]))) "../src/motor.f":170 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 93 [ _7 ])
        (nil)))
(insn 42 41 43 3 (set (reg/f:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":170 81 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:SF 95 [ _9 ])
        (mem:SF (reg/f:DI 151) [2 *omega_69(D)+0 S4 A32])) "../src/motor.f":170 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 151)
        (nil)))
(insn 44 43 45 3 (set (reg:SF 96 [ _10 ])
        (div:SF (reg:SF 95 [ _9 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32]))) "../src/motor.f":170 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 95 [ _9 ])
        (nil)))
(insn 45 44 46 3 (set (reg:SF 97 [ _11 ])
        (plus:SF (reg:SF 94 [ _8 ])
            (reg:SF 96 [ _10 ]))) "../src/motor.f":170 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 96 [ _10 ])
        (expr_list:REG_DEAD (reg:SF 94 [ _8 ])
            (nil))))
(insn 46 45 47 3 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":170 81 {*movdi_internal}
     (nil))
(insn 47 46 235 3 (set (mem:SF (reg/f:DI 152) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 97 [ _11 ])) "../src/motor.f":170 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (expr_list:REG_DEAD (reg:SF 97 [ _11 ])
            (nil))))
(jump_insn 235 47 236 3 (set (pc)
        (label_ref 95)) 649 {jump}
     (nil)
 -> 95)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 236 235 50)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 153
(code_label 50 236 51 4 18 (nil) [1 uses])
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 4 (set (reg/f:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":171 81 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SI 98 [ _12 ])
        (mem:SI (reg/f:DI 153) [1 *imotype_57(D)+0 S4 A32])) "../src/motor.f":171 82 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 153)
        (nil)))
(insn 54 53 55 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 98 [ _12 ])
            (const_int 2 [0x2]))) "../src/motor.f":171 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (nil)))
(jump_insn 55 54 56 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) "../src/motor.f":171 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 90)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 99 100 101 102 103 104 105 106 107 108 154 155 156 157 158 159 160 161 162 163 164 165 166 167
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg/f:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":172 81 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:SF 155)
        (mem:SF (reg/f:DI 154) [2 *parmot_60(D)+0 S4 A32])) "../src/motor.f":172 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 154)
        (nil)))
(insn 59 58 60 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32])
        (reg:SF 155)) "../src/motor.f":172 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 155)
        (nil)))
(insn 60 59 61 5 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":173 81 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:SF 157)
        (mem:SF (plus:DI (reg/f:DI 156)
                (const_int 4 [0x4])) [2 *parmot_60(D)+4 S4 A32])) "../src/motor.f":173 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (nil)))
(insn 62 61 63 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32])
        (reg:SF 157)) "../src/motor.f":173 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 157)
        (nil)))
(insn 63 62 64 5 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":174 81 {*movdi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:SF 159)
        (mem:SF (plus:DI (reg/f:DI 158)
                (const_int 8 [0x8])) [2 *parmot_60(D)+8 S4 A32])) "../src/motor.f":174 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 158)
        (nil)))
(insn 65 64 66 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32])
        (reg:SF 159)) "../src/motor.f":174 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 159)
        (nil)))
(insn 66 65 67 5 (set (reg:SF 99 [ pi.12_13 ])
        (mem/c:SF (symbol_ref:DI ("pi.3579") [flags 0x1c02]  <var_decl 0x1427f25a0 pi>) [2 pi+0 S4 A32])) "../src/motor.f":175 127 {*movsf_internal}
     (nil))
(insn 67 66 68 5 (set (reg:SF 100 [ _14 ])
        (mult:SF (reg:SF 99 [ pi.12_13 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 kvrpm+0 S4 A32]))) "../src/motor.f":175 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 99 [ pi.12_13 ])
        (nil)))
(insn 68 67 69 5 (set (reg:SF 161)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [2  S4 A32])) "../src/motor.f":175 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+1 [0x0.fp+5])
        (nil)))
(insn 69 68 70 5 (set (reg:SF 160)
        (div:SF (reg:SF 100 [ _14 ])
            (reg:SF 161))) "../src/motor.f":175 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 161)
        (expr_list:REG_DEAD (reg:SF 100 [ _14 ])
            (nil))))
(insn 70 69 71 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])
        (reg:SF 160)) "../src/motor.f":175 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 160)
        (nil)))
(insn 71 70 72 5 (set (reg:SF 162)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32])) "../src/motor.f":176 127 {*movsf_internal}
     (nil))
(insn 72 71 73 5 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32])
        (reg:SF 162)) "../src/motor.f":176 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 162)
        (nil)))
(insn 73 72 74 5 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])) "../src/motor.f":177 81 {*movdi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:SF 101 [ _15 ])
        (mem:SF (reg/f:DI 163) [2 *q_66(D)+0 S4 A32])) "../src/motor.f":177 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 75 74 76 5 (set (reg:SF 102 [ _16 ])
        (mult:SF (reg:SF 101 [ _15 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [2 kqrad+0 S4 A32]))) "../src/motor.f":177 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 101 [ _15 ])
        (nil)))
(insn 76 75 77 5 (set (reg:SF 103 [ _17 ])
        (plus:SF (reg:SF 102 [ _16 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 zloadi+0 S4 A32]))) "../src/motor.f":177 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 102 [ _16 ])
        (nil)))
(insn 77 76 78 5 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 amps+0 S8 A64])) "../src/motor.f":177 81 {*movdi_internal}
     (nil))
(insn 78 77 79 5 (set (mem:SF (reg/f:DI 164) [2 *amps_67(D)+0 S4 A32])
        (reg:SF 103 [ _17 ])) "../src/motor.f":177 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (expr_list:REG_DEAD (reg:SF 103 [ _17 ])
            (nil))))
(insn 79 78 80 5 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [10 amps+0 S8 A64])) "../src/motor.f":178 81 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:SF 104 [ _18 ])
        (mem:SF (reg/f:DI 165) [2 *amps_67(D)+0 S4 A32])) "../src/motor.f":178 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 81 80 82 5 (set (reg:SF 105 [ _19 ])
        (mult:SF (reg:SF 104 [ _18 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 rmotor+0 S4 A32]))) "../src/motor.f":178 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 104 [ _18 ])
        (nil)))
(insn 82 81 83 5 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":178 81 {*movdi_internal}
     (nil))
(insn 83 82 84 5 (set (reg:SF 106 [ _20 ])
        (mem:SF (reg/f:DI 166) [2 *omega_69(D)+0 S4 A32])) "../src/motor.f":178 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (nil)))
(insn 84 83 85 5 (set (reg:SF 107 [ _21 ])
        (div:SF (reg:SF 106 [ _20 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 kvrad+0 S4 A32]))) "../src/motor.f":178 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 106 [ _20 ])
        (nil)))
(insn 85 84 86 5 (set (reg:SF 108 [ _22 ])
        (plus:SF (reg:SF 105 [ _19 ])
            (reg:SF 107 [ _21 ]))) "../src/motor.f":178 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 107 [ _21 ])
        (expr_list:REG_DEAD (reg:SF 105 [ _19 ])
            (nil))))
(insn 86 85 87 5 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":178 81 {*movdi_internal}
     (nil))
(insn 87 86 237 5 (set (mem:SF (reg/f:DI 167) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 108 [ _22 ])) "../src/motor.f":178 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (expr_list:REG_DEAD (reg:SF 108 [ _22 ])
            (nil))))
(jump_insn 237 87 238 5 (set (pc)
        (label_ref 95)) 649 {jump}
     (nil)
 -> 95)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 238 237 90)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 168 169
(code_label 90 238 91 6 20 (nil) [1 uses])
(note 91 90 92 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 6 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":181 81 {*movdi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:SF 169)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":181 127 {*movsf_internal}
     (nil))
(insn 94 93 95 6 (set (mem:SF (reg/f:DI 168) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 169)) "../src/motor.f":181 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 169)
        (expr_list:REG_DEAD (reg/f:DI 168)
            (nil))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;;              3 [100.0%] 
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 95 94 96 7 19 (nil) [2 uses])
(note 96 95 97 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 170 7 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
        (const_int 1 [0x1])) "../src/motor.f":184 82 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;;              12 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136
(code_label 170 97 98 8 24 (nil) [1 uses])
(note 98 170 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
            (const_int 20 [0x14]))) "../src/motor.f":184 7 {*cmpsi_1}
     (nil))
(insn 100 99 101 8 (set (reg:QI 136 [ _80 ])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/motor.f":184 613 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil)))
(insn 101 100 102 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 136 [ _80 ])
            (const_int 0 [0]))) "../src/motor.f":184 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 136 [ _80 ])
        (nil)))
(jump_insn 102 101 103 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 242)
            (pc))) "../src/motor.f":184 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 242)
;;  succ:       15
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 112 113 114 115 116 117 135 137 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186
(note 103 102 104 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 9 (parallel [
            (set (reg:DI 170)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 105 104 106 9 (set (reg:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -600 [0xfffffffffffffda8])) [11 nmpar+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -592 [0xfffffffffffffdb0])) [12 parmot+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (set (reg:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -584 [0xfffffffffffffdb8])) [11 imotype+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 108 107 109 9 (set (reg:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 109 108 110 9 (set (reg:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -568 [0xfffffffffffffdc8])) [10 omega+0 S8 A64])) "../src/motor.f":187 81 {*movdi_internal}
     (nil))
(insn 110 109 111 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 111 110 112 9 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 112 111 113 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 176)) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 113 112 114 9 (parallel [
            (set (reg:DI 177)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 114 113 115 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 177)) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 177)
        (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
            (nil))))
(insn 115 114 116 9 (parallel [
            (set (reg:DI 178)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 116 115 117 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 178)) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 178)
        (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
            (nil))))
(insn 117 116 118 9 (parallel [
            (set (reg:DI 179)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 118 117 119 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 179)) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 179)
        (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
            (nil))))
(insn 119 118 120 9 (parallel [
            (set (reg:DI 180)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -60 [0xffffffffffffffc4])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 120 119 121 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [12  S8 A64])
        (reg:DI 180)) "../src/motor.f":187 57 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 180)
        (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
            (nil))))
(insn 121 120 122 9 (set (reg:DI 38 r9)
        (reg:DI 170)) "../src/motor.f":187 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 170)
        (nil)))
(insn 122 121 123 9 (set (reg:DI 37 r8)
        (reg:DI 171)) "../src/motor.f":187 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 171)
        (nil)))
(insn 123 122 124 9 (set (reg:DI 2 cx)
        (reg:DI 172)) "../src/motor.f":187 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 172)
        (nil)))
(insn 124 123 125 9 (set (reg:DI 1 dx)
        (reg:DI 173)) "../src/motor.f":187 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 173)
        (nil)))
(insn 125 124 126 9 (set (reg:DI 4 si)
        (reg:DI 174)) "../src/motor.f":187 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 174)
        (nil)))
(insn 126 125 127 9 (set (reg:DI 5 di)
        (reg:DI 175)) "../src/motor.f":187 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 175)
        (nil)))
(call_insn 127 126 128 9 (call (mem:QI (symbol_ref:DI ("motorq_") [flags 0x403]  <function_decl 0x1427e4800 motorq>) [0 motorq S1 A8])
        (const_int 48 [0x30])) "../src/motor.f":187 655 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 128 127 129 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":187 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 129 128 130 9 (set (reg:SF 109 [ qm.13_23 ])
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 qm+0 S4 A64])) "../src/motor.f":189 127 {*movsf_internal}
     (nil))
(insn 130 129 131 9 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -576 [0xfffffffffffffdc0])) [10 q+0 S8 A64])) "../src/motor.f":189 81 {*movdi_internal}
     (nil))
(insn 131 130 132 9 (set (reg:SF 110 [ _24 ])
        (mem:SF (reg/f:DI 181) [2 *q_66(D)+0 S4 A32])) "../src/motor.f":189 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (nil)))
(insn 132 131 133 9 (set (reg:SF 111 [ _25 ])
        (minus:SF (reg:SF 109 [ qm.13_23 ])
            (reg:SF 110 [ _24 ]))) "../src/motor.f":189 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 110 [ _24 ])
        (expr_list:REG_DEAD (reg:SF 109 [ qm.13_23 ])
            (nil))))
(insn 133 132 134 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [2 res+0 S4 A32])
        (reg:SF 111 [ _25 ])) "../src/motor.f":189 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 111 [ _25 ])
        (nil)))
(insn 134 133 135 9 (set (reg:SF 182)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 qm_volt+0 S4 A64])) "../src/motor.f":190 127 {*movsf_internal}
     (nil))
(insn 135 134 136 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32])
        (reg:SF 182)) "../src/motor.f":190 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 182)
        (nil)))
(insn 136 135 137 9 (set (reg:SF 112 [ res.14_26 ])
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [2 res+0 S4 A32])) "../src/motor.f":192 127 {*movsf_internal}
     (nil))
(insn 137 136 138 9 (set (reg:SF 113 [ _27 ])
        (div:SF (reg:SF 112 [ res.14_26 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32]))) "../src/motor.f":192 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 112 [ res.14_26 ])
        (nil)))
(insn 138 137 139 9 (set (reg:V4SF 184)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":192 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 139 138 140 9 (parallel [
            (set (reg:SF 183)
                (neg:SF (reg:SF 113 [ _27 ])))
            (use (reg:V4SF 184))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":192 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 184)
        (expr_list:REG_DEAD (reg:SF 113 [ _27 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 113 [ _27 ]))
                    (nil))))))
(insn 140 139 141 9 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 dvolt+0 S4 A32])
        (reg:SF 183)) "../src/motor.f":192 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 183)
        (nil)))
(insn 141 140 142 9 (set (reg:SF 135 [ M.5_52 ])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [2  S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 142 141 143 9 (set (reg/f:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":194 81 {*movdi_internal}
     (nil))
(insn 143 142 144 9 (set (reg:SF 114 [ _28 ])
        (mem:SF (reg/f:DI 185) [2 *volt_58(D)+0 S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (nil)))
(insn 144 143 145 9 (set (reg:V4SF 186)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":194 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 145 144 146 9 (parallel [
            (set (reg:SF 137 [ _87 ])
                (abs:SF (reg:SF 114 [ _28 ])))
            (use (reg:V4SF 186))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":194 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 186)
        (expr_list:REG_DEAD (reg:SF 114 [ _28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 114 [ _28 ]))
                    (nil))))))
(insn 146 145 147 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 137 [ _87 ])
            (reg:SF 135 [ M.5_52 ]))) "../src/motor.f":194 51 {*cmpiusf}
     (nil))
(insn 147 146 148 9 (set (reg:QI 115 [ _29 ])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":194 613 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
(insn 148 147 149 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 135 [ M.5_52 ])
            (reg:SF 135 [ M.5_52 ]))) "../src/motor.f":194 51 {*cmpiusf}
     (nil))
(insn 149 148 150 9 (set (reg:QI 116 [ _30 ])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/motor.f":194 613 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil)))
(insn 150 149 151 9 (parallel [
            (set (reg:QI 117 [ _31 ])
                (ior:QI (reg:QI 115 [ _29 ])
                    (reg:QI 116 [ _30 ])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":194 423 {*iorqi_1}
     (expr_list:REG_DEAD (reg:QI 116 [ _30 ])
        (expr_list:REG_DEAD (reg:QI 115 [ _29 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 151 150 152 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 117 [ _31 ])
            (const_int 0 [0]))) "../src/motor.f":194 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 117 [ _31 ])
        (nil)))
(jump_insn 152 151 153 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "../src/motor.f":194 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 154)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135 137

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 137
;; lr  def 	 135
(note 153 152 9 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 9 153 154 10 (set (reg:SF 135 [ M.5_52 ])
        (reg:SF 137 [ _87 ])) "../src/motor.f":194 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 137 [ _87 ])
        (nil)))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 135
;; lr  def 	 17 [flags] 118 119 120 187 188
(code_label 154 9 155 11 22 (nil) [1 uses])
(note 155 154 156 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 11 (set (reg:SF 187)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 dvolt+0 S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (nil))
(insn 157 156 158 11 (set (reg:V4SF 188)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC9") [flags 0x2]) [2  S16 A128])) "../src/motor.f":194 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 158 157 159 11 (parallel [
            (set (reg:SF 118 [ _32 ])
                (abs:SF (reg:SF 187)))
            (use (reg:V4SF 188))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":194 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 188)
        (expr_list:REG_DEAD (reg:SF 187)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (abs:SF (reg:SF 187))
                    (nil))))))
(insn 159 158 160 11 (set (reg:SF 119 [ eps.15_33 ])
        (mem/c:SF (symbol_ref:DI ("eps.3574") [flags 0x1c02]  <var_decl 0x1427f22d0 eps>) [2 eps+0 S4 A32])) "../src/motor.f":194 127 {*movsf_internal}
     (nil))
(insn 160 159 161 11 (set (reg:SF 120 [ _34 ])
        (mult:SF (reg:SF 135 [ M.5_52 ])
            (reg:SF 119 [ eps.15_33 ]))) "../src/motor.f":194 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 135 [ M.5_52 ])
        (expr_list:REG_DEAD (reg:SF 119 [ eps.15_33 ])
            (nil))))
(insn 161 160 162 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 120 [ _34 ])
            (reg:SF 118 [ _32 ]))) "../src/motor.f":194 51 {*cmpiusf}
     (expr_list:REG_DEAD (reg:SF 120 [ _34 ])
        (expr_list:REG_DEAD (reg:SF 118 [ _32 ])
            (nil))))
(jump_insn 162 161 163 11 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "../src/motor.f":194 617 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (nil))
 -> 247)
;;  succ:       16
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 15, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 189 190
(note 163 162 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 12 (set (reg/f:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":196 81 {*movdi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:SF 121 [ _35 ])
        (mem:SF (reg/f:DI 189) [2 *volt_58(D)+0 S4 A32])) "../src/motor.f":196 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 189)
        (nil)))
(insn 166 165 167 12 (set (reg:SF 122 [ _36 ])
        (plus:SF (reg:SF 121 [ _35 ])
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [2 dvolt+0 S4 A32]))) "../src/motor.f":196 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 121 [ _35 ])
        (nil)))
(insn 167 166 168 12 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -608 [0xfffffffffffffda0])) [10 volt+0 S8 A64])) "../src/motor.f":196 81 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (set (mem:SF (reg/f:DI 190) [2 *volt_58(D)+0 S4 A32])
        (reg:SF 122 [ _36 ])) "../src/motor.f":196 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (expr_list:REG_DEAD (reg:SF 122 [ _36 ])
            (nil))))
(insn 169 168 239 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [1 iter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":184 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 239 169 240 12 (set (pc)
        (label_ref 170)) "../src/motor.f":184 649 {jump}
     (nil)
 -> 170)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 242)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL)
;;  pred:       8
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 242 240 241 15 26 (nil) [1 uses])
(note 241 242 243 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 243 241 173 15 (const_int 0 [0]) "../src/motor.f":196 682 {nop}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 16, flags: (RTL)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 191 192 193 194 195 196
(code_label 173 243 174 13 21 (nil) [0 uses])
(note 174 173 175 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 13 (set (reg/f:DI 191)
        (symbol_ref/f:DI ("*lC0") [flags 0x2]  <var_decl 0x1427fb990 *lC0>)) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(insn 176 175 177 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -552 [0xfffffffffffffdd8])) [5 dt_parm.6.common.filename+0 S8 A64])
        (reg/f:DI 191)) "../src/motor.f":198 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 177 176 178 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.6.common.line+0 S4 A64])
        (const_int 198 [0xc6])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 178 177 179 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.6.common.flags+0 S4 A64])
        (const_int 128 [0x80])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 179 178 180 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.6.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 180 179 181 13 (parallel [
            (set (reg:DI 192)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 181 180 182 13 (set (reg:DI 5 di)
        (reg:DI 192)) "../src/motor.f":198 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 192)
        (nil)))
(call_insn 182 181 183 13 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 183 182 184 13 (parallel [
            (set (reg:DI 193)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 184 183 185 13 (set (reg:SI 1 dx)
        (const_int 43 [0x2b])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 185 184 186 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC13") [flags 0x2]  <var_decl 0x143234c60 *lC13>)) "../src/motor.f":198 81 {*movdi_internal}
     (nil))
(insn 186 185 187 13 (set (reg:DI 5 di)
        (reg:DI 193)) "../src/motor.f":198 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 193)
        (nil)))
(call_insn 187 186 188 13 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 188 187 189 13 (parallel [
            (set (reg:DI 194)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -68 [0xffffffffffffffbc])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 189 188 190 13 (parallel [
            (set (reg:DI 195)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 190 189 191 13 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/motor.f":198 82 {*movsi_internal}
     (nil))
(insn 191 190 192 13 (set (reg:DI 4 si)
        (reg:DI 194)) "../src/motor.f":198 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 194)
        (nil)))
(insn 192 191 193 13 (set (reg:DI 5 di)
        (reg:DI 195)) "../src/motor.f":198 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 195)
        (nil)))
(call_insn 193 192 194 13 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 194 193 195 13 (parallel [
            (set (reg:DI 196)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":198 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 195 194 196 13 (set (reg:DI 5 di)
        (reg:DI 196)) "../src/motor.f":198 81 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 196)
        (nil)))
(call_insn 196 195 244 13 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/motor.f":198 655 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 244 196 245 13 (set (pc)
        (label_ref 197)) 649 {jump}
     (nil)
 -> 197)
;;  succ:       14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 247)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL)
;;  pred:       11
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 247 245 246 16 27 (nil) [1 uses])
(note 246 247 248 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 248 246 197 16 (const_int 0 [0]) "../src/motor.f":198 682 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 1, flags: (RTL)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              13
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 126 127 128 129 130 131 132 133 134 197 198 199 200 201 202 203 204 205 206 207 208
(code_label 197 248 198 14 23 (nil) [1 uses])
(note 198 197 199 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 14 (set (reg:SF 197)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [2 qm_omega+0 S4 A32])) "../src/motor.f":201 127 {*movsf_internal}
     (nil))
(insn 200 199 201 14 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 res_omega+0 S4 A32])
        (reg:SF 197)) "../src/motor.f":201 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 197)
        (nil)))
(insn 201 200 202 14 (set (reg:SF 198)
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [2  S4 A32])) "../src/motor.f":202 127 {*movsf_internal}
     (nil))
(insn 202 201 203 14 (set (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 res_q+0 S4 A32])
        (reg:SF 198)) "../src/motor.f":202 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 198)
        (nil)))
(insn 203 202 204 14 (set (reg:SF 199)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 res_omega+0 S4 A32])) "../src/motor.f":204 127 {*movsf_internal}
     (nil))
(insn 204 203 205 14 (set (reg:SF 123 [ _37 ])
        (div:SF (reg:SF 199)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32]))) "../src/motor.f":204 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 199)
        (nil)))
(insn 205 204 206 14 (set (reg:V4SF 200)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":204 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 206 205 207 14 (parallel [
            (set (reg:SF 124 [ _38 ])
                (neg:SF (reg:SF 123 [ _37 ])))
            (use (reg:V4SF 200))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":204 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 200)
        (expr_list:REG_DEAD (reg:SF 123 [ _37 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 123 [ _37 ]))
                    (nil))))))
(insn 207 206 208 14 (set (reg/f:DI 201)
        (mem/f/c:DI (reg/f:DI 16 argp) [10 volt_omega+0 S8 A64])) "../src/motor.f":204 81 {*movdi_internal}
     (nil))
(insn 208 207 209 14 (set (mem:SF (reg/f:DI 201) [2 *volt_omega_102(D)+0 S4 A32])
        (reg:SF 124 [ _38 ])) "../src/motor.f":204 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 201)
        (expr_list:REG_DEAD (reg:SF 124 [ _38 ])
            (nil))))
(insn 209 208 210 14 (set (reg:SF 202)
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 res_q+0 S4 A32])) "../src/motor.f":205 127 {*movsf_internal}
     (nil))
(insn 210 209 211 14 (set (reg:SF 125 [ _39 ])
        (div:SF (reg:SF 202)
            (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 res_volt+0 S4 A32]))) "../src/motor.f":205 805 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 202)
        (nil)))
(insn 211 210 212 14 (set (reg:V4SF 203)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC5") [flags 0x2]) [2  S16 A128])) "../src/motor.f":205 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 212 211 213 14 (parallel [
            (set (reg:SF 126 [ _40 ])
                (neg:SF (reg:SF 125 [ _39 ])))
            (use (reg:V4SF 203))
            (clobber (reg:CC 17 flags))
        ]) "../src/motor.f":205 470 {*absnegsf2}
     (expr_list:REG_DEAD (reg:V4SF 203)
        (expr_list:REG_DEAD (reg:SF 125 [ _39 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:SF (reg:SF 125 [ _39 ]))
                    (nil))))))
(insn 213 212 214 14 (set (reg/f:DI 204)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [10 volt_q+0 S8 A64])) "../src/motor.f":205 81 {*movdi_internal}
     (nil))
(insn 214 213 215 14 (set (mem:SF (reg/f:DI 204) [2 *volt_q_104(D)+0 S4 A32])
        (reg:SF 126 [ _40 ])) "../src/motor.f":205 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 204)
        (expr_list:REG_DEAD (reg:SF 126 [ _40 ])
            (nil))))
(insn 215 214 216 14 (set (reg/f:DI 205)
        (mem/f/c:DI (reg/f:DI 16 argp) [10 volt_omega+0 S8 A64])) "../src/motor.f":207 81 {*movdi_internal}
     (nil))
(insn 216 215 217 14 (set (reg:SF 127 [ _41 ])
        (mem:SF (reg/f:DI 205) [2 *volt_omega_102(D)+0 S4 A32])) "../src/motor.f":207 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 205)
        (nil)))
(insn 217 216 218 14 (set (reg:SF 128 [ am_volt.16_42 ])
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [2 am_volt+0 S4 A32])) "../src/motor.f":207 127 {*movsf_internal}
     (nil))
(insn 218 217 219 14 (set (reg:SF 129 [ _43 ])
        (mult:SF (reg:SF 127 [ _41 ])
            (reg:SF 128 [ am_volt.16_42 ]))) "../src/motor.f":207 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 128 [ am_volt.16_42 ])
        (expr_list:REG_DEAD (reg:SF 127 [ _41 ])
            (nil))))
(insn 219 218 220 14 (set (reg:SF 130 [ am_omega.17_44 ])
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 am_omega+0 S4 A64])) "../src/motor.f":207 127 {*movsf_internal}
     (nil))
(insn 220 219 221 14 (set (reg:SF 131 [ _45 ])
        (plus:SF (reg:SF 129 [ _43 ])
            (reg:SF 130 [ am_omega.17_44 ]))) "../src/motor.f":207 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 130 [ am_omega.17_44 ])
        (expr_list:REG_DEAD (reg:SF 129 [ _43 ])
            (nil))))
(insn 221 220 222 14 (set (reg/f:DI 206)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [10 amps_omega+0 S8 A64])) "../src/motor.f":207 81 {*movdi_internal}
     (nil))
(insn 222 221 223 14 (set (mem:SF (reg/f:DI 206) [2 *amps_omega_106(D)+0 S4 A32])
        (reg:SF 131 [ _45 ])) "../src/motor.f":207 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 206)
        (expr_list:REG_DEAD (reg:SF 131 [ _45 ])
            (nil))))
(insn 223 222 224 14 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [10 volt_q+0 S8 A64])) "../src/motor.f":208 81 {*movdi_internal}
     (nil))
(insn 224 223 225 14 (set (reg:SF 132 [ _46 ])
        (mem:SF (reg/f:DI 207) [2 *volt_q_104(D)+0 S4 A32])) "../src/motor.f":208 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (nil)))
(insn 225 224 226 14 (set (reg:SF 133 [ am_volt.18_47 ])
        (mem/c:SF (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [2 am_volt+0 S4 A32])) "../src/motor.f":208 127 {*movsf_internal}
     (nil))
(insn 226 225 227 14 (set (reg:SF 134 [ _48 ])
        (mult:SF (reg:SF 132 [ _46 ])
            (reg:SF 133 [ am_volt.18_47 ]))) "../src/motor.f":208 802 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 133 [ am_volt.18_47 ])
        (expr_list:REG_DEAD (reg:SF 132 [ _46 ])
            (nil))))
(insn 227 226 228 14 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [10 amps_q+0 S8 A64])) "../src/motor.f":208 81 {*movdi_internal}
     (nil))
(insn 228 227 234 14 (set (mem:SF (reg/f:DI 208) [2 *amps_q_108(D)+0 S4 A32])
        (reg:SF 134 [ _48 ])) "../src/motor.f":208 127 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (expr_list:REG_DEAD (reg:SF 134 [ _48 ])
            (nil))))
(insn 234 228 0 14 (const_int 0 [0]) "../src/motor.f":210 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

