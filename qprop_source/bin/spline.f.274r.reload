
;; Function sevall (sevall_, funcdef_no=0, decl_uid=3502, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=278 from oldreg=221, assigning class GENERAL_REGS to r278
   69: {r278:SI=r278:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  265: r278:SI=r100:SI
    Inserting insn reload after:
  266: r221:SI=r278:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 74:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 79:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 111:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 112:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 113:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 115:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 125:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 132:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 136:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 139:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 140
	 Choosing alt 1 in insn 140:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 141:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 144:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 152:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 153:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 155:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 156:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 160:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 162:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 166:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 168:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 169:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 171:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 172:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=279 from oldreg=135, assigning class SSE_REGS to r279
  172: r279:SF=r279:SF-r146:SF
      REG_DEAD r146:SF
      REG_DEAD r135:SF
    Inserting insn reload before:
  267: r279:SF=r135:SF
    Inserting insn reload after:
  268: r254:SF=r279:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 173:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 177:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 179:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 182:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 1 in insn 185:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 187:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 190:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 198:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 199:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 202:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 203:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 205:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 206:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 208:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 209:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 211:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 212:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 214:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 215:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 216:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=280 from oldreg=266, assigning class SSE_REGS to r280
  216: r280:SF=r280:SF+r266:SF
      REG_DEAD r266:SF
    Inserting insn reload before:
  269: r280:SF=r266:SF
    Inserting insn reload after:
  270: r175:SF=r280:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 217:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 218:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 219
	 Choosing alt 1 in insn 219:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 220:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 1 in insn 221:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 223:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 224:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 227:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 228:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=281 from oldreg=270, assigning class SSE_REGS to r281
  228: r281:SF=r281:SF+r270:SF
      REG_DEAD r270:SF
    Inserting insn reload before:
  271: r281:SF=r270:SF
    Inserting insn reload after:
  272: r182:SF=r281:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 229:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 230:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 1 in insn 231:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 233
	 Choosing alt 1 in insn 233:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 235:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 237:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 238:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 240:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 241:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 242:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 244:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 245:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=282 from oldreg=188, assigning class SSE_REGS to r282
  245: r282:SF=r282:SF/r206:SF
      REG_DEAD r206:SF
      REG_DEAD r188:SF
    Inserting insn reload before:
  273: r282:SF=r188:SF
    Inserting insn reload after:
  274: r189:SF=r282:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 247:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 255: point = 0, n_alt = -1
   Insn 247: point = 0, n_alt = 8
   Insn 246: point = 1, n_alt = 3
   Insn 274: point = 2, n_alt = -1
	Hard reg 21 is preferable by r282 with profit 1
   Insn 245: point = 4, n_alt = 2
   Insn 273: point = 5, n_alt = -1
	Hard reg 21 is preferable by r282 with profit 1
	Hard reg 22 is preferable by r282 with profit 1
   Insn 244: point = 7, n_alt = 7
   Insn 243: point = 9, n_alt = 3
   Insn 242: point = 10, n_alt = 1
   Insn 241: point = 12, n_alt = 7
   Insn 240: point = 13, n_alt = 8
   Insn 239: point = 14, n_alt = 3
   Insn 238: point = 15, n_alt = 2
   Insn 237: point = 17, n_alt = 7
   Insn 236: point = 19, n_alt = 3
   Insn 235: point = 20, n_alt = 8
   Insn 234: point = 21, n_alt = 3
   Insn 233: point = 22, n_alt = 1
   Insn 232: point = 24, n_alt = 1
   Insn 231: point = 26, n_alt = 1
   Insn 230: point = 28, n_alt = 7
   Insn 229: point = 29, n_alt = 7
   Insn 272: point = 30, n_alt = -1
	Hard reg 22 is preferable by r281 with profit 1
   Insn 228: point = 32, n_alt = 1
   Insn 271: point = 33, n_alt = -1
	Hard reg 22 is preferable by r281 with profit 1
	Hard reg 21 is preferable by r281 with profit 1
   Insn 227: point = 34, n_alt = 7
   Insn 226: point = 35, n_alt = 8
   Insn 225: point = 36, n_alt = 3
   Insn 224: point = 37, n_alt = 1
   Insn 223: point = 39, n_alt = 1
   Insn 222: point = 41, n_alt = -1
   Insn 221: point = 43, n_alt = 1
   Insn 220: point = 45, n_alt = 1
   Insn 219: point = 47, n_alt = 1
   Insn 218: point = 49, n_alt = 7
   Insn 217: point = 50, n_alt = 7
   Insn 270: point = 51, n_alt = -1
	Hard reg 22 is preferable by r280 with profit 1
   Insn 216: point = 53, n_alt = 1
   Insn 269: point = 54, n_alt = -1
	Hard reg 22 is preferable by r280 with profit 1
	Hard reg 21 is preferable by r280 with profit 1
   Insn 215: point = 55, n_alt = 7
   Insn 214: point = 56, n_alt = 8
   Insn 213: point = 57, n_alt = 3
   Insn 212: point = 58, n_alt = 1
   Insn 211: point = 60, n_alt = 1
   Insn 210: point = 62, n_alt = -1
   Insn 209: point = 64, n_alt = 1
   Insn 208: point = 66, n_alt = 1
   Insn 207: point = 68, n_alt = -1
   Insn 206: point = 70, n_alt = 1
   Insn 205: point = 72, n_alt = 1
   Insn 204: point = 74, n_alt = 7
   Insn 203: point = 75, n_alt = 8
   Insn 202: point = 76, n_alt = 2
   Insn 201: point = 78, n_alt = 1
   Insn 200: point = 80, n_alt = -1
   Insn 199: point = 82, n_alt = 2
   Insn 198: point = 84, n_alt = 7
   Insn 197: point = 86, n_alt = 3
   Insn 196: point = 87, n_alt = 3
   Insn 195: point = 89, n_alt = 0
   Insn 194: point = 91, n_alt = 0
   Insn 193: point = 93, n_alt = 0
   Insn 192: point = 94, n_alt = 7
   Insn 191: point = 96, n_alt = 3
   Insn 190: point = 97, n_alt = 3
   Insn 189: point = 99, n_alt = 0
   Insn 188: point = 101, n_alt = 0
   Insn 187: point = 102, n_alt = 1
   Insn 186: point = 104, n_alt = -1
   Insn 185: point = 106, n_alt = 1
   Insn 184: point = 108, n_alt = 7
   Insn 183: point = 110, n_alt = 3
   Insn 182: point = 111, n_alt = 3
   Insn 181: point = 113, n_alt = 0
   Insn 180: point = 115, n_alt = 0
   Insn 179: point = 116, n_alt = 7
   Insn 178: point = 118, n_alt = 3
   Insn 177: point = 119, n_alt = 3
   Insn 176: point = 121, n_alt = 0
   Insn 175: point = 123, n_alt = 0
   Insn 174: point = 125, n_alt = 0
   Insn 173: point = 126, n_alt = 8
   Insn 268: point = 127, n_alt = -1
	Hard reg 21 is preferable by r279 with profit 1
   Insn 172: point = 129, n_alt = 2
   Insn 267: point = 130, n_alt = -1
	Hard reg 21 is preferable by r279 with profit 1
	Hard reg 22 is preferable by r279 with profit 1
   Insn 171: point = 132, n_alt = 1
   Insn 170: point = 134, n_alt = -1
   Insn 169: point = 136, n_alt = 1
   Insn 168: point = 138, n_alt = 7
   Insn 167: point = 140, n_alt = 3
   Insn 166: point = 141, n_alt = 3
   Insn 165: point = 143, n_alt = 0
   Insn 164: point = 145, n_alt = 0
   Insn 163: point = 146, n_alt = 1
   Insn 162: point = 148, n_alt = 7
   Insn 161: point = 150, n_alt = 3
   Insn 160: point = 151, n_alt = 3
   Insn 159: point = 153, n_alt = 0
   Insn 158: point = 155, n_alt = 0
   Insn 157: point = 157, n_alt = 0
   Insn 156: point = 158, n_alt = 1
   Insn 155: point = 160, n_alt = 7
   Insn 154: point = 161, n_alt = -1
   Insn 153: point = 163, n_alt = 2
   Insn 152: point = 165, n_alt = 7
   Insn 151: point = 167, n_alt = 3
   Insn 150: point = 168, n_alt = 3
   Insn 149: point = 170, n_alt = 0
   Insn 148: point = 172, n_alt = 0
   Insn 147: point = 174, n_alt = 0
   Insn 146: point = 175, n_alt = 7
   Insn 145: point = 177, n_alt = 3
   Insn 144: point = 178, n_alt = 3
   Insn 143: point = 180, n_alt = 0
   Insn 142: point = 182, n_alt = 0
   Insn 141: point = 183, n_alt = 8
   Insn 140: point = 184, n_alt = 1
   Insn 139: point = 186, n_alt = 7
   Insn 138: point = 187, n_alt = 7
   Insn 137: point = 189, n_alt = 3
   Insn 136: point = 190, n_alt = 3
   Insn 135: point = 192, n_alt = 0
   Insn 134: point = 194, n_alt = 0
   Insn 133: point = 196, n_alt = 0
   Insn 132: point = 197, n_alt = 8
   Insn 131: point = 198, n_alt = 7
   Insn 130: point = 200, n_alt = 3
   Insn 129: point = 201, n_alt = 3
   Insn 128: point = 203, n_alt = 0
   Insn 127: point = 205, n_alt = 0
   Insn 126: point = 207, n_alt = 0
   Insn 125: point = 208, n_alt = 8
   Insn 124: point = 209, n_alt = 2
   Insn 123: point = 211, n_alt = -1
   Insn 122: point = 213, n_alt = 2
   Insn 121: point = 215, n_alt = 7
   Insn 120: point = 217, n_alt = 3
   Insn 119: point = 218, n_alt = 3
   Insn 118: point = 220, n_alt = 0
   Insn 117: point = 222, n_alt = 0
   Insn 116: point = 224, n_alt = 0
   Insn 115: point = 225, n_alt = 7
   Insn 114: point = 227, n_alt = 3
   Insn 113: point = 228, n_alt = 8
   Insn 112: point = 229, n_alt = 2
   Insn 111: point = 231, n_alt = 7
   Insn 110: point = 233, n_alt = 3
   Insn 109: point = 234, n_alt = 3
   Insn 108: point = 236, n_alt = 0
   Insn 107: point = 238, n_alt = 0
   Insn 106: point = 240, n_alt = 0
   Insn 105: point = 241, n_alt = 7
   Insn 104: point = 243, n_alt = 3
   Insn 103: point = 244, n_alt = 3
   Insn 102: point = 246, n_alt = 0
   Insn 101: point = 248, n_alt = 0
  BB 9
   Insn 263: point = 249, n_alt = -1
  BB 3
   Insn 64: point = 249, n_alt = -1
   Insn 63: point = 249, n_alt = 0
   Insn 62: point = 250, n_alt = 1
   Insn 61: point = 252, n_alt = 0
  BB 7
   Insn 259: point = 253, n_alt = -1
  BB 5
   Insn 257: point = 253, n_alt = -1
   Insn 87: point = 253, n_alt = 1
   Insn 86: point = 254, n_alt = 0
  BB 6
   Insn 93: point = 255, n_alt = 1
   Insn 92: point = 256, n_alt = 0
  BB 4
   Insn 81: point = 257, n_alt = -1
   Insn 80: point = 257, n_alt = 1
   Insn 79: point = 258, n_alt = 7
   Insn 78: point = 260, n_alt = 3
   Insn 77: point = 261, n_alt = 3
   Insn 76: point = 263, n_alt = 0
   Insn 75: point = 265, n_alt = 0
   Insn 74: point = 266, n_alt = 7
   Insn 73: point = 268, n_alt = 3
   Insn 72: point = 269, n_alt = 1
   Insn 71: point = 270, n_alt = 0
   Insn 70: point = 272, n_alt = 0
   Insn 266: point = 274, n_alt = -1
	Hard reg 1 is preferable by r278 with profit 1
   Insn 69: point = 276, n_alt = 0
   Insn 265: point = 276, n_alt = -1
   Insn 68: point = 277, n_alt = 0
   Insn 67: point = 279, n_alt = 0
   Insn 66: point = 280, n_alt = 0
  BB 2
   Insn 59: point = 281, n_alt = 1
   Insn 58: point = 282, n_alt = 0
   Insn 57: point = 284, n_alt = 3
   Insn 56: point = 285, n_alt = 1
   Insn 52: point = 285, n_alt = 2
   Insn 51: point = 286, n_alt = 3
   Insn 50: point = 287, n_alt = -1
   Insn 48: point = 289, n_alt = 1
   Insn 46: point = 291, n_alt = 0
   Insn 47: point = 291, n_alt = 2
   Insn 45: point = 292, n_alt = 3
   Insn 44: point = 293, n_alt = 5
   Insn 43: point = 294, n_alt = 0
   Insn 42: point = 296, n_alt = 0
   Insn 41: point = 298, n_alt = 3
   Insn 37: point = 299, n_alt = 2
   Insn 36: point = 300, n_alt = 3
   Insn 35: point = 301, n_alt = -1
   Insn 33: point = 303, n_alt = 1
   Insn 31: point = 305, n_alt = 0
   Insn 32: point = 305, n_alt = 2
   Insn 30: point = 306, n_alt = 3
   Insn 29: point = 307, n_alt = 5
   Insn 28: point = 308, n_alt = 0
   Insn 27: point = 310, n_alt = 0
   Insn 26: point = 312, n_alt = 3
   Insn 22: point = 313, n_alt = 2
   Insn 21: point = 314, n_alt = 3
   Insn 20: point = 315, n_alt = -1
   Insn 18: point = 317, n_alt = 1
   Insn 16: point = 319, n_alt = 0
   Insn 17: point = 319, n_alt = 2
   Insn 15: point = 320, n_alt = 3
   Insn 14: point = 321, n_alt = 5
   Insn 13: point = 322, n_alt = 0
   Insn 12: point = 324, n_alt = 0
   Insn 11: point = 326, n_alt = 3
   Insn 7: point = 327, n_alt = 5
   Insn 6: point = 327, n_alt = 5
   Insn 5: point = 327, n_alt = 5
   Insn 4: point = 327, n_alt = 5
   Insn 3: point = 327, n_alt = 5
   Insn 2: point = 327, n_alt = 5
 r87: [323..324]
 r88: [314..315]
 r89: [313..327]
 r91: [309..310]
 r92: [300..301]
 r93: [299..327]
 r95: [295..296]
 r96: [286..287]
 r97: [285..327]
 r99: [249..250]
 r100: [273..277]
 r101: [257..266]
 r102: [262..263]
 r103: [259..261]
 r104: [257..258]
 r105: [245..246]
 r106: [242..244]
 r107: [230..241]
 r108: [237..238]
 r109: [235..236]
 r110: [232..234]
 r111: [230..231]
 r112: [214..225]
 r113: [221..222]
 r114: [219..220]
 r115: [216..218]
 r116: [214..215]
 r117: [212..213]
 r118: [210..211]
 r119: [204..205]
 r120: [202..203]
 r121: [199..201]
 r122: [193..194]
 r123: [191..192]
 r124: [188..190]
 r125: [185..187]
 r126: [179..180]
 r127: [176..178]
 r128: [164..175]
 r129: [171..172]
 r130: [169..170]
 r131: [166..168]
 r132: [164..165]
 r133: [162..163]
 r134: [159..161]
 r135: [131..158]
 r136: [154..155]
 r137: [152..153]
 r138: [149..151]
 r139: [147..148]
 r140: [137..146]
 r141: [142..143]
 r142: [139..141]
 r143: [137..138]
 r144: [135..136]
 r145: [133..134]
 r146: [129..132]
 r147: [122..123]
 r148: [120..121]
 r149: [117..119]
 r150: [107..116]
 r151: [112..113]
 r152: [109..111]
 r153: [107..108]
 r154: [105..106]
 r155: [103..104]
 r156: [77..102]
 r157: [98..99]
 r158: [95..97]
 r159: [83..94]
 r160: [90..91]
 r161: [88..89]
 r162: [85..87]
 r163: [83..84]
 r164: [81..82]
 r165: [79..80]
 r166: [77..78]
 r167: [71..72]
 r168: [69..70]
 r169: [67..68]
 r170: [65..66]
 r171: [63..64]
 r172: [61..62]
 r173: [59..60]
 r174: [56..58]
 r175: [44..51]
 r176: [46..47]
 r177: [44..45]
 r178: [42..43]
 r179: [40..41]
 r180: [38..39]
 r181: [35..37]
 r182: [23..30]
 r183: [25..26]
 r184: [23..24]
 r185: [20..22]
 r186: [16..17]
 r187: [13..15]
 r188: [6..7]
 r189: [0..2]
 r190: [318..320]
 r191: [316..317]
 r195: [304..306]
 r196: [302..303]
 r200: [290..292]
 r201: [288..289]
 r205: [11..12]
 r206: [4..10]
 r207: [325..326]
 r208: [321..322]
 r209: [318..319]
 r210: [311..312]
 r211: [307..308]
 r212: [304..305]
 r213: [297..298]
 r214: [293..294]
 r215: [290..291]
 r216: [283..284]
 r217: [281..282]
 r218: [251..252]
 r219: [278..280]
 r220: [278..279]
 r221: [273..274]
 r222: [271..272]
 r223: [269..270]
 r224: [267..268]
 r225: [264..265]
 r226: [259..260]
 r227: [253..254]
 r228: [255..256]
 r229: [247..248]
 r230: [242..243]
 r231: [239..240]
 r232: [232..233]
 r233: [228..229]
 r234: [226..227]
 r235: [223..224]
 r236: [216..217]
 r237: [208..209]
 r238: [206..207]
 r239: [199..200]
 r240: [197..198]
 r241: [195..196]
 r242: [188..189]
 r243: [183..184]
 r244: [185..186]
 r245: [181..182]
 r246: [176..177]
 r247: [173..174]
 r248: [166..167]
 r249: [159..160]
 r250: [156..157]
 r251: [149..150]
 r252: [144..145]
 r253: [139..140]
 r254: [126..127]
 r255: [124..125]
 r256: [117..118]
 r257: [114..115]
 r258: [109..110]
 r259: [100..101]
 r260: [95..96]
 r261: [92..93]
 r262: [85..86]
 r263: [75..76]
 r264: [73..74]
 r265: [56..57]
 r266: [53..55]
 r267: [48..50]
 r268: [48..49]
 r269: [35..36]
 r270: [32..34]
 r271: [27..29]
 r272: [27..28]
 r273: [20..21]
 r274: [18..19]
 r275: [13..14]
 r276: [8..9]
 r277: [0..1]
 r278: [275..276]
 r279: [128..130]
 r280: [52..54]
 r281: [31..33]
 r282: [3..5]
Compressing live ranges: from 328 to 278 - 84%
Ranges after the compression:
 r87: [274..275]
 r88: [266..267]
 r89: [266..277]
 r91: [262..263]
 r92: [254..255]
 r93: [254..277]
 r95: [250..251]
 r96: [242..243]
 r97: [242..277]
 r99: [210..211]
 r100: [232..235]
 r101: [218..225]
 r102: [222..223]
 r103: [220..221]
 r104: [218..219]
 r105: [206..207]
 r106: [204..205]
 r107: [194..203]
 r108: [200..201]
 r109: [198..199]
 r110: [196..197]
 r111: [194..195]
 r112: [180..189]
 r113: [186..187]
 r114: [184..185]
 r115: [182..183]
 r116: [180..181]
 r117: [178..179]
 r118: [176..177]
 r119: [170..171]
 r120: [168..169]
 r121: [166..167]
 r122: [160..161]
 r123: [158..159]
 r124: [156..157]
 r125: [154..155]
 r126: [148..149]
 r127: [146..147]
 r128: [136..145]
 r129: [142..143]
 r130: [140..141]
 r131: [138..139]
 r132: [136..137]
 r133: [134..135]
 r134: [132..133]
 r135: [108..131]
 r136: [128..129]
 r137: [126..127]
 r138: [124..125]
 r139: [122..123]
 r140: [114..121]
 r141: [118..119]
 r142: [116..117]
 r143: [114..115]
 r144: [112..113]
 r145: [110..111]
 r146: [106..109]
 r147: [100..101]
 r148: [98..99]
 r149: [96..97]
 r150: [88..95]
 r151: [92..93]
 r152: [90..91]
 r153: [88..89]
 r154: [86..87]
 r155: [84..85]
 r156: [62..83]
 r157: [80..81]
 r158: [78..79]
 r159: [68..77]
 r160: [74..75]
 r161: [72..73]
 r162: [70..71]
 r163: [68..69]
 r164: [66..67]
 r165: [64..65]
 r166: [62..63]
 r167: [56..57]
 r168: [54..55]
 r169: [52..53]
 r170: [50..51]
 r171: [48..49]
 r172: [46..47]
 r173: [44..45]
 r174: [42..43]
 r175: [34..39]
 r176: [36..37]
 r177: [34..35]
 r178: [32..33]
 r179: [30..31]
 r180: [28..29]
 r181: [26..27]
 r182: [18..23]
 r183: [20..21]
 r184: [18..19]
 r185: [16..17]
 r186: [12..13]
 r187: [10..11]
 r188: [4..5]
 r189: [0..1]
 r190: [270..271]
 r191: [268..269]
 r195: [258..259]
 r196: [256..257]
 r200: [246..247]
 r201: [244..245]
 r205: [8..9]
 r206: [2..7]
 r207: [276..277]
 r208: [272..273]
 r209: [270..271]
 r210: [264..265]
 r211: [260..261]
 r212: [258..259]
 r213: [252..253]
 r214: [248..249]
 r215: [246..247]
 r216: [240..241]
 r217: [238..239]
 r218: [212..213]
 r219: [236..237]
 r220: [236..237]
 r221: [232..233]
 r222: [230..231]
 r223: [228..229]
 r224: [226..227]
 r225: [224..225]
 r226: [220..221]
 r227: [214..215]
 r228: [216..217]
 r229: [208..209]
 r230: [204..205]
 r231: [202..203]
 r232: [196..197]
 r233: [192..193]
 r234: [190..191]
 r235: [188..189]
 r236: [182..183]
 r237: [174..175]
 r238: [172..173]
 r239: [166..167]
 r240: [164..165]
 r241: [162..163]
 r242: [156..157]
 r243: [152..153]
 r244: [154..155]
 r245: [150..151]
 r246: [146..147]
 r247: [144..145]
 r248: [138..139]
 r249: [132..133]
 r250: [130..131]
 r251: [124..125]
 r252: [120..121]
 r253: [116..117]
 r254: [104..105]
 r255: [102..103]
 r256: [96..97]
 r257: [94..95]
 r258: [90..91]
 r259: [82..83]
 r260: [78..79]
 r261: [76..77]
 r262: [70..71]
 r263: [60..61]
 r264: [58..59]
 r265: [42..43]
 r266: [40..41]
 r267: [38..39]
 r268: [38..39]
 r269: [26..27]
 r270: [24..25]
 r271: [22..23]
 r272: [22..23]
 r273: [16..17]
 r274: [14..15]
 r275: [10..11]
 r276: [6..7]
 r277: [0..1]
 r278: [234..235]
 r279: [106..107]
 r280: [40..41]
 r281: [24..25]
 r282: [2..3]

********** Assignment #1: **********

	 Assigning to 278 (cl=GENERAL_REGS, orig=221, freq=3, tfirst=278, tfreq=3)...
	   Assign 1 to reload r278 (freq=3)
	 Assigning to 279 (cl=SSE_REGS, orig=135, freq=3, tfirst=279, tfreq=3)...
	   Assign 22 to reload r279 (freq=3)
	 Assigning to 280 (cl=SSE_REGS, orig=266, freq=3, tfirst=280, tfreq=3)...
	   Assign 22 to reload r280 (freq=3)
	 Assigning to 281 (cl=SSE_REGS, orig=270, freq=3, tfirst=281, tfreq=3)...
	   Assign 22 to reload r281 (freq=3)
	 Assigning to 282 (cl=SSE_REGS, orig=188, freq=3, tfirst=282, tfreq=3)...
	   Assign 22 to reload r282 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 74
changing reg in insn 80
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 112
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 122
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 153
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 163
changing reg in insn 169
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 202
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 192
changing reg in insn 199
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 226
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 240
changing reg in insn 244
changing reg in insn 247
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 242
changing reg in insn 245
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 86
changing reg in insn 87
changing reg in insn 92
changing reg in insn 93
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 139
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 197
changing reg in insn 198
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 243
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 266.
deleting insn with uid = 123.
deleting insn with uid = 170.
deleting insn with uid = 267.
deleting insn with uid = 186.
deleting insn with uid = 200.
deleting insn with uid = 207.
deleting insn with uid = 210.
deleting insn with uid = 270.
deleting insn with uid = 222.
deleting insn with uid = 272.
deleting insn with uid = 273.
starting the processing of deferred insns
ending the processing of deferred insns


sevall

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={85d,88u} r1={21d,21u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,100u} r7={1d,9u} r17={32d,5u} r20={1d,1u,12e} r21={46d,49u} r22={19d,19u} r23={5d,4u} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} 
;;    total ref usage 540{227d,301u,12e} in 213{213 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 190 191 195 196 200 201 207 208 209 210 211 212 213 214 215 216 217
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])
        (reg:DI 2 cx [ s ])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])
        (reg:DI 37 r8 [ n ])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [4 xx+0 S8 A64])
        (reg:DI 38 r9 [ xx ])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [207]) [1 *n_109(D)+0 S4 A32])) "../src/spline.f":398 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [208])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":398 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.0+0 S8 A64])
        (reg:DI 0 ax [208])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:190 size.1_111 ] [190])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.0+0 S8 A64])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [209])
        (const_int 0 [0])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:190 size.1_111 ] [190])
            (const_int 0 [0]))) "../src/spline.f":398 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:191 size.1_112 ] [191])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:190 size.1_111 ] [190])
            (reg:DI 1 dx [209]))) "../src/spline.f":398 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (reg:DI 43 r14 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.144_2 ] [88])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (reg:DI 44 r15 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [210]) [1 *n_109(D)+0 S4 A32])) "../src/spline.f":398 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [211])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":398 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.2+0 S8 A64])
        (reg:DI 0 ax [211])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:195 size.3_117 ] [195])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.2+0 S8 A64])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [212])
        (const_int 0 [0])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:195 size.3_117 ] [195])
            (const_int 0 [0]))) "../src/spline.f":398 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:196 size.3_118 ] [196])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:195 size.3_117 ] [195])
            (reg:DI 1 dx [212]))) "../src/spline.f":398 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (reg:DI 41 r12 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.146_6 ] [92])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (reg:DI 42 r13 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [213]) [1 *n_109(D)+0 S4 A32])) "../src/spline.f":398 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [214])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":398 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.4+0 S8 A64])
        (reg:DI 0 ax [214])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:200 size.5_123 ] [200])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.4+0 S8 A64])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [215])
        (const_int 0 [0])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:200 size.5_123 ] [200])
            (const_int 0 [0]))) "../src/spline.f":398 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:201 size.5_124 ] [201])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:200 size.5_123 ] [200])
            (reg:DI 1 dx [215]))) "../src/spline.f":398 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 39 r10 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.148_10 ] [96])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 40 r11 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":398 81 {*movdi_internal}
     (nil))
(insn 56 52 57 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":406 82 {*movsi_internal}
     (nil))
(insn 57 56 58 2 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":407 81 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:SI 0 ax [217])
        (mem:SI (reg/f:DI 0 ax [216]) [1 *n_109(D)+0 S4 A32])) "../src/spline.f":407 82 {*movsi_internal}
     (nil))
(insn 59 58 96 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [217])) "../src/spline.f":407 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 218
(code_label 96 59 60 3 6 (nil) [1 uses])
(note 60 96 61 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 3 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":409 82 {*movsi_internal}
     (nil))
(insn 62 61 63 3 (parallel [
            (set (reg:SI 0 ax [orig:99 _13 ] [99])
                (minus:SI (reg:SI 0 ax [218])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":409 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 63 62 64 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 1 [0x1]))) "../src/spline.f":409 7 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 262)
            (pc))) "../src/spline.f":409 617 {*jcc_1}
     (nil)
 -> 262)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 219 220 221 222 223 224 225 226
(note 65 64 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 4 (set (reg:SI 1 dx [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":411 82 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 0 ax [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":411 82 {*movsi_internal}
     (nil))
(insn 68 67 265 4 (parallel [
            (set (reg:SI 0 ax [orig:100 _14 ] [100])
                (plus:SI (reg:SI 0 ax [220])
                    (reg:SI 1 dx [219])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":411 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 265 68 69 4 (set (reg:SI 1 dx [221])
        (reg:SI 0 ax [orig:100 _14 ] [100])) "../src/spline.f":411 82 {*movsi_internal}
     (nil))
(insn 69 265 70 4 (parallel [
            (set (reg:SI 1 dx [221])
                (lshiftrt:SI (reg:SI 1 dx [221])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":411 544 {*lshrsi3_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 0 ax [222])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (reg:SI 1 dx [221])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":411 217 {*addsi_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:SI 0 ax [223])
                (ashiftrt:SI (reg:SI 0 ax [222])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":411 545 {*ashrsi3_1}
     (nil))
(insn 72 71 73 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [223])) "../src/spline.f":411 82 {*movsi_internal}
     (nil))
(insn 73 72 74 4 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":412 81 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SF 22 xmm1 [orig:101 _15 ] [101])
        (mem:SF (reg/f:DI 0 ax [224]) [3 *ss_131(D)+0 S4 A32])) "../src/spline.f":412 127 {*movsf_internal}
     (nil))
(insn 75 74 76 4 (set (reg:SI 0 ax [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":412 82 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [225]))) "../src/spline.f":412 145 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":412 218 {*adddi_1}
     (nil))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":412 81 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [226])) [3 *s_132(D) S4 A32])) "../src/spline.f":412 127 {*movsf_internal}
     (nil))
(insn 80 79 81 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:101 _15 ] [101]))) "../src/spline.f":412 51 {*cmpiusf}
     (nil))
(jump_insn 81 80 85 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 256)
            (pc))) "../src/spline.f":412 617 {*jcc_1}
     (nil)
 -> 256)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 227
(note 85 81 86 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 5 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":413 82 {*movsi_internal}
     (nil))
(insn 87 86 257 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [227])) "../src/spline.f":413 82 {*movsi_internal}
     (nil))
(jump_insn 257 87 258 5 (set (pc)
        (label_ref 94)) 649 {jump}
     (nil)
 -> 94)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 258 257 256)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 228
(code_label 256 258 91 6 9 (nil) [1 uses])
(note 91 256 92 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 6 (set (reg:SI 0 ax [228])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":415 82 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [228])) "../src/spline.f":415 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 94 93 95 7 5 (nil) [1 uses])
(note 95 94 259 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 259 95 260 7 (set (pc)
        (label_ref 96)) "../src/spline.f":417 649 {jump}
     (nil)
 -> 96)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 260 259 262)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 262 260 261 9 10 (nil) [1 uses])
(note 261 262 263 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 263 261 99 9 (const_int 0 [0]) "../src/spline.f":417 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(code_label 99 263 100 8 2 (nil) [0 uses])
(note 100 99 101 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 8 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":419 82 {*movsi_internal}
     (nil))
(insn 102 101 103 8 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [229]))) "../src/spline.f":419 145 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 8 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":419 218 {*adddi_1}
     (nil))
(insn 104 103 105 8 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":419 81 {*movdi_internal}
     (nil))
(insn 105 104 106 8 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [230])) [3 *s_132(D) S4 A32])) "../src/spline.f":419 127 {*movsf_internal}
     (nil))
(insn 106 105 107 8 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":419 82 {*movsi_internal}
     (nil))
(insn 107 106 108 8 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [231])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":419 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 108 107 109 8 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":419 145 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 8 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":419 218 {*adddi_1}
     (nil))
(insn 110 109 111 8 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":419 81 {*movdi_internal}
     (nil))
(insn 111 110 112 8 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [232])) [3 *s_132(D) S4 A32])) "../src/spline.f":419 127 {*movsf_internal}
     (nil))
(insn 112 111 113 8 (set (reg:SF 21 xmm0 [233])
        (minus:SF (reg:SF 21 xmm0 [orig:107 _21 ] [107])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "../src/spline.f":419 805 {*fop_sf_1}
     (nil))
(insn 113 112 114 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [233])) "../src/spline.f":419 127 {*movsf_internal}
     (nil))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":420 81 {*movdi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (reg/f:DI 0 ax [234]) [3 *ss_131(D)+0 S4 A32])) "../src/spline.f":420 127 {*movsf_internal}
     (nil))
(insn 116 115 117 8 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":420 82 {*movsi_internal}
     (nil))
(insn 117 116 118 8 (parallel [
            (set (reg:SI 0 ax [orig:113 _27 ] [113])
                (plus:SI (reg:SI 0 ax [235])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":420 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 118 117 119 8 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _27 ] [113]))) "../src/spline.f":420 145 {*extendsidi2_rex64}
     (nil))
(insn 119 118 120 8 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":420 218 {*adddi_1}
     (nil))
(insn 120 119 121 8 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":420 81 {*movdi_internal}
     (nil))
(insn 121 120 122 8 (set (reg:SF 22 xmm1 [orig:116 _30 ] [116])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [236])) [3 *s_132(D) S4 A32])) "../src/spline.f":420 127 {*movsf_internal}
     (nil))
(insn 122 121 124 8 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (minus:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:116 _30 ] [116]))) "../src/spline.f":420 805 {*fop_sf_1}
     (nil))
(insn 124 122 125 8 (set (reg:SF 21 xmm0 [237])
        (div:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":420 805 {*fop_sf_1}
     (nil))
(insn 125 124 126 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [237])) "../src/spline.f":420 127 {*movsf_internal}
     (nil))
(insn 126 125 127 8 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":422 82 {*movsi_internal}
     (nil))
(insn 127 126 128 8 (parallel [
            (set (reg:SI 0 ax [orig:119 _33 ] [119])
                (plus:SI (reg:SI 0 ax [238])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":422 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 128 127 129 8 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _33 ] [119]))) "../src/spline.f":422 145 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 8 (parallel [
            (set (reg:DI 1 dx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":422 218 {*adddi_1}
     (nil))
(insn 130 129 131 8 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":422 81 {*movdi_internal}
     (nil))
(insn 131 130 132 8 (set (reg:SF 21 xmm0 [240])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [239])) [3 *x_137(D) S4 A32])) "../src/spline.f":422 127 {*movsf_internal}
     (nil))
(insn 132 131 133 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 f0+0 S4 A32])
        (reg:SF 21 xmm0 [240])) "../src/spline.f":422 127 {*movsf_internal}
     (nil))
(insn 133 132 134 8 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":423 82 {*movsi_internal}
     (nil))
(insn 134 133 135 8 (parallel [
            (set (reg:SI 0 ax [orig:122 _36 ] [122])
                (plus:SI (reg:SI 0 ax [241])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":423 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 135 134 136 8 (set (reg:DI 0 ax [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 0 ax [orig:122 _36 ] [122]))) "../src/spline.f":423 145 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 8 (parallel [
            (set (reg:DI 1 dx [orig:124 _38 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":423 218 {*adddi_1}
     (nil))
(insn 137 136 138 8 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":423 81 {*movdi_internal}
     (nil))
(insn 138 137 139 8 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:124 _38 ] [124])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [242])) [3 *xs_139(D) S4 A32])) "../src/spline.f":423 127 {*movsf_internal}
     (nil))
(insn 139 138 140 8 (set (reg:SF 22 xmm1 [244])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])) "../src/spline.f":423 127 {*movsf_internal}
     (nil))
(insn 140 139 141 8 (set (reg:SF 21 xmm0 [243])
        (mult:SF (reg:SF 21 xmm0 [orig:125 _39 ] [125])
            (reg:SF 22 xmm1 [244]))) "../src/spline.f":423 802 {*fop_sf_comm}
     (nil))
(insn 141 140 142 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 f1+0 S4 A32])
        (reg:SF 21 xmm0 [243])) "../src/spline.f":423 127 {*movsf_internal}
     (nil))
(insn 142 141 143 8 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":424 82 {*movsi_internal}
     (nil))
(insn 143 142 144 8 (set (reg:DI 0 ax [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 0 ax [245]))) "../src/spline.f":424 145 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 8 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (plus:DI (reg:DI 0 ax [orig:126 _40 ] [126])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":424 218 {*adddi_1}
     (nil))
(insn 145 144 146 8 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":424 81 {*movdi_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SF 21 xmm0 [orig:128 _42 ] [128])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:127 _41 ] [127])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [246])) [3 *x_137(D) S4 A32])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 147 146 148 8 (set (reg:SI 0 ax [247])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":424 82 {*movsi_internal}
     (nil))
(insn 148 147 149 8 (parallel [
            (set (reg:SI 0 ax [orig:129 _43 ] [129])
                (plus:SI (reg:SI 0 ax [247])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":424 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 149 148 150 8 (set (reg:DI 0 ax [orig:130 _44 ] [130])
        (sign_extend:DI (reg:SI 0 ax [orig:129 _43 ] [129]))) "../src/spline.f":424 145 {*extendsidi2_rex64}
     (nil))
(insn 150 149 151 8 (parallel [
            (set (reg:DI 1 dx [orig:131 _45 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":424 218 {*adddi_1}
     (nil))
(insn 151 150 152 8 (set (reg/f:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":424 81 {*movdi_internal}
     (nil))
(insn 152 151 153 8 (set (reg:SF 22 xmm1 [orig:132 _46 ] [132])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:131 _45 ] [131])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [248])) [3 *x_137(D) S4 A32])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 153 152 154 8 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (minus:SF (reg:SF 21 xmm0 [orig:128 _42 ] [128])
            (reg:SF 22 xmm1 [orig:132 _46 ] [132]))) "../src/spline.f":424 805 {*fop_sf_1}
     (nil))
(insn 154 153 155 8 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (reg:SF 21 xmm0 [orig:133 _47 ] [133])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 155 154 156 8 (set (reg:SF 21 xmm0 [249])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":424 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 156 155 157 8 (set (reg:SF 22 xmm1 [orig:135 _49 ] [135])
        (mult:SF (reg:SF 22 xmm1 [orig:134 _48 ] [134])
            (reg:SF 21 xmm0 [249]))) "../src/spline.f":424 802 {*fop_sf_comm}
     (nil))
(insn 157 156 158 8 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":424 82 {*movsi_internal}
     (nil))
(insn 158 157 159 8 (parallel [
            (set (reg:SI 0 ax [orig:136 _50 ] [136])
                (plus:SI (reg:SI 0 ax [250])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":424 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 159 158 160 8 (set (reg:DI 0 ax [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 0 ax [orig:136 _50 ] [136]))) "../src/spline.f":424 145 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 8 (parallel [
            (set (reg:DI 1 dx [orig:138 _52 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 _51 ] [137])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":424 218 {*adddi_1}
     (nil))
(insn 161 160 162 8 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":424 81 {*movdi_internal}
     (nil))
(insn 162 161 163 8 (set (reg:SF 21 xmm0 [orig:139 _53 ] [139])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:138 _52 ] [138])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [251])) [3 *xs_139(D) S4 A32])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 163 162 164 8 (set (reg:SF 21 xmm0 [orig:140 _54 ] [140])
        (plus:SF (reg:SF 21 xmm0 [orig:139 _53 ] [139])
            (reg:SF 21 xmm0 [orig:139 _53 ] [139]))) "../src/spline.f":424 802 {*fop_sf_comm}
     (nil))
(insn 164 163 165 8 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":424 82 {*movsi_internal}
     (nil))
(insn 165 164 166 8 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [252]))) "../src/spline.f":424 145 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 8 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 _55 ] [141])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":424 218 {*adddi_1}
     (nil))
(insn 167 166 168 8 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":424 81 {*movdi_internal}
     (nil))
(insn 168 167 169 8 (set (reg:SF 23 xmm2 [orig:143 _57 ] [143])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:142 _56 ] [142])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [253])) [3 *xs_139(D) S4 A32])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 169 168 171 8 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (plus:SF (reg:SF 21 xmm0 [orig:140 _54 ] [140])
            (reg:SF 23 xmm2 [orig:143 _57 ] [143]))) "../src/spline.f":424 802 {*fop_sf_comm}
     (nil))
(insn 171 169 172 8 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (mult:SF (reg:SF 21 xmm0 [orig:145 _59 ] [145])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":424 802 {*fop_sf_comm}
     (nil))
(insn 172 171 268 8 (set (reg:SF 22 xmm1 [orig:135 _49 ] [135])
        (minus:SF (reg:SF 22 xmm1 [orig:135 _49 ] [135])
            (reg:SF 21 xmm0 [orig:146 _60 ] [146]))) "../src/spline.f":424 805 {*fop_sf_1}
     (nil))
(insn 268 172 173 8 (set (reg:SF 21 xmm0 [254])
        (reg:SF 22 xmm1 [orig:135 _49 ] [135])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 173 268 174 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 f2+0 S4 A32])
        (reg:SF 21 xmm0 [254])) "../src/spline.f":424 127 {*movsf_internal}
     (nil))
(insn 174 173 175 8 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":425 82 {*movsi_internal}
     (nil))
(insn 175 174 176 8 (parallel [
            (set (reg:SI 0 ax [orig:147 _61 ] [147])
                (plus:SI (reg:SI 0 ax [255])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":425 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 176 175 177 8 (set (reg:DI 0 ax [orig:148 _62 ] [148])
        (sign_extend:DI (reg:SI 0 ax [orig:147 _61 ] [147]))) "../src/spline.f":425 145 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 8 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":425 218 {*adddi_1}
     (nil))
(insn 178 177 179 8 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":425 81 {*movdi_internal}
     (nil))
(insn 179 178 180 8 (set (reg:SF 22 xmm1 [orig:150 _64 ] [150])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [256])) [3 *xs_139(D) S4 A32])) "../src/spline.f":425 127 {*movsf_internal}
     (nil))
(insn 180 179 181 8 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":425 82 {*movsi_internal}
     (nil))
(insn 181 180 182 8 (set (reg:DI 0 ax [orig:151 _65 ] [151])
        (sign_extend:DI (reg:SI 0 ax [257]))) "../src/spline.f":425 145 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 8 (parallel [
            (set (reg:DI 1 dx [orig:152 _66 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _65 ] [151])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":425 218 {*adddi_1}
     (nil))
(insn 183 182 184 8 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":425 81 {*movdi_internal}
     (nil))
(insn 184 183 185 8 (set (reg:SF 21 xmm0 [orig:153 _67 ] [153])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:152 _66 ] [152])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [258])) [3 *xs_139(D) S4 A32])) "../src/spline.f":425 127 {*movsf_internal}
     (nil))
(insn 185 184 187 8 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (plus:SF (reg:SF 21 xmm0 [orig:153 _67 ] [153])
            (reg:SF 22 xmm1 [orig:150 _64 ] [150]))) "../src/spline.f":425 802 {*fop_sf_comm}
     (nil))
(insn 187 185 188 8 (set (reg:SF 21 xmm0 [orig:156 _70 ] [156])
        (mult:SF (reg:SF 21 xmm0 [orig:155 _69 ] [155])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":425 802 {*fop_sf_comm}
     (nil))
(insn 188 187 189 8 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":425 82 {*movsi_internal}
     (nil))
(insn 189 188 190 8 (set (reg:DI 0 ax [orig:157 _71 ] [157])
        (sign_extend:DI (reg:SI 0 ax [259]))) "../src/spline.f":425 145 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 8 (parallel [
            (set (reg:DI 1 dx [orig:158 _72 ] [158])
                (plus:DI (reg:DI 0 ax [orig:157 _71 ] [157])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":425 218 {*adddi_1}
     (nil))
(insn 191 190 192 8 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":425 81 {*movdi_internal}
     (nil))
(insn 192 191 193 8 (set (reg:SF 22 xmm1 [orig:159 _73 ] [159])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:158 _72 ] [158])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [260])) [3 *x_137(D) S4 A32])) "../src/spline.f":425 127 {*movsf_internal}
     (nil))
(insn 193 192 194 8 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":425 82 {*movsi_internal}
     (nil))
(insn 194 193 195 8 (parallel [
            (set (reg:SI 0 ax [orig:160 _74 ] [160])
                (plus:SI (reg:SI 0 ax [261])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":425 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 195 194 196 8 (set (reg:DI 0 ax [orig:161 _75 ] [161])
        (sign_extend:DI (reg:SI 0 ax [orig:160 _74 ] [160]))) "../src/spline.f":425 145 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 8 (parallel [
            (set (reg:DI 1 dx [orig:162 _76 ] [162])
                (plus:DI (reg:DI 0 ax [orig:161 _75 ] [161])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":425 218 {*adddi_1}
     (nil))
(insn 197 196 198 8 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":425 81 {*movdi_internal}
     (nil))
(insn 198 197 199 8 (set (reg:SF 23 xmm2 [orig:163 _77 ] [163])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:162 _76 ] [162])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [262])) [3 *x_137(D) S4 A32])) "../src/spline.f":425 127 {*movsf_internal}
     (nil))
(insn 199 198 201 8 (set (reg:SF 22 xmm1 [orig:164 _78 ] [164])
        (minus:SF (reg:SF 22 xmm1 [orig:159 _73 ] [159])
            (reg:SF 23 xmm2 [orig:163 _77 ] [163]))) "../src/spline.f":425 805 {*fop_sf_1}
     (nil))
(insn 201 199 202 8 (set (reg:SF 22 xmm1 [orig:166 _80 ] [166])
        (plus:SF (reg:SF 22 xmm1 [orig:165 _79 ] [165])
            (reg:SF 22 xmm1 [orig:165 _79 ] [165]))) "../src/spline.f":425 802 {*fop_sf_comm}
     (nil))
(insn 202 201 203 8 (set (reg:SF 21 xmm0 [263])
        (minus:SF (reg:SF 21 xmm0 [orig:156 _70 ] [156])
            (reg:SF 22 xmm1 [orig:166 _80 ] [166]))) "../src/spline.f":425 805 {*fop_sf_1}
     (nil))
(insn 203 202 204 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 f3+0 S4 A32])
        (reg:SF 21 xmm0 [263])) "../src/spline.f":425 127 {*movsf_internal}
     (nil))
(insn 204 203 205 8 (set (reg:SF 21 xmm0 [264])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":427 127 {*movsf_internal}
     (nil))
(insn 205 204 206 8 (set (reg:SF 21 xmm0 [orig:167 _81 ] [167])
        (mult:SF (reg:SF 21 xmm0 [264])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 f3+0 S4 A32]))) "../src/spline.f":427 802 {*fop_sf_comm}
     (nil))
(insn 206 205 208 8 (set (reg:SF 21 xmm0 [orig:168 _82 ] [168])
        (plus:SF (reg:SF 21 xmm0 [orig:167 _81 ] [167])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 f2+0 S4 A32]))) "../src/spline.f":427 802 {*fop_sf_comm}
     (nil))
(insn 208 206 209 8 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (mult:SF (reg:SF 21 xmm0 [orig:169 _83 ] [169])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":427 802 {*fop_sf_comm}
     (nil))
(insn 209 208 211 8 (set (reg:SF 21 xmm0 [orig:171 _85 ] [171])
        (plus:SF (reg:SF 21 xmm0 [orig:170 _84 ] [170])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [3 f1+0 S4 A32]))) "../src/spline.f":427 802 {*fop_sf_comm}
     (nil))
(insn 211 209 212 8 (set (reg:SF 21 xmm0 [orig:173 _87 ] [173])
        (mult:SF (reg:SF 21 xmm0 [orig:172 _86 ] [172])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":427 802 {*fop_sf_comm}
     (nil))
(insn 212 211 213 8 (set (reg:SF 21 xmm0 [orig:174 _88 ] [174])
        (plus:SF (reg:SF 21 xmm0 [orig:173 _87 ] [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 f0+0 S4 A32]))) "../src/spline.f":427 802 {*fop_sf_comm}
     (nil))
(insn 213 212 214 8 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [4 xx+0 S8 A64])) "../src/spline.f":427 81 {*movdi_internal}
     (nil))
(insn 214 213 215 8 (set (mem:SF (reg/f:DI 0 ax [265]) [3 *xx_143(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:174 _88 ] [174])) "../src/spline.f":427 127 {*movsf_internal}
     (nil))
(insn 215 214 269 8 (set (reg:SF 21 xmm0 [266])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 f2+0 S4 A32])) "../src/spline.f":428 127 {*movsf_internal}
     (nil))
(insn 269 215 216 8 (set (reg:SF 22 xmm1 [266])
        (reg:SF 21 xmm0 [266])) "../src/spline.f":428 127 {*movsf_internal}
     (nil))
(insn 216 269 217 8 (set (reg:SF 22 xmm1 [266])
        (plus:SF (reg:SF 22 xmm1 [266])
            (reg:SF 21 xmm0 [266]))) "../src/spline.f":428 802 {*fop_sf_comm}
     (nil))
(insn 217 216 218 8 (set (reg:SF 23 xmm2 [267])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":428 127 {*movsf_internal}
     (nil))
(insn 218 217 219 8 (set (reg:SF 21 xmm0 [268])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":428 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 219 218 220 8 (set (reg:SF 21 xmm0 [orig:176 _90 ] [176])
        (mult:SF (reg:SF 21 xmm0 [268])
            (reg:SF 23 xmm2 [267]))) "../src/spline.f":428 802 {*fop_sf_comm}
     (nil))
(insn 220 219 221 8 (set (reg:SF 21 xmm0 [orig:177 _91 ] [177])
        (mult:SF (reg:SF 21 xmm0 [orig:176 _90 ] [176])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 f3+0 S4 A32]))) "../src/spline.f":428 802 {*fop_sf_comm}
     (nil))
(insn 221 220 223 8 (set (reg:SF 21 xmm0 [orig:178 _92 ] [178])
        (plus:SF (reg:SF 21 xmm0 [orig:177 _91 ] [177])
            (reg:SF 22 xmm1 [orig:175 _89 ] [175]))) "../src/spline.f":428 802 {*fop_sf_comm}
     (nil))
(insn 223 221 224 8 (set (reg:SF 21 xmm0 [orig:180 _94 ] [180])
        (mult:SF (reg:SF 21 xmm0 [orig:179 _93 ] [179])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":428 802 {*fop_sf_comm}
     (nil))
(insn 224 223 225 8 (set (reg:SF 21 xmm0 [orig:181 _95 ] [181])
        (plus:SF (reg:SF 21 xmm0 [orig:180 _94 ] [180])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [3 f1+0 S4 A32]))) "../src/spline.f":428 802 {*fop_sf_comm}
     (nil))
(insn 225 224 226 8 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [4 xxs+0 S8 A64])) "../src/spline.f":428 81 {*movdi_internal}
     (nil))
(insn 226 225 227 8 (set (mem:SF (reg/f:DI 0 ax [269]) [3 *xxs_145(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:181 _95 ] [181])) "../src/spline.f":428 127 {*movsf_internal}
     (nil))
(insn 227 226 271 8 (set (reg:SF 21 xmm0 [270])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 f2+0 S4 A32])) "../src/spline.f":429 127 {*movsf_internal}
     (nil))
(insn 271 227 228 8 (set (reg:SF 22 xmm1 [270])
        (reg:SF 21 xmm0 [270])) "../src/spline.f":429 127 {*movsf_internal}
     (nil))
(insn 228 271 229 8 (set (reg:SF 22 xmm1 [270])
        (plus:SF (reg:SF 22 xmm1 [270])
            (reg:SF 21 xmm0 [270]))) "../src/spline.f":429 802 {*fop_sf_comm}
     (nil))
(insn 229 228 230 8 (set (reg:SF 23 xmm2 [271])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":429 127 {*movsf_internal}
     (nil))
(insn 230 229 231 8 (set (reg:SF 21 xmm0 [272])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":429 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 231 230 232 8 (set (reg:SF 21 xmm0 [orig:183 _97 ] [183])
        (mult:SF (reg:SF 21 xmm0 [272])
            (reg:SF 23 xmm2 [271]))) "../src/spline.f":429 802 {*fop_sf_comm}
     (nil))
(insn 232 231 233 8 (set (reg:SF 21 xmm0 [orig:184 _98 ] [184])
        (mult:SF (reg:SF 21 xmm0 [orig:183 _97 ] [183])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 f3+0 S4 A32]))) "../src/spline.f":429 802 {*fop_sf_comm}
     (nil))
(insn 233 232 234 8 (set (reg:SF 21 xmm0 [orig:185 _99 ] [185])
        (plus:SF (reg:SF 21 xmm0 [orig:184 _98 ] [184])
            (reg:SF 22 xmm1 [orig:182 _96 ] [182]))) "../src/spline.f":429 802 {*fop_sf_comm}
     (nil))
(insn 234 233 235 8 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [4 xxss+0 S8 A64])) "../src/spline.f":429 81 {*movdi_internal}
     (nil))
(insn 235 234 236 8 (set (mem:SF (reg/f:DI 0 ax [273]) [3 *xxss_147(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:185 _99 ] [185])) "../src/spline.f":429 127 {*movsf_internal}
     (nil))
(insn 236 235 237 8 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [4 xxs+0 S8 A64])) "../src/spline.f":431 81 {*movdi_internal}
     (nil))
(insn 237 236 238 8 (set (reg:SF 21 xmm0 [orig:186 _100 ] [186])
        (mem:SF (reg/f:DI 0 ax [274]) [3 *xxs_145(D)+0 S4 A32])) "../src/spline.f":431 127 {*movsf_internal}
     (nil))
(insn 238 237 239 8 (set (reg:SF 21 xmm0 [orig:187 _101 ] [187])
        (div:SF (reg:SF 21 xmm0 [orig:186 _100 ] [186])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":431 805 {*fop_sf_1}
     (nil))
(insn 239 238 240 8 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [4 xxs+0 S8 A64])) "../src/spline.f":431 81 {*movdi_internal}
     (nil))
(insn 240 239 241 8 (set (mem:SF (reg/f:DI 0 ax [275]) [3 *xxs_145(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:187 _101 ] [187])) "../src/spline.f":431 127 {*movsf_internal}
     (nil))
(insn 241 240 242 8 (set (reg:SF 21 xmm0 [orig:205 _150 ] [205])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])) "../src/spline.f":432 127 {*movsf_internal}
     (nil))
(insn 242 241 243 8 (set (reg:SF 21 xmm0 [orig:206 _151 ] [206])
        (mult:SF (reg:SF 21 xmm0 [orig:205 _150 ] [205])
            (reg:SF 21 xmm0 [orig:205 _150 ] [205]))) "../src/spline.f":432 802 {*fop_sf_comm}
     (nil))
(insn 243 242 244 8 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [4 xxss+0 S8 A64])) "../src/spline.f":432 81 {*movdi_internal}
     (nil))
(insn 244 243 245 8 (set (reg:SF 22 xmm1 [orig:188 _102 ] [188])
        (mem:SF (reg/f:DI 0 ax [276]) [3 *xxss_147(D)+0 S4 A32])) "../src/spline.f":432 127 {*movsf_internal}
     (nil))
(insn 245 244 274 8 (set (reg:SF 22 xmm1 [orig:188 _102 ] [188])
        (div:SF (reg:SF 22 xmm1 [orig:188 _102 ] [188])
            (reg:SF 21 xmm0 [orig:206 _151 ] [206]))) "../src/spline.f":432 805 {*fop_sf_1}
     (nil))
(insn 274 245 246 8 (set (reg:SF 21 xmm0 [orig:189 _103 ] [189])
        (reg:SF 22 xmm1 [orig:188 _102 ] [188])) "../src/spline.f":432 127 {*movsf_internal}
     (nil))
(insn 246 274 247 8 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [4 xxss+0 S8 A64])) "../src/spline.f":432 81 {*movdi_internal}
     (nil))
(insn 247 246 255 8 (set (mem:SF (reg/f:DI 0 ax [277]) [3 *xxss_147(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:189 _103 ] [189])) "../src/spline.f":432 127 {*movsf_internal}
     (nil))
(insn 255 247 264 8 (const_int 0 [0]) "../src/spline.f":434 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 264 255 0 NOTE_INSN_DELETED)

;; Function deval (deval_, funcdef_no=1, decl_uid=3551, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=243 from oldreg=199, assigning class GENERAL_REGS to r243
   68: {r243:SI=r243:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  226: r243:SI=r100:SI
    Inserting insn reload after:
  227: r199:SI=r243:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 112:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 128:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 130:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 131:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 144:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 161:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 164:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 165:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 174:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 177:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=244 from oldreg=146, assigning class SSE_REGS to r244
  177: r244:SF=r244:SF-r150:SF
      REG_DEAD r150:SF
      REG_DEAD r146:SF
    Inserting insn reload before:
  228: r244:SF=r146:SF
    Inserting insn reload after:
  229: r151:SF=r244:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 179:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 1 in insn 180:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 181:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 182:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 183:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 1 in insn 185:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 186:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 1 in insn 187:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 189:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 190:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 1 in insn 193:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 197:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 198:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 199
	 Choosing alt 1 in insn 199:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 200:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 201:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 202:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 203:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 212: point = 0, n_alt = -1
   Insn 211: point = 0, n_alt = -1
   Insn 207: point = 1, n_alt = -1
   Insn 204: point = 3, n_alt = 7
   Insn 203: point = 4, n_alt = 8
   Insn 202: point = 5, n_alt = 2
   Insn 201: point = 7, n_alt = 7
   Insn 200: point = 8, n_alt = 8
   Insn 199: point = 9, n_alt = 1
   Insn 198: point = 11, n_alt = 1
   Insn 197: point = 13, n_alt = 1
   Insn 196: point = 15, n_alt = -1
   Insn 195: point = 17, n_alt = 2
   Insn 194: point = 19, n_alt = 7
   Insn 193: point = 20, n_alt = 1
   Insn 192: point = 22, n_alt = 7
   Insn 191: point = 23, n_alt = 7
   Insn 190: point = 24, n_alt = 1
   Insn 189: point = 26, n_alt = 1
   Insn 188: point = 28, n_alt = -1
   Insn 187: point = 30, n_alt = 1
   Insn 186: point = 32, n_alt = 1
   Insn 185: point = 34, n_alt = 1
   Insn 184: point = 36, n_alt = 7
   Insn 183: point = 37, n_alt = 7
   Insn 182: point = 38, n_alt = 2
   Insn 181: point = 40, n_alt = 7
   Insn 180: point = 41, n_alt = 1
   Insn 179: point = 43, n_alt = 7
   Insn 178: point = 44, n_alt = 7
   Insn 229: point = 45, n_alt = -1
	Hard reg 22 is preferable by r244 with profit 1
   Insn 177: point = 47, n_alt = 2
   Insn 228: point = 48, n_alt = -1
	Hard reg 22 is preferable by r244 with profit 1
	Hard reg 21 is preferable by r244 with profit 1
   Insn 176: point = 50, n_alt = 7
   Insn 175: point = 52, n_alt = 3
   Insn 174: point = 53, n_alt = 3
   Insn 173: point = 55, n_alt = 0
   Insn 172: point = 57, n_alt = 0
   Insn 171: point = 59, n_alt = 0
   Insn 170: point = 60, n_alt = 7
   Insn 169: point = 62, n_alt = 3
   Insn 168: point = 63, n_alt = 3
   Insn 167: point = 65, n_alt = 0
   Insn 166: point = 67, n_alt = 0
   Insn 165: point = 68, n_alt = 8
   Insn 164: point = 69, n_alt = 1
   Insn 163: point = 71, n_alt = 7
   Insn 162: point = 73, n_alt = 3
   Insn 161: point = 74, n_alt = 3
   Insn 160: point = 76, n_alt = 0
   Insn 159: point = 78, n_alt = 0
   Insn 158: point = 80, n_alt = 0
   Insn 157: point = 81, n_alt = 2
   Insn 156: point = 83, n_alt = 7
   Insn 155: point = 85, n_alt = 3
   Insn 154: point = 86, n_alt = 3
   Insn 153: point = 88, n_alt = 0
   Insn 152: point = 90, n_alt = 0
   Insn 151: point = 91, n_alt = 1
   Insn 150: point = 93, n_alt = 7
   Insn 149: point = 95, n_alt = 3
   Insn 148: point = 96, n_alt = 3
   Insn 147: point = 98, n_alt = 0
   Insn 146: point = 100, n_alt = 0
   Insn 145: point = 101, n_alt = 8
   Insn 144: point = 102, n_alt = 1
   Insn 143: point = 104, n_alt = 7
   Insn 142: point = 106, n_alt = 3
   Insn 141: point = 107, n_alt = 3
   Insn 140: point = 109, n_alt = 0
   Insn 139: point = 111, n_alt = 0
   Insn 138: point = 113, n_alt = 0
   Insn 137: point = 114, n_alt = 2
   Insn 136: point = 116, n_alt = 7
   Insn 135: point = 118, n_alt = 3
   Insn 134: point = 119, n_alt = 3
   Insn 133: point = 121, n_alt = 0
   Insn 132: point = 123, n_alt = 0
   Insn 131: point = 124, n_alt = 1
   Insn 130: point = 126, n_alt = 7
   Insn 129: point = 128, n_alt = 3
   Insn 128: point = 129, n_alt = 3
   Insn 127: point = 131, n_alt = 0
   Insn 126: point = 133, n_alt = 0
   Insn 125: point = 135, n_alt = 0
   Insn 124: point = 136, n_alt = 8
   Insn 123: point = 137, n_alt = 2
   Insn 122: point = 139, n_alt = -1
   Insn 121: point = 141, n_alt = 2
   Insn 120: point = 143, n_alt = 7
   Insn 119: point = 145, n_alt = 3
   Insn 118: point = 146, n_alt = 3
   Insn 117: point = 148, n_alt = 0
   Insn 116: point = 150, n_alt = 0
   Insn 115: point = 152, n_alt = 0
   Insn 114: point = 153, n_alt = 7
   Insn 113: point = 155, n_alt = 3
   Insn 112: point = 156, n_alt = 8
   Insn 111: point = 157, n_alt = 2
   Insn 110: point = 159, n_alt = 7
   Insn 109: point = 161, n_alt = 3
   Insn 108: point = 162, n_alt = 3
   Insn 107: point = 164, n_alt = 0
   Insn 106: point = 166, n_alt = 0
   Insn 105: point = 168, n_alt = 0
   Insn 104: point = 169, n_alt = 7
   Insn 103: point = 171, n_alt = 3
   Insn 102: point = 172, n_alt = 3
   Insn 101: point = 174, n_alt = 0
   Insn 100: point = 176, n_alt = 0
  BB 9
   Insn 224: point = 177, n_alt = -1
  BB 3
   Insn 63: point = 177, n_alt = -1
   Insn 62: point = 177, n_alt = 0
   Insn 61: point = 178, n_alt = 1
   Insn 60: point = 180, n_alt = 0
  BB 7
   Insn 220: point = 181, n_alt = -1
  BB 5
   Insn 218: point = 181, n_alt = -1
   Insn 86: point = 181, n_alt = 1
   Insn 85: point = 182, n_alt = 0
  BB 6
   Insn 92: point = 183, n_alt = 1
   Insn 91: point = 184, n_alt = 0
  BB 4
   Insn 80: point = 185, n_alt = -1
   Insn 79: point = 185, n_alt = 1
   Insn 78: point = 186, n_alt = 7
   Insn 77: point = 188, n_alt = 3
   Insn 76: point = 189, n_alt = 3
   Insn 75: point = 191, n_alt = 0
   Insn 74: point = 193, n_alt = 0
   Insn 73: point = 194, n_alt = 7
   Insn 72: point = 196, n_alt = 3
   Insn 71: point = 197, n_alt = 1
   Insn 70: point = 198, n_alt = 0
   Insn 69: point = 200, n_alt = 0
   Insn 227: point = 202, n_alt = -1
	Hard reg 1 is preferable by r243 with profit 1
   Insn 68: point = 204, n_alt = 0
   Insn 226: point = 204, n_alt = -1
   Insn 67: point = 205, n_alt = 0
   Insn 66: point = 207, n_alt = 0
   Insn 65: point = 208, n_alt = 0
  BB 2
   Insn 58: point = 209, n_alt = 1
   Insn 57: point = 210, n_alt = 0
   Insn 56: point = 212, n_alt = 3
   Insn 55: point = 213, n_alt = 1
   Insn 51: point = 213, n_alt = 2
   Insn 50: point = 214, n_alt = 3
   Insn 49: point = 215, n_alt = -1
   Insn 47: point = 217, n_alt = 1
   Insn 45: point = 219, n_alt = 0
   Insn 46: point = 219, n_alt = 2
   Insn 44: point = 220, n_alt = 3
   Insn 43: point = 221, n_alt = 5
   Insn 42: point = 222, n_alt = 0
   Insn 41: point = 224, n_alt = 0
   Insn 40: point = 226, n_alt = 3
   Insn 36: point = 227, n_alt = 2
   Insn 35: point = 228, n_alt = 3
   Insn 34: point = 229, n_alt = -1
   Insn 32: point = 231, n_alt = 1
   Insn 30: point = 233, n_alt = 0
   Insn 31: point = 233, n_alt = 2
   Insn 29: point = 234, n_alt = 3
   Insn 28: point = 235, n_alt = 5
   Insn 27: point = 236, n_alt = 0
   Insn 26: point = 238, n_alt = 0
   Insn 25: point = 240, n_alt = 3
   Insn 21: point = 241, n_alt = 2
   Insn 20: point = 242, n_alt = 3
   Insn 19: point = 243, n_alt = -1
   Insn 17: point = 245, n_alt = 1
   Insn 15: point = 247, n_alt = 0
   Insn 16: point = 247, n_alt = 2
   Insn 14: point = 248, n_alt = 3
   Insn 13: point = 249, n_alt = 5
   Insn 12: point = 250, n_alt = 0
   Insn 11: point = 252, n_alt = 0
   Insn 10: point = 254, n_alt = 3
   Insn 6: point = 255, n_alt = 5
   Insn 5: point = 255, n_alt = 5
   Insn 4: point = 255, n_alt = 5
   Insn 3: point = 255, n_alt = 5
   Insn 2: point = 255, n_alt = 5
 r87: [251..252]
 r88: [242..243]
 r89: [241..255]
 r91: [237..238]
 r92: [228..229]
 r93: [227..255]
 r95: [223..224]
 r96: [214..215]
 r97: [213..255]
 r99: [177..178]
 r100: [201..205]
 r101: [185..194]
 r102: [190..191]
 r103: [187..189]
 r104: [185..186]
 r105: [173..174]
 r106: [170..172]
 r107: [158..169]
 r108: [165..166]
 r109: [163..164]
 r110: [160..162]
 r111: [158..159]
 r112: [142..153]
 r113: [149..150]
 r114: [147..148]
 r115: [144..146]
 r116: [142..143]
 r117: [140..141]
 r118: [138..139]
 r119: [132..133]
 r120: [130..131]
 r121: [127..129]
 r122: [125..126]
 r123: [115..124]
 r124: [120..121]
 r125: [117..119]
 r126: [115..116]
 r127: [103..114]
 r128: [110..111]
 r129: [108..109]
 r130: [105..107]
 r131: [103..104]
 r132: [97..98]
 r133: [94..96]
 r134: [92..93]
 r135: [82..91]
 r136: [87..88]
 r137: [84..86]
 r138: [82..83]
 r139: [70..81]
 r140: [77..78]
 r141: [75..76]
 r142: [72..74]
 r143: [70..71]
 r144: [64..65]
 r145: [61..63]
 r146: [49..60]
 r147: [56..57]
 r148: [54..55]
 r149: [51..53]
 r150: [47..50]
 r151: [25..45]
 r152: [39..41]
 r153: [31..38]
 r154: [33..34]
 r155: [31..32]
 r156: [29..30]
 r157: [27..28]
 r158: [25..26]
 r159: [10..24]
 r160: [18..20]
 r161: [16..17]
 r162: [14..15]
 r163: [12..13]
 r164: [10..11]
 r165: [8..9]
 r166: [6..7]
 r167: [4..5]
 r168: [246..248]
 r169: [244..245]
 r173: [232..234]
 r174: [230..231]
 r178: [218..220]
 r179: [216..217]
 r183: [2..3]
 r184: [0..1]
 r185: [253..254]
 r186: [249..250]
 r187: [246..247]
 r188: [239..240]
 r189: [235..236]
 r190: [232..233]
 r191: [225..226]
 r192: [221..222]
 r193: [218..219]
 r194: [211..212]
 r195: [209..210]
 r196: [179..180]
 r197: [206..208]
 r198: [206..207]
 r199: [201..202]
 r200: [199..200]
 r201: [197..198]
 r202: [195..196]
 r203: [192..193]
 r204: [187..188]
 r205: [181..182]
 r206: [183..184]
 r207: [175..176]
 r208: [170..171]
 r209: [167..168]
 r210: [160..161]
 r211: [156..157]
 r212: [154..155]
 r213: [151..152]
 r214: [144..145]
 r215: [136..137]
 r216: [134..135]
 r217: [127..128]
 r218: [122..123]
 r219: [117..118]
 r220: [112..113]
 r221: [105..106]
 r222: [101..102]
 r223: [99..100]
 r224: [94..95]
 r225: [89..90]
 r226: [84..85]
 r227: [79..80]
 r228: [72..73]
 r229: [68..69]
 r230: [66..67]
 r231: [61..62]
 r232: [58..59]
 r233: [51..52]
 r234: [42..44]
 r235: [42..43]
 r236: [39..40]
 r237: [35..37]
 r238: [35..36]
 r239: [21..23]
 r240: [21..22]
 r241: [18..19]
 r243: [203..204]
 r244: [46..48]
Compressing live ranges: from 256 to 218 - 85%
Ranges after the compression:
 r87: [214..215]
 r88: [206..207]
 r89: [206..217]
 r91: [202..203]
 r92: [194..195]
 r93: [194..217]
 r95: [190..191]
 r96: [182..183]
 r97: [182..217]
 r99: [150..151]
 r100: [172..175]
 r101: [158..165]
 r102: [162..163]
 r103: [160..161]
 r104: [158..159]
 r105: [146..147]
 r106: [144..145]
 r107: [134..143]
 r108: [140..141]
 r109: [138..139]
 r110: [136..137]
 r111: [134..135]
 r112: [120..129]
 r113: [126..127]
 r114: [124..125]
 r115: [122..123]
 r116: [120..121]
 r117: [118..119]
 r118: [116..117]
 r119: [110..111]
 r120: [108..109]
 r121: [106..107]
 r122: [104..105]
 r123: [96..103]
 r124: [100..101]
 r125: [98..99]
 r126: [96..97]
 r127: [86..95]
 r128: [92..93]
 r129: [90..91]
 r130: [88..89]
 r131: [86..87]
 r132: [80..81]
 r133: [78..79]
 r134: [76..77]
 r135: [68..75]
 r136: [72..73]
 r137: [70..71]
 r138: [68..69]
 r139: [58..67]
 r140: [64..65]
 r141: [62..63]
 r142: [60..61]
 r143: [58..59]
 r144: [52..53]
 r145: [50..51]
 r146: [40..49]
 r147: [46..47]
 r148: [44..45]
 r149: [42..43]
 r150: [38..41]
 r151: [22..37]
 r152: [34..35]
 r153: [28..33]
 r154: [30..31]
 r155: [28..29]
 r156: [26..27]
 r157: [24..25]
 r158: [22..23]
 r159: [10..21]
 r160: [18..19]
 r161: [16..17]
 r162: [14..15]
 r163: [12..13]
 r164: [10..11]
 r165: [8..9]
 r166: [6..7]
 r167: [4..5]
 r168: [210..211]
 r169: [208..209]
 r173: [198..199]
 r174: [196..197]
 r178: [186..187]
 r179: [184..185]
 r183: [2..3]
 r184: [0..1]
 r185: [216..217]
 r186: [212..213]
 r187: [210..211]
 r188: [204..205]
 r189: [200..201]
 r190: [198..199]
 r191: [192..193]
 r192: [188..189]
 r193: [186..187]
 r194: [180..181]
 r195: [178..179]
 r196: [152..153]
 r197: [176..177]
 r198: [176..177]
 r199: [172..173]
 r200: [170..171]
 r201: [168..169]
 r202: [166..167]
 r203: [164..165]
 r204: [160..161]
 r205: [154..155]
 r206: [156..157]
 r207: [148..149]
 r208: [144..145]
 r209: [142..143]
 r210: [136..137]
 r211: [132..133]
 r212: [130..131]
 r213: [128..129]
 r214: [122..123]
 r215: [114..115]
 r216: [112..113]
 r217: [106..107]
 r218: [102..103]
 r219: [98..99]
 r220: [94..95]
 r221: [88..89]
 r222: [84..85]
 r223: [82..83]
 r224: [78..79]
 r225: [74..75]
 r226: [70..71]
 r227: [66..67]
 r228: [60..61]
 r229: [56..57]
 r230: [54..55]
 r231: [50..51]
 r232: [48..49]
 r233: [42..43]
 r234: [36..37]
 r235: [36..37]
 r236: [34..35]
 r237: [32..33]
 r238: [32..33]
 r239: [20..21]
 r240: [20..21]
 r241: [18..19]
 r243: [174..175]
 r244: [38..39]

********** Assignment #1: **********

	 Assigning to 243 (cl=GENERAL_REGS, orig=199, freq=3, tfirst=243, tfreq=3)...
	   Assign 1 to reload r243 (freq=3)
	 Assigning to 244 (cl=SSE_REGS, orig=146, freq=3, tfirst=244, tfreq=3)...
	   Assign 21 to reload r244 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 50
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 73
changing reg in insn 79
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 111
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 121
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 137
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 144
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 157
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 164
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 190
changing reg in insn 180
changing reg in insn 182
changing reg in insn 182
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 193
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 204
changing reg in insn 207
changing reg in insn 207
changing reg in insn 211
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 92
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 195
deleting insn with uid = 19.
deleting insn with uid = 34.
deleting insn with uid = 49.
deleting insn with uid = 227.
deleting insn with uid = 122.
deleting insn with uid = 228.
deleting insn with uid = 188.
deleting insn with uid = 196.
deleting insn with uid = 207.
starting the processing of deferred insns
ending the processing of deferred insns


deval

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14]
;;  ref usage 	r0={70d,73u} r1={19d,19u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,80u} r7={1d,9u} r17={28d,5u} r20={1d,1u,10e} r21={34d,34u} r22={11d,10u} r23={6d,5u} r24={2d,1u} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} 
;;    total ref usage 439{188d,241u,10e} in 172{172 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 168 169 173 174 178 179 185 186 187 188 189 190 191 192 193 194 195
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])
        (reg:DI 2 cx [ s ])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])
        (reg:DI 37 r8 [ n ])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [185]) [1 *n_87(D)+0 S4 A32])) "../src/spline.f":341 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [186])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":341 145 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.6+0 S8 A64])
        (reg:DI 0 ax [186])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (set (reg:DI 0 ax [orig:168 size.7_89 ] [168])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.6+0 S8 A64])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 16 14 15 2 (set (reg:DI 1 dx [187])
        (const_int 0 [0])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 15 16 17 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:168 size.7_89 ] [168])
            (const_int 0 [0]))) "../src/spline.f":341 4 {*cmpdi_ccno_1}
     (nil))
(insn 17 15 20 2 (set (reg:DI 0 ax [orig:169 size.7_90 ] [169])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:168 size.7_89 ] [168])
            (reg:DI 1 dx [187]))) "../src/spline.f":341 967 {*movdicc_noc}
     (nil))
(insn 20 17 21 2 (set (reg:DI 42 r13 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.150_2 ] [88])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 21 20 25 2 (set (reg:DI 43 r14 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 25 21 26 2 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [188]) [1 *n_87(D)+0 S4 A32])) "../src/spline.f":341 82 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 0 ax [189])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":341 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.10+0 S8 A64])
        (reg:DI 0 ax [189])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 29 28 31 2 (set (reg:DI 0 ax [orig:173 size.11_95 ] [173])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.10+0 S8 A64])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 31 29 30 2 (set (reg:DI 1 dx [190])
        (const_int 0 [0])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 30 31 32 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:173 size.11_95 ] [173])
            (const_int 0 [0]))) "../src/spline.f":341 4 {*cmpdi_ccno_1}
     (nil))
(insn 32 30 35 2 (set (reg:DI 0 ax [orig:174 size.11_96 ] [174])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:173 size.11_95 ] [173])
            (reg:DI 1 dx [190]))) "../src/spline.f":341 967 {*movdicc_noc}
     (nil))
(insn 35 32 36 2 (set (reg:DI 40 r11 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.152_6 ] [92])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 36 35 40 2 (set (reg:DI 41 r12 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 40 36 41 2 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [191]) [1 *n_87(D)+0 S4 A32])) "../src/spline.f":341 82 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 0 ax [192])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":341 145 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.8+0 S8 A64])
        (reg:DI 0 ax [192])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 44 43 46 2 (set (reg:DI 0 ax [orig:178 size.9_101 ] [178])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.8+0 S8 A64])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 46 44 45 2 (set (reg:DI 1 dx [193])
        (const_int 0 [0])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 45 46 47 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:178 size.9_101 ] [178])
            (const_int 0 [0]))) "../src/spline.f":341 4 {*cmpdi_ccno_1}
     (nil))
(insn 47 45 50 2 (set (reg:DI 0 ax [orig:179 size.9_102 ] [179])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:178 size.9_101 ] [178])
            (reg:DI 1 dx [193]))) "../src/spline.f":341 967 {*movdicc_noc}
     (nil))
(insn 50 47 51 2 (set (reg:DI 38 r9 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.154_10 ] [96])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 51 50 55 2 (set (reg:DI 39 r10 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":341 81 {*movdi_internal}
     (nil))
(insn 55 51 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":347 82 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":348 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [195])
        (mem:SI (reg/f:DI 0 ax [194]) [1 *n_87(D)+0 S4 A32])) "../src/spline.f":348 82 {*movsi_internal}
     (nil))
(insn 58 57 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [195])) "../src/spline.f":348 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 196
(code_label 95 58 59 3 16 (nil) [1 uses])
(note 59 95 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":350 82 {*movsi_internal}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:SI 0 ax [orig:99 _13 ] [99])
                (minus:SI (reg:SI 0 ax [196])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":350 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 62 61 63 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 1 [0x1]))) "../src/spline.f":350 7 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 223)
            (pc))) "../src/spline.f":350 617 {*jcc_1}
     (nil)
 -> 223)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 197 198 199 200 201 202 203 204
(note 64 63 65 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 4 (set (reg:SI 1 dx [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":352 82 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":352 82 {*movsi_internal}
     (nil))
(insn 67 66 226 4 (parallel [
            (set (reg:SI 0 ax [orig:100 _14 ] [100])
                (plus:SI (reg:SI 0 ax [198])
                    (reg:SI 1 dx [197])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":352 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 226 67 68 4 (set (reg:SI 1 dx [199])
        (reg:SI 0 ax [orig:100 _14 ] [100])) "../src/spline.f":352 82 {*movsi_internal}
     (nil))
(insn 68 226 69 4 (parallel [
            (set (reg:SI 1 dx [199])
                (lshiftrt:SI (reg:SI 1 dx [199])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":352 544 {*lshrsi3_1}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:SI 0 ax [200])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (reg:SI 1 dx [199])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":352 217 {*addsi_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 0 ax [201])
                (ashiftrt:SI (reg:SI 0 ax [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":352 545 {*ashrsi3_1}
     (nil))
(insn 71 70 72 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [201])) "../src/spline.f":352 82 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":353 81 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:SF 22 xmm1 [orig:101 _15 ] [101])
        (mem:SF (reg/f:DI 0 ax [202]) [3 *ss_109(D)+0 S4 A32])) "../src/spline.f":353 127 {*movsf_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":353 82 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [203]))) "../src/spline.f":353 145 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":353 218 {*adddi_1}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":353 81 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [204])) [3 *s_110(D) S4 A32])) "../src/spline.f":353 127 {*movsf_internal}
     (nil))
(insn 79 78 80 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:101 _15 ] [101]))) "../src/spline.f":353 51 {*cmpiusf}
     (nil))
(jump_insn 80 79 84 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 217)
            (pc))) "../src/spline.f":353 617 {*jcc_1}
     (nil)
 -> 217)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 205
(note 84 80 85 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 5 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":354 82 {*movsi_internal}
     (nil))
(insn 86 85 218 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [205])) "../src/spline.f":354 82 {*movsi_internal}
     (nil))
(jump_insn 218 86 219 5 (set (pc)
        (label_ref 93)) 649 {jump}
     (nil)
 -> 93)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 219 218 217)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 206
(code_label 217 219 90 6 19 (nil) [1 uses])
(note 90 217 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 6 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":356 82 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [206])) "../src/spline.f":356 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 93 92 94 7 15 (nil) [1 uses])
(note 94 93 220 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 220 94 221 7 (set (pc)
        (label_ref 95)) "../src/spline.f":358 649 {jump}
     (nil)
 -> 95)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 221 220 223)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 223 221 222 9 20 (nil) [1 uses])
(note 222 223 224 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 224 222 98 9 (const_int 0 [0]) "../src/spline.f":358 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 21 [xmm0] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 183 184 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241
(code_label 98 224 99 8 12 (nil) [0 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":360 82 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [207]))) "../src/spline.f":360 145 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":360 218 {*adddi_1}
     (nil))
(insn 103 102 104 8 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":360 81 {*movdi_internal}
     (nil))
(insn 104 103 105 8 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [208])) [3 *s_110(D) S4 A32])) "../src/spline.f":360 127 {*movsf_internal}
     (nil))
(insn 105 104 106 8 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":360 82 {*movsi_internal}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [209])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":360 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 107 106 108 8 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":360 145 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":360 218 {*adddi_1}
     (nil))
(insn 109 108 110 8 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":360 81 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [210])) [3 *s_110(D) S4 A32])) "../src/spline.f":360 127 {*movsf_internal}
     (nil))
(insn 111 110 112 8 (set (reg:SF 21 xmm0 [211])
        (minus:SF (reg:SF 21 xmm0 [orig:107 _21 ] [107])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "../src/spline.f":360 805 {*fop_sf_1}
     (nil))
(insn 112 111 113 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [211])) "../src/spline.f":360 127 {*movsf_internal}
     (nil))
(insn 113 112 114 8 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":361 81 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (reg/f:DI 0 ax [212]) [3 *ss_109(D)+0 S4 A32])) "../src/spline.f":361 127 {*movsf_internal}
     (nil))
(insn 115 114 116 8 (set (reg:SI 0 ax [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":361 82 {*movsi_internal}
     (nil))
(insn 116 115 117 8 (parallel [
            (set (reg:SI 0 ax [orig:113 _27 ] [113])
                (plus:SI (reg:SI 0 ax [213])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":361 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 117 116 118 8 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _27 ] [113]))) "../src/spline.f":361 145 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 8 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":361 218 {*adddi_1}
     (nil))
(insn 119 118 120 8 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":361 81 {*movdi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:SF 22 xmm1 [orig:116 _30 ] [116])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [214])) [3 *s_110(D) S4 A32])) "../src/spline.f":361 127 {*movsf_internal}
     (nil))
(insn 121 120 123 8 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (minus:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:116 _30 ] [116]))) "../src/spline.f":361 805 {*fop_sf_1}
     (nil))
(insn 123 121 124 8 (set (reg:SF 21 xmm0 [215])
        (div:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":361 805 {*fop_sf_1}
     (nil))
(insn 124 123 125 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [215])) "../src/spline.f":361 127 {*movsf_internal}
     (nil))
(insn 125 124 126 8 (set (reg:SI 0 ax [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":362 82 {*movsi_internal}
     (nil))
(insn 126 125 127 8 (parallel [
            (set (reg:SI 0 ax [orig:119 _33 ] [119])
                (plus:SI (reg:SI 0 ax [216])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":362 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 127 126 128 8 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _33 ] [119]))) "../src/spline.f":362 145 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg:DI 1 dx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":362 218 {*adddi_1}
     (nil))
(insn 129 128 130 8 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":362 81 {*movdi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [217])) [3 *xs_115(D) S4 A32])) "../src/spline.f":362 127 {*movsf_internal}
     (nil))
(insn 131 130 132 8 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (mult:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":362 802 {*fop_sf_comm}
     (nil))
(insn 132 131 133 8 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":362 82 {*movsi_internal}
     (nil))
(insn 133 132 134 8 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [218]))) "../src/spline.f":362 145 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 8 (parallel [
            (set (reg:DI 1 dx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":362 218 {*adddi_1}
     (nil))
(insn 135 134 136 8 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":362 81 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:SF 22 xmm1 [orig:126 _40 ] [126])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [219])) [3 *x_116(D) S4 A32])) "../src/spline.f":362 127 {*movsf_internal}
     (nil))
(insn 137 136 138 8 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (minus:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123])
            (reg:SF 22 xmm1 [orig:126 _40 ] [126]))) "../src/spline.f":362 805 {*fop_sf_1}
     (nil))
(insn 138 137 139 8 (set (reg:SI 0 ax [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":362 82 {*movsi_internal}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:SI 0 ax [orig:128 _42 ] [128])
                (plus:SI (reg:SI 0 ax [220])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":362 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 140 139 141 8 (set (reg:DI 0 ax [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 0 ax [orig:128 _42 ] [128]))) "../src/spline.f":362 145 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":362 218 {*adddi_1}
     (nil))
(insn 142 141 143 8 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":362 81 {*movdi_internal}
     (nil))
(insn 143 142 144 8 (set (reg:SF 22 xmm1 [orig:131 _45 ] [131])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:130 _44 ] [130])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [221])) [3 *x_116(D) S4 A32])) "../src/spline.f":362 127 {*movsf_internal}
     (nil))
(insn 144 143 145 8 (set (reg:SF 21 xmm0 [222])
        (plus:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [orig:131 _45 ] [131]))) "../src/spline.f":362 802 {*fop_sf_comm}
     (nil))
(insn 145 144 146 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 cx1+0 S4 A32])
        (reg:SF 21 xmm0 [222])) "../src/spline.f":362 127 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":363 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [223]))) "../src/spline.f":363 145 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 8 (parallel [
            (set (reg:DI 1 dx [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":363 218 {*adddi_1}
     (nil))
(insn 149 148 150 8 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":363 81 {*movdi_internal}
     (nil))
(insn 150 149 151 8 (set (reg:SF 21 xmm0 [orig:134 _48 ] [134])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [224])) [3 *xs_115(D) S4 A32])) "../src/spline.f":363 127 {*movsf_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (mult:SF (reg:SF 21 xmm0 [orig:134 _48 ] [134])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":363 802 {*fop_sf_comm}
     (nil))
(insn 152 151 153 8 (set (reg:SI 0 ax [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":363 82 {*movsi_internal}
     (nil))
(insn 153 152 154 8 (set (reg:DI 0 ax [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 0 ax [225]))) "../src/spline.f":363 145 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 8 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":363 218 {*adddi_1}
     (nil))
(insn 155 154 156 8 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":363 81 {*movdi_internal}
     (nil))
(insn 156 155 157 8 (set (reg:SF 22 xmm1 [orig:138 _52 ] [138])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [226])) [3 *x_116(D) S4 A32])) "../src/spline.f":363 127 {*movsf_internal}
     (nil))
(insn 157 156 158 8 (set (reg:SF 21 xmm0 [orig:139 _53 ] [139])
        (minus:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (reg:SF 22 xmm1 [orig:138 _52 ] [138]))) "../src/spline.f":363 805 {*fop_sf_1}
     (nil))
(insn 158 157 159 8 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":363 82 {*movsi_internal}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:SI 0 ax [orig:140 _54 ] [140])
                (plus:SI (reg:SI 0 ax [227])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":363 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 160 159 161 8 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [orig:140 _54 ] [140]))) "../src/spline.f":363 145 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 8 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 _55 ] [141])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":363 218 {*adddi_1}
     (nil))
(insn 162 161 163 8 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":363 81 {*movdi_internal}
     (nil))
(insn 163 162 164 8 (set (reg:SF 22 xmm1 [orig:143 _57 ] [143])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:142 _56 ] [142])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [228])) [3 *x_116(D) S4 A32])) "../src/spline.f":363 127 {*movsf_internal}
     (nil))
(insn 164 163 165 8 (set (reg:SF 21 xmm0 [229])
        (plus:SF (reg:SF 21 xmm0 [orig:139 _53 ] [139])
            (reg:SF 22 xmm1 [orig:143 _57 ] [143]))) "../src/spline.f":363 802 {*fop_sf_comm}
     (nil))
(insn 165 164 166 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 cx2+0 S4 A32])
        (reg:SF 21 xmm0 [229])) "../src/spline.f":363 127 {*movsf_internal}
     (nil))
(insn 166 165 167 8 (set (reg:SI 0 ax [230])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":364 82 {*movsi_internal}
     (nil))
(insn 167 166 168 8 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [230]))) "../src/spline.f":364 145 {*extendsidi2_rex64}
     (nil))
(insn 168 167 169 8 (parallel [
            (set (reg:DI 1 dx [orig:145 _59 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":364 218 {*adddi_1}
     (nil))
(insn 169 168 170 8 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":364 81 {*movdi_internal}
     (nil))
(insn 170 169 171 8 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:145 _59 ] [145])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [231])) [3 *x_116(D) S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 171 170 172 8 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":364 82 {*movsi_internal}
     (nil))
(insn 172 171 173 8 (parallel [
            (set (reg:SI 0 ax [orig:147 _61 ] [147])
                (plus:SI (reg:SI 0 ax [232])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":364 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 173 172 174 8 (set (reg:DI 0 ax [orig:148 _62 ] [148])
        (sign_extend:DI (reg:SI 0 ax [orig:147 _61 ] [147]))) "../src/spline.f":364 145 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 8 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":364 218 {*adddi_1}
     (nil))
(insn 175 174 176 8 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":364 81 {*movdi_internal}
     (nil))
(insn 176 175 177 8 (set (reg:SF 22 xmm1 [orig:150 _64 ] [150])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [233])) [3 *x_116(D) S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 177 176 229 8 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (minus:SF (reg:SF 21 xmm0 [orig:146 _60 ] [146])
            (reg:SF 22 xmm1 [orig:150 _64 ] [150]))) "../src/spline.f":364 805 {*fop_sf_1}
     (nil))
(insn 229 177 178 8 (set (reg:SF 22 xmm1 [orig:151 _65 ] [151])
        (reg:SF 21 xmm0 [orig:146 _60 ] [146])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 178 229 179 8 (set (reg:SF 23 xmm2 [234])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 179 178 180 8 (set (reg:SF 21 xmm0 [235])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 180 179 181 8 (set (reg:SF 21 xmm0 [orig:152 _66 ] [152])
        (mult:SF (reg:SF 21 xmm0 [235])
            (reg:SF 23 xmm2 [234]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 181 180 182 8 (set (reg:SF 23 xmm2 [236])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 182 181 183 8 (set (reg:SF 23 xmm2 [orig:153 _67 ] [153])
        (minus:SF (reg:SF 23 xmm2 [236])
            (reg:SF 21 xmm0 [orig:152 _66 ] [152]))) "../src/spline.f":364 805 {*fop_sf_1}
     (nil))
(insn 183 182 184 8 (set (reg:SF 24 xmm3 [237])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 184 183 185 8 (set (reg:SF 21 xmm0 [238])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 185 184 186 8 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (mult:SF (reg:SF 21 xmm0 [238])
            (reg:SF 24 xmm3 [237]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 186 185 187 8 (set (reg:SF 21 xmm0 [orig:155 _69 ] [155])
        (mult:SF (reg:SF 21 xmm0 [orig:154 _68 ] [154])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 187 186 189 8 (set (reg:SF 21 xmm0 [orig:156 _70 ] [156])
        (plus:SF (reg:SF 21 xmm0 [orig:155 _69 ] [155])
            (reg:SF 23 xmm2 [orig:153 _67 ] [153]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 189 187 190 8 (set (reg:SF 21 xmm0 [orig:158 _72 ] [158])
        (mult:SF (reg:SF 21 xmm0 [orig:157 _71 ] [157])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 cx1+0 S4 A32]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 190 189 191 8 (set (reg:SF 22 xmm1 [orig:159 _73 ] [159])
        (plus:SF (reg:SF 22 xmm1 [orig:151 _65 ] [151])
            (reg:SF 21 xmm0 [orig:158 _72 ] [158]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 191 190 192 8 (set (reg:SF 23 xmm2 [239])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 192 191 193 8 (set (reg:SF 21 xmm0 [240])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 193 192 194 8 (set (reg:SF 21 xmm0 [orig:160 _74 ] [160])
        (mult:SF (reg:SF 21 xmm0 [240])
            (reg:SF 23 xmm2 [239]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 194 193 195 8 (set (reg:SF 23 xmm2 [241])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":364 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 195 194 197 8 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (minus:SF (reg:SF 21 xmm0 [orig:160 _74 ] [160])
            (reg:SF 23 xmm2 [241]))) "../src/spline.f":364 805 {*fop_sf_1}
     (nil))
(insn 197 195 198 8 (set (reg:SF 21 xmm0 [orig:163 _77 ] [163])
        (mult:SF (reg:SF 21 xmm0 [orig:162 _76 ] [162])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 198 197 199 8 (set (reg:SF 21 xmm0 [orig:164 _78 ] [164])
        (mult:SF (reg:SF 21 xmm0 [orig:163 _77 ] [163])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [3 cx2+0 S4 A32]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 199 198 200 8 (set (reg:SF 21 xmm0 [orig:165 _79 ] [165])
        (plus:SF (reg:SF 21 xmm0 [orig:164 _78 ] [164])
            (reg:SF 22 xmm1 [orig:159 _73 ] [159]))) "../src/spline.f":364 802 {*fop_sf_comm}
     (nil))
(insn 200 199 201 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_deval+0 S4 A64])
        (reg:SF 21 xmm0 [orig:165 _79 ] [165])) "../src/spline.f":364 127 {*movsf_internal}
     (nil))
(insn 201 200 202 8 (set (reg:SF 21 xmm0 [orig:166 __result_deval.156_80 ] [166])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_deval+0 S4 A64])) "../src/spline.f":365 127 {*movsf_internal}
     (nil))
(insn 202 201 203 8 (set (reg:SF 21 xmm0 [orig:167 _81 ] [167])
        (div:SF (reg:SF 21 xmm0 [orig:166 __result_deval.156_80 ] [166])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":365 805 {*fop_sf_1}
     (nil))
(insn 203 202 204 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_deval+0 S4 A64])
        (reg:SF 21 xmm0 [orig:167 _81 ] [167])) "../src/spline.f":365 127 {*movsf_internal}
     (nil))
(insn 204 203 211 8 (set (reg:SF 21 xmm0 [orig:183 _121 ] [183])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_deval+0 S4 A64])) "../src/spline.f":366 127 {*movsf_internal}
     (nil))
(insn 211 204 212 8 (set (reg/i:SF 21 xmm0)
        (reg:SF 21 xmm0 [orig:184 <retval> ] [184])) "../src/spline.f":367 127 {*movsf_internal}
     (nil))
(insn 212 211 225 8 (use (reg/i:SF 21 xmm0)) "../src/spline.f":367 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]

(note 225 212 0 NOTE_INSN_DELETED)

;; Function seval (seval_, funcdef_no=2, decl_uid=3594, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=239 from oldreg=198, assigning class GENERAL_REGS to r239
   68: {r239:SI=r239:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  221: r239:SI=r100:SI
    Inserting insn reload after:
  222: r198:SI=r239:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 112:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 128:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 130:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 131:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 144:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 161:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 164:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 165:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 171:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=240 from oldreg=146, assigning class SSE_REGS to r240
  171: r240:SF=r240:SF*[frame:DI-0x4c]
      REG_DEAD r146:SF
    Inserting insn reload before:
  223: r240:SF=r146:SF
    Inserting insn reload after:
  224: r147:SF=r240:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 173:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 180:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 1 in insn 181:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 182:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 183:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 184:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 186:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=241 from oldreg=235, assigning class SSE_REGS to r241
  186: r241:SF=r241:SF-r156:SF
      REG_DEAD r235:SF
      REG_DEAD r156:SF
    Inserting insn reload before:
  225: r241:SF=r235:SF
    Inserting insn reload after:
  226: r157:SF=r241:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 188:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 191:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 193:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 196
	 Choosing alt 1 in insn 196:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 197
	 Choosing alt 1 in insn 197:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 198:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 207: point = 0, n_alt = -1
   Insn 206: point = 0, n_alt = -1
   Insn 202: point = 1, n_alt = -1
   Insn 199: point = 3, n_alt = 7
   Insn 198: point = 4, n_alt = 8
   Insn 197: point = 5, n_alt = 1
   Insn 196: point = 7, n_alt = 1
   Insn 195: point = 9, n_alt = -1
   Insn 194: point = 11, n_alt = 2
   Insn 193: point = 13, n_alt = 1
   Insn 192: point = 15, n_alt = 7
   Insn 191: point = 16, n_alt = 1
   Insn 190: point = 18, n_alt = -1
   Insn 189: point = 20, n_alt = 2
   Insn 188: point = 22, n_alt = 7
   Insn 187: point = 23, n_alt = -1
   Insn 226: point = 25, n_alt = -1
	Hard reg 21 is preferable by r241 with profit 1
   Insn 186: point = 27, n_alt = 2
   Insn 225: point = 28, n_alt = -1
	Hard reg 21 is preferable by r241 with profit 1
	Hard reg 23 is preferable by r241 with profit 1
   Insn 185: point = 30, n_alt = 7
   Insn 184: point = 31, n_alt = 1
   Insn 183: point = 33, n_alt = 7
   Insn 182: point = 34, n_alt = 1
   Insn 181: point = 36, n_alt = 1
   Insn 180: point = 38, n_alt = 7
   Insn 179: point = 40, n_alt = 3
   Insn 178: point = 41, n_alt = 3
   Insn 177: point = 43, n_alt = 0
   Insn 176: point = 45, n_alt = 0
   Insn 175: point = 47, n_alt = 0
   Insn 174: point = 48, n_alt = -1
   Insn 173: point = 50, n_alt = 2
   Insn 172: point = 52, n_alt = 7
   Insn 224: point = 53, n_alt = -1
	Hard reg 22 is preferable by r240 with profit 1
   Insn 171: point = 55, n_alt = 1
   Insn 223: point = 55, n_alt = -1
	Hard reg 22 is preferable by r240 with profit 1
	Hard reg 21 is preferable by r240 with profit 1
   Insn 170: point = 57, n_alt = 7
   Insn 169: point = 59, n_alt = 3
   Insn 168: point = 60, n_alt = 3
   Insn 167: point = 62, n_alt = 0
   Insn 166: point = 64, n_alt = 0
   Insn 165: point = 65, n_alt = 8
   Insn 164: point = 66, n_alt = 1
   Insn 163: point = 68, n_alt = 7
   Insn 162: point = 70, n_alt = 3
   Insn 161: point = 71, n_alt = 3
   Insn 160: point = 73, n_alt = 0
   Insn 159: point = 75, n_alt = 0
   Insn 158: point = 77, n_alt = 0
   Insn 157: point = 78, n_alt = 2
   Insn 156: point = 80, n_alt = 7
   Insn 155: point = 82, n_alt = 3
   Insn 154: point = 83, n_alt = 3
   Insn 153: point = 85, n_alt = 0
   Insn 152: point = 87, n_alt = 0
   Insn 151: point = 88, n_alt = 1
   Insn 150: point = 90, n_alt = 7
   Insn 149: point = 92, n_alt = 3
   Insn 148: point = 93, n_alt = 3
   Insn 147: point = 95, n_alt = 0
   Insn 146: point = 97, n_alt = 0
   Insn 145: point = 98, n_alt = 8
   Insn 144: point = 99, n_alt = 1
   Insn 143: point = 101, n_alt = 7
   Insn 142: point = 103, n_alt = 3
   Insn 141: point = 104, n_alt = 3
   Insn 140: point = 106, n_alt = 0
   Insn 139: point = 108, n_alt = 0
   Insn 138: point = 110, n_alt = 0
   Insn 137: point = 111, n_alt = 2
   Insn 136: point = 113, n_alt = 7
   Insn 135: point = 115, n_alt = 3
   Insn 134: point = 116, n_alt = 3
   Insn 133: point = 118, n_alt = 0
   Insn 132: point = 120, n_alt = 0
   Insn 131: point = 121, n_alt = 1
   Insn 130: point = 123, n_alt = 7
   Insn 129: point = 125, n_alt = 3
   Insn 128: point = 126, n_alt = 3
   Insn 127: point = 128, n_alt = 0
   Insn 126: point = 130, n_alt = 0
   Insn 125: point = 132, n_alt = 0
   Insn 124: point = 133, n_alt = 8
   Insn 123: point = 134, n_alt = 2
   Insn 122: point = 136, n_alt = -1
   Insn 121: point = 138, n_alt = 2
   Insn 120: point = 140, n_alt = 7
   Insn 119: point = 142, n_alt = 3
   Insn 118: point = 143, n_alt = 3
   Insn 117: point = 145, n_alt = 0
   Insn 116: point = 147, n_alt = 0
   Insn 115: point = 149, n_alt = 0
   Insn 114: point = 150, n_alt = 7
   Insn 113: point = 152, n_alt = 3
   Insn 112: point = 153, n_alt = 8
   Insn 111: point = 154, n_alt = 2
   Insn 110: point = 156, n_alt = 7
   Insn 109: point = 158, n_alt = 3
   Insn 108: point = 159, n_alt = 3
   Insn 107: point = 161, n_alt = 0
   Insn 106: point = 163, n_alt = 0
   Insn 105: point = 165, n_alt = 0
   Insn 104: point = 166, n_alt = 7
   Insn 103: point = 168, n_alt = 3
   Insn 102: point = 169, n_alt = 3
   Insn 101: point = 171, n_alt = 0
   Insn 100: point = 173, n_alt = 0
  BB 9
   Insn 219: point = 174, n_alt = -1
  BB 3
   Insn 63: point = 174, n_alt = -1
   Insn 62: point = 174, n_alt = 0
   Insn 61: point = 175, n_alt = 1
   Insn 60: point = 177, n_alt = 0
  BB 7
   Insn 215: point = 178, n_alt = -1
  BB 5
   Insn 213: point = 178, n_alt = -1
   Insn 86: point = 178, n_alt = 1
   Insn 85: point = 179, n_alt = 0
  BB 6
   Insn 92: point = 180, n_alt = 1
   Insn 91: point = 181, n_alt = 0
  BB 4
   Insn 80: point = 182, n_alt = -1
   Insn 79: point = 182, n_alt = 1
   Insn 78: point = 183, n_alt = 7
   Insn 77: point = 185, n_alt = 3
   Insn 76: point = 186, n_alt = 3
   Insn 75: point = 188, n_alt = 0
   Insn 74: point = 190, n_alt = 0
   Insn 73: point = 191, n_alt = 7
   Insn 72: point = 193, n_alt = 3
   Insn 71: point = 194, n_alt = 1
   Insn 70: point = 195, n_alt = 0
   Insn 69: point = 197, n_alt = 0
   Insn 222: point = 199, n_alt = -1
	Hard reg 1 is preferable by r239 with profit 1
   Insn 68: point = 201, n_alt = 0
   Insn 221: point = 201, n_alt = -1
   Insn 67: point = 202, n_alt = 0
   Insn 66: point = 204, n_alt = 0
   Insn 65: point = 205, n_alt = 0
  BB 2
   Insn 58: point = 206, n_alt = 1
   Insn 57: point = 207, n_alt = 0
   Insn 56: point = 209, n_alt = 3
   Insn 55: point = 210, n_alt = 1
   Insn 51: point = 210, n_alt = 2
   Insn 50: point = 211, n_alt = 3
   Insn 49: point = 212, n_alt = -1
   Insn 47: point = 214, n_alt = 1
   Insn 45: point = 216, n_alt = 0
   Insn 46: point = 216, n_alt = 2
   Insn 44: point = 217, n_alt = 3
   Insn 43: point = 218, n_alt = 5
   Insn 42: point = 219, n_alt = 0
   Insn 41: point = 221, n_alt = 0
   Insn 40: point = 223, n_alt = 3
   Insn 36: point = 224, n_alt = 2
   Insn 35: point = 225, n_alt = 3
   Insn 34: point = 226, n_alt = -1
   Insn 32: point = 228, n_alt = 1
   Insn 30: point = 230, n_alt = 0
   Insn 31: point = 230, n_alt = 2
   Insn 29: point = 231, n_alt = 3
   Insn 28: point = 232, n_alt = 5
   Insn 27: point = 233, n_alt = 0
   Insn 26: point = 235, n_alt = 0
   Insn 25: point = 237, n_alt = 3
   Insn 21: point = 238, n_alt = 2
   Insn 20: point = 239, n_alt = 3
   Insn 19: point = 240, n_alt = -1
   Insn 17: point = 242, n_alt = 1
   Insn 15: point = 244, n_alt = 0
   Insn 16: point = 244, n_alt = 2
   Insn 14: point = 245, n_alt = 3
   Insn 13: point = 246, n_alt = 5
   Insn 12: point = 247, n_alt = 0
   Insn 11: point = 249, n_alt = 0
   Insn 10: point = 251, n_alt = 3
   Insn 6: point = 252, n_alt = 5
   Insn 5: point = 252, n_alt = 5
   Insn 4: point = 252, n_alt = 5
   Insn 3: point = 252, n_alt = 5
   Insn 2: point = 252, n_alt = 5
 r87: [248..249]
 r88: [239..240]
 r89: [238..252]
 r91: [234..235]
 r92: [225..226]
 r93: [224..252]
 r95: [220..221]
 r96: [211..212]
 r97: [210..252]
 r99: [174..175]
 r100: [198..202]
 r101: [182..191]
 r102: [187..188]
 r103: [184..186]
 r104: [182..183]
 r105: [170..171]
 r106: [167..169]
 r107: [155..166]
 r108: [162..163]
 r109: [160..161]
 r110: [157..159]
 r111: [155..156]
 r112: [139..150]
 r113: [146..147]
 r114: [144..145]
 r115: [141..143]
 r116: [139..140]
 r117: [137..138]
 r118: [135..136]
 r119: [129..130]
 r120: [127..128]
 r121: [124..126]
 r122: [122..123]
 r123: [112..121]
 r124: [117..118]
 r125: [114..116]
 r126: [112..113]
 r127: [100..111]
 r128: [107..108]
 r129: [105..106]
 r130: [102..104]
 r131: [100..101]
 r132: [94..95]
 r133: [91..93]
 r134: [89..90]
 r135: [79..88]
 r136: [84..85]
 r137: [81..83]
 r138: [79..80]
 r139: [67..78]
 r140: [74..75]
 r141: [72..73]
 r142: [69..71]
 r143: [67..68]
 r144: [61..62]
 r145: [58..60]
 r146: [56..57]
 r147: [35..53]
 r148: [49..50]
 r149: [37..48]
 r150: [44..45]
 r151: [42..43]
 r152: [39..41]
 r153: [37..38]
 r154: [35..36]
 r155: [6..34]
 r156: [27..31]
 r157: [24..25]
 r158: [8..23]
 r159: [19..20]
 r160: [17..18]
 r161: [12..16]
 r162: [12..13]
 r163: [10..11]
 r164: [8..9]
 r165: [6..7]
 r166: [4..5]
 r167: [243..245]
 r168: [241..242]
 r172: [229..231]
 r173: [227..228]
 r177: [215..217]
 r178: [213..214]
 r182: [2..3]
 r183: [0..1]
 r184: [250..251]
 r185: [246..247]
 r186: [243..244]
 r187: [236..237]
 r188: [232..233]
 r189: [229..230]
 r190: [222..223]
 r191: [218..219]
 r192: [215..216]
 r193: [208..209]
 r194: [206..207]
 r195: [176..177]
 r196: [203..205]
 r197: [203..204]
 r198: [198..199]
 r199: [196..197]
 r200: [194..195]
 r201: [192..193]
 r202: [189..190]
 r203: [184..185]
 r204: [178..179]
 r205: [180..181]
 r206: [172..173]
 r207: [167..168]
 r208: [164..165]
 r209: [157..158]
 r210: [153..154]
 r211: [151..152]
 r212: [148..149]
 r213: [141..142]
 r214: [133..134]
 r215: [131..132]
 r216: [124..125]
 r217: [119..120]
 r218: [114..115]
 r219: [109..110]
 r220: [102..103]
 r221: [98..99]
 r222: [96..97]
 r223: [91..92]
 r224: [86..87]
 r225: [81..82]
 r226: [76..77]
 r227: [69..70]
 r228: [65..66]
 r229: [63..64]
 r230: [58..59]
 r231: [51..52]
 r232: [46..47]
 r233: [39..40]
 r234: [32..33]
 r235: [29..30]
 r236: [21..22]
 r237: [14..15]
 r239: [200..201]
 r240: [54..55]
 r241: [26..28]
Compressing live ranges: from 253 to 218 - 86%
Ranges after the compression:
 r87: [214..215]
 r88: [206..207]
 r89: [206..217]
 r91: [202..203]
 r92: [194..195]
 r93: [194..217]
 r95: [190..191]
 r96: [182..183]
 r97: [182..217]
 r99: [150..151]
 r100: [172..175]
 r101: [158..165]
 r102: [162..163]
 r103: [160..161]
 r104: [158..159]
 r105: [146..147]
 r106: [144..145]
 r107: [134..143]
 r108: [140..141]
 r109: [138..139]
 r110: [136..137]
 r111: [134..135]
 r112: [120..129]
 r113: [126..127]
 r114: [124..125]
 r115: [122..123]
 r116: [120..121]
 r117: [118..119]
 r118: [116..117]
 r119: [110..111]
 r120: [108..109]
 r121: [106..107]
 r122: [104..105]
 r123: [96..103]
 r124: [100..101]
 r125: [98..99]
 r126: [96..97]
 r127: [86..95]
 r128: [92..93]
 r129: [90..91]
 r130: [88..89]
 r131: [86..87]
 r132: [80..81]
 r133: [78..79]
 r134: [76..77]
 r135: [68..75]
 r136: [72..73]
 r137: [70..71]
 r138: [68..69]
 r139: [58..67]
 r140: [64..65]
 r141: [62..63]
 r142: [60..61]
 r143: [58..59]
 r144: [52..53]
 r145: [50..51]
 r146: [48..49]
 r147: [30..45]
 r148: [42..43]
 r149: [32..41]
 r150: [38..39]
 r151: [36..37]
 r152: [34..35]
 r153: [32..33]
 r154: [30..31]
 r155: [6..29]
 r156: [24..27]
 r157: [22..23]
 r158: [8..21]
 r159: [18..19]
 r160: [16..17]
 r161: [12..15]
 r162: [12..13]
 r163: [10..11]
 r164: [8..9]
 r165: [6..7]
 r166: [4..5]
 r167: [210..211]
 r168: [208..209]
 r172: [198..199]
 r173: [196..197]
 r177: [186..187]
 r178: [184..185]
 r182: [2..3]
 r183: [0..1]
 r184: [216..217]
 r185: [212..213]
 r186: [210..211]
 r187: [204..205]
 r188: [200..201]
 r189: [198..199]
 r190: [192..193]
 r191: [188..189]
 r192: [186..187]
 r193: [180..181]
 r194: [178..179]
 r195: [152..153]
 r196: [176..177]
 r197: [176..177]
 r198: [172..173]
 r199: [170..171]
 r200: [168..169]
 r201: [166..167]
 r202: [164..165]
 r203: [160..161]
 r204: [154..155]
 r205: [156..157]
 r206: [148..149]
 r207: [144..145]
 r208: [142..143]
 r209: [136..137]
 r210: [132..133]
 r211: [130..131]
 r212: [128..129]
 r213: [122..123]
 r214: [114..115]
 r215: [112..113]
 r216: [106..107]
 r217: [102..103]
 r218: [98..99]
 r219: [94..95]
 r220: [88..89]
 r221: [84..85]
 r222: [82..83]
 r223: [78..79]
 r224: [74..75]
 r225: [70..71]
 r226: [66..67]
 r227: [60..61]
 r228: [56..57]
 r229: [54..55]
 r230: [50..51]
 r231: [44..45]
 r232: [40..41]
 r233: [34..35]
 r234: [28..29]
 r235: [26..27]
 r236: [20..21]
 r237: [14..15]
 r239: [174..175]
 r240: [46..47]
 r241: [24..25]

********** Assignment #1: **********

	 Assigning to 239 (cl=GENERAL_REGS, orig=198, freq=3, tfirst=239, tfreq=3)...
	   Assign 1 to reload r239 (freq=3)
	 Assigning to 240 (cl=SSE_REGS, orig=146, freq=3, tfirst=240, tfreq=3)...
	   Assign 22 to reload r240 (freq=3)
	 Assigning to 241 (cl=SSE_REGS, orig=235, freq=3, tfirst=241, tfreq=3)...
	   Assign 23 to reload r241 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 50
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 73
changing reg in insn 79
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 111
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 121
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 137
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 144
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 157
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 164
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 170
changing reg in insn 182
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 194
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 199
changing reg in insn 202
changing reg in insn 202
changing reg in insn 206
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 92
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 176
changing reg in insn 179
changing reg in insn 180
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 188
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
deleting insn with uid = 19.
deleting insn with uid = 34.
deleting insn with uid = 49.
deleting insn with uid = 222.
deleting insn with uid = 122.
deleting insn with uid = 224.
deleting insn with uid = 225.
deleting insn with uid = 190.
deleting insn with uid = 195.
deleting insn with uid = 202.
starting the processing of deferred insns
ending the processing of deferred insns


seval

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14]
;;  ref usage 	r0={70d,73u} r1={19d,19u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,79u} r7={1d,9u} r17={28d,5u} r20={1d,1u,10e} r21={31d,31u} r22={11d,10u} r23={6d,5u} r24={2d,1u} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} 
;;    total ref usage 432{185d,237u,10e} in 168{168 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 167 168 172 173 177 178 184 185 186 187 188 189 190 191 192 193 194
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])
        (reg:DI 2 cx [ s ])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])
        (reg:DI 37 r8 [ n ])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [184]) [1 *n_86(D)+0 S4 A32])) "../src/spline.f":313 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [185])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":313 145 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.12+0 S8 A64])
        (reg:DI 0 ax [185])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (set (reg:DI 0 ax [orig:167 size.13_88 ] [167])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.12+0 S8 A64])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 16 14 15 2 (set (reg:DI 1 dx [186])
        (const_int 0 [0])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 15 16 17 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:167 size.13_88 ] [167])
            (const_int 0 [0]))) "../src/spline.f":313 4 {*cmpdi_ccno_1}
     (nil))
(insn 17 15 20 2 (set (reg:DI 0 ax [orig:168 size.13_89 ] [168])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:167 size.13_88 ] [167])
            (reg:DI 1 dx [186]))) "../src/spline.f":313 967 {*movdicc_noc}
     (nil))
(insn 20 17 21 2 (set (reg:DI 42 r13 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.157_2 ] [88])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 21 20 25 2 (set (reg:DI 43 r14 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 25 21 26 2 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [187]) [1 *n_86(D)+0 S4 A32])) "../src/spline.f":313 82 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 0 ax [188])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":313 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.16+0 S8 A64])
        (reg:DI 0 ax [188])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 29 28 31 2 (set (reg:DI 0 ax [orig:172 size.17_94 ] [172])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.16+0 S8 A64])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 31 29 30 2 (set (reg:DI 1 dx [189])
        (const_int 0 [0])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 30 31 32 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:172 size.17_94 ] [172])
            (const_int 0 [0]))) "../src/spline.f":313 4 {*cmpdi_ccno_1}
     (nil))
(insn 32 30 35 2 (set (reg:DI 0 ax [orig:173 size.17_95 ] [173])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:172 size.17_94 ] [172])
            (reg:DI 1 dx [189]))) "../src/spline.f":313 967 {*movdicc_noc}
     (nil))
(insn 35 32 36 2 (set (reg:DI 40 r11 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.159_6 ] [92])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 36 35 40 2 (set (reg:DI 41 r12 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 40 36 41 2 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [190]) [1 *n_86(D)+0 S4 A32])) "../src/spline.f":313 82 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 0 ax [191])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":313 145 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.14+0 S8 A64])
        (reg:DI 0 ax [191])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 44 43 46 2 (set (reg:DI 0 ax [orig:177 size.15_100 ] [177])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.14+0 S8 A64])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 46 44 45 2 (set (reg:DI 1 dx [192])
        (const_int 0 [0])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 45 46 47 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:177 size.15_100 ] [177])
            (const_int 0 [0]))) "../src/spline.f":313 4 {*cmpdi_ccno_1}
     (nil))
(insn 47 45 50 2 (set (reg:DI 0 ax [orig:178 size.15_101 ] [178])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:177 size.15_100 ] [177])
            (reg:DI 1 dx [192]))) "../src/spline.f":313 967 {*movdicc_noc}
     (nil))
(insn 50 47 51 2 (set (reg:DI 38 r9 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.161_10 ] [96])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 51 50 55 2 (set (reg:DI 39 r10 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":313 81 {*movdi_internal}
     (nil))
(insn 55 51 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":319 82 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":320 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [194])
        (mem:SI (reg/f:DI 0 ax [193]) [1 *n_86(D)+0 S4 A32])) "../src/spline.f":320 82 {*movsi_internal}
     (nil))
(insn 58 57 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [194])) "../src/spline.f":320 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 195
(code_label 95 58 59 3 26 (nil) [1 uses])
(note 59 95 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":322 82 {*movsi_internal}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:SI 0 ax [orig:99 _13 ] [99])
                (minus:SI (reg:SI 0 ax [195])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":322 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 62 61 63 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 1 [0x1]))) "../src/spline.f":322 7 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 218)
            (pc))) "../src/spline.f":322 617 {*jcc_1}
     (nil)
 -> 218)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 196 197 198 199 200 201 202 203
(note 64 63 65 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 4 (set (reg:SI 1 dx [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":324 82 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":324 82 {*movsi_internal}
     (nil))
(insn 67 66 221 4 (parallel [
            (set (reg:SI 0 ax [orig:100 _14 ] [100])
                (plus:SI (reg:SI 0 ax [197])
                    (reg:SI 1 dx [196])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":324 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 221 67 68 4 (set (reg:SI 1 dx [198])
        (reg:SI 0 ax [orig:100 _14 ] [100])) "../src/spline.f":324 82 {*movsi_internal}
     (nil))
(insn 68 221 69 4 (parallel [
            (set (reg:SI 1 dx [198])
                (lshiftrt:SI (reg:SI 1 dx [198])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":324 544 {*lshrsi3_1}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:SI 0 ax [199])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (reg:SI 1 dx [198])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":324 217 {*addsi_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 0 ax [200])
                (ashiftrt:SI (reg:SI 0 ax [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":324 545 {*ashrsi3_1}
     (nil))
(insn 71 70 72 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [200])) "../src/spline.f":324 82 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":325 81 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:SF 22 xmm1 [orig:101 _15 ] [101])
        (mem:SF (reg/f:DI 0 ax [201]) [3 *ss_108(D)+0 S4 A32])) "../src/spline.f":325 127 {*movsf_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":325 82 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [202]))) "../src/spline.f":325 145 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":325 218 {*adddi_1}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":325 81 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [203])) [3 *s_109(D) S4 A32])) "../src/spline.f":325 127 {*movsf_internal}
     (nil))
(insn 79 78 80 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:101 _15 ] [101]))) "../src/spline.f":325 51 {*cmpiusf}
     (nil))
(jump_insn 80 79 84 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 212)
            (pc))) "../src/spline.f":325 617 {*jcc_1}
     (nil)
 -> 212)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 204
(note 84 80 85 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 5 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":326 82 {*movsi_internal}
     (nil))
(insn 86 85 213 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [204])) "../src/spline.f":326 82 {*movsi_internal}
     (nil))
(jump_insn 213 86 214 5 (set (pc)
        (label_ref 93)) 649 {jump}
     (nil)
 -> 93)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 214 213 212)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 205
(code_label 212 214 90 6 29 (nil) [1 uses])
(note 90 212 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 6 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":328 82 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [205])) "../src/spline.f":328 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 93 92 94 7 25 (nil) [1 uses])
(note 94 93 215 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 215 94 216 7 (set (pc)
        (label_ref 95)) "../src/spline.f":330 649 {jump}
     (nil)
 -> 95)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 216 215 218)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 218 216 217 9 30 (nil) [1 uses])
(note 217 218 219 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 219 217 98 9 (const_int 0 [0]) "../src/spline.f":330 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 21 [xmm0] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 182 183 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237
(code_label 98 219 99 8 22 (nil) [0 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":332 82 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [206]))) "../src/spline.f":332 145 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":332 218 {*adddi_1}
     (nil))
(insn 103 102 104 8 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":332 81 {*movdi_internal}
     (nil))
(insn 104 103 105 8 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [207])) [3 *s_109(D) S4 A32])) "../src/spline.f":332 127 {*movsf_internal}
     (nil))
(insn 105 104 106 8 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":332 82 {*movsi_internal}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [208])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":332 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 107 106 108 8 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":332 145 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":332 218 {*adddi_1}
     (nil))
(insn 109 108 110 8 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":332 81 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [209])) [3 *s_109(D) S4 A32])) "../src/spline.f":332 127 {*movsf_internal}
     (nil))
(insn 111 110 112 8 (set (reg:SF 21 xmm0 [210])
        (minus:SF (reg:SF 21 xmm0 [orig:107 _21 ] [107])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "../src/spline.f":332 805 {*fop_sf_1}
     (nil))
(insn 112 111 113 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [210])) "../src/spline.f":332 127 {*movsf_internal}
     (nil))
(insn 113 112 114 8 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":333 81 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (reg/f:DI 0 ax [211]) [3 *ss_108(D)+0 S4 A32])) "../src/spline.f":333 127 {*movsf_internal}
     (nil))
(insn 115 114 116 8 (set (reg:SI 0 ax [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":333 82 {*movsi_internal}
     (nil))
(insn 116 115 117 8 (parallel [
            (set (reg:SI 0 ax [orig:113 _27 ] [113])
                (plus:SI (reg:SI 0 ax [212])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":333 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 117 116 118 8 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _27 ] [113]))) "../src/spline.f":333 145 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 8 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":333 218 {*adddi_1}
     (nil))
(insn 119 118 120 8 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":333 81 {*movdi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:SF 22 xmm1 [orig:116 _30 ] [116])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [213])) [3 *s_109(D) S4 A32])) "../src/spline.f":333 127 {*movsf_internal}
     (nil))
(insn 121 120 123 8 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (minus:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:116 _30 ] [116]))) "../src/spline.f":333 805 {*fop_sf_1}
     (nil))
(insn 123 121 124 8 (set (reg:SF 21 xmm0 [214])
        (div:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":333 805 {*fop_sf_1}
     (nil))
(insn 124 123 125 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [214])) "../src/spline.f":333 127 {*movsf_internal}
     (nil))
(insn 125 124 126 8 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":334 82 {*movsi_internal}
     (nil))
(insn 126 125 127 8 (parallel [
            (set (reg:SI 0 ax [orig:119 _33 ] [119])
                (plus:SI (reg:SI 0 ax [215])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":334 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 127 126 128 8 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _33 ] [119]))) "../src/spline.f":334 145 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg:DI 1 dx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":334 218 {*adddi_1}
     (nil))
(insn 129 128 130 8 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":334 81 {*movdi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [216])) [3 *xs_114(D) S4 A32])) "../src/spline.f":334 127 {*movsf_internal}
     (nil))
(insn 131 130 132 8 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (mult:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":334 802 {*fop_sf_comm}
     (nil))
(insn 132 131 133 8 (set (reg:SI 0 ax [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":334 82 {*movsi_internal}
     (nil))
(insn 133 132 134 8 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [217]))) "../src/spline.f":334 145 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 8 (parallel [
            (set (reg:DI 1 dx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":334 218 {*adddi_1}
     (nil))
(insn 135 134 136 8 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":334 81 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:SF 22 xmm1 [orig:126 _40 ] [126])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [218])) [3 *x_115(D) S4 A32])) "../src/spline.f":334 127 {*movsf_internal}
     (nil))
(insn 137 136 138 8 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (minus:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123])
            (reg:SF 22 xmm1 [orig:126 _40 ] [126]))) "../src/spline.f":334 805 {*fop_sf_1}
     (nil))
(insn 138 137 139 8 (set (reg:SI 0 ax [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":334 82 {*movsi_internal}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:SI 0 ax [orig:128 _42 ] [128])
                (plus:SI (reg:SI 0 ax [219])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":334 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 140 139 141 8 (set (reg:DI 0 ax [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 0 ax [orig:128 _42 ] [128]))) "../src/spline.f":334 145 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":334 218 {*adddi_1}
     (nil))
(insn 142 141 143 8 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":334 81 {*movdi_internal}
     (nil))
(insn 143 142 144 8 (set (reg:SF 22 xmm1 [orig:131 _45 ] [131])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:130 _44 ] [130])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [220])) [3 *x_115(D) S4 A32])) "../src/spline.f":334 127 {*movsf_internal}
     (nil))
(insn 144 143 145 8 (set (reg:SF 21 xmm0 [221])
        (plus:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [orig:131 _45 ] [131]))) "../src/spline.f":334 802 {*fop_sf_comm}
     (nil))
(insn 145 144 146 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 cx1+0 S4 A32])
        (reg:SF 21 xmm0 [221])) "../src/spline.f":334 127 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SI 0 ax [222])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":335 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [222]))) "../src/spline.f":335 145 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 8 (parallel [
            (set (reg:DI 1 dx [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":335 218 {*adddi_1}
     (nil))
(insn 149 148 150 8 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":335 81 {*movdi_internal}
     (nil))
(insn 150 149 151 8 (set (reg:SF 21 xmm0 [orig:134 _48 ] [134])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [223])) [3 *xs_114(D) S4 A32])) "../src/spline.f":335 127 {*movsf_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (mult:SF (reg:SF 21 xmm0 [orig:134 _48 ] [134])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":335 802 {*fop_sf_comm}
     (nil))
(insn 152 151 153 8 (set (reg:SI 0 ax [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":335 82 {*movsi_internal}
     (nil))
(insn 153 152 154 8 (set (reg:DI 0 ax [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 0 ax [224]))) "../src/spline.f":335 145 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 8 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":335 218 {*adddi_1}
     (nil))
(insn 155 154 156 8 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":335 81 {*movdi_internal}
     (nil))
(insn 156 155 157 8 (set (reg:SF 22 xmm1 [orig:138 _52 ] [138])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [225])) [3 *x_115(D) S4 A32])) "../src/spline.f":335 127 {*movsf_internal}
     (nil))
(insn 157 156 158 8 (set (reg:SF 21 xmm0 [orig:139 _53 ] [139])
        (minus:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (reg:SF 22 xmm1 [orig:138 _52 ] [138]))) "../src/spline.f":335 805 {*fop_sf_1}
     (nil))
(insn 158 157 159 8 (set (reg:SI 0 ax [226])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":335 82 {*movsi_internal}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:SI 0 ax [orig:140 _54 ] [140])
                (plus:SI (reg:SI 0 ax [226])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":335 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 160 159 161 8 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [orig:140 _54 ] [140]))) "../src/spline.f":335 145 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 8 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 _55 ] [141])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":335 218 {*adddi_1}
     (nil))
(insn 162 161 163 8 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":335 81 {*movdi_internal}
     (nil))
(insn 163 162 164 8 (set (reg:SF 22 xmm1 [orig:143 _57 ] [143])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:142 _56 ] [142])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [227])) [3 *x_115(D) S4 A32])) "../src/spline.f":335 127 {*movsf_internal}
     (nil))
(insn 164 163 165 8 (set (reg:SF 21 xmm0 [228])
        (plus:SF (reg:SF 21 xmm0 [orig:139 _53 ] [139])
            (reg:SF 22 xmm1 [orig:143 _57 ] [143]))) "../src/spline.f":335 802 {*fop_sf_comm}
     (nil))
(insn 165 164 166 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 cx2+0 S4 A32])
        (reg:SF 21 xmm0 [228])) "../src/spline.f":335 127 {*movsf_internal}
     (nil))
(insn 166 165 167 8 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":336 82 {*movsi_internal}
     (nil))
(insn 167 166 168 8 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [229]))) "../src/spline.f":336 145 {*extendsidi2_rex64}
     (nil))
(insn 168 167 169 8 (parallel [
            (set (reg:DI 1 dx [orig:145 _59 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":336 218 {*adddi_1}
     (nil))
(insn 169 168 170 8 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":336 81 {*movdi_internal}
     (nil))
(insn 170 169 223 8 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:145 _59 ] [145])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [230])) [3 *x_115(D) S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 223 170 171 8 (set (reg:SF 22 xmm1 [orig:146 _60 ] [146])
        (reg:SF 21 xmm0 [orig:146 _60 ] [146])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 171 223 172 8 (set (reg:SF 22 xmm1 [orig:146 _60 ] [146])
        (mult:SF (reg:SF 22 xmm1 [orig:146 _60 ] [146])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 172 171 173 8 (set (reg:SF 21 xmm0 [231])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 173 172 174 8 (set (reg:SF 21 xmm0 [orig:148 _62 ] [148])
        (minus:SF (reg:SF 21 xmm0 [231])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":336 805 {*fop_sf_1}
     (nil))
(insn 174 173 175 8 (set (reg:SF 23 xmm2 [orig:149 _63 ] [149])
        (reg:SF 21 xmm0 [orig:148 _62 ] [148])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 175 174 176 8 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":336 82 {*movsi_internal}
     (nil))
(insn 176 175 177 8 (parallel [
            (set (reg:SI 0 ax [orig:150 _64 ] [150])
                (plus:SI (reg:SI 0 ax [232])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":336 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 177 176 178 8 (set (reg:DI 0 ax [orig:151 _65 ] [151])
        (sign_extend:DI (reg:SI 0 ax [orig:150 _64 ] [150]))) "../src/spline.f":336 145 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 8 (parallel [
            (set (reg:DI 1 dx [orig:152 _66 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _65 ] [151])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":336 218 {*adddi_1}
     (nil))
(insn 179 178 180 8 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":336 81 {*movdi_internal}
     (nil))
(insn 180 179 181 8 (set (reg:SF 21 xmm0 [orig:153 _67 ] [153])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:152 _66 ] [152])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [233])) [3 *x_115(D) S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 181 180 182 8 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (mult:SF (reg:SF 21 xmm0 [orig:153 _67 ] [153])
            (reg:SF 23 xmm2 [orig:149 _63 ] [149]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 182 181 183 8 (set (reg:SF 22 xmm1 [orig:155 _69 ] [155])
        (plus:SF (reg:SF 22 xmm1 [orig:147 _61 ] [147])
            (reg:SF 21 xmm0 [orig:154 _68 ] [154]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 183 182 184 8 (set (reg:SF 21 xmm0 [234])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 184 183 185 8 (set (reg:SF 21 xmm0 [orig:156 _70 ] [156])
        (mult:SF (reg:SF 21 xmm0 [234])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 185 184 186 8 (set (reg:SF 23 xmm2 [235])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 186 185 226 8 (set (reg:SF 23 xmm2 [235])
        (minus:SF (reg:SF 23 xmm2 [235])
            (reg:SF 21 xmm0 [orig:156 _70 ] [156]))) "../src/spline.f":336 805 {*fop_sf_1}
     (nil))
(insn 226 186 187 8 (set (reg:SF 21 xmm0 [orig:157 _71 ] [157])
        (reg:SF 23 xmm2 [235])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 187 226 188 8 (set (reg:SF 24 xmm3 [orig:158 _72 ] [158])
        (reg:SF 21 xmm0 [orig:157 _71 ] [157])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 188 187 189 8 (set (reg:SF 21 xmm0 [236])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 189 188 191 8 (set (reg:SF 21 xmm0 [orig:159 _73 ] [159])
        (minus:SF (reg:SF 21 xmm0 [236])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32]))) "../src/spline.f":336 805 {*fop_sf_1}
     (nil))
(insn 191 189 192 8 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (mult:SF (reg:SF 21 xmm0 [orig:160 _74 ] [160])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 cx1+0 S4 A32]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 192 191 193 8 (set (reg:SF 23 xmm2 [237])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 193 192 194 8 (set (reg:SF 23 xmm2 [orig:162 _76 ] [162])
        (mult:SF (reg:SF 23 xmm2 [237])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [3 cx2+0 S4 A32]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 194 193 196 8 (set (reg:SF 21 xmm0 [orig:163 _77 ] [163])
        (minus:SF (reg:SF 21 xmm0 [orig:161 _75 ] [161])
            (reg:SF 23 xmm2 [orig:162 _76 ] [162]))) "../src/spline.f":336 805 {*fop_sf_1}
     (nil))
(insn 196 194 197 8 (set (reg:SF 21 xmm0 [orig:165 _79 ] [165])
        (mult:SF (reg:SF 21 xmm0 [orig:164 _78 ] [164])
            (reg:SF 24 xmm3 [orig:158 _72 ] [158]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 197 196 198 8 (set (reg:SF 21 xmm0 [orig:166 _80 ] [166])
        (plus:SF (reg:SF 21 xmm0 [orig:165 _79 ] [165])
            (reg:SF 22 xmm1 [orig:155 _69 ] [155]))) "../src/spline.f":336 802 {*fop_sf_comm}
     (nil))
(insn 198 197 199 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_seval+0 S4 A64])
        (reg:SF 21 xmm0 [orig:166 _80 ] [166])) "../src/spline.f":336 127 {*movsf_internal}
     (nil))
(insn 199 198 206 8 (set (reg:SF 21 xmm0 [orig:182 _119 ] [182])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_seval+0 S4 A64])) "../src/spline.f":337 127 {*movsf_internal}
     (nil))
(insn 206 199 207 8 (set (reg/i:SF 21 xmm0)
        (reg:SF 21 xmm0 [orig:183 <retval> ] [183])) "../src/spline.f":338 127 {*movsf_internal}
     (nil))
(insn 207 206 220 8 (use (reg/i:SF 21 xmm0)) "../src/spline.f":338 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]

(note 220 207 0 NOTE_INSN_DELETED)

;; Function splind (splind_, funcdef_no=3, decl_uid=3637, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=60176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=60128, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 81:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 87:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 89:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 95:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 98:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 100:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 101:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 102:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 107:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 109:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 115:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 119:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 120:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 124:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 126:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 134:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 135:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=429 from oldreg=133, assigning class SSE_REGS to r429
  135: r429:SF=r429:SF/[frame:DI-0x48]
      REG_DEAD r133:SF
    Inserting insn reload before:
  559: r429:SF=r133:SF
    Inserting insn reload after:
  560: r134:SF=r429:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 144:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 147:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 149:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 150:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 151
	 Choosing alt 1 in insn 151:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 155:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 157
	 Choosing alt 1 in insn 157:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 159:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 177:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 179:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 181:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 183:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 184:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 186:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 1 in insn 187:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 189:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 192:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 196:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 211:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 212:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 213:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 214:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 216:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 218:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 219:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 223:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 225:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 226:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 230:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 236:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 237:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 238:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 240:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 242:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 246:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) v  (1) vm {*cmpiusf}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 258:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 259:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 260:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 266:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 271:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 272:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 275:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 277:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 279:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 280:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 282:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 283
	 Choosing alt 1 in insn 283:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 284:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 287:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 289:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 294:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 296:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 297:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 299:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 302:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 303:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 305:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 311:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) v  (1) vm {*cmpiusf}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 323:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 324:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 325:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 329:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 330:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 331:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 335:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 337:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 342:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 344:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 345:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 351:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 353:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 354:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 356:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 358:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 359:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 360:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 361:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 363:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 366:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 367:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 369:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 378:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 379:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 383:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 384:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 385:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 389:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 390:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 391:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 393:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 401:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 402:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) v  (1) vm {*cmpiusf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 420:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 425:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) v  (1) vm {*cmpiusf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 439:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 443:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 450:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 451:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 452:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 457:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 458:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 462:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 463:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 464:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 467:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 469:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 471:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 472:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 474:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 475
	 Choosing alt 1 in insn 475:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 476:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 479:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 480:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 481:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 486:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 487:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 488:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 489:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 494:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 495:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 497:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 500:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 502:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 503:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 504:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 34
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33

********** Pseudo live ranges #1: **********

  BB 3
   Insn 63: point = 0, n_alt = 0
   Insn 62: point = 0, n_alt = 4
   Insn 61: point = 0, n_alt = 0
  BB 33
   Insn 540: point = 0, n_alt = -1
   Insn 510: point = 0, n_alt = 0
   Insn 509: point = 0, n_alt = -1
   Insn 508: point = 1, n_alt = -1
   Insn 507: point = 2, n_alt = -1
   Insn 506: point = 3, n_alt = -1
   Insn 505: point = 4, n_alt = -1
   Insn 504: point = 5, n_alt = 3
   Insn 503: point = 6, n_alt = 3
   Insn 502: point = 7, n_alt = 3
   Insn 501: point = 8, n_alt = 3
   Insn 500: point = 9, n_alt = 3
  BB 32
   Insn 497: point = 10, n_alt = 8
   Insn 496: point = 11, n_alt = 3
   Insn 495: point = 12, n_alt = 2
   Insn 494: point = 14, n_alt = 3
   Insn 493: point = 16, n_alt = 0
   Insn 492: point = 18, n_alt = 0
   Insn 491: point = 20, n_alt = 3
   Insn 490: point = 21, n_alt = -1
   Insn 489: point = 23, n_alt = 2
   Insn 488: point = 25, n_alt = 7
   Insn 487: point = 27, n_alt = 3
   Insn 486: point = 28, n_alt = 3
   Insn 485: point = 30, n_alt = 0
   Insn 484: point = 32, n_alt = 0
   Insn 483: point = 34, n_alt = 0
   Insn 482: point = 36, n_alt = 3
   Insn 481: point = 37, n_alt = 7
   Insn 480: point = 39, n_alt = 3
   Insn 479: point = 40, n_alt = 3
   Insn 478: point = 42, n_alt = 0
   Insn 477: point = 44, n_alt = 0
   Insn 476: point = 46, n_alt = 3
   Insn 475: point = 47, n_alt = 1
   Insn 474: point = 49, n_alt = 7
   Insn 473: point = 50, n_alt = -1
   Insn 472: point = 52, n_alt = 2
   Insn 471: point = 54, n_alt = 7
   Insn 470: point = 56, n_alt = 3
   Insn 469: point = 57, n_alt = 3
   Insn 468: point = 59, n_alt = 0
   Insn 467: point = 61, n_alt = 0
   Insn 466: point = 63, n_alt = 0
   Insn 465: point = 65, n_alt = 3
   Insn 464: point = 66, n_alt = 7
   Insn 463: point = 68, n_alt = 3
   Insn 462: point = 69, n_alt = 3
   Insn 461: point = 71, n_alt = 0
   Insn 460: point = 73, n_alt = 0
   Insn 459: point = 75, n_alt = 3
   Insn 458: point = 76, n_alt = 8
   Insn 457: point = 77, n_alt = 7
   Insn 456: point = 78, n_alt = 0
   Insn 455: point = 80, n_alt = 0
   Insn 454: point = 82, n_alt = 0
   Insn 453: point = 84, n_alt = 3
   Insn 452: point = 85, n_alt = 8
   Insn 451: point = 86, n_alt = 7
   Insn 450: point = 87, n_alt = 0
   Insn 449: point = 89, n_alt = 0
   Insn 448: point = 91, n_alt = 0
   Insn 447: point = 93, n_alt = 3
  BB 31
   Insn 445: point = 94, n_alt = -1
   Insn 444: point = 94, n_alt = 0
   Insn 443: point = 95, n_alt = 0
   Insn 442: point = 95, n_alt = 0
  BB 29
   Insn 553: point = 98, n_alt = -1
   Insn 434: point = 98, n_alt = 1
  BB 30
   Insn 439: point = 99, n_alt = 1
  BB 28
   Insn 429: point = 100, n_alt = -1
   Insn 428: point = 100, n_alt = 1
  BB 27
   Insn 427: point = 102, n_alt = -1
   Insn 426: point = 102, n_alt = 1
   Insn 425: point = 102, n_alt = 7
   Insn 424: point = 104, n_alt = 3
  BB 26
   Insn 422: point = 105, n_alt = -1
   Insn 421: point = 105, n_alt = 0
   Insn 420: point = 106, n_alt = 0
   Insn 419: point = 106, n_alt = 0
  BB 24
   Insn 551: point = 109, n_alt = -1
   Insn 411: point = 109, n_alt = 1
  BB 25
   Insn 416: point = 110, n_alt = 1
  BB 23
   Insn 406: point = 111, n_alt = -1
   Insn 405: point = 111, n_alt = 1
  BB 22
   Insn 404: point = 113, n_alt = -1
   Insn 403: point = 113, n_alt = 1
   Insn 402: point = 113, n_alt = 7
   Insn 401: point = 115, n_alt = 3
  BB 21
   Insn 399: point = 116, n_alt = -1
   Insn 398: point = 116, n_alt = 0
   Insn 397: point = 117, n_alt = 0
   Insn 396: point = 119, n_alt = 3
  BB 19
   Insn 549: point = 120, n_alt = -1
   Insn 369: point = 120, n_alt = 8
   Insn 368: point = 121, n_alt = 3
   Insn 367: point = 122, n_alt = 2
   Insn 366: point = 124, n_alt = 3
   Insn 365: point = 126, n_alt = 0
   Insn 364: point = 128, n_alt = 0
   Insn 363: point = 130, n_alt = 3
   Insn 362: point = 131, n_alt = -1
   Insn 361: point = 133, n_alt = 2
   Insn 360: point = 135, n_alt = 7
   Insn 359: point = 137, n_alt = 3
   Insn 358: point = 138, n_alt = 3
   Insn 357: point = 140, n_alt = 0
   Insn 356: point = 142, n_alt = 0
   Insn 355: point = 144, n_alt = 0
   Insn 354: point = 146, n_alt = 3
   Insn 353: point = 147, n_alt = 7
   Insn 352: point = 149, n_alt = 3
   Insn 351: point = 150, n_alt = 3
   Insn 350: point = 152, n_alt = 0
   Insn 349: point = 154, n_alt = 0
   Insn 348: point = 156, n_alt = 3
   Insn 347: point = 157, n_alt = 1
   Insn 346: point = 159, n_alt = -1
   Insn 345: point = 161, n_alt = 2
   Insn 344: point = 163, n_alt = 7
   Insn 343: point = 165, n_alt = 3
   Insn 342: point = 166, n_alt = 3
   Insn 341: point = 168, n_alt = 0
   Insn 340: point = 170, n_alt = 0
   Insn 339: point = 172, n_alt = 0
   Insn 338: point = 174, n_alt = 3
   Insn 337: point = 175, n_alt = 7
   Insn 336: point = 177, n_alt = 3
   Insn 335: point = 178, n_alt = 3
   Insn 334: point = 180, n_alt = 0
   Insn 333: point = 182, n_alt = 0
   Insn 332: point = 184, n_alt = 3
   Insn 331: point = 185, n_alt = 8
   Insn 330: point = 186, n_alt = 7
   Insn 329: point = 187, n_alt = 0
   Insn 328: point = 189, n_alt = 0
   Insn 327: point = 191, n_alt = 0
   Insn 326: point = 193, n_alt = 3
   Insn 325: point = 194, n_alt = 8
   Insn 324: point = 195, n_alt = 7
   Insn 323: point = 196, n_alt = 0
   Insn 322: point = 198, n_alt = 0
   Insn 321: point = 200, n_alt = 0
   Insn 320: point = 202, n_alt = 3
  BB 16
   Insn 547: point = 203, n_alt = -1
   Insn 305: point = 203, n_alt = 8
   Insn 304: point = 204, n_alt = 3
   Insn 303: point = 205, n_alt = 2
   Insn 302: point = 207, n_alt = 3
   Insn 301: point = 209, n_alt = 0
   Insn 300: point = 211, n_alt = 0
   Insn 299: point = 213, n_alt = 3
   Insn 298: point = 214, n_alt = -1
   Insn 297: point = 216, n_alt = 2
   Insn 296: point = 218, n_alt = 7
   Insn 295: point = 220, n_alt = 3
   Insn 294: point = 221, n_alt = 3
   Insn 293: point = 223, n_alt = 0
   Insn 292: point = 225, n_alt = 0
   Insn 291: point = 227, n_alt = 0
   Insn 290: point = 229, n_alt = 3
   Insn 289: point = 230, n_alt = 7
   Insn 288: point = 232, n_alt = 3
   Insn 287: point = 233, n_alt = 3
   Insn 286: point = 235, n_alt = 0
   Insn 285: point = 237, n_alt = 0
   Insn 284: point = 239, n_alt = 3
   Insn 283: point = 240, n_alt = 1
   Insn 282: point = 242, n_alt = 7
   Insn 281: point = 243, n_alt = -1
   Insn 280: point = 245, n_alt = 2
   Insn 279: point = 247, n_alt = 7
   Insn 278: point = 249, n_alt = 3
   Insn 277: point = 250, n_alt = 3
   Insn 276: point = 252, n_alt = 0
   Insn 275: point = 254, n_alt = 0
   Insn 274: point = 256, n_alt = 0
   Insn 273: point = 258, n_alt = 3
   Insn 272: point = 259, n_alt = 7
   Insn 271: point = 261, n_alt = 3
   Insn 270: point = 262, n_alt = 3
   Insn 269: point = 264, n_alt = 0
   Insn 268: point = 266, n_alt = 0
   Insn 267: point = 268, n_alt = 3
   Insn 266: point = 269, n_alt = 8
   Insn 265: point = 270, n_alt = 7
   Insn 264: point = 271, n_alt = 0
   Insn 263: point = 273, n_alt = 0
   Insn 262: point = 275, n_alt = 0
   Insn 261: point = 277, n_alt = 3
   Insn 260: point = 278, n_alt = 8
   Insn 259: point = 279, n_alt = 7
   Insn 258: point = 280, n_alt = 0
   Insn 257: point = 282, n_alt = 0
   Insn 256: point = 284, n_alt = 0
   Insn 255: point = 286, n_alt = 3
  BB 20
   Insn 393: point = 287, n_alt = 8
   Insn 392: point = 288, n_alt = 3
   Insn 391: point = 289, n_alt = 7
   Insn 390: point = 291, n_alt = 3
   Insn 389: point = 292, n_alt = 3
   Insn 388: point = 294, n_alt = 0
   Insn 387: point = 296, n_alt = 0
   Insn 386: point = 298, n_alt = 3
   Insn 385: point = 299, n_alt = 8
   Insn 384: point = 300, n_alt = 7
   Insn 383: point = 301, n_alt = 0
   Insn 382: point = 303, n_alt = 0
   Insn 381: point = 305, n_alt = 0
   Insn 380: point = 307, n_alt = 3
   Insn 379: point = 308, n_alt = 8
   Insn 378: point = 309, n_alt = 7
   Insn 377: point = 310, n_alt = 0
   Insn 376: point = 312, n_alt = 0
   Insn 375: point = 314, n_alt = 0
   Insn 374: point = 316, n_alt = 3
  BB 18
   Insn 315: point = 317, n_alt = -1
   Insn 314: point = 317, n_alt = 1
  BB 17
   Insn 313: point = 319, n_alt = -1
   Insn 312: point = 319, n_alt = 1
   Insn 311: point = 319, n_alt = 7
   Insn 310: point = 321, n_alt = 3
  BB 15
   Insn 250: point = 322, n_alt = -1
   Insn 249: point = 322, n_alt = 1
  BB 14
   Insn 248: point = 324, n_alt = -1
   Insn 247: point = 324, n_alt = 1
   Insn 246: point = 324, n_alt = 7
   Insn 245: point = 326, n_alt = 3
  BB 12
   Insn 545: point = 327, n_alt = -1
   Insn 230: point = 327, n_alt = 8
   Insn 229: point = 328, n_alt = 3
   Insn 228: point = 329, n_alt = 2
   Insn 227: point = 331, n_alt = -1
   Insn 226: point = 333, n_alt = 2
   Insn 225: point = 335, n_alt = 7
   Insn 224: point = 337, n_alt = 3
   Insn 223: point = 338, n_alt = 7
   Insn 222: point = 340, n_alt = 3
   Insn 221: point = 341, n_alt = 1
   Insn 220: point = 343, n_alt = -1
   Insn 219: point = 345, n_alt = 2
   Insn 218: point = 347, n_alt = 7
   Insn 217: point = 349, n_alt = 3
   Insn 216: point = 350, n_alt = 7
   Insn 215: point = 352, n_alt = 3
   Insn 214: point = 353, n_alt = 8
   Insn 213: point = 354, n_alt = 7
   Insn 212: point = 355, n_alt = 8
   Insn 211: point = 356, n_alt = 7
  BB 9
   Insn 543: point = 357, n_alt = -1
   Insn 196: point = 357, n_alt = 8
   Insn 195: point = 358, n_alt = 3
   Insn 194: point = 359, n_alt = 2
   Insn 193: point = 361, n_alt = -1
   Insn 192: point = 363, n_alt = 2
   Insn 191: point = 365, n_alt = 7
   Insn 190: point = 367, n_alt = 3
   Insn 189: point = 368, n_alt = 7
   Insn 188: point = 370, n_alt = 3
   Insn 187: point = 371, n_alt = 1
   Insn 186: point = 373, n_alt = 7
   Insn 185: point = 374, n_alt = -1
   Insn 184: point = 376, n_alt = 2
   Insn 183: point = 378, n_alt = 7
   Insn 182: point = 380, n_alt = 3
   Insn 181: point = 381, n_alt = 7
   Insn 180: point = 383, n_alt = 3
   Insn 179: point = 384, n_alt = 8
   Insn 178: point = 385, n_alt = 7
   Insn 177: point = 386, n_alt = 8
   Insn 176: point = 387, n_alt = 7
  BB 13
   Insn 242: point = 388, n_alt = 8
   Insn 241: point = 389, n_alt = 3
   Insn 240: point = 390, n_alt = 7
   Insn 239: point = 392, n_alt = 3
   Insn 238: point = 393, n_alt = 8
   Insn 237: point = 394, n_alt = 7
   Insn 236: point = 395, n_alt = 8
   Insn 235: point = 396, n_alt = 7
  BB 11
   Insn 206: point = 397, n_alt = -1
   Insn 205: point = 397, n_alt = 1
  BB 10
   Insn 204: point = 399, n_alt = -1
   Insn 203: point = 399, n_alt = 1
   Insn 202: point = 399, n_alt = 7
   Insn 201: point = 401, n_alt = 3
  BB 8
   Insn 171: point = 402, n_alt = -1
   Insn 170: point = 402, n_alt = 1
  BB 7
   Insn 169: point = 404, n_alt = -1
   Insn 168: point = 404, n_alt = 1
   Insn 167: point = 404, n_alt = 7
   Insn 166: point = 406, n_alt = 3
  BB 34
   Insn 557: point = 407, n_alt = -1
  BB 5
   Insn 75: point = 407, n_alt = -1
   Insn 74: point = 407, n_alt = 0
   Insn 73: point = 408, n_alt = 0
   Insn 72: point = 409, n_alt = 0
  BB 6
   Insn 541: point = 410, n_alt = -1
   Insn 160: point = 410, n_alt = 1
   Insn 159: point = 410, n_alt = 8
   Insn 158: point = 411, n_alt = 3
   Insn 157: point = 412, n_alt = 1
   Insn 156: point = 414, n_alt = 7
   Insn 155: point = 415, n_alt = 3
   Insn 154: point = 417, n_alt = 0
   Insn 153: point = 419, n_alt = 0
   Insn 152: point = 420, n_alt = -1
   Insn 151: point = 422, n_alt = 1
   Insn 150: point = 424, n_alt = 2
   Insn 149: point = 426, n_alt = 1
   Insn 148: point = 428, n_alt = -1
   Insn 147: point = 430, n_alt = 2
   Insn 146: point = 432, n_alt = 7
   Insn 145: point = 434, n_alt = 3
   Insn 144: point = 435, n_alt = 3
   Insn 143: point = 437, n_alt = 0
   Insn 142: point = 439, n_alt = 0
   Insn 141: point = 441, n_alt = 0
   Insn 140: point = 442, n_alt = 7
   Insn 139: point = 444, n_alt = 3
   Insn 138: point = 445, n_alt = 3
   Insn 137: point = 447, n_alt = 0
   Insn 136: point = 449, n_alt = 0
   Insn 560: point = 450, n_alt = -1
	Hard reg 22 is preferable by r429 with profit 1
   Insn 135: point = 452, n_alt = 2
   Insn 559: point = 452, n_alt = -1
	Hard reg 22 is preferable by r429 with profit 1
	Hard reg 21 is preferable by r429 with profit 1
   Insn 134: point = 454, n_alt = 1
   Insn 133: point = 456, n_alt = -1
   Insn 132: point = 458, n_alt = 2
   Insn 131: point = 460, n_alt = 7
   Insn 130: point = 462, n_alt = 3
   Insn 129: point = 463, n_alt = 3
   Insn 128: point = 465, n_alt = 0
   Insn 127: point = 467, n_alt = 0
   Insn 126: point = 468, n_alt = 7
   Insn 125: point = 470, n_alt = 3
   Insn 124: point = 471, n_alt = 3
   Insn 123: point = 473, n_alt = 0
   Insn 122: point = 475, n_alt = 0
   Insn 121: point = 477, n_alt = 0
   Insn 120: point = 478, n_alt = 8
   Insn 119: point = 479, n_alt = 7
   Insn 118: point = 480, n_alt = 0
   Insn 117: point = 482, n_alt = 0
   Insn 116: point = 484, n_alt = 0
   Insn 115: point = 485, n_alt = 8
   Insn 114: point = 486, n_alt = 1
   Insn 113: point = 488, n_alt = 0
   Insn 112: point = 490, n_alt = 0
   Insn 111: point = 492, n_alt = 0
   Insn 110: point = 493, n_alt = -1
   Insn 109: point = 495, n_alt = 1
   Insn 108: point = 497, n_alt = 7
   Insn 107: point = 498, n_alt = 8
   Insn 106: point = 499, n_alt = 7
   Insn 105: point = 500, n_alt = 0
   Insn 104: point = 502, n_alt = 0
   Insn 103: point = 504, n_alt = 0
   Insn 102: point = 505, n_alt = 8
   Insn 101: point = 506, n_alt = 2
   Insn 100: point = 508, n_alt = 7
   Insn 99: point = 510, n_alt = 3
   Insn 98: point = 511, n_alt = 3
   Insn 97: point = 513, n_alt = 0
   Insn 96: point = 515, n_alt = 0
   Insn 95: point = 516, n_alt = 7
   Insn 94: point = 518, n_alt = 3
   Insn 93: point = 519, n_alt = 3
   Insn 92: point = 521, n_alt = 0
   Insn 91: point = 523, n_alt = 0
   Insn 90: point = 525, n_alt = 0
   Insn 89: point = 526, n_alt = 8
   Insn 88: point = 527, n_alt = 2
   Insn 87: point = 529, n_alt = 7
   Insn 86: point = 531, n_alt = 3
   Insn 85: point = 532, n_alt = 3
   Insn 84: point = 534, n_alt = 0
   Insn 83: point = 536, n_alt = 0
   Insn 82: point = 538, n_alt = 0
   Insn 81: point = 539, n_alt = 7
   Insn 80: point = 541, n_alt = 3
   Insn 79: point = 542, n_alt = 3
   Insn 78: point = 544, n_alt = 0
   Insn 77: point = 546, n_alt = 0
  BB 4
   Insn 70: point = 548, n_alt = 1
   Insn 69: point = 548, n_alt = 3
   Insn 68: point = 550, n_alt = 0
   Insn 67: point = 552, n_alt = 3
  BB 2
   Insn 59: point = 553, n_alt = -1
   Insn 58: point = 553, n_alt = 0
   Insn 57: point = 554, n_alt = 0
   Insn 56: point = 556, n_alt = 3
   Insn 52: point = 557, n_alt = 2
   Insn 51: point = 558, n_alt = 3
   Insn 50: point = 559, n_alt = -1
   Insn 48: point = 561, n_alt = 1
   Insn 46: point = 563, n_alt = 0
   Insn 47: point = 563, n_alt = 2
   Insn 45: point = 564, n_alt = 3
   Insn 44: point = 565, n_alt = 5
   Insn 43: point = 566, n_alt = 0
   Insn 42: point = 568, n_alt = 0
   Insn 41: point = 570, n_alt = 3
   Insn 37: point = 571, n_alt = 2
   Insn 36: point = 572, n_alt = 3
   Insn 35: point = 573, n_alt = -1
   Insn 33: point = 575, n_alt = 1
   Insn 31: point = 577, n_alt = 0
   Insn 32: point = 577, n_alt = 2
   Insn 30: point = 578, n_alt = 3
   Insn 29: point = 579, n_alt = 5
   Insn 28: point = 580, n_alt = 0
   Insn 27: point = 582, n_alt = 0
   Insn 26: point = 584, n_alt = 3
   Insn 22: point = 585, n_alt = 2
   Insn 21: point = 586, n_alt = 3
   Insn 20: point = 587, n_alt = -1
   Insn 18: point = 589, n_alt = 1
   Insn 16: point = 591, n_alt = 0
   Insn 17: point = 591, n_alt = 2
   Insn 15: point = 592, n_alt = 3
   Insn 14: point = 593, n_alt = 5
   Insn 13: point = 594, n_alt = 0
   Insn 12: point = 596, n_alt = 0
   Insn 11: point = 598, n_alt = 3
   Insn 7: point = 599, n_alt = 5
   Insn 6: point = 599, n_alt = 5
   Insn 5: point = 599, n_alt = 5
   Insn 4: point = 599, n_alt = 5
   Insn 3: point = 599, n_alt = 5
   Insn 2: point = 599, n_alt = 5
 r87: [595..596]
 r88: [586..587]
 r89: [585..599]
 r91: [581..582]
 r92: [572..573]
 r93: [571..599]
 r95: [567..568]
 r96: [558..559]
 r97: [557..599]
 r99: [553..554]
 r100: [549..550]
 r101: [543..544]
 r102: [540..542]
 r103: [528..539]
 r104: [535..536]
 r105: [533..534]
 r106: [530..532]
 r107: [528..529]
 r108: [522..523]
 r109: [520..521]
 r110: [517..519]
 r111: [507..516]
 r112: [512..513]
 r113: [509..511]
 r114: [507..508]
 r115: [501..502]
 r116: [498..500]
 r117: [494..495]
 r118: [487..493]
 r119: [489..490]
 r120: [485..488]
 r121: [485..486]
 r122: [481..482]
 r123: [478..480]
 r124: [474..475]
 r125: [472..473]
 r126: [469..471]
 r127: [459..468]
 r128: [464..465]
 r129: [461..463]
 r130: [459..460]
 r131: [457..458]
 r132: [455..456]
 r133: [453..454]
 r134: [423..450]
 r135: [446..447]
 r136: [443..445]
 r137: [431..442]
 r138: [438..439]
 r139: [436..437]
 r140: [433..435]
 r141: [431..432]
 r142: [429..430]
 r143: [427..428]
 r144: [425..426]
 r145: [423..424]
 r146: [421..422]
 r147: [413..420]
 r148: [416..417]
 r149: [410..415]
 r150: [410..412]
 r151: [402..404]
 r152: [377..381]
 r153: [377..378]
 r154: [375..376]
 r155: [372..374]
 r156: [360..371]
 r157: [364..368]
 r158: [364..365]
 r159: [362..363]
 r160: [360..361]
 r161: [357..359]
 r162: [397..399]
 r163: [346..350]
 r164: [346..347]
 r165: [344..345]
 r166: [342..343]
 r167: [330..341]
 r168: [334..338]
 r169: [334..335]
 r170: [332..333]
 r171: [330..331]
 r172: [327..329]
 r173: [388..390]
 r174: [322..324]
 r175: [283..284]
 r176: [281..282]
 r177: [278..280]
 r178: [274..275]
 r179: [272..273]
 r180: [269..271]
 r181: [265..266]
 r182: [263..264]
 r183: [260..262]
 r184: [246..259]
 r185: [255..256]
 r186: [253..254]
 r187: [251..252]
 r188: [248..250]
 r189: [246..247]
 r190: [244..245]
 r191: [241..243]
 r192: [206..240]
 r193: [236..237]
 r194: [234..235]
 r195: [231..233]
 r196: [217..230]
 r197: [226..227]
 r198: [224..225]
 r199: [222..223]
 r200: [219..221]
 r201: [217..218]
 r202: [215..216]
 r203: [206..214]
 r204: [210..211]
 r205: [208..209]
 r206: [203..207]
 r207: [203..205]
 r208: [317..319]
 r209: [199..200]
 r210: [197..198]
 r211: [194..196]
 r212: [190..191]
 r213: [188..189]
 r214: [185..187]
 r215: [181..182]
 r216: [179..180]
 r217: [176..178]
 r218: [162..175]
 r219: [171..172]
 r220: [169..170]
 r221: [167..168]
 r222: [164..166]
 r223: [162..163]
 r224: [160..161]
 r225: [158..159]
 r226: [123..157]
 r227: [153..154]
 r228: [151..152]
 r229: [148..150]
 r230: [134..147]
 r231: [143..144]
 r232: [141..142]
 r233: [139..140]
 r234: [136..138]
 r235: [134..135]
 r236: [132..133]
 r237: [123..131]
 r238: [127..128]
 r239: [125..126]
 r240: [120..124]
 r241: [120..122]
 r242: [313..314]
 r243: [311..312]
 r244: [308..310]
 r245: [304..305]
 r246: [302..303]
 r247: [299..301]
 r248: [295..296]
 r249: [293..294]
 r250: [287..292]
 r251: [287..289]
 r252: [116..117]
 r253: [111..113]
 r254: [105..106]
 r255: [100..102]
 r256: [94..95]
 r257: [90..91]
 r258: [88..89]
 r259: [85..87]
 r260: [81..82]
 r261: [79..80]
 r262: [76..78]
 r263: [72..73]
 r264: [70..71]
 r265: [67..69]
 r266: [53..66]
 r267: [62..63]
 r268: [60..61]
 r269: [58..59]
 r270: [55..57]
 r271: [53..54]
 r272: [51..52]
 r273: [48..50]
 r274: [13..47]
 r275: [43..44]
 r276: [41..42]
 r277: [38..40]
 r278: [24..37]
 r279: [33..34]
 r280: [31..32]
 r281: [29..30]
 r282: [26..28]
 r283: [24..25]
 r284: [22..23]
 r285: [13..21]
 r286: [17..18]
 r287: [15..16]
 r288: [10..14]
 r289: [10..12]
 r290: [96..99]
 r291: [107..110]
 r292: [590..592]
 r293: [588..589]
 r297: [576..578]
 r298: [574..575]
 r302: [562..564]
 r303: [560..561]
 r307: [407..548]
 r308: [407..408]
 r309: [597..598]
 r310: [593..594]
 r311: [590..591]
 r312: [583..584]
 r313: [579..580]
 r314: [576..577]
 r315: [569..570]
 r316: [565..566]
 r317: [562..563]
 r318: [555..556]
 r319: [551..552]
 r320: [545..546]
 r321: [540..541]
 r322: [537..538]
 r323: [530..531]
 r324: [526..527]
 r325: [524..525]
 r326: [517..518]
 r327: [514..515]
 r328: [509..510]
 r329: [505..506]
 r330: [503..504]
 r331: [498..499]
 r332: [496..497]
 r333: [491..492]
 r334: [483..484]
 r335: [478..479]
 r336: [476..477]
 r337: [469..470]
 r338: [466..467]
 r339: [461..462]
 r340: [448..449]
 r341: [443..444]
 r342: [440..441]
 r343: [433..434]
 r344: [418..419]
 r345: [413..414]
 r346: [410..411]
 r347: [405..406]
 r348: [386..387]
 r349: [384..385]
 r350: [382..383]
 r351: [379..380]
 r352: [372..373]
 r353: [369..370]
 r354: [366..367]
 r355: [357..358]
 r356: [400..401]
 r357: [355..356]
 r358: [353..354]
 r359: [351..352]
 r360: [348..349]
 r361: [339..340]
 r362: [336..337]
 r363: [327..328]
 r364: [395..396]
 r365: [393..394]
 r366: [391..392]
 r367: [388..389]
 r368: [325..326]
 r369: [285..286]
 r370: [278..279]
 r371: [276..277]
 r372: [269..270]
 r373: [267..268]
 r374: [260..261]
 r375: [257..258]
 r376: [248..249]
 r377: [241..242]
 r378: [238..239]
 r379: [231..232]
 r380: [228..229]
 r381: [219..220]
 r382: [212..213]
 r383: [203..204]
 r384: [320..321]
 r385: [201..202]
 r386: [194..195]
 r387: [192..193]
 r388: [185..186]
 r389: [183..184]
 r390: [176..177]
 r391: [173..174]
 r392: [164..165]
 r393: [155..156]
 r394: [148..149]
 r395: [145..146]
 r396: [136..137]
 r397: [129..130]
 r398: [120..121]
 r399: [315..316]
 r400: [308..309]
 r401: [306..307]
 r402: [299..300]
 r403: [297..298]
 r404: [290..291]
 r405: [287..288]
 r406: [118..119]
 r407: [114..115]
 r408: [103..104]
 r409: [92..93]
 r410: [85..86]
 r411: [83..84]
 r412: [76..77]
 r413: [74..75]
 r414: [67..68]
 r415: [64..65]
 r416: [55..56]
 r417: [48..49]
 r418: [45..46]
 r419: [38..39]
 r420: [35..36]
 r421: [26..27]
 r422: [19..20]
 r423: [10..11]
 r424: [4..9]
 r425: [3..8]
 r426: [2..7]
 r427: [1..6]
 r428: [0..5]
 r429: [451..452]
Compressing live ranges: from 600 to 504 - 84%
Ranges after the compression:
 r87: [500..501]
 r88: [492..493]
 r89: [492..503]
 r91: [488..489]
 r92: [480..481]
 r93: [480..503]
 r95: [476..477]
 r96: [468..469]
 r97: [468..503]
 r99: [464..465]
 r100: [460..461]
 r101: [456..457]
 r102: [454..455]
 r103: [444..453]
 r104: [450..451]
 r105: [448..449]
 r106: [446..447]
 r107: [444..445]
 r108: [438..439]
 r109: [436..437]
 r110: [434..435]
 r111: [426..433]
 r112: [430..431]
 r113: [428..429]
 r114: [426..427]
 r115: [420..421]
 r116: [418..419]
 r117: [414..415]
 r118: [408..413]
 r119: [410..411]
 r120: [406..409]
 r121: [406..407]
 r122: [402..403]
 r123: [400..401]
 r124: [396..397]
 r125: [394..395]
 r126: [392..393]
 r127: [384..391]
 r128: [388..389]
 r129: [386..387]
 r130: [384..385]
 r131: [382..383]
 r132: [380..381]
 r133: [378..379]
 r134: [352..375]
 r135: [372..373]
 r136: [370..371]
 r137: [360..369]
 r138: [366..367]
 r139: [364..365]
 r140: [362..363]
 r141: [360..361]
 r142: [358..359]
 r143: [356..357]
 r144: [354..355]
 r145: [352..353]
 r146: [350..351]
 r147: [344..349]
 r148: [346..347]
 r149: [342..345]
 r150: [342..343]
 r151: [336..337]
 r152: [314..317]
 r153: [314..315]
 r154: [312..313]
 r155: [310..311]
 r156: [300..309]
 r157: [304..307]
 r158: [304..305]
 r159: [302..303]
 r160: [300..301]
 r161: [298..299]
 r162: [332..333]
 r163: [288..291]
 r164: [288..289]
 r165: [286..287]
 r166: [284..285]
 r167: [274..283]
 r168: [278..281]
 r169: [278..279]
 r170: [276..277]
 r171: [274..275]
 r172: [272..273]
 r173: [324..325]
 r174: [268..269]
 r175: [234..235]
 r176: [232..233]
 r177: [230..231]
 r178: [226..227]
 r179: [224..225]
 r180: [222..223]
 r181: [218..219]
 r182: [216..217]
 r183: [214..215]
 r184: [202..213]
 r185: [210..211]
 r186: [208..209]
 r187: [206..207]
 r188: [204..205]
 r189: [202..203]
 r190: [200..201]
 r191: [198..199]
 r192: [168..197]
 r193: [194..195]
 r194: [192..193]
 r195: [190..191]
 r196: [178..189]
 r197: [186..187]
 r198: [184..185]
 r199: [182..183]
 r200: [180..181]
 r201: [178..179]
 r202: [176..177]
 r203: [168..175]
 r204: [172..173]
 r205: [170..171]
 r206: [166..169]
 r207: [166..167]
 r208: [264..265]
 r209: [162..163]
 r210: [160..161]
 r211: [158..159]
 r212: [154..155]
 r213: [152..153]
 r214: [150..151]
 r215: [146..147]
 r216: [144..145]
 r217: [142..143]
 r218: [130..141]
 r219: [138..139]
 r220: [136..137]
 r221: [134..135]
 r222: [132..133]
 r223: [130..131]
 r224: [128..129]
 r225: [126..127]
 r226: [96..125]
 r227: [122..123]
 r228: [120..121]
 r229: [118..119]
 r230: [106..117]
 r231: [114..115]
 r232: [112..113]
 r233: [110..111]
 r234: [108..109]
 r235: [106..107]
 r236: [104..105]
 r237: [96..103]
 r238: [100..101]
 r239: [98..99]
 r240: [94..97]
 r241: [94..95]
 r242: [260..261]
 r243: [258..259]
 r244: [256..257]
 r245: [252..253]
 r246: [250..251]
 r247: [248..249]
 r248: [244..245]
 r249: [242..243]
 r250: [238..241]
 r251: [238..239]
 r252: [90..91]
 r253: [86..87]
 r254: [82..83]
 r255: [78..79]
 r256: [74..75]
 r257: [70..71]
 r258: [68..69]
 r259: [66..67]
 r260: [62..63]
 r261: [60..61]
 r262: [58..59]
 r263: [54..55]
 r264: [52..53]
 r265: [50..51]
 r266: [38..49]
 r267: [46..47]
 r268: [44..45]
 r269: [42..43]
 r270: [40..41]
 r271: [38..39]
 r272: [36..37]
 r273: [34..35]
 r274: [4..33]
 r275: [30..31]
 r276: [28..29]
 r277: [26..27]
 r278: [14..25]
 r279: [22..23]
 r280: [20..21]
 r281: [18..19]
 r282: [16..17]
 r283: [14..15]
 r284: [12..13]
 r285: [4..11]
 r286: [8..9]
 r287: [6..7]
 r288: [2..5]
 r289: [2..3]
 r290: [76..77]
 r291: [84..85]
 r292: [496..497]
 r293: [494..495]
 r297: [484..485]
 r298: [482..483]
 r302: [472..473]
 r303: [470..471]
 r307: [340..459]
 r308: [340..341]
 r309: [502..503]
 r310: [498..499]
 r311: [496..497]
 r312: [490..491]
 r313: [486..487]
 r314: [484..485]
 r315: [478..479]
 r316: [474..475]
 r317: [472..473]
 r318: [466..467]
 r319: [462..463]
 r320: [458..459]
 r321: [454..455]
 r322: [452..453]
 r323: [446..447]
 r324: [442..443]
 r325: [440..441]
 r326: [434..435]
 r327: [432..433]
 r328: [428..429]
 r329: [424..425]
 r330: [422..423]
 r331: [418..419]
 r332: [416..417]
 r333: [412..413]
 r334: [404..405]
 r335: [400..401]
 r336: [398..399]
 r337: [392..393]
 r338: [390..391]
 r339: [386..387]
 r340: [374..375]
 r341: [370..371]
 r342: [368..369]
 r343: [362..363]
 r344: [348..349]
 r345: [344..345]
 r346: [342..343]
 r347: [338..339]
 r348: [322..323]
 r349: [320..321]
 r350: [318..319]
 r351: [316..317]
 r352: [310..311]
 r353: [308..309]
 r354: [306..307]
 r355: [298..299]
 r356: [334..335]
 r357: [296..297]
 r358: [294..295]
 r359: [292..293]
 r360: [290..291]
 r361: [282..283]
 r362: [280..281]
 r363: [272..273]
 r364: [330..331]
 r365: [328..329]
 r366: [326..327]
 r367: [324..325]
 r368: [270..271]
 r369: [236..237]
 r370: [230..231]
 r371: [228..229]
 r372: [222..223]
 r373: [220..221]
 r374: [214..215]
 r375: [212..213]
 r376: [204..205]
 r377: [198..199]
 r378: [196..197]
 r379: [190..191]
 r380: [188..189]
 r381: [180..181]
 r382: [174..175]
 r383: [166..167]
 r384: [266..267]
 r385: [164..165]
 r386: [158..159]
 r387: [156..157]
 r388: [150..151]
 r389: [148..149]
 r390: [142..143]
 r391: [140..141]
 r392: [132..133]
 r393: [124..125]
 r394: [118..119]
 r395: [116..117]
 r396: [108..109]
 r397: [102..103]
 r398: [94..95]
 r399: [262..263]
 r400: [256..257]
 r401: [254..255]
 r402: [248..249]
 r403: [246..247]
 r404: [240..241]
 r405: [238..239]
 r406: [92..93]
 r407: [88..89]
 r408: [80..81]
 r409: [72..73]
 r410: [66..67]
 r411: [64..65]
 r412: [58..59]
 r413: [56..57]
 r414: [50..51]
 r415: [48..49]
 r416: [40..41]
 r417: [34..35]
 r418: [32..33]
 r419: [26..27]
 r420: [24..25]
 r421: [16..17]
 r422: [10..11]
 r423: [2..3]
 r424: [0..1]
 r425: [0..1]
 r426: [0..1]
 r427: [0..1]
 r428: [0..1]
 r429: [376..377]

********** Assignment #1: **********

	 Assigning to 429 (cl=SSE_REGS, orig=133, freq=3, tfirst=429, tfreq=3)...
	   Assign 22 to reload r429 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=60176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=60128, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 57
changing reg in insn 58
changing reg in insn 68
changing reg in insn 69
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 88
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 101
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 114
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 126
changing reg in insn 126
changing reg in insn 132
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 140
changing reg in insn 147
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 159
changing reg in insn 157
changing reg in insn 159
changing reg in insn 167
changing reg in insn 170
changing reg in insn 168
changing reg in insn 181
changing reg in insn 184
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 187
changing reg in insn 194
changing reg in insn 189
changing reg in insn 192
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 196
changing reg in insn 202
changing reg in insn 205
changing reg in insn 203
changing reg in insn 216
changing reg in insn 219
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 221
changing reg in insn 228
changing reg in insn 223
changing reg in insn 226
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 240
changing reg in insn 242
changing reg in insn 246
changing reg in insn 249
changing reg in insn 247
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 272
changing reg in insn 272
changing reg in insn 280
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 283
changing reg in insn 303
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 297
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 303
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 305
changing reg in insn 303
changing reg in insn 305
changing reg in insn 311
changing reg in insn 314
changing reg in insn 312
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 331
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 337
changing reg in insn 337
changing reg in insn 345
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 342
changing reg in insn 342
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 347
changing reg in insn 367
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 353
changing reg in insn 353
changing reg in insn 361
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 360
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 367
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 369
changing reg in insn 367
changing reg in insn 369
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 385
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 393
changing reg in insn 391
changing reg in insn 393
changing reg in insn 397
changing reg in insn 398
changing reg in insn 402
changing reg in insn 405
changing reg in insn 403
changing reg in insn 420
changing reg in insn 419
changing reg in insn 421
changing reg in insn 420
changing reg in insn 425
changing reg in insn 428
changing reg in insn 426
changing reg in insn 443
changing reg in insn 442
changing reg in insn 444
changing reg in insn 443
changing reg in insn 448
changing reg in insn 449
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 452
changing reg in insn 454
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 458
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 464
changing reg in insn 464
changing reg in insn 472
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 472
changing reg in insn 472
changing reg in insn 473
changing reg in insn 473
changing reg in insn 475
changing reg in insn 495
changing reg in insn 477
changing reg in insn 478
changing reg in insn 478
changing reg in insn 479
changing reg in insn 479
changing reg in insn 481
changing reg in insn 481
changing reg in insn 489
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 486
changing reg in insn 486
changing reg in insn 488
changing reg in insn 488
changing reg in insn 489
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 495
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 497
changing reg in insn 495
changing reg in insn 497
changing reg in insn 439
changing reg in insn 434
changing reg in insn 442
changing reg in insn 416
changing reg in insn 411
changing reg in insn 419
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 67
changing reg in insn 68
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 145
changing reg in insn 146
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 166
changing reg in insn 167
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 195
changing reg in insn 196
changing reg in insn 201
changing reg in insn 202
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 230
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 255
changing reg in insn 256
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 271
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 278
changing reg in insn 279
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 295
changing reg in insn 296
changing reg in insn 299
changing reg in insn 300
changing reg in insn 304
changing reg in insn 305
changing reg in insn 310
changing reg in insn 311
changing reg in insn 320
changing reg in insn 321
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 343
changing reg in insn 344
changing reg in insn 348
changing reg in insn 349
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 363
changing reg in insn 364
changing reg in insn 368
changing reg in insn 369
changing reg in insn 374
changing reg in insn 375
changing reg in insn 378
changing reg in insn 379
changing reg in insn 380
changing reg in insn 381
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 387
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 393
changing reg in insn 396
changing reg in insn 397
changing reg in insn 401
changing reg in insn 402
changing reg in insn 424
changing reg in insn 425
changing reg in insn 447
changing reg in insn 448
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 457
changing reg in insn 458
changing reg in insn 459
changing reg in insn 460
changing reg in insn 463
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 470
changing reg in insn 471
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 480
changing reg in insn 481
changing reg in insn 482
changing reg in insn 483
changing reg in insn 487
changing reg in insn 488
changing reg in insn 491
changing reg in insn 492
changing reg in insn 496
changing reg in insn 497
changing reg in insn 500
changing reg in insn 505
changing reg in insn 501
changing reg in insn 506
changing reg in insn 502
changing reg in insn 507
changing reg in insn 503
changing reg in insn 508
changing reg in insn 504
changing reg in insn 509
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 110.
deleting insn with uid = 133.
deleting insn with uid = 560.
deleting insn with uid = 148.
deleting insn with uid = 193.
deleting insn with uid = 220.
deleting insn with uid = 227.
deleting insn with uid = 298.
deleting insn with uid = 346.
deleting insn with uid = 362.
deleting insn with uid = 490.
deleting insn with uid = 506.
deleting insn with uid = 507.
deleting insn with uid = 508.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 510.


splind

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={195d,193u} r1={32d,30u} r2={5d,3u} r4={5d,3u} r5={6d,4u} r6={1d,168u} r7={1d,36u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={76d,21u} r18={2d} r19={2d} r20={1d,1u,4e} r21={67d,73u} r22={27d,24u} r23={9d,6u} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,2u} r38={3d,1u} r39={3d} r40={3d} r41={1d} r42={1d} r43={1d} r44={1d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 1134{565d,565u,4e} in 416{414 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 292 293 297 298 302 303 309 310 311 312 313 314 315 316 317 318
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])
        (reg:DI 5 di [ x ])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])
        (reg:DI 4 si [ xs ])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60152 [0xffffffffffff1508])) [4 xs1+0 S8 A64])
        (reg:DI 37 r8 [ xs1 ])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60160 [0xffffffffffff1500])) [4 xs2+0 S8 A64])
        (reg:DI 38 r9 [ xs2 ])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [309]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":105 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [310])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":105 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.18+0 S8 A64])
        (reg:DI 0 ax [310])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:292 size.19_214 ] [292])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.18+0 S8 A64])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [311])
        (const_int 0 [0])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:292 size.19_214 ] [292])
            (const_int 0 [0]))) "../src/spline.f":105 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:293 size.19_215 ] [293])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:292 size.19_214 ] [292])
            (reg:DI 1 dx [311]))) "../src/spline.f":105 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (reg:DI 43 r14 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.163_2 ] [88])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (reg:DI 44 r15 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [312]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":105 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [313])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":105 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.22+0 S8 A64])
        (reg:DI 0 ax [313])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:297 size.23_220 ] [297])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.22+0 S8 A64])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [314])
        (const_int 0 [0])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:297 size.23_220 ] [297])
            (const_int 0 [0]))) "../src/spline.f":105 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:298 size.23_221 ] [298])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:297 size.23_220 ] [297])
            (reg:DI 1 dx [314]))) "../src/spline.f":105 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (reg:DI 41 r12 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.165_6 ] [92])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (reg:DI 42 r13 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [315]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":105 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [316])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":105 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.20+0 S8 A64])
        (reg:DI 0 ax [316])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:302 size.21_226 ] [302])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.20+0 S8 A64])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [317])
        (const_int 0 [0])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:302 size.21_226 ] [302])
            (const_int 0 [0]))) "../src/spline.f":105 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:303 size.21_227 ] [303])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:302 size.21_226 ] [302])
            (reg:DI 1 dx [317]))) "../src/spline.f":105 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 39 r10 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.167_10 ] [96])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 40 r11 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":105 81 {*movdi_internal}
     (nil))
(insn 56 52 57 2 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":131 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [318]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":131 82 {*movsi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 5001 [0x1389]))) "../src/spline.f":131 7 {*cmpsi_1}
     (nil))
(jump_insn 59 58 60 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) "../src/spline.f":131 617 {*jcc_1}
     (nil)
 -> 65)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 60 59 61 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 3 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "../src/spline.f":131 82 {*movsi_internal}
     (nil))
(insn 62 61 63 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*lC5") [flags 0x2]  <var_decl 0x143383750 *lC5>)) "../src/spline.f":131 81 {*movdi_internal}
     (nil))
(call_insn 63 62 64 3 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/spline.f":131 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 64 63 65)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 307 319
(code_label 65 64 66 4 32 (nil) [1 uses])
(note 66 65 67 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 4 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":133 81 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 0 ax [orig:100 _14 ] [100])
        (mem:SI (reg/f:DI 0 ax [319]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":133 82 {*movsi_internal}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:SI 2 cx [orig:307 _231 ] [307])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":133 217 {*addsi_1}
     (nil))
(insn 70 69 161 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":133 82 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 307

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 307
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 307
;; lr  def 	 17 [flags] 308
(code_label 161 70 71 5 34 (nil) [1 uses])
(note 71 161 72 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
            (reg:SI 2 cx [orig:307 _231 ] [307]))) "../src/spline.f":133 7 {*cmpsi_1}
     (nil))
(insn 73 72 74 5 (set (reg:QI 0 ax [orig:308 _233 ] [308])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":133 613 {*setcc_qi}
     (nil))
(insn 74 73 75 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:308 _233 ] [308])
            (const_int 0 [0]))) "../src/spline.f":133 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 75 74 76 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 556)
            (pc))) "../src/spline.f":133 617 {*jcc_1}
     (nil)
 -> 556)
;;  succ:       34
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 307

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 34, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 307
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346
(note 76 75 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 6 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":134 82 {*movsi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [320]))) "../src/spline.f":134 145 {*extendsidi2_rex64}
     (nil))
(insn 79 78 80 6 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":134 218 {*adddi_1}
     (nil))
(insn 80 79 81 6 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":134 81 {*movdi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [321])) [3 *s_234(D) S4 A32])) "../src/spline.f":134 127 {*movsf_internal}
     (nil))
(insn 82 81 83 6 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":134 82 {*movsi_internal}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg:SI 0 ax [orig:104 _18 ] [104])
                (plus:SI (reg:SI 0 ax [322])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":134 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 84 83 85 6 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [orig:104 _18 ] [104]))) "../src/spline.f":134 145 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 6 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":134 218 {*adddi_1}
     (nil))
(insn 86 85 87 6 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":134 81 {*movdi_internal}
     (nil))
(insn 87 86 88 6 (set (reg:SF 22 xmm1 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [323])) [3 *s_234(D) S4 A32])) "../src/spline.f":134 127 {*movsf_internal}
     (nil))
(insn 88 87 89 6 (set (reg:SF 21 xmm0 [324])
        (minus:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])
            (reg:SF 22 xmm1 [orig:107 _21 ] [107]))) "../src/spline.f":134 805 {*fop_sf_1}
     (nil))
(insn 89 88 90 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [3 dsm+0 S4 A32])
        (reg:SF 21 xmm0 [324])) "../src/spline.f":134 127 {*movsf_internal}
     (nil))
(insn 90 89 91 6 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":135 82 {*movsi_internal}
     (nil))
(insn 91 90 92 6 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [325])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":135 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 92 91 93 6 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":135 145 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 6 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":135 218 {*adddi_1}
     (nil))
(insn 94 93 95 6 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":135 81 {*movdi_internal}
     (nil))
(insn 95 94 96 6 (set (reg:SF 21 xmm0 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [326])) [3 *s_234(D) S4 A32])) "../src/spline.f":135 127 {*movsf_internal}
     (nil))
(insn 96 95 97 6 (set (reg:SI 0 ax [327])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":135 82 {*movsi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:DI 0 ax [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 0 ax [327]))) "../src/spline.f":135 145 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 6 (parallel [
            (set (reg:DI 1 dx [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":135 218 {*adddi_1}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":135 81 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (set (reg:SF 22 xmm1 [orig:114 _28 ] [114])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [328])) [3 *s_234(D) S4 A32])) "../src/spline.f":135 127 {*movsf_internal}
     (nil))
(insn 101 100 102 6 (set (reg:SF 21 xmm0 [329])
        (minus:SF (reg:SF 21 xmm0 [orig:111 _25 ] [111])
            (reg:SF 22 xmm1 [orig:114 _28 ] [114]))) "../src/spline.f":135 805 {*fop_sf_1}
     (nil))
(insn 102 101 103 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 dsp+0 S4 A32])
        (reg:SF 21 xmm0 [329])) "../src/spline.f":135 127 {*movsf_internal}
     (nil))
(insn 103 102 104 6 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":136 82 {*movsi_internal}
     (nil))
(insn 104 103 105 6 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [330]))) "../src/spline.f":136 145 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 6 (parallel [
            (set (reg:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":136 218 {*adddi_1}
     (nil))
(insn 106 105 107 6 (set (reg:SF 21 xmm0 [331])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 dsp+0 S4 A32])) "../src/spline.f":136 127 {*movsf_internal}
     (nil))
(insn 107 106 108 6 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40096 [0xffffffffffff6360])) [3 b S4 A32])
        (reg:SF 21 xmm0 [331])) "../src/spline.f":136 127 {*movsf_internal}
     (nil))
(insn 108 107 109 6 (set (reg:SF 21 xmm0 [332])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [3 dsm+0 S4 A32])) "../src/spline.f":137 127 {*movsf_internal}
     (nil))
(insn 109 108 111 6 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (plus:SF (reg:SF 21 xmm0 [332])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 dsp+0 S4 A32]))) "../src/spline.f":137 802 {*fop_sf_comm}
     (nil))
(insn 111 109 112 6 (set (reg:SI 0 ax [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":137 82 {*movsi_internal}
     (nil))
(insn 112 111 113 6 (set (reg:DI 0 ax [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 0 ax [333]))) "../src/spline.f":137 145 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 6 (parallel [
            (set (reg:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _33 ] [119])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":137 218 {*adddi_1}
     (nil))
(insn 114 113 115 6 (set (reg:SF 21 xmm0 [orig:121 _35 ] [121])
        (plus:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (reg:SF 21 xmm0 [orig:118 _32 ] [118]))) "../src/spline.f":137 802 {*fop_sf_comm}
     (nil))
(insn 115 114 116 6 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20080 [0xffffffffffffb190])) [3 a S4 A32])
        (reg:SF 21 xmm0 [orig:121 _35 ] [121])) "../src/spline.f":137 127 {*movsf_internal}
     (nil))
(insn 116 115 117 6 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":138 82 {*movsi_internal}
     (nil))
(insn 117 116 118 6 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [334]))) "../src/spline.f":138 145 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 6 (parallel [
            (set (reg:DI 0 ax [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":138 218 {*adddi_1}
     (nil))
(insn 119 118 120 6 (set (reg:SF 21 xmm0 [335])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [3 dsm+0 S4 A32])) "../src/spline.f":138 127 {*movsf_internal}
     (nil))
(insn 120 119 121 6 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -60112 [0xffffffffffff1530])) [3 c S4 A32])
        (reg:SF 21 xmm0 [335])) "../src/spline.f":138 127 {*movsf_internal}
     (nil))
(insn 121 120 122 6 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":139 82 {*movsi_internal}
     (nil))
(insn 122 121 123 6 (parallel [
            (set (reg:SI 0 ax [orig:124 _38 ] [124])
                (plus:SI (reg:SI 0 ax [336])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 123 122 124 6 (set (reg:DI 0 ax [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 0 ax [orig:124 _38 ] [124]))) "../src/spline.f":139 145 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 6 (parallel [
            (set (reg:DI 1 dx [orig:126 _40 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 _39 ] [125])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 218 {*adddi_1}
     (nil))
(insn 125 124 126 6 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":139 81 {*movdi_internal}
     (nil))
(insn 126 125 127 6 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:126 _40 ] [126])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [337])) [3 *x_240(D) S4 A32])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 127 126 128 6 (set (reg:SI 0 ax [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":139 82 {*movsi_internal}
     (nil))
(insn 128 127 129 6 (set (reg:DI 0 ax [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 0 ax [338]))) "../src/spline.f":139 145 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 6 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 218 {*adddi_1}
     (nil))
(insn 130 129 131 6 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":139 81 {*movdi_internal}
     (nil))
(insn 131 130 132 6 (set (reg:SF 22 xmm1 [orig:130 _44 ] [130])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [339])) [3 *x_240(D) S4 A32])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 132 131 134 6 (set (reg:SF 21 xmm0 [orig:131 _45 ] [131])
        (minus:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [orig:130 _44 ] [130]))) "../src/spline.f":139 805 {*fop_sf_1}
     (nil))
(insn 134 132 559 6 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (mult:SF (reg:SF 21 xmm0 [orig:132 _46 ] [132])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [3 dsm+0 S4 A32]))) "../src/spline.f":139 802 {*fop_sf_comm}
     (nil))
(insn 559 134 135 6 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (reg:SF 21 xmm0 [orig:133 _47 ] [133])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 135 559 136 6 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (div:SF (reg:SF 22 xmm1 [orig:133 _47 ] [133])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 dsp+0 S4 A32]))) "../src/spline.f":139 805 {*fop_sf_1}
     (nil))
(insn 136 135 137 6 (set (reg:SI 0 ax [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":139 82 {*movsi_internal}
     (nil))
(insn 137 136 138 6 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [340]))) "../src/spline.f":139 145 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 6 (parallel [
            (set (reg:DI 1 dx [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 218 {*adddi_1}
     (nil))
(insn 139 138 140 6 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":139 81 {*movdi_internal}
     (nil))
(insn 140 139 141 6 (set (reg:SF 21 xmm0 [orig:137 _51 ] [137])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:136 _50 ] [136])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [341])) [3 *x_240(D) S4 A32])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 141 140 142 6 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":139 82 {*movsi_internal}
     (nil))
(insn 142 141 143 6 (parallel [
            (set (reg:SI 0 ax [orig:138 _52 ] [138])
                (plus:SI (reg:SI 0 ax [342])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 143 142 144 6 (set (reg:DI 0 ax [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 _52 ] [138]))) "../src/spline.f":139 145 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 6 (parallel [
            (set (reg:DI 1 dx [orig:140 _54 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 218 {*adddi_1}
     (nil))
(insn 145 144 146 6 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":139 81 {*movdi_internal}
     (nil))
(insn 146 145 147 6 (set (reg:SF 23 xmm2 [orig:141 _55 ] [141])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [343])) [3 *x_240(D) S4 A32])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 147 146 149 6 (set (reg:SF 21 xmm0 [orig:142 _56 ] [142])
        (minus:SF (reg:SF 21 xmm0 [orig:137 _51 ] [137])
            (reg:SF 23 xmm2 [orig:141 _55 ] [141]))) "../src/spline.f":139 805 {*fop_sf_1}
     (nil))
(insn 149 147 150 6 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (mult:SF (reg:SF 21 xmm0 [orig:143 _57 ] [143])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 dsp+0 S4 A32]))) "../src/spline.f":139 802 {*fop_sf_comm}
     (nil))
(insn 150 149 151 6 (set (reg:SF 21 xmm0 [orig:145 _59 ] [145])
        (div:SF (reg:SF 21 xmm0 [orig:144 _58 ] [144])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [3 dsm+0 S4 A32]))) "../src/spline.f":139 805 {*fop_sf_1}
     (nil))
(insn 151 150 152 6 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (plus:SF (reg:SF 21 xmm0 [orig:145 _59 ] [145])
            (reg:SF 22 xmm1 [orig:134 _48 ] [134]))) "../src/spline.f":139 802 {*fop_sf_comm}
     (nil))
(insn 152 151 153 6 (set (reg:SF 22 xmm1 [orig:147 _61 ] [147])
        (reg:SF 21 xmm0 [orig:146 _60 ] [146])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 153 152 154 6 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":139 82 {*movsi_internal}
     (nil))
(insn 154 153 155 6 (set (reg:DI 0 ax [orig:148 _62 ] [148])
        (sign_extend:DI (reg:SI 0 ax [344]))) "../src/spline.f":139 145 {*extendsidi2_rex64}
     (nil))
(insn 155 154 156 6 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":139 218 {*adddi_1}
     (nil))
(insn 156 155 157 6 (set (reg:SF 21 xmm0 [345])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":139 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 157 156 158 6 (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
        (mult:SF (reg:SF 21 xmm0 [345])
            (reg:SF 22 xmm1 [orig:147 _61 ] [147]))) "../src/spline.f":139 802 {*fop_sf_comm}
     (nil))
(insn 158 157 159 6 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":139 81 {*movdi_internal}
     (nil))
(insn 159 158 160 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [346])) [3 *xs_241(D) S4 A32])
        (reg:SF 21 xmm0 [orig:150 _64 ] [150])) "../src/spline.f":139 127 {*movsf_internal}
     (nil))
(insn 160 159 541 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":133 217 {*addsi_1}
     (nil))
(jump_insn 541 160 542 6 (set (pc)
        (label_ref 161)) "../src/spline.f":133 649 {jump}
     (nil)
 -> 161)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 307

(barrier 542 541 556)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 556 542 555 34 59 (nil) [1 uses])
(note 555 556 557 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 557 555 164 34 (const_int 0 [0]) "../src/spline.f":140 682 {nop}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 8, flags: (RTL, MODIFIED)
;;  pred:       34 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 347
(code_label 164 557 165 7 33 (nil) [0 uses])
(note 165 164 166 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 7 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60152 [0xffffffffffff1508])) [4 xs1+0 S8 A64])) "../src/spline.f":142 81 {*movdi_internal}
     (nil))
(insn 167 166 168 7 (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
        (mem:SF (reg/f:DI 0 ax [347]) [3 *xs1_244(D)+0 S4 A32])) "../src/spline.f":142 127 {*movsf_internal}
     (nil))
(insn 168 167 169 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:151 _65 ] [151])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC6") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":142 51 {*cmpiusf}
     (nil))
(jump_insn 169 168 516 7 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 199)
            (pc))) "../src/spline.f":142 617 {*jcc_1}
     (nil)
 -> 199)
;;  succ:       10
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 17 [flags]
(note 516 169 170 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 170 516 171 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:151 _65 ] [151])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC6") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":142 51 {*cmpiusf}
     (nil))
(jump_insn 171 170 175 8 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 199)
            (pc))) "../src/spline.f":142 617 {*jcc_1}
     (nil)
 -> 199)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 152 153 154 155 156 157 158 159 160 161 348 349 350 351 352 353 354 355
(note 175 171 176 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 9 (set (reg:SF 21 xmm0 [348])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":144 127 {*movsf_internal}
     (nil))
(insn 177 176 178 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20080 [0xffffffffffffb190])) [3 a+0 S4 A128])
        (reg:SF 21 xmm0 [348])) "../src/spline.f":144 127 {*movsf_internal}
     (nil))
(insn 178 177 179 9 (set (reg:SF 21 xmm0 [349])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":145 127 {*movsf_internal}
     (nil))
(insn 179 178 180 9 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [3 c+0 S4 A128])
        (reg:SF 21 xmm0 [349])) "../src/spline.f":145 127 {*movsf_internal}
     (nil))
(insn 180 179 181 9 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":146 81 {*movdi_internal}
     (nil))
(insn 181 180 182 9 (set (reg:SF 21 xmm0 [orig:152 _66 ] [152])
        (mem:SF (plus:DI (reg/f:DI 0 ax [350])
                (const_int 4 [0x4])) [3 *x_240(D)+4 S4 A32])) "../src/spline.f":146 127 {*movsf_internal}
     (nil))
(insn 182 181 183 9 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":146 81 {*movdi_internal}
     (nil))
(insn 183 182 184 9 (set (reg:SF 22 xmm1 [orig:153 _67 ] [153])
        (mem:SF (reg/f:DI 0 ax [351]) [3 *x_240(D)+0 S4 A32])) "../src/spline.f":146 127 {*movsf_internal}
     (nil))
(insn 184 183 185 9 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (minus:SF (reg:SF 21 xmm0 [orig:152 _66 ] [152])
            (reg:SF 22 xmm1 [orig:153 _67 ] [153]))) "../src/spline.f":146 805 {*fop_sf_1}
     (nil))
(insn 185 184 186 9 (set (reg:SF 22 xmm1 [orig:155 _69 ] [155])
        (reg:SF 21 xmm0 [orig:154 _68 ] [154])) "../src/spline.f":146 127 {*movsf_internal}
     (nil))
(insn 186 185 187 9 (set (reg:SF 21 xmm0 [352])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":146 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 187 186 188 9 (set (reg:SF 21 xmm0 [orig:156 _70 ] [156])
        (mult:SF (reg:SF 21 xmm0 [352])
            (reg:SF 22 xmm1 [orig:155 _69 ] [155]))) "../src/spline.f":146 802 {*fop_sf_comm}
     (nil))
(insn 188 187 189 9 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":146 81 {*movdi_internal}
     (nil))
(insn 189 188 190 9 (set (reg:SF 22 xmm1 [orig:157 _71 ] [157])
        (mem:SF (plus:DI (reg/f:DI 0 ax [353])
                (const_int 4 [0x4])) [3 *s_234(D)+4 S4 A32])) "../src/spline.f":146 127 {*movsf_internal}
     (nil))
(insn 190 189 191 9 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":146 81 {*movdi_internal}
     (nil))
(insn 191 190 192 9 (set (reg:SF 23 xmm2 [orig:158 _72 ] [158])
        (mem:SF (reg/f:DI 0 ax [354]) [3 *s_234(D)+0 S4 A32])) "../src/spline.f":146 127 {*movsf_internal}
     (nil))
(insn 192 191 194 9 (set (reg:SF 22 xmm1 [orig:159 _73 ] [159])
        (minus:SF (reg:SF 22 xmm1 [orig:157 _71 ] [157])
            (reg:SF 23 xmm2 [orig:158 _72 ] [158]))) "../src/spline.f":146 805 {*fop_sf_1}
     (nil))
(insn 194 192 195 9 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (div:SF (reg:SF 21 xmm0 [orig:156 _70 ] [156])
            (reg:SF 22 xmm1 [orig:160 _74 ] [160]))) "../src/spline.f":146 805 {*fop_sf_1}
     (nil))
(insn 195 194 196 9 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":146 81 {*movdi_internal}
     (nil))
(insn 196 195 543 9 (set (mem:SF (reg/f:DI 0 ax [355]) [3 *xs_241(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:161 _75 ] [161])) "../src/spline.f":146 127 {*movsf_internal}
     (nil))
(jump_insn 543 196 544 9 (set (pc)
        (label_ref 243)) 649 {jump}
     (nil)
 -> 243)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 544 543 199)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 356
(code_label 199 544 200 10 35 (nil) [2 uses])
(note 200 199 201 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 10 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60152 [0xffffffffffff1508])) [4 xs1+0 S8 A64])) "../src/spline.f":147 81 {*movdi_internal}
     (nil))
(insn 202 201 203 10 (set (reg:SF 21 xmm0 [orig:162 _76 ] [162])
        (mem:SF (reg/f:DI 0 ax [356]) [3 *xs1_244(D)+0 S4 A32])) "../src/spline.f":147 127 {*movsf_internal}
     (nil))
(insn 203 202 204 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:162 _76 ] [162])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":147 51 {*cmpiusf}
     (nil))
(jump_insn 204 203 519 10 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 233)
            (pc))) "../src/spline.f":147 617 {*jcc_1}
     (nil)
 -> 233)
;;  succ:       13
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 162
;; lr  def 	 17 [flags]
(note 519 204 205 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 205 519 206 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:162 _76 ] [162])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":147 51 {*cmpiusf}
     (nil))
(jump_insn 206 205 210 11 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 233)
            (pc))) "../src/spline.f":147 617 {*jcc_1}
     (nil)
 -> 233)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 163 164 165 166 167 168 169 170 171 172 357 358 359 360 361 362 363
(note 210 206 211 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 12 (set (reg:SF 21 xmm0 [357])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":149 127 {*movsf_internal}
     (nil))
(insn 212 211 213 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20080 [0xffffffffffffb190])) [3 a+0 S4 A128])
        (reg:SF 21 xmm0 [357])) "../src/spline.f":149 127 {*movsf_internal}
     (nil))
(insn 213 212 214 12 (set (reg:SF 21 xmm0 [358])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":150 127 {*movsf_internal}
     (nil))
(insn 214 213 215 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [3 c+0 S4 A128])
        (reg:SF 21 xmm0 [358])) "../src/spline.f":150 127 {*movsf_internal}
     (nil))
(insn 215 214 216 12 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":151 81 {*movdi_internal}
     (nil))
(insn 216 215 217 12 (set (reg:SF 21 xmm0 [orig:163 _77 ] [163])
        (mem:SF (plus:DI (reg/f:DI 0 ax [359])
                (const_int 4 [0x4])) [3 *x_240(D)+4 S4 A32])) "../src/spline.f":151 127 {*movsf_internal}
     (nil))
(insn 217 216 218 12 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":151 81 {*movdi_internal}
     (nil))
(insn 218 217 219 12 (set (reg:SF 22 xmm1 [orig:164 _78 ] [164])
        (mem:SF (reg/f:DI 0 ax [360]) [3 *x_240(D)+0 S4 A32])) "../src/spline.f":151 127 {*movsf_internal}
     (nil))
(insn 219 218 221 12 (set (reg:SF 21 xmm0 [orig:165 _79 ] [165])
        (minus:SF (reg:SF 21 xmm0 [orig:163 _77 ] [163])
            (reg:SF 22 xmm1 [orig:164 _78 ] [164]))) "../src/spline.f":151 805 {*fop_sf_1}
     (nil))
(insn 221 219 222 12 (set (reg:SF 21 xmm0 [orig:167 _81 ] [167])
        (plus:SF (reg:SF 21 xmm0 [orig:166 _80 ] [166])
            (reg:SF 21 xmm0 [orig:166 _80 ] [166]))) "../src/spline.f":151 802 {*fop_sf_comm}
     (nil))
(insn 222 221 223 12 (set (reg/f:DI 0 ax [361])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":151 81 {*movdi_internal}
     (nil))
(insn 223 222 224 12 (set (reg:SF 22 xmm1 [orig:168 _82 ] [168])
        (mem:SF (plus:DI (reg/f:DI 0 ax [361])
                (const_int 4 [0x4])) [3 *s_234(D)+4 S4 A32])) "../src/spline.f":151 127 {*movsf_internal}
     (nil))
(insn 224 223 225 12 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":151 81 {*movdi_internal}
     (nil))
(insn 225 224 226 12 (set (reg:SF 23 xmm2 [orig:169 _83 ] [169])
        (mem:SF (reg/f:DI 0 ax [362]) [3 *s_234(D)+0 S4 A32])) "../src/spline.f":151 127 {*movsf_internal}
     (nil))
(insn 226 225 228 12 (set (reg:SF 22 xmm1 [orig:170 _84 ] [170])
        (minus:SF (reg:SF 22 xmm1 [orig:168 _82 ] [168])
            (reg:SF 23 xmm2 [orig:169 _83 ] [169]))) "../src/spline.f":151 805 {*fop_sf_1}
     (nil))
(insn 228 226 229 12 (set (reg:SF 21 xmm0 [orig:172 _86 ] [172])
        (div:SF (reg:SF 21 xmm0 [orig:167 _81 ] [167])
            (reg:SF 22 xmm1 [orig:171 _85 ] [171]))) "../src/spline.f":151 805 {*fop_sf_1}
     (nil))
(insn 229 228 230 12 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":151 81 {*movdi_internal}
     (nil))
(insn 230 229 545 12 (set (mem:SF (reg/f:DI 0 ax [363]) [3 *xs_241(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:172 _86 ] [172])) "../src/spline.f":151 127 {*movsf_internal}
     (nil))
(jump_insn 545 230 546 12 (set (pc)
        (label_ref 243)) 649 {jump}
     (nil)
 -> 243)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 546 545 233)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 173 364 365 366 367
(code_label 233 546 234 13 38 (nil) [2 uses])
(note 234 233 235 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 13 (set (reg:SF 21 xmm0 [364])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":154 127 {*movsf_internal}
     (nil))
(insn 236 235 237 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20080 [0xffffffffffffb190])) [3 a+0 S4 A128])
        (reg:SF 21 xmm0 [364])) "../src/spline.f":154 127 {*movsf_internal}
     (nil))
(insn 237 236 238 13 (set (reg:SF 21 xmm0 [365])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":155 127 {*movsf_internal}
     (nil))
(insn 238 237 239 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [3 c+0 S4 A128])
        (reg:SF 21 xmm0 [365])) "../src/spline.f":155 127 {*movsf_internal}
     (nil))
(insn 239 238 240 13 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60152 [0xffffffffffff1508])) [4 xs1+0 S8 A64])) "../src/spline.f":156 81 {*movdi_internal}
     (nil))
(insn 240 239 241 13 (set (reg:SF 21 xmm0 [orig:173 _87 ] [173])
        (mem:SF (reg/f:DI 0 ax [366]) [3 *xs1_244(D)+0 S4 A32])) "../src/spline.f":156 127 {*movsf_internal}
     (nil))
(insn 241 240 242 13 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":156 81 {*movdi_internal}
     (nil))
(insn 242 241 243 13 (set (mem:SF (reg/f:DI 0 ax [367]) [3 *xs_241(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:173 _87 ] [173])) "../src/spline.f":156 127 {*movsf_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              9 [100.0%] 
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 368
(code_label 243 242 244 14 37 (nil) [2 uses])
(note 244 243 245 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 14 (set (reg/f:DI 0 ax [368])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60160 [0xffffffffffff1500])) [4 xs2+0 S8 A64])) "../src/spline.f":159 81 {*movdi_internal}
     (nil))
(insn 246 245 247 14 (set (reg:SF 21 xmm0 [orig:174 _88 ] [174])
        (mem:SF (reg/f:DI 0 ax [368]) [3 *xs2_254(D)+0 S4 A32])) "../src/spline.f":159 127 {*movsf_internal}
     (nil))
(insn 247 246 248 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:174 _88 ] [174])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC6") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":159 51 {*cmpiusf}
     (nil))
(jump_insn 248 247 522 14 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) "../src/spline.f":159 617 {*jcc_1}
     (nil)
 -> 308)
;;  succ:       17
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 174
;; lr  def 	 17 [flags]
(note 522 248 249 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 249 522 250 15 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:174 _88 ] [174])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC6") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":159 51 {*cmpiusf}
     (nil))
(jump_insn 250 249 254 15 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 308)
            (pc))) "../src/spline.f":159 617 {*jcc_1}
     (nil)
 -> 308)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383
(note 254 250 255 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 16 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":160 81 {*movdi_internal}
     (nil))
(insn 256 255 257 16 (set (reg:SI 0 ax [orig:175 _89 ] [175])
        (mem:SI (reg/f:DI 0 ax [369]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":160 82 {*movsi_internal}
     (nil))
(insn 257 256 258 16 (set (reg:DI 0 ax [orig:176 _90 ] [176])
        (sign_extend:DI (reg:SI 0 ax [orig:175 _89 ] [175]))) "../src/spline.f":160 145 {*extendsidi2_rex64}
     (nil))
(insn 258 257 259 16 (parallel [
            (set (reg:DI 0 ax [orig:177 _91 ] [177])
                (plus:DI (reg:DI 0 ax [orig:176 _90 ] [176])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":160 218 {*adddi_1}
     (nil))
(insn 259 258 260 16 (set (reg:SF 21 xmm0 [370])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":160 127 {*movsf_internal}
     (nil))
(insn 260 259 261 16 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:177 _91 ] [177])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40096 [0xffffffffffff6360])) [3 b S4 A32])
        (reg:SF 21 xmm0 [370])) "../src/spline.f":160 127 {*movsf_internal}
     (nil))
(insn 261 260 262 16 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":161 81 {*movdi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:SI 0 ax [orig:178 _92 ] [178])
        (mem:SI (reg/f:DI 0 ax [371]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":161 82 {*movsi_internal}
     (nil))
(insn 263 262 264 16 (set (reg:DI 0 ax [orig:179 _93 ] [179])
        (sign_extend:DI (reg:SI 0 ax [orig:178 _92 ] [178]))) "../src/spline.f":161 145 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 16 (parallel [
            (set (reg:DI 0 ax [orig:180 _94 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 _93 ] [179])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":161 218 {*adddi_1}
     (nil))
(insn 265 264 266 16 (set (reg:SF 21 xmm0 [372])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":161 127 {*movsf_internal}
     (nil))
(insn 266 265 267 16 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:180 _94 ] [180])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20080 [0xffffffffffffb190])) [3 a S4 A32])
        (reg:SF 21 xmm0 [372])) "../src/spline.f":161 127 {*movsf_internal}
     (nil))
(insn 267 266 268 16 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 268 267 269 16 (set (reg:SI 0 ax [orig:181 _95 ] [181])
        (mem:SI (reg/f:DI 0 ax [373]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":162 82 {*movsi_internal}
     (nil))
(insn 269 268 270 16 (set (reg:DI 0 ax [orig:182 _96 ] [182])
        (sign_extend:DI (reg:SI 0 ax [orig:181 _95 ] [181]))) "../src/spline.f":162 145 {*extendsidi2_rex64}
     (nil))
(insn 270 269 271 16 (parallel [
            (set (reg:DI 1 dx [orig:183 _97 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 _96 ] [182])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 218 {*adddi_1}
     (nil))
(insn 271 270 272 16 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 272 271 273 16 (set (reg:SF 21 xmm0 [orig:184 _98 ] [184])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:183 _97 ] [183])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [374])) [3 *x_240(D) S4 A32])) "../src/spline.f":162 127 {*movsf_internal}
     (nil))
(insn 273 272 274 16 (set (reg/f:DI 0 ax [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 274 273 275 16 (set (reg:SI 0 ax [orig:185 _99 ] [185])
        (mem:SI (reg/f:DI 0 ax [375]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":162 82 {*movsi_internal}
     (nil))
(insn 275 274 276 16 (parallel [
            (set (reg:SI 0 ax [orig:186 _100 ] [186])
                (plus:SI (reg:SI 0 ax [orig:185 _99 ] [185])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 217 {*addsi_1}
     (nil))
(insn 276 275 277 16 (set (reg:DI 0 ax [orig:187 _101 ] [187])
        (sign_extend:DI (reg:SI 0 ax [orig:186 _100 ] [186]))) "../src/spline.f":162 145 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 16 (parallel [
            (set (reg:DI 1 dx [orig:188 _102 ] [188])
                (plus:DI (reg:DI 0 ax [orig:187 _101 ] [187])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 218 {*adddi_1}
     (nil))
(insn 278 277 279 16 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 279 278 280 16 (set (reg:SF 22 xmm1 [orig:189 _103 ] [189])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:188 _102 ] [188])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [376])) [3 *x_240(D) S4 A32])) "../src/spline.f":162 127 {*movsf_internal}
     (nil))
(insn 280 279 281 16 (set (reg:SF 21 xmm0 [orig:190 _104 ] [190])
        (minus:SF (reg:SF 21 xmm0 [orig:184 _98 ] [184])
            (reg:SF 22 xmm1 [orig:189 _103 ] [189]))) "../src/spline.f":162 805 {*fop_sf_1}
     (nil))
(insn 281 280 282 16 (set (reg:SF 22 xmm1 [orig:191 _105 ] [191])
        (reg:SF 21 xmm0 [orig:190 _104 ] [190])) "../src/spline.f":162 127 {*movsf_internal}
     (nil))
(insn 282 281 283 16 (set (reg:SF 21 xmm0 [377])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":162 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 283 282 284 16 (set (reg:SF 21 xmm0 [orig:192 _106 ] [192])
        (mult:SF (reg:SF 21 xmm0 [377])
            (reg:SF 22 xmm1 [orig:191 _105 ] [191]))) "../src/spline.f":162 802 {*fop_sf_comm}
     (nil))
(insn 284 283 285 16 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 285 284 286 16 (set (reg:SI 0 ax [orig:193 _107 ] [193])
        (mem:SI (reg/f:DI 0 ax [378]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":162 82 {*movsi_internal}
     (nil))
(insn 286 285 287 16 (set (reg:DI 0 ax [orig:194 _108 ] [194])
        (sign_extend:DI (reg:SI 0 ax [orig:193 _107 ] [193]))) "../src/spline.f":162 145 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 16 (parallel [
            (set (reg:DI 1 dx [orig:195 _109 ] [195])
                (plus:DI (reg:DI 0 ax [orig:194 _108 ] [194])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 218 {*adddi_1}
     (nil))
(insn 288 287 289 16 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 289 288 290 16 (set (reg:SF 22 xmm1 [orig:196 _110 ] [196])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:195 _109 ] [195])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [379])) [3 *s_234(D) S4 A32])) "../src/spline.f":162 127 {*movsf_internal}
     (nil))
(insn 290 289 291 16 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 291 290 292 16 (set (reg:SI 0 ax [orig:197 _111 ] [197])
        (mem:SI (reg/f:DI 0 ax [380]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":162 82 {*movsi_internal}
     (nil))
(insn 292 291 293 16 (parallel [
            (set (reg:SI 0 ax [orig:198 _112 ] [198])
                (plus:SI (reg:SI 0 ax [orig:197 _111 ] [197])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 217 {*addsi_1}
     (nil))
(insn 293 292 294 16 (set (reg:DI 0 ax [orig:199 _113 ] [199])
        (sign_extend:DI (reg:SI 0 ax [orig:198 _112 ] [198]))) "../src/spline.f":162 145 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 16 (parallel [
            (set (reg:DI 1 dx [orig:200 _114 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 _113 ] [199])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 218 {*adddi_1}
     (nil))
(insn 295 294 296 16 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 296 295 297 16 (set (reg:SF 23 xmm2 [orig:201 _115 ] [201])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:200 _114 ] [200])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [381])) [3 *s_234(D) S4 A32])) "../src/spline.f":162 127 {*movsf_internal}
     (nil))
(insn 297 296 299 16 (set (reg:SF 22 xmm1 [orig:202 _116 ] [202])
        (minus:SF (reg:SF 22 xmm1 [orig:196 _110 ] [196])
            (reg:SF 23 xmm2 [orig:201 _115 ] [201]))) "../src/spline.f":162 805 {*fop_sf_1}
     (nil))
(insn 299 297 300 16 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 300 299 301 16 (set (reg:SI 0 ax [orig:204 _118 ] [204])
        (mem:SI (reg/f:DI 0 ax [382]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":162 82 {*movsi_internal}
     (nil))
(insn 301 300 302 16 (set (reg:DI 0 ax [orig:205 _119 ] [205])
        (sign_extend:DI (reg:SI 0 ax [orig:204 _118 ] [204]))) "../src/spline.f":162 145 {*extendsidi2_rex64}
     (nil))
(insn 302 301 303 16 (parallel [
            (set (reg:DI 1 dx [orig:206 _120 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 _119 ] [205])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":162 218 {*adddi_1}
     (nil))
(insn 303 302 304 16 (set (reg:SF 21 xmm0 [orig:207 _121 ] [207])
        (div:SF (reg:SF 21 xmm0 [orig:192 _106 ] [192])
            (reg:SF 22 xmm1 [orig:203 _117 ] [203]))) "../src/spline.f":162 805 {*fop_sf_1}
     (nil))
(insn 304 303 305 16 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":162 81 {*movdi_internal}
     (nil))
(insn 305 304 547 16 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:206 _120 ] [206])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [383])) [3 *xs_241(D) S4 A32])
        (reg:SF 21 xmm0 [orig:207 _121 ] [207])) "../src/spline.f":162 127 {*movsf_internal}
     (nil))
(jump_insn 547 305 548 16 (set (pc)
        (label_ref 394)) 649 {jump}
     (nil)
 -> 394)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 548 547 308)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 208 384
(code_label 308 548 309 17 40 (nil) [2 uses])
(note 309 308 310 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 17 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60160 [0xffffffffffff1500])) [4 xs2+0 S8 A64])) "../src/spline.f":163 81 {*movdi_internal}
     (nil))
(insn 311 310 312 17 (set (reg:SF 21 xmm0 [orig:208 _122 ] [208])
        (mem:SF (reg/f:DI 0 ax [384]) [3 *xs2_254(D)+0 S4 A32])) "../src/spline.f":163 127 {*movsf_internal}
     (nil))
(insn 312 311 313 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:208 _122 ] [208])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":163 51 {*cmpiusf}
     (nil))
(jump_insn 313 312 525 17 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) "../src/spline.f":163 617 {*jcc_1}
     (nil)
 -> 372)
;;  succ:       20
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 208

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 208
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 208
;; lr  def 	 17 [flags]
(note 525 313 314 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 314 525 315 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:208 _122 ] [208])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":163 51 {*cmpiusf}
     (nil))
(jump_insn 315 314 319 18 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 372)
            (pc))) "../src/spline.f":163 617 {*jcc_1}
     (nil)
 -> 372)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 385 386 387 388 389 390 391 392 393 394 395 396 397 398
(note 319 315 320 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 320 319 321 19 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":164 81 {*movdi_internal}
     (nil))
(insn 321 320 322 19 (set (reg:SI 0 ax [orig:209 _123 ] [209])
        (mem:SI (reg/f:DI 0 ax [385]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":164 82 {*movsi_internal}
     (nil))
(insn 322 321 323 19 (set (reg:DI 0 ax [orig:210 _124 ] [210])
        (sign_extend:DI (reg:SI 0 ax [orig:209 _123 ] [209]))) "../src/spline.f":164 145 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 19 (parallel [
            (set (reg:DI 0 ax [orig:211 _125 ] [211])
                (plus:DI (reg:DI 0 ax [orig:210 _124 ] [210])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":164 218 {*adddi_1}
     (nil))
(insn 324 323 325 19 (set (reg:SF 21 xmm0 [386])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":164 127 {*movsf_internal}
     (nil))
(insn 325 324 326 19 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:211 _125 ] [211])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40096 [0xffffffffffff6360])) [3 b S4 A32])
        (reg:SF 21 xmm0 [386])) "../src/spline.f":164 127 {*movsf_internal}
     (nil))
(insn 326 325 327 19 (set (reg/f:DI 0 ax [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":165 81 {*movdi_internal}
     (nil))
(insn 327 326 328 19 (set (reg:SI 0 ax [orig:212 _126 ] [212])
        (mem:SI (reg/f:DI 0 ax [387]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":165 82 {*movsi_internal}
     (nil))
(insn 328 327 329 19 (set (reg:DI 0 ax [orig:213 _127 ] [213])
        (sign_extend:DI (reg:SI 0 ax [orig:212 _126 ] [212]))) "../src/spline.f":165 145 {*extendsidi2_rex64}
     (nil))
(insn 329 328 330 19 (parallel [
            (set (reg:DI 0 ax [orig:214 _128 ] [214])
                (plus:DI (reg:DI 0 ax [orig:213 _127 ] [213])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":165 218 {*adddi_1}
     (nil))
(insn 330 329 331 19 (set (reg:SF 21 xmm0 [388])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":165 127 {*movsf_internal}
     (nil))
(insn 331 330 332 19 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:214 _128 ] [214])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20080 [0xffffffffffffb190])) [3 a S4 A32])
        (reg:SF 21 xmm0 [388])) "../src/spline.f":165 127 {*movsf_internal}
     (nil))
(insn 332 331 333 19 (set (reg/f:DI 0 ax [389])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 333 332 334 19 (set (reg:SI 0 ax [orig:215 _129 ] [215])
        (mem:SI (reg/f:DI 0 ax [389]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":166 82 {*movsi_internal}
     (nil))
(insn 334 333 335 19 (set (reg:DI 0 ax [orig:216 _130 ] [216])
        (sign_extend:DI (reg:SI 0 ax [orig:215 _129 ] [215]))) "../src/spline.f":166 145 {*extendsidi2_rex64}
     (nil))
(insn 335 334 336 19 (parallel [
            (set (reg:DI 1 dx [orig:217 _131 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 _130 ] [216])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 218 {*adddi_1}
     (nil))
(insn 336 335 337 19 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 337 336 338 19 (set (reg:SF 21 xmm0 [orig:218 _132 ] [218])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:217 _131 ] [217])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [390])) [3 *x_240(D) S4 A32])) "../src/spline.f":166 127 {*movsf_internal}
     (nil))
(insn 338 337 339 19 (set (reg/f:DI 0 ax [391])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 339 338 340 19 (set (reg:SI 0 ax [orig:219 _133 ] [219])
        (mem:SI (reg/f:DI 0 ax [391]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":166 82 {*movsi_internal}
     (nil))
(insn 340 339 341 19 (parallel [
            (set (reg:SI 0 ax [orig:220 _134 ] [220])
                (plus:SI (reg:SI 0 ax [orig:219 _133 ] [219])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 217 {*addsi_1}
     (nil))
(insn 341 340 342 19 (set (reg:DI 0 ax [orig:221 _135 ] [221])
        (sign_extend:DI (reg:SI 0 ax [orig:220 _134 ] [220]))) "../src/spline.f":166 145 {*extendsidi2_rex64}
     (nil))
(insn 342 341 343 19 (parallel [
            (set (reg:DI 1 dx [orig:222 _136 ] [222])
                (plus:DI (reg:DI 0 ax [orig:221 _135 ] [221])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 218 {*adddi_1}
     (nil))
(insn 343 342 344 19 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 344 343 345 19 (set (reg:SF 22 xmm1 [orig:223 _137 ] [223])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:222 _136 ] [222])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [392])) [3 *x_240(D) S4 A32])) "../src/spline.f":166 127 {*movsf_internal}
     (nil))
(insn 345 344 347 19 (set (reg:SF 21 xmm0 [orig:224 _138 ] [224])
        (minus:SF (reg:SF 21 xmm0 [orig:218 _132 ] [218])
            (reg:SF 22 xmm1 [orig:223 _137 ] [223]))) "../src/spline.f":166 805 {*fop_sf_1}
     (nil))
(insn 347 345 348 19 (set (reg:SF 21 xmm0 [orig:226 _140 ] [226])
        (plus:SF (reg:SF 21 xmm0 [orig:225 _139 ] [225])
            (reg:SF 21 xmm0 [orig:225 _139 ] [225]))) "../src/spline.f":166 802 {*fop_sf_comm}
     (nil))
(insn 348 347 349 19 (set (reg/f:DI 0 ax [393])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 349 348 350 19 (set (reg:SI 0 ax [orig:227 _141 ] [227])
        (mem:SI (reg/f:DI 0 ax [393]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":166 82 {*movsi_internal}
     (nil))
(insn 350 349 351 19 (set (reg:DI 0 ax [orig:228 _142 ] [228])
        (sign_extend:DI (reg:SI 0 ax [orig:227 _141 ] [227]))) "../src/spline.f":166 145 {*extendsidi2_rex64}
     (nil))
(insn 351 350 352 19 (parallel [
            (set (reg:DI 1 dx [orig:229 _143 ] [229])
                (plus:DI (reg:DI 0 ax [orig:228 _142 ] [228])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 218 {*adddi_1}
     (nil))
(insn 352 351 353 19 (set (reg/f:DI 0 ax [394])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 353 352 354 19 (set (reg:SF 22 xmm1 [orig:230 _144 ] [230])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:229 _143 ] [229])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [394])) [3 *s_234(D) S4 A32])) "../src/spline.f":166 127 {*movsf_internal}
     (nil))
(insn 354 353 355 19 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 355 354 356 19 (set (reg:SI 0 ax [orig:231 _145 ] [231])
        (mem:SI (reg/f:DI 0 ax [395]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":166 82 {*movsi_internal}
     (nil))
(insn 356 355 357 19 (parallel [
            (set (reg:SI 0 ax [orig:232 _146 ] [232])
                (plus:SI (reg:SI 0 ax [orig:231 _145 ] [231])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 217 {*addsi_1}
     (nil))
(insn 357 356 358 19 (set (reg:DI 0 ax [orig:233 _147 ] [233])
        (sign_extend:DI (reg:SI 0 ax [orig:232 _146 ] [232]))) "../src/spline.f":166 145 {*extendsidi2_rex64}
     (nil))
(insn 358 357 359 19 (parallel [
            (set (reg:DI 1 dx [orig:234 _148 ] [234])
                (plus:DI (reg:DI 0 ax [orig:233 _147 ] [233])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 218 {*adddi_1}
     (nil))
(insn 359 358 360 19 (set (reg/f:DI 0 ax [396])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 360 359 361 19 (set (reg:SF 23 xmm2 [orig:235 _149 ] [235])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:234 _148 ] [234])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [396])) [3 *s_234(D) S4 A32])) "../src/spline.f":166 127 {*movsf_internal}
     (nil))
(insn 361 360 363 19 (set (reg:SF 22 xmm1 [orig:236 _150 ] [236])
        (minus:SF (reg:SF 22 xmm1 [orig:230 _144 ] [230])
            (reg:SF 23 xmm2 [orig:235 _149 ] [235]))) "../src/spline.f":166 805 {*fop_sf_1}
     (nil))
(insn 363 361 364 19 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 364 363 365 19 (set (reg:SI 0 ax [orig:238 _152 ] [238])
        (mem:SI (reg/f:DI 0 ax [397]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":166 82 {*movsi_internal}
     (nil))
(insn 365 364 366 19 (set (reg:DI 0 ax [orig:239 _153 ] [239])
        (sign_extend:DI (reg:SI 0 ax [orig:238 _152 ] [238]))) "../src/spline.f":166 145 {*extendsidi2_rex64}
     (nil))
(insn 366 365 367 19 (parallel [
            (set (reg:DI 1 dx [orig:240 _154 ] [240])
                (plus:DI (reg:DI 0 ax [orig:239 _153 ] [239])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":166 218 {*adddi_1}
     (nil))
(insn 367 366 368 19 (set (reg:SF 21 xmm0 [orig:241 _155 ] [241])
        (div:SF (reg:SF 21 xmm0 [orig:226 _140 ] [226])
            (reg:SF 22 xmm1 [orig:237 _151 ] [237]))) "../src/spline.f":166 805 {*fop_sf_1}
     (nil))
(insn 368 367 369 19 (set (reg/f:DI 0 ax [398])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":166 81 {*movdi_internal}
     (nil))
(insn 369 368 549 19 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:240 _154 ] [240])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [398])) [3 *xs_241(D) S4 A32])
        (reg:SF 21 xmm0 [orig:241 _155 ] [241])) "../src/spline.f":166 127 {*movsf_internal}
     (nil))
(jump_insn 549 369 550 19 (set (pc)
        (label_ref 394)) 649 {jump}
     (nil)
 -> 394)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 550 549 372)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 242 243 244 245 246 247 248 249 250 251 399 400 401 402 403 404 405
(code_label 372 550 373 20 43 (nil) [2 uses])
(note 373 372 374 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 374 373 375 20 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":168 81 {*movdi_internal}
     (nil))
(insn 375 374 376 20 (set (reg:SI 0 ax [orig:242 _156 ] [242])
        (mem:SI (reg/f:DI 0 ax [399]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":168 82 {*movsi_internal}
     (nil))
(insn 376 375 377 20 (set (reg:DI 0 ax [orig:243 _157 ] [243])
        (sign_extend:DI (reg:SI 0 ax [orig:242 _156 ] [242]))) "../src/spline.f":168 145 {*extendsidi2_rex64}
     (nil))
(insn 377 376 378 20 (parallel [
            (set (reg:DI 0 ax [orig:244 _158 ] [244])
                (plus:DI (reg:DI 0 ax [orig:243 _157 ] [243])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":168 218 {*adddi_1}
     (nil))
(insn 378 377 379 20 (set (reg:SF 21 xmm0 [400])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":168 127 {*movsf_internal}
     (nil))
(insn 379 378 380 20 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:244 _158 ] [244])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20080 [0xffffffffffffb190])) [3 a S4 A32])
        (reg:SF 21 xmm0 [400])) "../src/spline.f":168 127 {*movsf_internal}
     (nil))
(insn 380 379 381 20 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":169 81 {*movdi_internal}
     (nil))
(insn 381 380 382 20 (set (reg:SI 0 ax [orig:245 _159 ] [245])
        (mem:SI (reg/f:DI 0 ax [401]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":169 82 {*movsi_internal}
     (nil))
(insn 382 381 383 20 (set (reg:DI 0 ax [orig:246 _160 ] [246])
        (sign_extend:DI (reg:SI 0 ax [orig:245 _159 ] [245]))) "../src/spline.f":169 145 {*extendsidi2_rex64}
     (nil))
(insn 383 382 384 20 (parallel [
            (set (reg:DI 0 ax [orig:247 _161 ] [247])
                (plus:DI (reg:DI 0 ax [orig:246 _160 ] [246])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":169 218 {*adddi_1}
     (nil))
(insn 384 383 385 20 (set (reg:SF 21 xmm0 [402])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":169 127 {*movsf_internal}
     (nil))
(insn 385 384 386 20 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:247 _161 ] [247])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40096 [0xffffffffffff6360])) [3 b S4 A32])
        (reg:SF 21 xmm0 [402])) "../src/spline.f":169 127 {*movsf_internal}
     (nil))
(insn 386 385 387 20 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":170 81 {*movdi_internal}
     (nil))
(insn 387 386 388 20 (set (reg:SI 0 ax [orig:248 _162 ] [248])
        (mem:SI (reg/f:DI 0 ax [403]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":170 82 {*movsi_internal}
     (nil))
(insn 388 387 389 20 (set (reg:DI 0 ax [orig:249 _163 ] [249])
        (sign_extend:DI (reg:SI 0 ax [orig:248 _162 ] [248]))) "../src/spline.f":170 145 {*extendsidi2_rex64}
     (nil))
(insn 389 388 390 20 (parallel [
            (set (reg:DI 1 dx [orig:250 _164 ] [250])
                (plus:DI (reg:DI 0 ax [orig:249 _163 ] [249])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":170 218 {*adddi_1}
     (nil))
(insn 390 389 391 20 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60160 [0xffffffffffff1500])) [4 xs2+0 S8 A64])) "../src/spline.f":170 81 {*movdi_internal}
     (nil))
(insn 391 390 392 20 (set (reg:SF 21 xmm0 [orig:251 _165 ] [251])
        (mem:SF (reg/f:DI 0 ax [404]) [3 *xs2_254(D)+0 S4 A32])) "../src/spline.f":170 127 {*movsf_internal}
     (nil))
(insn 392 391 393 20 (set (reg/f:DI 0 ax [405])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":170 81 {*movdi_internal}
     (nil))
(insn 393 392 394 20 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:250 _164 ] [250])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [405])) [3 *xs_241(D) S4 A32])
        (reg:SF 21 xmm0 [orig:251 _165 ] [251])) "../src/spline.f":170 127 {*movsf_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              16 [100.0%] 
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 406
(code_label 394 393 395 21 42 (nil) [2 uses])
(note 395 394 396 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 396 395 397 21 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":173 81 {*movdi_internal}
     (nil))
(insn 397 396 398 21 (set (reg:SI 0 ax [orig:252 _166 ] [252])
        (mem:SI (reg/f:DI 0 ax [406]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":173 82 {*movsi_internal}
     (nil))
(insn 398 397 399 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:252 _166 ] [252])
            (const_int 2 [0x2]))) "../src/spline.f":173 7 {*cmpsi_1}
     (nil))
(jump_insn 399 398 400 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 414)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 414)
;;  succ:       22 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 253 407
(note 400 399 401 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 401 400 402 22 (set (reg/f:DI 0 ax [407])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60152 [0xffffffffffff1508])) [4 xs1+0 S8 A64])) "../src/spline.f":173 81 {*movdi_internal}
     (nil))
(insn 402 401 403 22 (set (reg:SF 21 xmm0 [orig:253 _167 ] [253])
        (mem:SF (reg/f:DI 0 ax [407]) [3 *xs1_244(D)+0 S4 A32])) "../src/spline.f":173 127 {*movsf_internal}
     (nil))
(insn 403 402 404 22 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:253 _167 ] [253])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":173 51 {*cmpiusf}
     (nil))
(jump_insn 404 403 528 22 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 414)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 414)
;;  succ:       25
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253
;; lr  def 	 17 [flags]
(note 528 404 405 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 405 528 406 23 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:253 _167 ] [253])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":173 51 {*cmpiusf}
     (nil))
(jump_insn 406 405 410 23 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 414)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 414)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 291
(note 410 406 411 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 551 24 (set (reg:QI 0 ax [orig:291 iftmp.170_206 ] [291])
        (const_int 1 [0x1])) "../src/spline.f":173 84 {*movqi_internal}
     (nil))
(jump_insn 551 411 552 24 (set (pc)
        (label_ref 417)) "../src/spline.f":173 649 {jump}
     (nil)
 -> 417)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 291

(barrier 552 551 414)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       21
;;              22
;;              23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 291
(code_label 414 552 415 25 45 (nil) [3 uses])
(note 415 414 416 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 417 25 (set (reg:QI 0 ax [orig:291 iftmp.170_206 ] [291])
        (const_int 0 [0])) "../src/spline.f":173 84 {*movqi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 291

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              24 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 291
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 291
;; lr  def 	 17 [flags] 254
(code_label 417 416 418 26 47 (nil) [1 uses])
(note 418 417 419 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 419 418 420 26 (set (reg:SI 0 ax [orig:254 iftmp.171_168 ] [254])
        (zero_extend:SI (reg:QI 0 ax [orig:291 iftmp.170_206 ] [291]))) "../src/spline.f":173 136 {*zero_extendqisi2}
     (nil))
(insn 420 419 421 26 (parallel [
            (set (reg:SI 0 ax [orig:254 iftmp.171_168 ] [254])
                (and:SI (reg:SI 0 ax [orig:254 iftmp.171_168 ] [254])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":173 391 {*andsi_1}
     (nil))
(insn 421 420 422 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:254 iftmp.171_168 ] [254])
            (const_int 0 [0]))) "../src/spline.f":173 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 422 421 423 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 437)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 437)
;;  succ:       27 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 255 408
(note 423 422 424 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 424 423 425 27 (set (reg/f:DI 0 ax [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60160 [0xffffffffffff1500])) [4 xs2+0 S8 A64])) "../src/spline.f":173 81 {*movdi_internal}
     (nil))
(insn 425 424 426 27 (set (reg:SF 21 xmm0 [orig:255 _169 ] [255])
        (mem:SF (reg/f:DI 0 ax [408]) [3 *xs2_254(D)+0 S4 A32])) "../src/spline.f":173 127 {*movsf_internal}
     (nil))
(insn 426 425 427 27 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:255 _169 ] [255])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":173 51 {*cmpiusf}
     (nil))
(jump_insn 427 426 531 27 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 437)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 437)
;;  succ:       30
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 255

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 255
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 255
;; lr  def 	 17 [flags]
(note 531 427 428 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 428 531 429 28 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:255 _169 ] [255])
            (mem/u/c:SF (symbol_ref/u:DI ("*lC7") [flags 0x2]) [3  S4 A32]))) "../src/spline.f":173 51 {*cmpiusf}
     (nil))
(jump_insn 429 428 433 28 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 437)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 437)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 290
(note 433 429 434 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 434 433 553 29 (set (reg:QI 0 ax [orig:290 iftmp.169_205 ] [290])
        (const_int 1 [0x1])) "../src/spline.f":173 84 {*movqi_internal}
     (nil))
(jump_insn 553 434 554 29 (set (pc)
        (label_ref 440)) "../src/spline.f":173 649 {jump}
     (nil)
 -> 440)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290

(barrier 554 553 437)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       26
;;              27
;;              28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 290
(code_label 437 554 438 30 48 (nil) [3 uses])
(note 438 437 439 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 439 438 440 30 (set (reg:QI 0 ax [orig:290 iftmp.169_205 ] [290])
        (const_int 0 [0])) "../src/spline.f":173 84 {*movqi_internal}
     (nil))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              29 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290
;; lr  def 	 17 [flags] 256
(code_label 440 439 441 31 50 (nil) [1 uses])
(note 441 440 442 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 442 441 443 31 (set (reg:SI 0 ax [orig:256 iftmp.172_170 ] [256])
        (zero_extend:SI (reg:QI 0 ax [orig:290 iftmp.169_205 ] [290]))) "../src/spline.f":173 136 {*zero_extendqisi2}
     (nil))
(insn 443 442 444 31 (parallel [
            (set (reg:SI 0 ax [orig:256 iftmp.172_170 ] [256])
                (and:SI (reg:SI 0 ax [orig:256 iftmp.172_170 ] [256])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":173 391 {*andsi_1}
     (nil))
(insn 444 443 445 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:256 iftmp.172_170 ] [256])
            (const_int 0 [0]))) "../src/spline.f":173 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 445 444 446 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) "../src/spline.f":173 617 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423
(note 446 445 447 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 447 446 448 32 (set (reg/f:DI 0 ax [409])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":174 81 {*movdi_internal}
     (nil))
(insn 448 447 449 32 (set (reg:SI 0 ax [orig:257 _171 ] [257])
        (mem:SI (reg/f:DI 0 ax [409]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":174 82 {*movsi_internal}
     (nil))
(insn 449 448 450 32 (set (reg:DI 0 ax [orig:258 _172 ] [258])
        (sign_extend:DI (reg:SI 0 ax [orig:257 _171 ] [257]))) "../src/spline.f":174 145 {*extendsidi2_rex64}
     (nil))
(insn 450 449 451 32 (parallel [
            (set (reg:DI 0 ax [orig:259 _173 ] [259])
                (plus:DI (reg:DI 0 ax [orig:258 _172 ] [258])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":174 218 {*adddi_1}
     (nil))
(insn 451 450 452 32 (set (reg:SF 21 xmm0 [410])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":174 127 {*movsf_internal}
     (nil))
(insn 452 451 453 32 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:259 _173 ] [259])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40096 [0xffffffffffff6360])) [3 b S4 A32])
        (reg:SF 21 xmm0 [410])) "../src/spline.f":174 127 {*movsf_internal}
     (nil))
(insn 453 452 454 32 (set (reg/f:DI 0 ax [411])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":175 81 {*movdi_internal}
     (nil))
(insn 454 453 455 32 (set (reg:SI 0 ax [orig:260 _174 ] [260])
        (mem:SI (reg/f:DI 0 ax [411]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":175 82 {*movsi_internal}
     (nil))
(insn 455 454 456 32 (set (reg:DI 0 ax [orig:261 _175 ] [261])
        (sign_extend:DI (reg:SI 0 ax [orig:260 _174 ] [260]))) "../src/spline.f":175 145 {*extendsidi2_rex64}
     (nil))
(insn 456 455 457 32 (parallel [
            (set (reg:DI 0 ax [orig:262 _176 ] [262])
                (plus:DI (reg:DI 0 ax [orig:261 _175 ] [261])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":175 218 {*adddi_1}
     (nil))
(insn 457 456 458 32 (set (reg:SF 21 xmm0 [412])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":175 127 {*movsf_internal}
     (nil))
(insn 458 457 459 32 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:262 _176 ] [262])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20080 [0xffffffffffffb190])) [3 a S4 A32])
        (reg:SF 21 xmm0 [412])) "../src/spline.f":175 127 {*movsf_internal}
     (nil))
(insn 459 458 460 32 (set (reg/f:DI 0 ax [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 460 459 461 32 (set (reg:SI 0 ax [orig:263 _177 ] [263])
        (mem:SI (reg/f:DI 0 ax [413]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":176 82 {*movsi_internal}
     (nil))
(insn 461 460 462 32 (set (reg:DI 0 ax [orig:264 _178 ] [264])
        (sign_extend:DI (reg:SI 0 ax [orig:263 _177 ] [263]))) "../src/spline.f":176 145 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 32 (parallel [
            (set (reg:DI 1 dx [orig:265 _179 ] [265])
                (plus:DI (reg:DI 0 ax [orig:264 _178 ] [264])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 218 {*adddi_1}
     (nil))
(insn 463 462 464 32 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 464 463 465 32 (set (reg:SF 21 xmm0 [orig:266 _180 ] [266])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:265 _179 ] [265])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [414])) [3 *x_240(D) S4 A32])) "../src/spline.f":176 127 {*movsf_internal}
     (nil))
(insn 465 464 466 32 (set (reg/f:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 466 465 467 32 (set (reg:SI 0 ax [orig:267 _181 ] [267])
        (mem:SI (reg/f:DI 0 ax [415]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":176 82 {*movsi_internal}
     (nil))
(insn 467 466 468 32 (parallel [
            (set (reg:SI 0 ax [orig:268 _182 ] [268])
                (plus:SI (reg:SI 0 ax [orig:267 _181 ] [267])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 217 {*addsi_1}
     (nil))
(insn 468 467 469 32 (set (reg:DI 0 ax [orig:269 _183 ] [269])
        (sign_extend:DI (reg:SI 0 ax [orig:268 _182 ] [268]))) "../src/spline.f":176 145 {*extendsidi2_rex64}
     (nil))
(insn 469 468 470 32 (parallel [
            (set (reg:DI 1 dx [orig:270 _184 ] [270])
                (plus:DI (reg:DI 0 ax [orig:269 _183 ] [269])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 218 {*adddi_1}
     (nil))
(insn 470 469 471 32 (set (reg/f:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 x+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 471 470 472 32 (set (reg:SF 22 xmm1 [orig:271 _185 ] [271])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:270 _184 ] [270])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [416])) [3 *x_240(D) S4 A32])) "../src/spline.f":176 127 {*movsf_internal}
     (nil))
(insn 472 471 473 32 (set (reg:SF 21 xmm0 [orig:272 _186 ] [272])
        (minus:SF (reg:SF 21 xmm0 [orig:266 _180 ] [266])
            (reg:SF 22 xmm1 [orig:271 _185 ] [271]))) "../src/spline.f":176 805 {*fop_sf_1}
     (nil))
(insn 473 472 474 32 (set (reg:SF 22 xmm1 [orig:273 _187 ] [273])
        (reg:SF 21 xmm0 [orig:272 _186 ] [272])) "../src/spline.f":176 127 {*movsf_internal}
     (nil))
(insn 474 473 475 32 (set (reg:SF 21 xmm0 [417])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":176 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 475 474 476 32 (set (reg:SF 21 xmm0 [orig:274 _188 ] [274])
        (mult:SF (reg:SF 21 xmm0 [417])
            (reg:SF 22 xmm1 [orig:273 _187 ] [273]))) "../src/spline.f":176 802 {*fop_sf_comm}
     (nil))
(insn 476 475 477 32 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 477 476 478 32 (set (reg:SI 0 ax [orig:275 _189 ] [275])
        (mem:SI (reg/f:DI 0 ax [418]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":176 82 {*movsi_internal}
     (nil))
(insn 478 477 479 32 (set (reg:DI 0 ax [orig:276 _190 ] [276])
        (sign_extend:DI (reg:SI 0 ax [orig:275 _189 ] [275]))) "../src/spline.f":176 145 {*extendsidi2_rex64}
     (nil))
(insn 479 478 480 32 (parallel [
            (set (reg:DI 1 dx [orig:277 _191 ] [277])
                (plus:DI (reg:DI 0 ax [orig:276 _190 ] [276])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 218 {*adddi_1}
     (nil))
(insn 480 479 481 32 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 481 480 482 32 (set (reg:SF 22 xmm1 [orig:278 _192 ] [278])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:277 _191 ] [277])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [419])) [3 *s_234(D) S4 A32])) "../src/spline.f":176 127 {*movsf_internal}
     (nil))
(insn 482 481 483 32 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 483 482 484 32 (set (reg:SI 0 ax [orig:279 _193 ] [279])
        (mem:SI (reg/f:DI 0 ax [420]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":176 82 {*movsi_internal}
     (nil))
(insn 484 483 485 32 (parallel [
            (set (reg:SI 0 ax [orig:280 _194 ] [280])
                (plus:SI (reg:SI 0 ax [orig:279 _193 ] [279])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 217 {*addsi_1}
     (nil))
(insn 485 484 486 32 (set (reg:DI 0 ax [orig:281 _195 ] [281])
        (sign_extend:DI (reg:SI 0 ax [orig:280 _194 ] [280]))) "../src/spline.f":176 145 {*extendsidi2_rex64}
     (nil))
(insn 486 485 487 32 (parallel [
            (set (reg:DI 1 dx [orig:282 _196 ] [282])
                (plus:DI (reg:DI 0 ax [orig:281 _195 ] [281])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 218 {*adddi_1}
     (nil))
(insn 487 486 488 32 (set (reg/f:DI 0 ax [421])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60136 [0xffffffffffff1518])) [5 s+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 488 487 489 32 (set (reg:SF 23 xmm2 [orig:283 _197 ] [283])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:282 _196 ] [282])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [421])) [3 *s_234(D) S4 A32])) "../src/spline.f":176 127 {*movsf_internal}
     (nil))
(insn 489 488 491 32 (set (reg:SF 22 xmm1 [orig:284 _198 ] [284])
        (minus:SF (reg:SF 22 xmm1 [orig:278 _192 ] [278])
            (reg:SF 23 xmm2 [orig:283 _197 ] [283]))) "../src/spline.f":176 805 {*fop_sf_1}
     (nil))
(insn 491 489 492 32 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 492 491 493 32 (set (reg:SI 0 ax [orig:286 _200 ] [286])
        (mem:SI (reg/f:DI 0 ax [422]) [1 *n_212(D)+0 S4 A32])) "../src/spline.f":176 82 {*movsi_internal}
     (nil))
(insn 493 492 494 32 (set (reg:DI 0 ax [orig:287 _201 ] [287])
        (sign_extend:DI (reg:SI 0 ax [orig:286 _200 ] [286]))) "../src/spline.f":176 145 {*extendsidi2_rex64}
     (nil))
(insn 494 493 495 32 (parallel [
            (set (reg:DI 1 dx [orig:288 _202 ] [288])
                (plus:DI (reg:DI 0 ax [orig:287 _201 ] [287])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":176 218 {*adddi_1}
     (nil))
(insn 495 494 496 32 (set (reg:SF 21 xmm0 [orig:289 _203 ] [289])
        (div:SF (reg:SF 21 xmm0 [orig:274 _188 ] [274])
            (reg:SF 22 xmm1 [orig:285 _199 ] [285]))) "../src/spline.f":176 805 {*fop_sf_1}
     (nil))
(insn 496 495 497 32 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":176 81 {*movdi_internal}
     (nil))
(insn 497 496 498 32 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:288 _202 ] [288])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [423])) [3 *xs_241(D) S4 A32])
        (reg:SF 21 xmm0 [orig:289 _203 ] [289])) "../src/spline.f":176 127 {*movsf_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 1, flags: (RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 424 425 426 427 428
(code_label 498 497 499 33 51 (nil) [1 uses])
(note 499 498 500 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 33 (set (reg:DI 5 di [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60144 [0xffffffffffff1510])) [6 n+0 S8 A64])) "../src/spline.f":180 81 {*movdi_internal}
     (nil))
(insn 501 500 502 33 (set (reg:DI 2 cx [425])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [5 xs+0 S8 A64])) "../src/spline.f":180 81 {*movdi_internal}
     (nil))
(insn 502 501 503 33 (parallel [
            (set (reg:DI 1 dx [426])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -60112 [0xffffffffffff1530])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":180 218 {*adddi_1}
     (nil))
(insn 503 502 504 33 (parallel [
            (set (reg:DI 4 si [427])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -40096 [0xffffffffffff6360])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":180 218 {*adddi_1}
     (nil))
(insn 504 503 505 33 (parallel [
            (set (reg:DI 0 ax [428])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -20080 [0xffffffffffffb190])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":180 218 {*adddi_1}
     (nil))
(insn 505 504 509 33 (set (reg:DI 37 r8)
        (reg:DI 5 di [424])) "../src/spline.f":180 81 {*movdi_internal}
     (nil))
(insn 509 505 510 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [428])) "../src/spline.f":180 81 {*movdi_internal}
     (nil))
(call_insn 510 509 540 33 (call (mem:QI (symbol_ref:DI ("trisol_") [flags 0x403]  <function_decl 0x1427e4c00 trisol>) [0 trisol S1 A8])
        (const_int 0 [0])) "../src/spline.f":180 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 540 510 558 33 (const_int 0 [0]) "../src/spline.f":182 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 558 540 0 NOTE_INSN_DELETED)

;; Function spline (spline_, funcdef_no=4, decl_uid=3703, cgraph_uid=4, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=60144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=60112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 67:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 79:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 83:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 96:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 98:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 100:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 105:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 107:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 113:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 118:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 124:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 130:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 132:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 133:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=325 from oldreg=133, assigning class SSE_REGS to r325
  133: r325:SF=r325:SF/[frame:DI-0x38]
      REG_DEAD r133:SF
    Inserting insn reload before:
  315: r325:SF=r133:SF
    Inserting insn reload after:
  316: r134:SF=r325:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 136:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 142:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 144:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 147:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 1 in insn 149:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 153:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 154:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 155
	 Choosing alt 1 in insn 155:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 157:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 158:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 164:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 165:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 167:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 172:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 179:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 183:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 188:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 189:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 195:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 201:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 206:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 208:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 209:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 211:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 215:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 217:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 222:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 231:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 233:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 243:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 244:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 249:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 250:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 254:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 256:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 261:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 263:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 264:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 266:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 267
	 Choosing alt 1 in insn 267:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 271:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 273:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 280:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 281:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 286:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 287:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 289:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 294:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 295:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 296:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 10
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 3
   Insn 61: point = 0, n_alt = 0
   Insn 60: point = 0, n_alt = 4
   Insn 59: point = 0, n_alt = 0
  BB 9
   Insn 308: point = 0, n_alt = -1
   Insn 302: point = 0, n_alt = 0
   Insn 301: point = 0, n_alt = -1
   Insn 300: point = 1, n_alt = -1
   Insn 299: point = 2, n_alt = -1
   Insn 298: point = 3, n_alt = -1
   Insn 297: point = 4, n_alt = -1
   Insn 296: point = 5, n_alt = 3
   Insn 295: point = 6, n_alt = 3
   Insn 294: point = 7, n_alt = 3
   Insn 293: point = 8, n_alt = 3
   Insn 292: point = 9, n_alt = 3
  BB 8
   Insn 289: point = 10, n_alt = 8
   Insn 288: point = 11, n_alt = 3
   Insn 287: point = 12, n_alt = 2
   Insn 286: point = 14, n_alt = 3
   Insn 285: point = 16, n_alt = 0
   Insn 284: point = 18, n_alt = 0
   Insn 283: point = 20, n_alt = 3
   Insn 282: point = 21, n_alt = -1
   Insn 281: point = 23, n_alt = 2
   Insn 280: point = 25, n_alt = 7
   Insn 279: point = 27, n_alt = 3
   Insn 278: point = 28, n_alt = 3
   Insn 277: point = 30, n_alt = 0
   Insn 276: point = 32, n_alt = 0
   Insn 275: point = 34, n_alt = 0
   Insn 274: point = 36, n_alt = 3
   Insn 273: point = 37, n_alt = 7
   Insn 272: point = 39, n_alt = 3
   Insn 271: point = 40, n_alt = 3
   Insn 270: point = 42, n_alt = 0
   Insn 269: point = 44, n_alt = 0
   Insn 268: point = 46, n_alt = 3
   Insn 267: point = 47, n_alt = 1
   Insn 266: point = 49, n_alt = 7
   Insn 265: point = 50, n_alt = -1
   Insn 264: point = 52, n_alt = 2
   Insn 263: point = 54, n_alt = 7
   Insn 262: point = 56, n_alt = 3
   Insn 261: point = 57, n_alt = 3
   Insn 260: point = 59, n_alt = 0
   Insn 259: point = 61, n_alt = 0
   Insn 258: point = 63, n_alt = 0
   Insn 257: point = 65, n_alt = 3
   Insn 256: point = 66, n_alt = 7
   Insn 255: point = 68, n_alt = 3
   Insn 254: point = 69, n_alt = 3
   Insn 253: point = 71, n_alt = 0
   Insn 252: point = 73, n_alt = 0
   Insn 251: point = 75, n_alt = 3
   Insn 250: point = 76, n_alt = 8
   Insn 249: point = 77, n_alt = 7
   Insn 248: point = 78, n_alt = 0
   Insn 247: point = 80, n_alt = 0
   Insn 246: point = 82, n_alt = 0
   Insn 245: point = 84, n_alt = 3
   Insn 244: point = 85, n_alt = 8
   Insn 243: point = 86, n_alt = 7
   Insn 242: point = 87, n_alt = 0
   Insn 241: point = 89, n_alt = 0
   Insn 240: point = 91, n_alt = 0
   Insn 239: point = 93, n_alt = 3
  BB 7
   Insn 237: point = 94, n_alt = -1
   Insn 236: point = 94, n_alt = 0
   Insn 235: point = 95, n_alt = 0
   Insn 234: point = 97, n_alt = 3
   Insn 233: point = 98, n_alt = 8
   Insn 232: point = 99, n_alt = 3
   Insn 231: point = 100, n_alt = 2
   Insn 230: point = 102, n_alt = 3
   Insn 229: point = 104, n_alt = 0
   Insn 228: point = 106, n_alt = 0
   Insn 227: point = 108, n_alt = 3
   Insn 226: point = 109, n_alt = -1
   Insn 225: point = 111, n_alt = 2
   Insn 224: point = 113, n_alt = 7
   Insn 223: point = 115, n_alt = 3
   Insn 222: point = 116, n_alt = 3
   Insn 221: point = 118, n_alt = 0
   Insn 220: point = 120, n_alt = 0
   Insn 219: point = 122, n_alt = 0
   Insn 218: point = 124, n_alt = 3
   Insn 217: point = 125, n_alt = 7
   Insn 216: point = 127, n_alt = 3
   Insn 215: point = 128, n_alt = 3
   Insn 214: point = 130, n_alt = 0
   Insn 213: point = 132, n_alt = 0
   Insn 212: point = 134, n_alt = 3
   Insn 211: point = 135, n_alt = 1
   Insn 210: point = 137, n_alt = -1
   Insn 209: point = 139, n_alt = 2
   Insn 208: point = 141, n_alt = 7
   Insn 207: point = 143, n_alt = 3
   Insn 206: point = 144, n_alt = 3
   Insn 205: point = 146, n_alt = 0
   Insn 204: point = 148, n_alt = 0
   Insn 203: point = 150, n_alt = 0
   Insn 202: point = 152, n_alt = 3
   Insn 201: point = 153, n_alt = 7
   Insn 200: point = 155, n_alt = 3
   Insn 199: point = 156, n_alt = 3
   Insn 198: point = 158, n_alt = 0
   Insn 197: point = 160, n_alt = 0
   Insn 196: point = 162, n_alt = 3
   Insn 195: point = 163, n_alt = 8
   Insn 194: point = 164, n_alt = 7
   Insn 193: point = 165, n_alt = 0
   Insn 192: point = 167, n_alt = 0
   Insn 191: point = 169, n_alt = 0
   Insn 190: point = 171, n_alt = 3
   Insn 189: point = 172, n_alt = 8
   Insn 188: point = 173, n_alt = 7
   Insn 187: point = 174, n_alt = 0
   Insn 186: point = 176, n_alt = 0
   Insn 185: point = 178, n_alt = 0
   Insn 184: point = 180, n_alt = 3
   Insn 183: point = 181, n_alt = 8
   Insn 182: point = 182, n_alt = 3
   Insn 181: point = 183, n_alt = 2
   Insn 180: point = 185, n_alt = -1
   Insn 179: point = 187, n_alt = 2
   Insn 178: point = 189, n_alt = 7
   Insn 177: point = 191, n_alt = 3
   Insn 176: point = 192, n_alt = 7
   Insn 175: point = 194, n_alt = 3
   Insn 174: point = 195, n_alt = 1
   Insn 173: point = 197, n_alt = -1
   Insn 172: point = 199, n_alt = 2
   Insn 171: point = 201, n_alt = 7
   Insn 170: point = 203, n_alt = 3
   Insn 169: point = 204, n_alt = 7
   Insn 168: point = 206, n_alt = 3
   Insn 167: point = 207, n_alt = 8
   Insn 166: point = 208, n_alt = 7
   Insn 165: point = 209, n_alt = 8
   Insn 164: point = 210, n_alt = 7
  BB 10
   Insn 313: point = 211, n_alt = -1
  BB 5
   Insn 73: point = 211, n_alt = -1
   Insn 72: point = 211, n_alt = 0
   Insn 71: point = 212, n_alt = 0
   Insn 70: point = 213, n_alt = 0
  BB 6
   Insn 309: point = 214, n_alt = -1
   Insn 158: point = 214, n_alt = 1
   Insn 157: point = 214, n_alt = 8
   Insn 156: point = 215, n_alt = 3
   Insn 155: point = 216, n_alt = 1
   Insn 154: point = 218, n_alt = 7
   Insn 153: point = 219, n_alt = 3
   Insn 152: point = 221, n_alt = 0
   Insn 151: point = 223, n_alt = 0
   Insn 150: point = 224, n_alt = -1
   Insn 149: point = 226, n_alt = 1
   Insn 148: point = 228, n_alt = 2
   Insn 147: point = 230, n_alt = 1
   Insn 146: point = 232, n_alt = -1
   Insn 145: point = 234, n_alt = 2
   Insn 144: point = 236, n_alt = 7
   Insn 143: point = 238, n_alt = 3
   Insn 142: point = 239, n_alt = 3
   Insn 141: point = 241, n_alt = 0
   Insn 140: point = 243, n_alt = 0
   Insn 139: point = 245, n_alt = 0
   Insn 138: point = 246, n_alt = 7
   Insn 137: point = 248, n_alt = 3
   Insn 136: point = 249, n_alt = 3
   Insn 135: point = 251, n_alt = 0
   Insn 134: point = 253, n_alt = 0
   Insn 316: point = 254, n_alt = -1
	Hard reg 22 is preferable by r325 with profit 1
   Insn 133: point = 256, n_alt = 2
   Insn 315: point = 256, n_alt = -1
	Hard reg 22 is preferable by r325 with profit 1
	Hard reg 21 is preferable by r325 with profit 1
   Insn 132: point = 258, n_alt = 1
   Insn 131: point = 260, n_alt = -1
   Insn 130: point = 262, n_alt = 2
   Insn 129: point = 264, n_alt = 7
   Insn 128: point = 266, n_alt = 3
   Insn 127: point = 267, n_alt = 3
   Insn 126: point = 269, n_alt = 0
   Insn 125: point = 271, n_alt = 0
   Insn 124: point = 272, n_alt = 7
   Insn 123: point = 274, n_alt = 3
   Insn 122: point = 275, n_alt = 3
   Insn 121: point = 277, n_alt = 0
   Insn 120: point = 279, n_alt = 0
   Insn 119: point = 281, n_alt = 0
   Insn 118: point = 282, n_alt = 8
   Insn 117: point = 283, n_alt = 7
   Insn 116: point = 284, n_alt = 0
   Insn 115: point = 286, n_alt = 0
   Insn 114: point = 288, n_alt = 0
   Insn 113: point = 289, n_alt = 8
   Insn 112: point = 290, n_alt = 1
   Insn 111: point = 292, n_alt = 0
   Insn 110: point = 294, n_alt = 0
   Insn 109: point = 296, n_alt = 0
   Insn 108: point = 297, n_alt = -1
   Insn 107: point = 299, n_alt = 1
   Insn 106: point = 301, n_alt = 7
   Insn 105: point = 302, n_alt = 8
   Insn 104: point = 303, n_alt = 7
   Insn 103: point = 304, n_alt = 0
   Insn 102: point = 306, n_alt = 0
   Insn 101: point = 308, n_alt = 0
   Insn 100: point = 309, n_alt = 8
   Insn 99: point = 310, n_alt = 2
   Insn 98: point = 312, n_alt = 7
   Insn 97: point = 314, n_alt = 3
   Insn 96: point = 315, n_alt = 3
   Insn 95: point = 317, n_alt = 0
   Insn 94: point = 319, n_alt = 0
   Insn 93: point = 320, n_alt = 7
   Insn 92: point = 322, n_alt = 3
   Insn 91: point = 323, n_alt = 3
   Insn 90: point = 325, n_alt = 0
   Insn 89: point = 327, n_alt = 0
   Insn 88: point = 329, n_alt = 0
   Insn 87: point = 330, n_alt = 8
   Insn 86: point = 331, n_alt = 2
   Insn 85: point = 333, n_alt = 7
   Insn 84: point = 335, n_alt = 3
   Insn 83: point = 336, n_alt = 3
   Insn 82: point = 338, n_alt = 0
   Insn 81: point = 340, n_alt = 0
   Insn 80: point = 342, n_alt = 0
   Insn 79: point = 343, n_alt = 7
   Insn 78: point = 345, n_alt = 3
   Insn 77: point = 346, n_alt = 3
   Insn 76: point = 348, n_alt = 0
   Insn 75: point = 350, n_alt = 0
  BB 4
   Insn 68: point = 352, n_alt = 1
   Insn 67: point = 352, n_alt = 3
   Insn 66: point = 354, n_alt = 0
   Insn 65: point = 356, n_alt = 3
  BB 2
   Insn 57: point = 357, n_alt = -1
   Insn 56: point = 357, n_alt = 0
   Insn 55: point = 358, n_alt = 0
   Insn 54: point = 360, n_alt = 3
   Insn 50: point = 361, n_alt = 2
   Insn 49: point = 362, n_alt = 3
   Insn 48: point = 363, n_alt = -1
   Insn 46: point = 365, n_alt = 1
   Insn 44: point = 367, n_alt = 0
   Insn 45: point = 367, n_alt = 2
   Insn 43: point = 368, n_alt = 3
   Insn 42: point = 369, n_alt = 5
   Insn 41: point = 370, n_alt = 0
   Insn 40: point = 372, n_alt = 0
   Insn 39: point = 374, n_alt = 3
   Insn 35: point = 375, n_alt = 2
   Insn 34: point = 376, n_alt = 3
   Insn 33: point = 377, n_alt = -1
   Insn 31: point = 379, n_alt = 1
   Insn 29: point = 381, n_alt = 0
   Insn 30: point = 381, n_alt = 2
   Insn 28: point = 382, n_alt = 3
   Insn 27: point = 383, n_alt = 5
   Insn 26: point = 384, n_alt = 0
   Insn 25: point = 386, n_alt = 0
   Insn 24: point = 388, n_alt = 3
   Insn 20: point = 389, n_alt = 2
   Insn 19: point = 390, n_alt = 3
   Insn 18: point = 391, n_alt = -1
   Insn 16: point = 393, n_alt = 1
   Insn 14: point = 395, n_alt = 0
   Insn 15: point = 395, n_alt = 2
   Insn 13: point = 396, n_alt = 3
   Insn 12: point = 397, n_alt = 5
   Insn 11: point = 398, n_alt = 0
   Insn 10: point = 400, n_alt = 0
   Insn 9: point = 402, n_alt = 3
   Insn 5: point = 403, n_alt = 5
   Insn 4: point = 403, n_alt = 5
   Insn 3: point = 403, n_alt = 5
   Insn 2: point = 403, n_alt = 5
 r87: [399..400]
 r88: [390..391]
 r89: [389..403]
 r91: [385..386]
 r92: [376..377]
 r93: [375..403]
 r95: [371..372]
 r96: [362..363]
 r97: [361..403]
 r99: [357..358]
 r100: [353..354]
 r101: [347..348]
 r102: [344..346]
 r103: [332..343]
 r104: [339..340]
 r105: [337..338]
 r106: [334..336]
 r107: [332..333]
 r108: [326..327]
 r109: [324..325]
 r110: [321..323]
 r111: [311..320]
 r112: [316..317]
 r113: [313..315]
 r114: [311..312]
 r115: [305..306]
 r116: [302..304]
 r117: [298..299]
 r118: [291..297]
 r119: [293..294]
 r120: [289..292]
 r121: [289..290]
 r122: [285..286]
 r123: [282..284]
 r124: [278..279]
 r125: [276..277]
 r126: [273..275]
 r127: [263..272]
 r128: [268..269]
 r129: [265..267]
 r130: [263..264]
 r131: [261..262]
 r132: [259..260]
 r133: [257..258]
 r134: [227..254]
 r135: [250..251]
 r136: [247..249]
 r137: [235..246]
 r138: [242..243]
 r139: [240..241]
 r140: [237..239]
 r141: [235..236]
 r142: [233..234]
 r143: [231..232]
 r144: [229..230]
 r145: [227..228]
 r146: [225..226]
 r147: [217..224]
 r148: [220..221]
 r149: [214..219]
 r150: [214..216]
 r151: [200..204]
 r152: [200..201]
 r153: [198..199]
 r154: [196..197]
 r155: [184..195]
 r156: [188..192]
 r157: [188..189]
 r158: [186..187]
 r159: [184..185]
 r160: [181..183]
 r161: [177..178]
 r162: [175..176]
 r163: [172..174]
 r164: [168..169]
 r165: [166..167]
 r166: [163..165]
 r167: [159..160]
 r168: [157..158]
 r169: [154..156]
 r170: [140..153]
 r171: [149..150]
 r172: [147..148]
 r173: [145..146]
 r174: [142..144]
 r175: [140..141]
 r176: [138..139]
 r177: [136..137]
 r178: [101..135]
 r179: [131..132]
 r180: [129..130]
 r181: [126..128]
 r182: [112..125]
 r183: [121..122]
 r184: [119..120]
 r185: [117..118]
 r186: [114..116]
 r187: [112..113]
 r188: [110..111]
 r189: [101..109]
 r190: [105..106]
 r191: [103..104]
 r192: [98..102]
 r193: [98..100]
 r194: [94..95]
 r195: [90..91]
 r196: [88..89]
 r197: [85..87]
 r198: [81..82]
 r199: [79..80]
 r200: [76..78]
 r201: [72..73]
 r202: [70..71]
 r203: [67..69]
 r204: [53..66]
 r205: [62..63]
 r206: [60..61]
 r207: [58..59]
 r208: [55..57]
 r209: [53..54]
 r210: [51..52]
 r211: [48..50]
 r212: [13..47]
 r213: [43..44]
 r214: [41..42]
 r215: [38..40]
 r216: [24..37]
 r217: [33..34]
 r218: [31..32]
 r219: [29..30]
 r220: [26..28]
 r221: [24..25]
 r222: [22..23]
 r223: [13..21]
 r224: [17..18]
 r225: [15..16]
 r226: [10..14]
 r227: [10..12]
 r228: [394..396]
 r229: [392..393]
 r233: [380..382]
 r234: [378..379]
 r238: [366..368]
 r239: [364..365]
 r243: [211..352]
 r244: [211..212]
 r245: [401..402]
 r246: [397..398]
 r247: [394..395]
 r248: [387..388]
 r249: [383..384]
 r250: [380..381]
 r251: [373..374]
 r252: [369..370]
 r253: [366..367]
 r254: [359..360]
 r255: [355..356]
 r256: [349..350]
 r257: [344..345]
 r258: [341..342]
 r259: [334..335]
 r260: [330..331]
 r261: [328..329]
 r262: [321..322]
 r263: [318..319]
 r264: [313..314]
 r265: [309..310]
 r266: [307..308]
 r267: [302..303]
 r268: [300..301]
 r269: [295..296]
 r270: [287..288]
 r271: [282..283]
 r272: [280..281]
 r273: [273..274]
 r274: [270..271]
 r275: [265..266]
 r276: [252..253]
 r277: [247..248]
 r278: [244..245]
 r279: [237..238]
 r280: [222..223]
 r281: [217..218]
 r282: [214..215]
 r283: [209..210]
 r284: [207..208]
 r285: [205..206]
 r286: [202..203]
 r287: [193..194]
 r288: [190..191]
 r289: [181..182]
 r290: [179..180]
 r291: [172..173]
 r292: [170..171]
 r293: [163..164]
 r294: [161..162]
 r295: [154..155]
 r296: [151..152]
 r297: [142..143]
 r298: [133..134]
 r299: [126..127]
 r300: [123..124]
 r301: [114..115]
 r302: [107..108]
 r303: [98..99]
 r304: [96..97]
 r305: [92..93]
 r306: [85..86]
 r307: [83..84]
 r308: [76..77]
 r309: [74..75]
 r310: [67..68]
 r311: [64..65]
 r312: [55..56]
 r313: [48..49]
 r314: [45..46]
 r315: [38..39]
 r316: [35..36]
 r317: [26..27]
 r318: [19..20]
 r319: [10..11]
 r320: [4..9]
 r321: [3..8]
 r322: [2..7]
 r323: [1..6]
 r324: [0..5]
 r325: [255..256]
Compressing live ranges: from 404 to 340 - 84%
Ranges after the compression:
 r87: [336..337]
 r88: [328..329]
 r89: [328..339]
 r91: [324..325]
 r92: [316..317]
 r93: [316..339]
 r95: [312..313]
 r96: [304..305]
 r97: [304..339]
 r99: [300..301]
 r100: [296..297]
 r101: [292..293]
 r102: [290..291]
 r103: [280..289]
 r104: [286..287]
 r105: [284..285]
 r106: [282..283]
 r107: [280..281]
 r108: [274..275]
 r109: [272..273]
 r110: [270..271]
 r111: [262..269]
 r112: [266..267]
 r113: [264..265]
 r114: [262..263]
 r115: [256..257]
 r116: [254..255]
 r117: [250..251]
 r118: [244..249]
 r119: [246..247]
 r120: [242..245]
 r121: [242..243]
 r122: [238..239]
 r123: [236..237]
 r124: [232..233]
 r125: [230..231]
 r126: [228..229]
 r127: [220..227]
 r128: [224..225]
 r129: [222..223]
 r130: [220..221]
 r131: [218..219]
 r132: [216..217]
 r133: [214..215]
 r134: [188..211]
 r135: [208..209]
 r136: [206..207]
 r137: [196..205]
 r138: [202..203]
 r139: [200..201]
 r140: [198..199]
 r141: [196..197]
 r142: [194..195]
 r143: [192..193]
 r144: [190..191]
 r145: [188..189]
 r146: [186..187]
 r147: [180..185]
 r148: [182..183]
 r149: [178..181]
 r150: [178..179]
 r151: [166..169]
 r152: [166..167]
 r153: [164..165]
 r154: [162..163]
 r155: [152..161]
 r156: [156..159]
 r157: [156..157]
 r158: [154..155]
 r159: [152..153]
 r160: [150..151]
 r161: [146..147]
 r162: [144..145]
 r163: [142..143]
 r164: [138..139]
 r165: [136..137]
 r166: [134..135]
 r167: [130..131]
 r168: [128..129]
 r169: [126..127]
 r170: [114..125]
 r171: [122..123]
 r172: [120..121]
 r173: [118..119]
 r174: [116..117]
 r175: [114..115]
 r176: [112..113]
 r177: [110..111]
 r178: [80..109]
 r179: [106..107]
 r180: [104..105]
 r181: [102..103]
 r182: [90..101]
 r183: [98..99]
 r184: [96..97]
 r185: [94..95]
 r186: [92..93]
 r187: [90..91]
 r188: [88..89]
 r189: [80..87]
 r190: [84..85]
 r191: [82..83]
 r192: [78..81]
 r193: [78..79]
 r194: [74..75]
 r195: [70..71]
 r196: [68..69]
 r197: [66..67]
 r198: [62..63]
 r199: [60..61]
 r200: [58..59]
 r201: [54..55]
 r202: [52..53]
 r203: [50..51]
 r204: [38..49]
 r205: [46..47]
 r206: [44..45]
 r207: [42..43]
 r208: [40..41]
 r209: [38..39]
 r210: [36..37]
 r211: [34..35]
 r212: [4..33]
 r213: [30..31]
 r214: [28..29]
 r215: [26..27]
 r216: [14..25]
 r217: [22..23]
 r218: [20..21]
 r219: [18..19]
 r220: [16..17]
 r221: [14..15]
 r222: [12..13]
 r223: [4..11]
 r224: [8..9]
 r225: [6..7]
 r226: [2..5]
 r227: [2..3]
 r228: [332..333]
 r229: [330..331]
 r233: [320..321]
 r234: [318..319]
 r238: [308..309]
 r239: [306..307]
 r243: [176..295]
 r244: [176..177]
 r245: [338..339]
 r246: [334..335]
 r247: [332..333]
 r248: [326..327]
 r249: [322..323]
 r250: [320..321]
 r251: [314..315]
 r252: [310..311]
 r253: [308..309]
 r254: [302..303]
 r255: [298..299]
 r256: [294..295]
 r257: [290..291]
 r258: [288..289]
 r259: [282..283]
 r260: [278..279]
 r261: [276..277]
 r262: [270..271]
 r263: [268..269]
 r264: [264..265]
 r265: [260..261]
 r266: [258..259]
 r267: [254..255]
 r268: [252..253]
 r269: [248..249]
 r270: [240..241]
 r271: [236..237]
 r272: [234..235]
 r273: [228..229]
 r274: [226..227]
 r275: [222..223]
 r276: [210..211]
 r277: [206..207]
 r278: [204..205]
 r279: [198..199]
 r280: [184..185]
 r281: [180..181]
 r282: [178..179]
 r283: [174..175]
 r284: [172..173]
 r285: [170..171]
 r286: [168..169]
 r287: [160..161]
 r288: [158..159]
 r289: [150..151]
 r290: [148..149]
 r291: [142..143]
 r292: [140..141]
 r293: [134..135]
 r294: [132..133]
 r295: [126..127]
 r296: [124..125]
 r297: [116..117]
 r298: [108..109]
 r299: [102..103]
 r300: [100..101]
 r301: [92..93]
 r302: [86..87]
 r303: [78..79]
 r304: [76..77]
 r305: [72..73]
 r306: [66..67]
 r307: [64..65]
 r308: [58..59]
 r309: [56..57]
 r310: [50..51]
 r311: [48..49]
 r312: [40..41]
 r313: [34..35]
 r314: [32..33]
 r315: [26..27]
 r316: [24..25]
 r317: [16..17]
 r318: [10..11]
 r319: [2..3]
 r320: [0..1]
 r321: [0..1]
 r322: [0..1]
 r323: [0..1]
 r324: [0..1]
 r325: [212..213]

********** Assignment #1: **********

	 Assigning to 325 (cl=SSE_REGS, orig=133, freq=3, tfirst=325, tfreq=3)...
	   Assign 22 to reload r325 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=60144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=60112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 49
changing reg in insn 55
changing reg in insn 56
changing reg in insn 66
changing reg in insn 67
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 86
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 99
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 112
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 113
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 130
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 145
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 157
changing reg in insn 155
changing reg in insn 157
changing reg in insn 169
changing reg in insn 172
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 174
changing reg in insn 181
changing reg in insn 176
changing reg in insn 179
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 195
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 201
changing reg in insn 209
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 211
changing reg in insn 231
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 217
changing reg in insn 217
changing reg in insn 225
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 231
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 233
changing reg in insn 231
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 256
changing reg in insn 256
changing reg in insn 264
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 267
changing reg in insn 287
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 273
changing reg in insn 273
changing reg in insn 281
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 287
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 289
changing reg in insn 287
changing reg in insn 289
changing reg in insn 13
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 46
changing reg in insn 48
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 54
changing reg in insn 55
changing reg in insn 65
changing reg in insn 66
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 143
changing reg in insn 144
changing reg in insn 151
changing reg in insn 152
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 207
changing reg in insn 208
changing reg in insn 212
changing reg in insn 213
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 239
changing reg in insn 240
changing reg in insn 243
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 262
changing reg in insn 263
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 279
changing reg in insn 280
changing reg in insn 283
changing reg in insn 284
changing reg in insn 288
changing reg in insn 289
changing reg in insn 292
changing reg in insn 297
changing reg in insn 293
changing reg in insn 298
changing reg in insn 294
changing reg in insn 299
changing reg in insn 295
changing reg in insn 300
changing reg in insn 296
changing reg in insn 301
deleting insn with uid = 18.
deleting insn with uid = 33.
deleting insn with uid = 48.
deleting insn with uid = 108.
deleting insn with uid = 131.
deleting insn with uid = 316.
deleting insn with uid = 146.
deleting insn with uid = 173.
deleting insn with uid = 180.
deleting insn with uid = 210.
deleting insn with uid = 226.
deleting insn with uid = 282.
deleting insn with uid = 298.
deleting insn with uid = 299.
deleting insn with uid = 300.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 302.


spline

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;;  ref usage 	r0={131d,131u} r1={26d,24u} r2={5d,3u} r4={5d,3u} r5={6d,4u} r6={1d,104u} r7={1d,12u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={48d,7u} r18={2d} r19={2d} r20={1d,1u,4e} r21={41d,41u} r22={19d,16u} r23={7d,4u} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={5d,1u} r38={4d} r39={3d} r40={3d} r41={1d} r42={1d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 786{431d,351u,4e} in 262{260 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 228 229 233 234 238 239 245 246 247 248 249 250 251 252 253 254
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])
        (reg:DI 5 di [ x ])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [5 xs+0 S8 A64])
        (reg:DI 4 si [ xs ])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [245]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":51 82 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [246])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":51 145 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ubound.24+0 S8 A64])
        (reg:DI 0 ax [246])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg:DI 0 ax [orig:228 size.25_148 ] [228])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ubound.24+0 S8 A64])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 15 13 14 2 (set (reg:DI 1 dx [247])
        (const_int 0 [0])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 14 15 16 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:228 size.25_148 ] [228])
            (const_int 0 [0]))) "../src/spline.f":51 4 {*cmpdi_ccno_1}
     (nil))
(insn 16 14 19 2 (set (reg:DI 0 ax [orig:229 size.25_149 ] [229])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:228 size.25_148 ] [228])
            (reg:DI 1 dx [247]))) "../src/spline.f":51 967 {*movdicc_noc}
     (nil))
(insn 19 16 20 2 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.173_2 ] [88])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 20 19 24 2 (set (reg:DI 42 r13 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 24 20 25 2 (set (reg/f:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [248]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":51 82 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [249])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":51 145 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.28+0 S8 A64])
        (reg:DI 0 ax [249])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 28 27 30 2 (set (reg:DI 0 ax [orig:233 size.29_154 ] [233])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.28+0 S8 A64])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 30 28 29 2 (set (reg:DI 1 dx [250])
        (const_int 0 [0])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 29 30 31 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:233 size.29_154 ] [233])
            (const_int 0 [0]))) "../src/spline.f":51 4 {*cmpdi_ccno_1}
     (nil))
(insn 31 29 34 2 (set (reg:DI 0 ax [orig:234 size.29_155 ] [234])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:233 size.29_154 ] [233])
            (reg:DI 1 dx [250]))) "../src/spline.f":51 967 {*movdicc_noc}
     (nil))
(insn 34 31 35 2 (set (reg:DI 39 r10 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.175_6 ] [92])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 35 34 39 2 (set (reg:DI 40 r11 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 39 35 40 2 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [251]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":51 82 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 0 ax [252])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":51 145 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.26+0 S8 A64])
        (reg:DI 0 ax [252])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 43 42 45 2 (set (reg:DI 0 ax [orig:238 size.27_160 ] [238])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.26+0 S8 A64])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 45 43 44 2 (set (reg:DI 1 dx [253])
        (const_int 0 [0])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 44 45 46 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:238 size.27_160 ] [238])
            (const_int 0 [0]))) "../src/spline.f":51 4 {*cmpdi_ccno_1}
     (nil))
(insn 46 44 49 2 (set (reg:DI 0 ax [orig:239 size.27_161 ] [239])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:238 size.27_160 ] [238])
            (reg:DI 1 dx [253]))) "../src/spline.f":51 967 {*movdicc_noc}
     (nil))
(insn 49 46 50 2 (set (reg:DI 37 r8 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.177_10 ] [96])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 50 49 54 2 (set (reg:DI 38 r9 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":51 81 {*movdi_internal}
     (nil))
(insn 54 50 55 2 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":69 81 {*movdi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [254]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":69 82 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 5001 [0x1389]))) "../src/spline.f":69 7 {*cmpsi_1}
     (nil))
(jump_insn 57 56 58 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "../src/spline.f":69 617 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 58 57 59 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 3 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "../src/spline.f":69 82 {*movsi_internal}
     (nil))
(insn 60 59 61 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*lC9") [flags 0x2]  <var_decl 0x1433b9b40 *lC9>)) "../src/spline.f":69 81 {*movdi_internal}
     (nil))
(call_insn 61 60 62 3 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/spline.f":69 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 62 61 63)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 243 255
(code_label 63 62 64 4 61 (nil) [1 uses])
(note 64 63 65 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 4 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":71 81 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [orig:100 _14 ] [100])
        (mem:SI (reg/f:DI 0 ax [255]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":71 82 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg:SI 2 cx [orig:243 _165 ] [243])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":71 217 {*addsi_1}
     (nil))
(insn 68 67 159 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":71 82 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 243

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 243
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 243
;; lr  def 	 17 [flags] 244
(code_label 159 68 69 5 63 (nil) [1 uses])
(note 69 159 70 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (reg:SI 2 cx [orig:243 _165 ] [243]))) "../src/spline.f":71 7 {*cmpsi_1}
     (nil))
(insn 71 70 72 5 (set (reg:QI 0 ax [orig:244 _167 ] [244])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":71 613 {*setcc_qi}
     (nil))
(insn 72 71 73 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:244 _167 ] [244])
            (const_int 0 [0]))) "../src/spline.f":71 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 73 72 74 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 312)
            (pc))) "../src/spline.f":71 617 {*jcc_1}
     (nil)
 -> 312)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 243

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 243
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282
(note 74 73 75 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 6 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":72 82 {*movsi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [256]))) "../src/spline.f":72 145 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 6 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":72 218 {*adddi_1}
     (nil))
(insn 78 77 79 6 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":72 81 {*movdi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [257])) [3 *s_168(D) S4 A32])) "../src/spline.f":72 127 {*movsf_internal}
     (nil))
(insn 80 79 81 6 (set (reg:SI 0 ax [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":72 82 {*movsi_internal}
     (nil))
(insn 81 80 82 6 (parallel [
            (set (reg:SI 0 ax [orig:104 _18 ] [104])
                (plus:SI (reg:SI 0 ax [258])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":72 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 82 81 83 6 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [orig:104 _18 ] [104]))) "../src/spline.f":72 145 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":72 218 {*adddi_1}
     (nil))
(insn 84 83 85 6 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":72 81 {*movdi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:SF 22 xmm1 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [259])) [3 *s_168(D) S4 A32])) "../src/spline.f":72 127 {*movsf_internal}
     (nil))
(insn 86 85 87 6 (set (reg:SF 21 xmm0 [260])
        (minus:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])
            (reg:SF 22 xmm1 [orig:107 _21 ] [107]))) "../src/spline.f":72 805 {*fop_sf_1}
     (nil))
(insn 87 86 88 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 dsm+0 S4 A32])
        (reg:SF 21 xmm0 [260])) "../src/spline.f":72 127 {*movsf_internal}
     (nil))
(insn 88 87 89 6 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":73 82 {*movsi_internal}
     (nil))
(insn 89 88 90 6 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [261])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":73 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 90 89 91 6 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":73 145 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 6 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":73 218 {*adddi_1}
     (nil))
(insn 92 91 93 6 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":73 81 {*movdi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:SF 21 xmm0 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [262])) [3 *s_168(D) S4 A32])) "../src/spline.f":73 127 {*movsf_internal}
     (nil))
(insn 94 93 95 6 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":73 82 {*movsi_internal}
     (nil))
(insn 95 94 96 6 (set (reg:DI 0 ax [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 0 ax [263]))) "../src/spline.f":73 145 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 6 (parallel [
            (set (reg:DI 1 dx [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":73 218 {*adddi_1}
     (nil))
(insn 97 96 98 6 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":73 81 {*movdi_internal}
     (nil))
(insn 98 97 99 6 (set (reg:SF 22 xmm1 [orig:114 _28 ] [114])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [264])) [3 *s_168(D) S4 A32])) "../src/spline.f":73 127 {*movsf_internal}
     (nil))
(insn 99 98 100 6 (set (reg:SF 21 xmm0 [265])
        (minus:SF (reg:SF 21 xmm0 [orig:111 _25 ] [111])
            (reg:SF 22 xmm1 [orig:114 _28 ] [114]))) "../src/spline.f":73 805 {*fop_sf_1}
     (nil))
(insn 100 99 101 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dsp+0 S4 A32])
        (reg:SF 21 xmm0 [265])) "../src/spline.f":73 127 {*movsf_internal}
     (nil))
(insn 101 100 102 6 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":74 82 {*movsi_internal}
     (nil))
(insn 102 101 103 6 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [266]))) "../src/spline.f":74 145 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 6 (parallel [
            (set (reg:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":74 218 {*adddi_1}
     (nil))
(insn 104 103 105 6 (set (reg:SF 21 xmm0 [267])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dsp+0 S4 A32])) "../src/spline.f":74 127 {*movsf_internal}
     (nil))
(insn 105 104 106 6 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40080 [0xffffffffffff6370])) [3 b S4 A32])
        (reg:SF 21 xmm0 [267])) "../src/spline.f":74 127 {*movsf_internal}
     (nil))
(insn 106 105 107 6 (set (reg:SF 21 xmm0 [268])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 dsm+0 S4 A32])) "../src/spline.f":75 127 {*movsf_internal}
     (nil))
(insn 107 106 109 6 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (plus:SF (reg:SF 21 xmm0 [268])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [3 dsp+0 S4 A32]))) "../src/spline.f":75 802 {*fop_sf_comm}
     (nil))
(insn 109 107 110 6 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":75 82 {*movsi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:DI 0 ax [orig:119 _33 ] [119])
        (sign_extend:DI (reg:SI 0 ax [269]))) "../src/spline.f":75 145 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 6 (parallel [
            (set (reg:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _33 ] [119])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":75 218 {*adddi_1}
     (nil))
(insn 112 111 113 6 (set (reg:SF 21 xmm0 [orig:121 _35 ] [121])
        (plus:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (reg:SF 21 xmm0 [orig:118 _32 ] [118]))) "../src/spline.f":75 802 {*fop_sf_comm}
     (nil))
(insn 113 112 114 6 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20064 [0xffffffffffffb1a0])) [3 a S4 A32])
        (reg:SF 21 xmm0 [orig:121 _35 ] [121])) "../src/spline.f":75 127 {*movsf_internal}
     (nil))
(insn 114 113 115 6 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":76 82 {*movsi_internal}
     (nil))
(insn 115 114 116 6 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [270]))) "../src/spline.f":76 145 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 6 (parallel [
            (set (reg:DI 0 ax [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":76 218 {*adddi_1}
     (nil))
(insn 117 116 118 6 (set (reg:SF 21 xmm0 [271])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 dsm+0 S4 A32])) "../src/spline.f":76 127 {*movsf_internal}
     (nil))
(insn 118 117 119 6 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -60096 [0xffffffffffff1540])) [3 c S4 A32])
        (reg:SF 21 xmm0 [271])) "../src/spline.f":76 127 {*movsf_internal}
     (nil))
(insn 119 118 120 6 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":77 82 {*movsi_internal}
     (nil))
(insn 120 119 121 6 (parallel [
            (set (reg:SI 0 ax [orig:124 _38 ] [124])
                (plus:SI (reg:SI 0 ax [272])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 121 120 122 6 (set (reg:DI 0 ax [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 0 ax [orig:124 _38 ] [124]))) "../src/spline.f":77 145 {*extendsidi2_rex64}
     (nil))
(insn 122 121 123 6 (parallel [
            (set (reg:DI 1 dx [orig:126 _40 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 _39 ] [125])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 218 {*adddi_1}
     (nil))
(insn 123 122 124 6 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":77 81 {*movdi_internal}
     (nil))
(insn 124 123 125 6 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:126 _40 ] [126])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [273])) [3 *x_174(D) S4 A32])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 125 124 126 6 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":77 82 {*movsi_internal}
     (nil))
(insn 126 125 127 6 (set (reg:DI 0 ax [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 0 ax [274]))) "../src/spline.f":77 145 {*extendsidi2_rex64}
     (nil))
(insn 127 126 128 6 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 218 {*adddi_1}
     (nil))
(insn 128 127 129 6 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":77 81 {*movdi_internal}
     (nil))
(insn 129 128 130 6 (set (reg:SF 22 xmm1 [orig:130 _44 ] [130])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [275])) [3 *x_174(D) S4 A32])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 130 129 132 6 (set (reg:SF 21 xmm0 [orig:131 _45 ] [131])
        (minus:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [orig:130 _44 ] [130]))) "../src/spline.f":77 805 {*fop_sf_1}
     (nil))
(insn 132 130 315 6 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (mult:SF (reg:SF 21 xmm0 [orig:132 _46 ] [132])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [3 dsm+0 S4 A32]))) "../src/spline.f":77 802 {*fop_sf_comm}
     (nil))
(insn 315 132 133 6 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (reg:SF 21 xmm0 [orig:133 _47 ] [133])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 133 315 134 6 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (div:SF (reg:SF 22 xmm1 [orig:133 _47 ] [133])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [3 dsp+0 S4 A32]))) "../src/spline.f":77 805 {*fop_sf_1}
     (nil))
(insn 134 133 135 6 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":77 82 {*movsi_internal}
     (nil))
(insn 135 134 136 6 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [276]))) "../src/spline.f":77 145 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 6 (parallel [
            (set (reg:DI 1 dx [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 218 {*adddi_1}
     (nil))
(insn 137 136 138 6 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":77 81 {*movdi_internal}
     (nil))
(insn 138 137 139 6 (set (reg:SF 21 xmm0 [orig:137 _51 ] [137])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:136 _50 ] [136])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [277])) [3 *x_174(D) S4 A32])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 139 138 140 6 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":77 82 {*movsi_internal}
     (nil))
(insn 140 139 141 6 (parallel [
            (set (reg:SI 0 ax [orig:138 _52 ] [138])
                (plus:SI (reg:SI 0 ax [278])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 141 140 142 6 (set (reg:DI 0 ax [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 _52 ] [138]))) "../src/spline.f":77 145 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 6 (parallel [
            (set (reg:DI 1 dx [orig:140 _54 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 218 {*adddi_1}
     (nil))
(insn 143 142 144 6 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":77 81 {*movdi_internal}
     (nil))
(insn 144 143 145 6 (set (reg:SF 23 xmm2 [orig:141 _55 ] [141])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [279])) [3 *x_174(D) S4 A32])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 145 144 147 6 (set (reg:SF 21 xmm0 [orig:142 _56 ] [142])
        (minus:SF (reg:SF 21 xmm0 [orig:137 _51 ] [137])
            (reg:SF 23 xmm2 [orig:141 _55 ] [141]))) "../src/spline.f":77 805 {*fop_sf_1}
     (nil))
(insn 147 145 148 6 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (mult:SF (reg:SF 21 xmm0 [orig:143 _57 ] [143])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [3 dsp+0 S4 A32]))) "../src/spline.f":77 802 {*fop_sf_comm}
     (nil))
(insn 148 147 149 6 (set (reg:SF 21 xmm0 [orig:145 _59 ] [145])
        (div:SF (reg:SF 21 xmm0 [orig:144 _58 ] [144])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [3 dsm+0 S4 A32]))) "../src/spline.f":77 805 {*fop_sf_1}
     (nil))
(insn 149 148 150 6 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (plus:SF (reg:SF 21 xmm0 [orig:145 _59 ] [145])
            (reg:SF 22 xmm1 [orig:134 _48 ] [134]))) "../src/spline.f":77 802 {*fop_sf_comm}
     (nil))
(insn 150 149 151 6 (set (reg:SF 22 xmm1 [orig:147 _61 ] [147])
        (reg:SF 21 xmm0 [orig:146 _60 ] [146])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 151 150 152 6 (set (reg:SI 0 ax [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":77 82 {*movsi_internal}
     (nil))
(insn 152 151 153 6 (set (reg:DI 0 ax [orig:148 _62 ] [148])
        (sign_extend:DI (reg:SI 0 ax [280]))) "../src/spline.f":77 145 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 6 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":77 218 {*adddi_1}
     (nil))
(insn 154 153 155 6 (set (reg:SF 21 xmm0 [281])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":77 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 155 154 156 6 (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
        (mult:SF (reg:SF 21 xmm0 [281])
            (reg:SF 22 xmm1 [orig:147 _61 ] [147]))) "../src/spline.f":77 802 {*fop_sf_comm}
     (nil))
(insn 156 155 157 6 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [5 xs+0 S8 A64])) "../src/spline.f":77 81 {*movdi_internal}
     (nil))
(insn 157 156 158 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [282])) [3 *xs_175(D) S4 A32])
        (reg:SF 21 xmm0 [orig:150 _64 ] [150])) "../src/spline.f":77 127 {*movsf_internal}
     (nil))
(insn 158 157 309 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":71 217 {*addsi_1}
     (nil))
(jump_insn 309 158 310 6 (set (pc)
        (label_ref 159)) "../src/spline.f":71 649 {jump}
     (nil)
 -> 159)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 243

(barrier 310 309 312)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 312 310 311 10 66 (nil) [1 uses])
(note 311 312 313 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 313 311 162 10 (const_int 0 [0]) "../src/spline.f":78 682 {nop}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 8, flags: (RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304
(code_label 162 313 163 7 62 (nil) [0 uses])
(note 163 162 164 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 7 (set (reg:SF 21 xmm0 [283])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":81 127 {*movsf_internal}
     (nil))
(insn 165 164 166 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20064 [0xffffffffffffb1a0])) [3 a+0 S4 A128])
        (reg:SF 21 xmm0 [283])) "../src/spline.f":81 127 {*movsf_internal}
     (nil))
(insn 166 165 167 7 (set (reg:SF 21 xmm0 [284])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":82 127 {*movsf_internal}
     (nil))
(insn 167 166 168 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60096 [0xffffffffffff1540])) [3 c+0 S4 A128])
        (reg:SF 21 xmm0 [284])) "../src/spline.f":82 127 {*movsf_internal}
     (nil))
(insn 168 167 169 7 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":83 81 {*movdi_internal}
     (nil))
(insn 169 168 170 7 (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
        (mem:SF (plus:DI (reg/f:DI 0 ax [285])
                (const_int 4 [0x4])) [3 *x_174(D)+4 S4 A32])) "../src/spline.f":83 127 {*movsf_internal}
     (nil))
(insn 170 169 171 7 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":83 81 {*movdi_internal}
     (nil))
(insn 171 170 172 7 (set (reg:SF 22 xmm1 [orig:152 _66 ] [152])
        (mem:SF (reg/f:DI 0 ax [286]) [3 *x_174(D)+0 S4 A32])) "../src/spline.f":83 127 {*movsf_internal}
     (nil))
(insn 172 171 174 7 (set (reg:SF 21 xmm0 [orig:153 _67 ] [153])
        (minus:SF (reg:SF 21 xmm0 [orig:151 _65 ] [151])
            (reg:SF 22 xmm1 [orig:152 _66 ] [152]))) "../src/spline.f":83 805 {*fop_sf_1}
     (nil))
(insn 174 172 175 7 (set (reg:SF 21 xmm0 [orig:155 _69 ] [155])
        (plus:SF (reg:SF 21 xmm0 [orig:154 _68 ] [154])
            (reg:SF 21 xmm0 [orig:154 _68 ] [154]))) "../src/spline.f":83 802 {*fop_sf_comm}
     (nil))
(insn 175 174 176 7 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":83 81 {*movdi_internal}
     (nil))
(insn 176 175 177 7 (set (reg:SF 22 xmm1 [orig:156 _70 ] [156])
        (mem:SF (plus:DI (reg/f:DI 0 ax [287])
                (const_int 4 [0x4])) [3 *s_168(D)+4 S4 A32])) "../src/spline.f":83 127 {*movsf_internal}
     (nil))
(insn 177 176 178 7 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":83 81 {*movdi_internal}
     (nil))
(insn 178 177 179 7 (set (reg:SF 23 xmm2 [orig:157 _71 ] [157])
        (mem:SF (reg/f:DI 0 ax [288]) [3 *s_168(D)+0 S4 A32])) "../src/spline.f":83 127 {*movsf_internal}
     (nil))
(insn 179 178 181 7 (set (reg:SF 22 xmm1 [orig:158 _72 ] [158])
        (minus:SF (reg:SF 22 xmm1 [orig:156 _70 ] [156])
            (reg:SF 23 xmm2 [orig:157 _71 ] [157]))) "../src/spline.f":83 805 {*fop_sf_1}
     (nil))
(insn 181 179 182 7 (set (reg:SF 21 xmm0 [orig:160 _74 ] [160])
        (div:SF (reg:SF 21 xmm0 [orig:155 _69 ] [155])
            (reg:SF 22 xmm1 [orig:159 _73 ] [159]))) "../src/spline.f":83 805 {*fop_sf_1}
     (nil))
(insn 182 181 183 7 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [5 xs+0 S8 A64])) "../src/spline.f":83 81 {*movdi_internal}
     (nil))
(insn 183 182 184 7 (set (mem:SF (reg/f:DI 0 ax [289]) [3 *xs_175(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:160 _74 ] [160])) "../src/spline.f":83 127 {*movsf_internal}
     (nil))
(insn 184 183 185 7 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":85 81 {*movdi_internal}
     (nil))
(insn 185 184 186 7 (set (reg:SI 0 ax [orig:161 _75 ] [161])
        (mem:SI (reg/f:DI 0 ax [290]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":85 82 {*movsi_internal}
     (nil))
(insn 186 185 187 7 (set (reg:DI 0 ax [orig:162 _76 ] [162])
        (sign_extend:DI (reg:SI 0 ax [orig:161 _75 ] [161]))) "../src/spline.f":85 145 {*extendsidi2_rex64}
     (nil))
(insn 187 186 188 7 (parallel [
            (set (reg:DI 0 ax [orig:163 _77 ] [163])
                (plus:DI (reg:DI 0 ax [orig:162 _76 ] [162])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":85 218 {*adddi_1}
     (nil))
(insn 188 187 189 7 (set (reg:SF 21 xmm0 [291])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":85 127 {*movsf_internal}
     (nil))
(insn 189 188 190 7 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:163 _77 ] [163])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40080 [0xffffffffffff6370])) [3 b S4 A32])
        (reg:SF 21 xmm0 [291])) "../src/spline.f":85 127 {*movsf_internal}
     (nil))
(insn 190 189 191 7 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":86 81 {*movdi_internal}
     (nil))
(insn 191 190 192 7 (set (reg:SI 0 ax [orig:164 _78 ] [164])
        (mem:SI (reg/f:DI 0 ax [292]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":86 82 {*movsi_internal}
     (nil))
(insn 192 191 193 7 (set (reg:DI 0 ax [orig:165 _79 ] [165])
        (sign_extend:DI (reg:SI 0 ax [orig:164 _78 ] [164]))) "../src/spline.f":86 145 {*extendsidi2_rex64}
     (nil))
(insn 193 192 194 7 (parallel [
            (set (reg:DI 0 ax [orig:166 _80 ] [166])
                (plus:DI (reg:DI 0 ax [orig:165 _79 ] [165])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":86 218 {*adddi_1}
     (nil))
(insn 194 193 195 7 (set (reg:SF 21 xmm0 [293])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":86 127 {*movsf_internal}
     (nil))
(insn 195 194 196 7 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:166 _80 ] [166])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20064 [0xffffffffffffb1a0])) [3 a S4 A32])
        (reg:SF 21 xmm0 [293])) "../src/spline.f":86 127 {*movsf_internal}
     (nil))
(insn 196 195 197 7 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 197 196 198 7 (set (reg:SI 0 ax [orig:167 _81 ] [167])
        (mem:SI (reg/f:DI 0 ax [294]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":87 82 {*movsi_internal}
     (nil))
(insn 198 197 199 7 (set (reg:DI 0 ax [orig:168 _82 ] [168])
        (sign_extend:DI (reg:SI 0 ax [orig:167 _81 ] [167]))) "../src/spline.f":87 145 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 7 (parallel [
            (set (reg:DI 1 dx [orig:169 _83 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 _82 ] [168])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 218 {*adddi_1}
     (nil))
(insn 200 199 201 7 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 201 200 202 7 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:169 _83 ] [169])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [295])) [3 *x_174(D) S4 A32])) "../src/spline.f":87 127 {*movsf_internal}
     (nil))
(insn 202 201 203 7 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 203 202 204 7 (set (reg:SI 0 ax [orig:171 _85 ] [171])
        (mem:SI (reg/f:DI 0 ax [296]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":87 82 {*movsi_internal}
     (nil))
(insn 204 203 205 7 (parallel [
            (set (reg:SI 0 ax [orig:172 _86 ] [172])
                (plus:SI (reg:SI 0 ax [orig:171 _85 ] [171])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 217 {*addsi_1}
     (nil))
(insn 205 204 206 7 (set (reg:DI 0 ax [orig:173 _87 ] [173])
        (sign_extend:DI (reg:SI 0 ax [orig:172 _86 ] [172]))) "../src/spline.f":87 145 {*extendsidi2_rex64}
     (nil))
(insn 206 205 207 7 (parallel [
            (set (reg:DI 1 dx [orig:174 _88 ] [174])
                (plus:DI (reg:DI 0 ax [orig:173 _87 ] [173])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 218 {*adddi_1}
     (nil))
(insn 207 206 208 7 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 208 207 209 7 (set (reg:SF 22 xmm1 [orig:175 _89 ] [175])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:174 _88 ] [174])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [297])) [3 *x_174(D) S4 A32])) "../src/spline.f":87 127 {*movsf_internal}
     (nil))
(insn 209 208 211 7 (set (reg:SF 21 xmm0 [orig:176 _90 ] [176])
        (minus:SF (reg:SF 21 xmm0 [orig:170 _84 ] [170])
            (reg:SF 22 xmm1 [orig:175 _89 ] [175]))) "../src/spline.f":87 805 {*fop_sf_1}
     (nil))
(insn 211 209 212 7 (set (reg:SF 21 xmm0 [orig:178 _92 ] [178])
        (plus:SF (reg:SF 21 xmm0 [orig:177 _91 ] [177])
            (reg:SF 21 xmm0 [orig:177 _91 ] [177]))) "../src/spline.f":87 802 {*fop_sf_comm}
     (nil))
(insn 212 211 213 7 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 213 212 214 7 (set (reg:SI 0 ax [orig:179 _93 ] [179])
        (mem:SI (reg/f:DI 0 ax [298]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":87 82 {*movsi_internal}
     (nil))
(insn 214 213 215 7 (set (reg:DI 0 ax [orig:180 _94 ] [180])
        (sign_extend:DI (reg:SI 0 ax [orig:179 _93 ] [179]))) "../src/spline.f":87 145 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 7 (parallel [
            (set (reg:DI 1 dx [orig:181 _95 ] [181])
                (plus:DI (reg:DI 0 ax [orig:180 _94 ] [180])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 218 {*adddi_1}
     (nil))
(insn 216 215 217 7 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 217 216 218 7 (set (reg:SF 22 xmm1 [orig:182 _96 ] [182])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:181 _95 ] [181])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [299])) [3 *s_168(D) S4 A32])) "../src/spline.f":87 127 {*movsf_internal}
     (nil))
(insn 218 217 219 7 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 219 218 220 7 (set (reg:SI 0 ax [orig:183 _97 ] [183])
        (mem:SI (reg/f:DI 0 ax [300]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":87 82 {*movsi_internal}
     (nil))
(insn 220 219 221 7 (parallel [
            (set (reg:SI 0 ax [orig:184 _98 ] [184])
                (plus:SI (reg:SI 0 ax [orig:183 _97 ] [183])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 217 {*addsi_1}
     (nil))
(insn 221 220 222 7 (set (reg:DI 0 ax [orig:185 _99 ] [185])
        (sign_extend:DI (reg:SI 0 ax [orig:184 _98 ] [184]))) "../src/spline.f":87 145 {*extendsidi2_rex64}
     (nil))
(insn 222 221 223 7 (parallel [
            (set (reg:DI 1 dx [orig:186 _100 ] [186])
                (plus:DI (reg:DI 0 ax [orig:185 _99 ] [185])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 218 {*adddi_1}
     (nil))
(insn 223 222 224 7 (set (reg/f:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 224 223 225 7 (set (reg:SF 23 xmm2 [orig:187 _101 ] [187])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:186 _100 ] [186])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [301])) [3 *s_168(D) S4 A32])) "../src/spline.f":87 127 {*movsf_internal}
     (nil))
(insn 225 224 227 7 (set (reg:SF 22 xmm1 [orig:188 _102 ] [188])
        (minus:SF (reg:SF 22 xmm1 [orig:182 _96 ] [182])
            (reg:SF 23 xmm2 [orig:187 _101 ] [187]))) "../src/spline.f":87 805 {*fop_sf_1}
     (nil))
(insn 227 225 228 7 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 228 227 229 7 (set (reg:SI 0 ax [orig:190 _104 ] [190])
        (mem:SI (reg/f:DI 0 ax [302]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":87 82 {*movsi_internal}
     (nil))
(insn 229 228 230 7 (set (reg:DI 0 ax [orig:191 _105 ] [191])
        (sign_extend:DI (reg:SI 0 ax [orig:190 _104 ] [190]))) "../src/spline.f":87 145 {*extendsidi2_rex64}
     (nil))
(insn 230 229 231 7 (parallel [
            (set (reg:DI 1 dx [orig:192 _106 ] [192])
                (plus:DI (reg:DI 0 ax [orig:191 _105 ] [191])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":87 218 {*adddi_1}
     (nil))
(insn 231 230 232 7 (set (reg:SF 21 xmm0 [orig:193 _107 ] [193])
        (div:SF (reg:SF 21 xmm0 [orig:178 _92 ] [178])
            (reg:SF 22 xmm1 [orig:189 _103 ] [189]))) "../src/spline.f":87 805 {*fop_sf_1}
     (nil))
(insn 232 231 233 7 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [5 xs+0 S8 A64])) "../src/spline.f":87 81 {*movdi_internal}
     (nil))
(insn 233 232 234 7 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:192 _106 ] [192])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [303])) [3 *xs_175(D) S4 A32])
        (reg:SF 21 xmm0 [orig:193 _107 ] [193])) "../src/spline.f":87 127 {*movsf_internal}
     (nil))
(insn 234 233 235 7 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":89 81 {*movdi_internal}
     (nil))
(insn 235 234 236 7 (set (reg:SI 0 ax [orig:194 _108 ] [194])
        (mem:SI (reg/f:DI 0 ax [304]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":89 82 {*movsi_internal}
     (nil))
(insn 236 235 237 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:194 _108 ] [194])
            (const_int 2 [0x2]))) "../src/spline.f":89 7 {*cmpsi_1}
     (nil))
(jump_insn 237 236 238 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 290)
            (pc))) "../src/spline.f":89 617 {*jcc_1}
     (nil)
 -> 290)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319
(note 238 237 239 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 8 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":92 81 {*movdi_internal}
     (nil))
(insn 240 239 241 8 (set (reg:SI 0 ax [orig:195 _109 ] [195])
        (mem:SI (reg/f:DI 0 ax [305]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":92 82 {*movsi_internal}
     (nil))
(insn 241 240 242 8 (set (reg:DI 0 ax [orig:196 _110 ] [196])
        (sign_extend:DI (reg:SI 0 ax [orig:195 _109 ] [195]))) "../src/spline.f":92 145 {*extendsidi2_rex64}
     (nil))
(insn 242 241 243 8 (parallel [
            (set (reg:DI 0 ax [orig:197 _111 ] [197])
                (plus:DI (reg:DI 0 ax [orig:196 _110 ] [196])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":92 218 {*adddi_1}
     (nil))
(insn 243 242 244 8 (set (reg:SF 21 xmm0 [306])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":92 127 {*movsf_internal}
     (nil))
(insn 244 243 245 8 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:197 _111 ] [197])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -40080 [0xffffffffffff6370])) [3 b S4 A32])
        (reg:SF 21 xmm0 [306])) "../src/spline.f":92 127 {*movsf_internal}
     (nil))
(insn 245 244 246 8 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":93 81 {*movdi_internal}
     (nil))
(insn 246 245 247 8 (set (reg:SI 0 ax [orig:198 _112 ] [198])
        (mem:SI (reg/f:DI 0 ax [307]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":93 82 {*movsi_internal}
     (nil))
(insn 247 246 248 8 (set (reg:DI 0 ax [orig:199 _113 ] [199])
        (sign_extend:DI (reg:SI 0 ax [orig:198 _112 ] [198]))) "../src/spline.f":93 145 {*extendsidi2_rex64}
     (nil))
(insn 248 247 249 8 (parallel [
            (set (reg:DI 0 ax [orig:200 _114 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 _113 ] [199])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":93 218 {*adddi_1}
     (nil))
(insn 249 248 250 8 (set (reg:SF 21 xmm0 [308])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":93 127 {*movsf_internal}
     (nil))
(insn 250 249 251 8 (set (mem:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:200 _114 ] [200])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -20064 [0xffffffffffffb1a0])) [3 a S4 A32])
        (reg:SF 21 xmm0 [308])) "../src/spline.f":93 127 {*movsf_internal}
     (nil))
(insn 251 250 252 8 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 252 251 253 8 (set (reg:SI 0 ax [orig:201 _115 ] [201])
        (mem:SI (reg/f:DI 0 ax [309]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":94 82 {*movsi_internal}
     (nil))
(insn 253 252 254 8 (set (reg:DI 0 ax [orig:202 _116 ] [202])
        (sign_extend:DI (reg:SI 0 ax [orig:201 _115 ] [201]))) "../src/spline.f":94 145 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 8 (parallel [
            (set (reg:DI 1 dx [orig:203 _117 ] [203])
                (plus:DI (reg:DI 0 ax [orig:202 _116 ] [202])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 218 {*adddi_1}
     (nil))
(insn 255 254 256 8 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 256 255 257 8 (set (reg:SF 21 xmm0 [orig:204 _118 ] [204])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:203 _117 ] [203])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [310])) [3 *x_174(D) S4 A32])) "../src/spline.f":94 127 {*movsf_internal}
     (nil))
(insn 257 256 258 8 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 258 257 259 8 (set (reg:SI 0 ax [orig:205 _119 ] [205])
        (mem:SI (reg/f:DI 0 ax [311]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":94 82 {*movsi_internal}
     (nil))
(insn 259 258 260 8 (parallel [
            (set (reg:SI 0 ax [orig:206 _120 ] [206])
                (plus:SI (reg:SI 0 ax [orig:205 _119 ] [205])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 217 {*addsi_1}
     (nil))
(insn 260 259 261 8 (set (reg:DI 0 ax [orig:207 _121 ] [207])
        (sign_extend:DI (reg:SI 0 ax [orig:206 _120 ] [206]))) "../src/spline.f":94 145 {*extendsidi2_rex64}
     (nil))
(insn 261 260 262 8 (parallel [
            (set (reg:DI 1 dx [orig:208 _122 ] [208])
                (plus:DI (reg:DI 0 ax [orig:207 _121 ] [207])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 218 {*adddi_1}
     (nil))
(insn 262 261 263 8 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60104 [0xffffffffffff1538])) [5 x+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 263 262 264 8 (set (reg:SF 22 xmm1 [orig:209 _123 ] [209])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [312])) [3 *x_174(D) S4 A32])) "../src/spline.f":94 127 {*movsf_internal}
     (nil))
(insn 264 263 265 8 (set (reg:SF 21 xmm0 [orig:210 _124 ] [210])
        (minus:SF (reg:SF 21 xmm0 [orig:204 _118 ] [204])
            (reg:SF 22 xmm1 [orig:209 _123 ] [209]))) "../src/spline.f":94 805 {*fop_sf_1}
     (nil))
(insn 265 264 266 8 (set (reg:SF 22 xmm1 [orig:211 _125 ] [211])
        (reg:SF 21 xmm0 [orig:210 _124 ] [210])) "../src/spline.f":94 127 {*movsf_internal}
     (nil))
(insn 266 265 267 8 (set (reg:SF 21 xmm0 [313])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":94 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 267 266 268 8 (set (reg:SF 21 xmm0 [orig:212 _126 ] [212])
        (mult:SF (reg:SF 21 xmm0 [313])
            (reg:SF 22 xmm1 [orig:211 _125 ] [211]))) "../src/spline.f":94 802 {*fop_sf_comm}
     (nil))
(insn 268 267 269 8 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 269 268 270 8 (set (reg:SI 0 ax [orig:213 _127 ] [213])
        (mem:SI (reg/f:DI 0 ax [314]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":94 82 {*movsi_internal}
     (nil))
(insn 270 269 271 8 (set (reg:DI 0 ax [orig:214 _128 ] [214])
        (sign_extend:DI (reg:SI 0 ax [orig:213 _127 ] [213]))) "../src/spline.f":94 145 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 8 (parallel [
            (set (reg:DI 1 dx [orig:215 _129 ] [215])
                (plus:DI (reg:DI 0 ax [orig:214 _128 ] [214])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 218 {*adddi_1}
     (nil))
(insn 272 271 273 8 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 273 272 274 8 (set (reg:SF 22 xmm1 [orig:216 _130 ] [216])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:215 _129 ] [215])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [315])) [3 *s_168(D) S4 A32])) "../src/spline.f":94 127 {*movsf_internal}
     (nil))
(insn 274 273 275 8 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 275 274 276 8 (set (reg:SI 0 ax [orig:217 _131 ] [217])
        (mem:SI (reg/f:DI 0 ax [316]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":94 82 {*movsi_internal}
     (nil))
(insn 276 275 277 8 (parallel [
            (set (reg:SI 0 ax [orig:218 _132 ] [218])
                (plus:SI (reg:SI 0 ax [orig:217 _131 ] [217])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 217 {*addsi_1}
     (nil))
(insn 277 276 278 8 (set (reg:DI 0 ax [orig:219 _133 ] [219])
        (sign_extend:DI (reg:SI 0 ax [orig:218 _132 ] [218]))) "../src/spline.f":94 145 {*extendsidi2_rex64}
     (nil))
(insn 278 277 279 8 (parallel [
            (set (reg:DI 1 dx [orig:220 _134 ] [220])
                (plus:DI (reg:DI 0 ax [orig:219 _133 ] [219])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 218 {*adddi_1}
     (nil))
(insn 279 278 280 8 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60120 [0xffffffffffff1528])) [5 s+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 280 279 281 8 (set (reg:SF 23 xmm2 [orig:221 _135 ] [221])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:220 _134 ] [220])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [317])) [3 *s_168(D) S4 A32])) "../src/spline.f":94 127 {*movsf_internal}
     (nil))
(insn 281 280 283 8 (set (reg:SF 22 xmm1 [orig:222 _136 ] [222])
        (minus:SF (reg:SF 22 xmm1 [orig:216 _130 ] [216])
            (reg:SF 23 xmm2 [orig:221 _135 ] [221]))) "../src/spline.f":94 805 {*fop_sf_1}
     (nil))
(insn 283 281 284 8 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 284 283 285 8 (set (reg:SI 0 ax [orig:224 _138 ] [224])
        (mem:SI (reg/f:DI 0 ax [318]) [1 *n_146(D)+0 S4 A32])) "../src/spline.f":94 82 {*movsi_internal}
     (nil))
(insn 285 284 286 8 (set (reg:DI 0 ax [orig:225 _139 ] [225])
        (sign_extend:DI (reg:SI 0 ax [orig:224 _138 ] [224]))) "../src/spline.f":94 145 {*extendsidi2_rex64}
     (nil))
(insn 286 285 287 8 (parallel [
            (set (reg:DI 1 dx [orig:226 _140 ] [226])
                (plus:DI (reg:DI 0 ax [orig:225 _139 ] [225])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":94 218 {*adddi_1}
     (nil))
(insn 287 286 288 8 (set (reg:SF 21 xmm0 [orig:227 _141 ] [227])
        (div:SF (reg:SF 21 xmm0 [orig:212 _126 ] [212])
            (reg:SF 22 xmm1 [orig:223 _137 ] [223]))) "../src/spline.f":94 805 {*fop_sf_1}
     (nil))
(insn 288 287 289 8 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [5 xs+0 S8 A64])) "../src/spline.f":94 81 {*movdi_internal}
     (nil))
(insn 289 288 290 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:226 _140 ] [226])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [319])) [3 *xs_175(D) S4 A32])
        (reg:SF 21 xmm0 [orig:227 _141 ] [227])) "../src/spline.f":94 127 {*movsf_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 320 321 322 323 324
(code_label 290 289 291 9 64 (nil) [1 uses])
(note 291 290 292 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 293 9 (set (reg:DI 5 di [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60128 [0xffffffffffff1520])) [6 n+0 S8 A64])) "../src/spline.f":98 81 {*movdi_internal}
     (nil))
(insn 293 292 294 9 (set (reg:DI 2 cx [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60112 [0xffffffffffff1530])) [5 xs+0 S8 A64])) "../src/spline.f":98 81 {*movdi_internal}
     (nil))
(insn 294 293 295 9 (parallel [
            (set (reg:DI 1 dx [322])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -60096 [0xffffffffffff1540])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":98 218 {*adddi_1}
     (nil))
(insn 295 294 296 9 (parallel [
            (set (reg:DI 4 si [323])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -40080 [0xffffffffffff6370])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":98 218 {*adddi_1}
     (nil))
(insn 296 295 297 9 (parallel [
            (set (reg:DI 0 ax [324])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -20064 [0xffffffffffffb1a0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":98 218 {*adddi_1}
     (nil))
(insn 297 296 301 9 (set (reg:DI 37 r8)
        (reg:DI 5 di [320])) "../src/spline.f":98 81 {*movdi_internal}
     (nil))
(insn 301 297 302 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [324])) "../src/spline.f":98 81 {*movdi_internal}
     (nil))
(call_insn 302 301 308 9 (call (mem:QI (symbol_ref:DI ("trisol_") [flags 0x403]  <function_decl 0x1427e4c00 trisol>) [0 trisol S1 A8])
        (const_int 0 [0])) "../src/spline.f":98 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 308 302 314 9 (const_int 0 [0]) "../src/spline.f":100 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 314 308 0 NOTE_INSN_DELETED)

;; Function trisol (trisol_, funcdef_no=5, decl_uid=3679, cgraph_uid=5, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 66:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 87:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 94:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 100:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 116:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 124:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 126:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 1 in insn 132:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 136:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=258 from oldreg=123, assigning class SSE_REGS to r258
  136: r258:SF=r258:SF-r130:SF
      REG_DEAD r130:SF
      REG_DEAD r123:SF
    Inserting insn reload before:
  241: r258:SF=r123:SF
    Inserting insn reload after:
  242: r133:SF=r258:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 138:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 146:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 148:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 151:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 154
	 Choosing alt 1 in insn 154:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 157:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 158:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=259 from oldreg=136, assigning class SSE_REGS to r259
  158: r259:SF=r259:SF-r143:SF
      REG_DEAD r143:SF
      REG_DEAD r136:SF
    Inserting insn reload before:
  243: r259:SF=r136:SF
    Inserting insn reload after:
  244: r146:SF=r259:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 160:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 161:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 170:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 176:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 182:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 183:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 185:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 198:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 200:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 203:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 205:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 211:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 212
	 Choosing alt 1 in insn 212:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 215:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 216:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=260 from oldreg=162, assigning class SSE_REGS to r260
  216: r260:SF=r260:SF-r170:SF
      REG_DEAD r170:SF
      REG_DEAD r162:SF
    Inserting insn reload before:
  245: r260:SF=r162:SF
    Inserting insn reload after:
  246: r173:SF=r260:SF

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 218:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 9
EBB 5
EBB 6
EBB 7
EBB 10
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 229: point = 0, n_alt = -1
  BB 10
   Insn 239: point = 0, n_alt = -1
  BB 6
   Insn 194: point = 0, n_alt = -1
   Insn 193: point = 0, n_alt = 0
   Insn 192: point = 1, n_alt = 0
   Insn 191: point = 2, n_alt = 1
  BB 7
   Insn 232: point = 2, n_alt = -1
   Insn 219: point = 2, n_alt = 1
   Insn 218: point = 2, n_alt = 8
   Insn 217: point = 3, n_alt = 3
   Insn 246: point = 4, n_alt = -1
	Hard reg 21 is preferable by r260 with profit 1
   Insn 216: point = 6, n_alt = 2
   Insn 245: point = 7, n_alt = -1
	Hard reg 21 is preferable by r260 with profit 1
	Hard reg 22 is preferable by r260 with profit 1
   Insn 215: point = 9, n_alt = 3
   Insn 214: point = 11, n_alt = 0
   Insn 213: point = 13, n_alt = 0
   Insn 212: point = 14, n_alt = 1
   Insn 211: point = 16, n_alt = 7
   Insn 210: point = 18, n_alt = 3
   Insn 209: point = 19, n_alt = 3
   Insn 208: point = 21, n_alt = 0
   Insn 207: point = 23, n_alt = 0
   Insn 206: point = 25, n_alt = 0
   Insn 205: point = 26, n_alt = 7
   Insn 204: point = 28, n_alt = 3
   Insn 203: point = 29, n_alt = 3
   Insn 202: point = 31, n_alt = 0
   Insn 201: point = 33, n_alt = 0
   Insn 200: point = 34, n_alt = 7
   Insn 199: point = 36, n_alt = 3
   Insn 198: point = 37, n_alt = 3
   Insn 197: point = 39, n_alt = 0
   Insn 196: point = 41, n_alt = 0
  BB 5
   Insn 189: point = 42, n_alt = 1
   Insn 188: point = 43, n_alt = 0
   Insn 187: point = 45, n_alt = 0
   Insn 186: point = 47, n_alt = 3
   Insn 185: point = 48, n_alt = 8
   Insn 184: point = 49, n_alt = 3
   Insn 183: point = 50, n_alt = 2
   Insn 182: point = 52, n_alt = 3
   Insn 181: point = 54, n_alt = 0
   Insn 180: point = 56, n_alt = 0
   Insn 179: point = 58, n_alt = 3
   Insn 178: point = 59, n_alt = 7
   Insn 177: point = 61, n_alt = 3
   Insn 176: point = 62, n_alt = 3
   Insn 175: point = 64, n_alt = 0
   Insn 174: point = 66, n_alt = 0
   Insn 173: point = 68, n_alt = 3
   Insn 172: point = 69, n_alt = 7
   Insn 171: point = 71, n_alt = 3
   Insn 170: point = 72, n_alt = 3
   Insn 169: point = 74, n_alt = 0
   Insn 168: point = 76, n_alt = 0
   Insn 167: point = 78, n_alt = 3
  BB 9
   Insn 236: point = 79, n_alt = -1
  BB 3
   Insn 77: point = 79, n_alt = -1
   Insn 76: point = 79, n_alt = 0
   Insn 75: point = 80, n_alt = 0
   Insn 74: point = 81, n_alt = 0
  BB 4
   Insn 230: point = 82, n_alt = -1
   Insn 161: point = 82, n_alt = 1
   Insn 160: point = 82, n_alt = 8
   Insn 159: point = 83, n_alt = 3
   Insn 244: point = 84, n_alt = -1
	Hard reg 21 is preferable by r259 with profit 1
   Insn 158: point = 86, n_alt = 2
   Insn 243: point = 87, n_alt = -1
	Hard reg 21 is preferable by r259 with profit 1
	Hard reg 22 is preferable by r259 with profit 1
   Insn 157: point = 89, n_alt = 3
   Insn 156: point = 91, n_alt = 0
   Insn 155: point = 93, n_alt = 0
   Insn 154: point = 94, n_alt = 1
   Insn 153: point = 96, n_alt = 7
   Insn 152: point = 98, n_alt = 3
   Insn 151: point = 99, n_alt = 3
   Insn 150: point = 101, n_alt = 0
   Insn 149: point = 103, n_alt = 0
   Insn 148: point = 104, n_alt = 7
   Insn 147: point = 106, n_alt = 3
   Insn 146: point = 107, n_alt = 3
   Insn 145: point = 109, n_alt = 0
   Insn 144: point = 111, n_alt = 0
   Insn 143: point = 112, n_alt = 7
   Insn 142: point = 114, n_alt = 3
   Insn 141: point = 115, n_alt = 3
   Insn 140: point = 117, n_alt = 0
   Insn 139: point = 119, n_alt = 0
   Insn 138: point = 120, n_alt = 8
   Insn 137: point = 121, n_alt = 3
   Insn 242: point = 122, n_alt = -1
	Hard reg 21 is preferable by r258 with profit 1
   Insn 136: point = 124, n_alt = 2
   Insn 241: point = 125, n_alt = -1
	Hard reg 21 is preferable by r258 with profit 1
	Hard reg 22 is preferable by r258 with profit 1
   Insn 135: point = 127, n_alt = 3
   Insn 134: point = 129, n_alt = 0
   Insn 133: point = 131, n_alt = 0
   Insn 132: point = 132, n_alt = 1
   Insn 131: point = 134, n_alt = 7
   Insn 130: point = 136, n_alt = 3
   Insn 129: point = 137, n_alt = 3
   Insn 128: point = 139, n_alt = 0
   Insn 127: point = 141, n_alt = 0
   Insn 126: point = 142, n_alt = 7
   Insn 125: point = 144, n_alt = 3
   Insn 124: point = 145, n_alt = 3
   Insn 123: point = 147, n_alt = 0
   Insn 122: point = 149, n_alt = 0
   Insn 121: point = 150, n_alt = 7
   Insn 120: point = 152, n_alt = 3
   Insn 119: point = 153, n_alt = 3
   Insn 118: point = 155, n_alt = 0
   Insn 117: point = 157, n_alt = 0
   Insn 116: point = 158, n_alt = 8
   Insn 115: point = 159, n_alt = 3
   Insn 114: point = 160, n_alt = 2
   Insn 113: point = 162, n_alt = 3
   Insn 112: point = 164, n_alt = 0
   Insn 111: point = 166, n_alt = 0
   Insn 110: point = 167, n_alt = 7
   Insn 109: point = 169, n_alt = 3
   Insn 108: point = 170, n_alt = 3
   Insn 107: point = 172, n_alt = 0
   Insn 106: point = 174, n_alt = 0
   Insn 105: point = 175, n_alt = 7
   Insn 104: point = 177, n_alt = 3
   Insn 103: point = 178, n_alt = 3
   Insn 102: point = 180, n_alt = 0
   Insn 101: point = 182, n_alt = 0
   Insn 100: point = 183, n_alt = 8
   Insn 99: point = 184, n_alt = 3
   Insn 98: point = 185, n_alt = 2
   Insn 97: point = 187, n_alt = 3
   Insn 96: point = 189, n_alt = 0
   Insn 95: point = 191, n_alt = 0
   Insn 94: point = 192, n_alt = 7
   Insn 93: point = 194, n_alt = 3
   Insn 92: point = 195, n_alt = 3
   Insn 91: point = 197, n_alt = 0
   Insn 90: point = 199, n_alt = 0
   Insn 89: point = 200, n_alt = 7
   Insn 88: point = 202, n_alt = 3
   Insn 87: point = 203, n_alt = 3
   Insn 86: point = 205, n_alt = 0
   Insn 85: point = 207, n_alt = 0
   Insn 84: point = 208, n_alt = 1
   Insn 83: point = 209, n_alt = 0
   Insn 82: point = 211, n_alt = 0
  BB 2
   Insn 72: point = 213, n_alt = 1
   Insn 71: point = 213, n_alt = 0
   Insn 70: point = 215, n_alt = 3
   Insn 66: point = 216, n_alt = 2
   Insn 65: point = 217, n_alt = 3
   Insn 64: point = 218, n_alt = -1
   Insn 62: point = 220, n_alt = 1
   Insn 60: point = 222, n_alt = 0
   Insn 61: point = 222, n_alt = 2
   Insn 59: point = 223, n_alt = 3
   Insn 58: point = 224, n_alt = 5
   Insn 57: point = 225, n_alt = 0
   Insn 56: point = 227, n_alt = 0
   Insn 55: point = 229, n_alt = 3
   Insn 51: point = 230, n_alt = 2
   Insn 50: point = 231, n_alt = 3
   Insn 49: point = 232, n_alt = -1
   Insn 47: point = 234, n_alt = 1
   Insn 45: point = 236, n_alt = 0
   Insn 46: point = 236, n_alt = 2
   Insn 44: point = 237, n_alt = 3
   Insn 43: point = 238, n_alt = 5
   Insn 42: point = 239, n_alt = 0
   Insn 41: point = 241, n_alt = 0
   Insn 40: point = 243, n_alt = 3
   Insn 36: point = 244, n_alt = 2
   Insn 35: point = 245, n_alt = 3
   Insn 34: point = 246, n_alt = -1
   Insn 32: point = 248, n_alt = 1
   Insn 30: point = 250, n_alt = 0
   Insn 31: point = 250, n_alt = 2
   Insn 29: point = 251, n_alt = 3
   Insn 28: point = 252, n_alt = 5
   Insn 27: point = 253, n_alt = 0
   Insn 26: point = 255, n_alt = 0
   Insn 25: point = 257, n_alt = 3
   Insn 21: point = 258, n_alt = 5
   Insn 20: point = 259, n_alt = 5
   Insn 19: point = 260, n_alt = -1
   Insn 17: point = 262, n_alt = 1
   Insn 15: point = 264, n_alt = 0
   Insn 16: point = 264, n_alt = 2
   Insn 14: point = 265, n_alt = 3
   Insn 13: point = 266, n_alt = 5
   Insn 12: point = 267, n_alt = 0
   Insn 11: point = 269, n_alt = 0
   Insn 10: point = 271, n_alt = 3
   Insn 6: point = 272, n_alt = 5
   Insn 5: point = 272, n_alt = 5
   Insn 4: point = 272, n_alt = 5
   Insn 3: point = 272, n_alt = 5
   Insn 2: point = 272, n_alt = 5
 r87: [268..269]
 r88: [259..260]
 r89: [258..272]
 r91: [254..255]
 r92: [245..246]
 r93: [244..272]
 r95: [240..241]
 r96: [231..232]
 r97: [230..272]
 r99: [226..227]
 r100: [217..218]
 r101: [216..272]
 r103: [204..205]
 r104: [201..203]
 r105: [186..200]
 r106: [196..197]
 r107: [193..195]
 r108: [186..192]
 r109: [188..189]
 r110: [183..187]
 r111: [183..185]
 r112: [179..180]
 r113: [176..178]
 r114: [161..175]
 r115: [171..172]
 r116: [168..170]
 r117: [161..167]
 r118: [163..164]
 r119: [158..162]
 r120: [158..160]
 r121: [154..155]
 r122: [151..153]
 r123: [126..150]
 r124: [146..147]
 r125: [143..145]
 r126: [133..142]
 r127: [138..139]
 r128: [135..137]
 r129: [133..134]
 r130: [124..132]
 r131: [128..129]
 r132: [120..127]
 r133: [120..122]
 r134: [116..117]
 r135: [113..115]
 r136: [88..112]
 r137: [108..109]
 r138: [105..107]
 r139: [95..104]
 r140: [100..101]
 r141: [97..99]
 r142: [95..96]
 r143: [86..94]
 r144: [90..91]
 r145: [82..89]
 r146: [82..84]
 r147: [75..76]
 r148: [73..74]
 r149: [70..72]
 r150: [51..69]
 r151: [65..66]
 r152: [63..64]
 r153: [60..62]
 r154: [51..59]
 r155: [55..56]
 r156: [53..54]
 r157: [48..52]
 r158: [48..50]
 r159: [44..45]
 r160: [38..39]
 r161: [35..37]
 r162: [8..34]
 r163: [30..31]
 r164: [27..29]
 r165: [15..26]
 r166: [22..23]
 r167: [20..21]
 r168: [17..19]
 r169: [15..16]
 r170: [6..14]
 r171: [10..11]
 r172: [2..9]
 r173: [2..4]
 r174: [263..265]
 r175: [261..262]
 r179: [249..251]
 r180: [247..248]
 r184: [235..237]
 r185: [233..234]
 r189: [221..223]
 r190: [219..220]
 r194: [79..213]
 r195: [79..80]
 r196: [42..43]
 r197: [0..1]
 r198: [270..271]
 r199: [266..267]
 r200: [263..264]
 r201: [256..257]
 r202: [252..253]
 r203: [249..250]
 r204: [242..243]
 r205: [238..239]
 r206: [235..236]
 r207: [228..229]
 r208: [224..225]
 r209: [221..222]
 r210: [214..215]
 r213: [208..209]
 r214: [210..211]
 r215: [206..207]
 r216: [201..202]
 r217: [198..199]
 r218: [193..194]
 r219: [190..191]
 r220: [183..184]
 r221: [181..182]
 r222: [176..177]
 r223: [173..174]
 r224: [168..169]
 r225: [165..166]
 r226: [158..159]
 r227: [156..157]
 r228: [151..152]
 r229: [148..149]
 r230: [143..144]
 r231: [140..141]
 r232: [135..136]
 r233: [130..131]
 r234: [120..121]
 r235: [118..119]
 r236: [113..114]
 r237: [110..111]
 r238: [105..106]
 r239: [102..103]
 r240: [97..98]
 r241: [92..93]
 r242: [82..83]
 r243: [77..78]
 r244: [70..71]
 r245: [67..68]
 r246: [60..61]
 r247: [57..58]
 r248: [48..49]
 r249: [46..47]
 r250: [40..41]
 r251: [35..36]
 r252: [32..33]
 r253: [27..28]
 r254: [24..25]
 r255: [17..18]
 r256: [12..13]
 r257: [2..3]
 r258: [123..125]
 r259: [85..87]
 r260: [5..7]
Compressing live ranges: from 273 to 222 - 81%
Ranges after the compression:
 r87: [218..219]
 r88: [210..211]
 r89: [210..221]
 r91: [206..207]
 r92: [198..199]
 r93: [198..221]
 r95: [194..195]
 r96: [186..187]
 r97: [186..221]
 r99: [182..183]
 r100: [174..175]
 r101: [174..221]
 r103: [164..165]
 r104: [162..163]
 r105: [150..161]
 r106: [158..159]
 r107: [156..157]
 r108: [150..155]
 r109: [152..153]
 r110: [148..151]
 r111: [148..149]
 r112: [144..145]
 r113: [142..143]
 r114: [130..141]
 r115: [138..139]
 r116: [136..137]
 r117: [130..135]
 r118: [132..133]
 r119: [128..131]
 r120: [128..129]
 r121: [124..125]
 r122: [122..123]
 r123: [102..121]
 r124: [118..119]
 r125: [116..117]
 r126: [108..115]
 r127: [112..113]
 r128: [110..111]
 r129: [108..109]
 r130: [100..107]
 r131: [104..105]
 r132: [98..103]
 r133: [98..99]
 r134: [94..95]
 r135: [92..93]
 r136: [72..91]
 r137: [88..89]
 r138: [86..87]
 r139: [78..85]
 r140: [82..83]
 r141: [80..81]
 r142: [78..79]
 r143: [70..77]
 r144: [74..75]
 r145: [68..73]
 r146: [68..69]
 r147: [62..63]
 r148: [60..61]
 r149: [58..59]
 r150: [42..57]
 r151: [54..55]
 r152: [52..53]
 r153: [50..51]
 r154: [42..49]
 r155: [46..47]
 r156: [44..45]
 r157: [40..43]
 r158: [40..41]
 r159: [36..37]
 r160: [30..31]
 r161: [28..29]
 r162: [6..27]
 r163: [24..25]
 r164: [22..23]
 r165: [12..21]
 r166: [18..19]
 r167: [16..17]
 r168: [14..15]
 r169: [12..13]
 r170: [4..11]
 r171: [8..9]
 r172: [2..7]
 r173: [2..3]
 r174: [214..215]
 r175: [212..213]
 r179: [202..203]
 r180: [200..201]
 r184: [190..191]
 r185: [188..189]
 r189: [178..179]
 r190: [176..177]
 r194: [66..171]
 r195: [66..67]
 r196: [34..35]
 r197: [0..1]
 r198: [220..221]
 r199: [216..217]
 r200: [214..215]
 r201: [208..209]
 r202: [204..205]
 r203: [202..203]
 r204: [196..197]
 r205: [192..193]
 r206: [190..191]
 r207: [184..185]
 r208: [180..181]
 r209: [178..179]
 r210: [172..173]
 r213: [168..169]
 r214: [170..171]
 r215: [166..167]
 r216: [162..163]
 r217: [160..161]
 r218: [156..157]
 r219: [154..155]
 r220: [148..149]
 r221: [146..147]
 r222: [142..143]
 r223: [140..141]
 r224: [136..137]
 r225: [134..135]
 r226: [128..129]
 r227: [126..127]
 r228: [122..123]
 r229: [120..121]
 r230: [116..117]
 r231: [114..115]
 r232: [110..111]
 r233: [106..107]
 r234: [98..99]
 r235: [96..97]
 r236: [92..93]
 r237: [90..91]
 r238: [86..87]
 r239: [84..85]
 r240: [80..81]
 r241: [76..77]
 r242: [68..69]
 r243: [64..65]
 r244: [58..59]
 r245: [56..57]
 r246: [50..51]
 r247: [48..49]
 r248: [40..41]
 r249: [38..39]
 r250: [32..33]
 r251: [28..29]
 r252: [26..27]
 r253: [22..23]
 r254: [20..21]
 r255: [14..15]
 r256: [10..11]
 r257: [2..3]
 r258: [100..101]
 r259: [70..71]
 r260: [4..5]

********** Assignment #1: **********

	 Assigning to 258 (cl=SSE_REGS, orig=123, freq=3, tfirst=258, tfreq=3)...
	   Assign 22 to reload r258 (freq=3)
	 Assigning to 259 (cl=SSE_REGS, orig=136, freq=3, tfirst=259, tfreq=3)...
	   Assign 22 to reload r259 (freq=3)
	 Assigning to 260 (cl=SSE_REGS, orig=162, freq=3, tfirst=260, tfreq=3)...
	   Assign 22 to reload r260 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 89
Changing spilled pseudos to memory in insn #20
Changing spilled pseudos to memory in insn #21
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 9
EBB 5
EBB 6
EBB 7
EBB 10
EBB 8

********** Pseudo live ranges #2: **********

  BB 8
   Insn 229: point = 0, n_alt = -1
  BB 10
   Insn 239: point = 0, n_alt = -1
  BB 6
   Insn 194: point = 0, n_alt = -1
   Insn 193: point = 0, n_alt = 0
   Insn 192: point = 1, n_alt = 0
   Insn 191: point = 2, n_alt = 1
  BB 7
   Insn 232: point = 2, n_alt = -1
   Insn 219: point = 2, n_alt = 1
   Insn 218: point = 2, n_alt = 8
   Insn 217: point = 3, n_alt = 3
   Insn 246: point = 4, n_alt = -1
   Insn 216: point = 6, n_alt = 2
   Insn 245: point = 7, n_alt = -1
   Insn 215: point = 9, n_alt = 3
   Insn 214: point = 11, n_alt = 0
   Insn 213: point = 13, n_alt = 0
   Insn 212: point = 14, n_alt = 1
   Insn 211: point = 16, n_alt = 7
   Insn 210: point = 18, n_alt = 3
   Insn 209: point = 19, n_alt = 3
   Insn 208: point = 21, n_alt = 0
   Insn 207: point = 23, n_alt = 0
   Insn 206: point = 25, n_alt = 0
   Insn 205: point = 26, n_alt = 7
   Insn 204: point = 28, n_alt = 3
   Insn 203: point = 29, n_alt = 3
   Insn 202: point = 31, n_alt = 0
   Insn 201: point = 33, n_alt = 0
   Insn 200: point = 34, n_alt = 7
   Insn 199: point = 36, n_alt = 3
   Insn 198: point = 37, n_alt = 3
   Insn 197: point = 39, n_alt = 0
   Insn 196: point = 41, n_alt = 0
  BB 5
   Insn 189: point = 42, n_alt = 1
   Insn 188: point = 43, n_alt = 0
   Insn 187: point = 45, n_alt = 0
   Insn 186: point = 47, n_alt = 3
   Insn 185: point = 48, n_alt = 8
   Insn 184: point = 49, n_alt = 3
   Insn 183: point = 50, n_alt = 2
   Insn 182: point = 52, n_alt = 3
   Insn 181: point = 54, n_alt = 0
   Insn 180: point = 56, n_alt = 0
   Insn 179: point = 58, n_alt = 3
   Insn 178: point = 59, n_alt = 7
   Insn 177: point = 61, n_alt = 3
   Insn 176: point = 62, n_alt = 3
   Insn 175: point = 64, n_alt = 0
   Insn 174: point = 66, n_alt = 0
   Insn 173: point = 68, n_alt = 3
   Insn 172: point = 69, n_alt = 7
   Insn 171: point = 71, n_alt = 3
   Insn 170: point = 72, n_alt = 3
   Insn 169: point = 74, n_alt = 0
   Insn 168: point = 76, n_alt = 0
   Insn 167: point = 78, n_alt = 3
  BB 9
   Insn 236: point = 79, n_alt = -1
  BB 3
   Insn 77: point = 79, n_alt = -1
   Insn 76: point = 79, n_alt = 0
   Insn 75: point = 80, n_alt = 0
   Insn 74: point = 81, n_alt = 0
  BB 4
   Insn 230: point = 82, n_alt = -1
   Insn 161: point = 82, n_alt = 1
   Insn 160: point = 82, n_alt = 8
   Insn 159: point = 83, n_alt = 3
   Insn 244: point = 84, n_alt = -1
   Insn 158: point = 86, n_alt = 2
   Insn 243: point = 87, n_alt = -1
   Insn 157: point = 89, n_alt = 3
   Insn 156: point = 91, n_alt = 0
   Insn 155: point = 93, n_alt = 0
   Insn 154: point = 94, n_alt = 1
   Insn 153: point = 96, n_alt = 7
   Insn 152: point = 98, n_alt = 3
   Insn 151: point = 99, n_alt = 3
   Insn 150: point = 101, n_alt = 0
   Insn 149: point = 103, n_alt = 0
   Insn 148: point = 104, n_alt = 7
   Insn 147: point = 106, n_alt = 3
   Insn 146: point = 107, n_alt = 3
   Insn 145: point = 109, n_alt = 0
   Insn 144: point = 111, n_alt = 0
   Insn 143: point = 112, n_alt = 7
   Insn 142: point = 114, n_alt = 3
   Insn 141: point = 115, n_alt = 3
   Insn 140: point = 117, n_alt = 0
   Insn 139: point = 119, n_alt = 0
   Insn 138: point = 120, n_alt = 8
   Insn 137: point = 121, n_alt = 3
   Insn 242: point = 122, n_alt = -1
   Insn 136: point = 124, n_alt = 2
   Insn 241: point = 125, n_alt = -1
   Insn 135: point = 127, n_alt = 3
   Insn 134: point = 129, n_alt = 0
   Insn 133: point = 131, n_alt = 0
   Insn 132: point = 132, n_alt = 1
   Insn 131: point = 134, n_alt = 7
   Insn 130: point = 136, n_alt = 3
   Insn 129: point = 137, n_alt = 3
   Insn 128: point = 139, n_alt = 0
   Insn 127: point = 141, n_alt = 0
   Insn 126: point = 142, n_alt = 7
   Insn 125: point = 144, n_alt = 3
   Insn 124: point = 145, n_alt = 3
   Insn 123: point = 147, n_alt = 0
   Insn 122: point = 149, n_alt = 0
   Insn 121: point = 150, n_alt = 7
   Insn 120: point = 152, n_alt = 3
   Insn 119: point = 153, n_alt = 3
   Insn 118: point = 155, n_alt = 0
   Insn 117: point = 157, n_alt = 0
   Insn 116: point = 158, n_alt = 8
   Insn 115: point = 159, n_alt = 3
   Insn 114: point = 160, n_alt = 2
   Insn 113: point = 162, n_alt = 3
   Insn 112: point = 164, n_alt = 0
   Insn 111: point = 166, n_alt = 0
   Insn 110: point = 167, n_alt = 7
   Insn 109: point = 169, n_alt = 3
   Insn 108: point = 170, n_alt = 3
   Insn 107: point = 172, n_alt = 0
   Insn 106: point = 174, n_alt = 0
   Insn 105: point = 175, n_alt = 7
   Insn 104: point = 177, n_alt = 3
   Insn 103: point = 178, n_alt = 3
   Insn 102: point = 180, n_alt = 0
   Insn 101: point = 182, n_alt = 0
   Insn 100: point = 183, n_alt = 8
   Insn 99: point = 184, n_alt = 3
   Insn 98: point = 185, n_alt = 2
   Insn 97: point = 187, n_alt = 3
   Insn 96: point = 189, n_alt = 0
   Insn 95: point = 191, n_alt = 0
   Insn 94: point = 192, n_alt = 7
   Insn 93: point = 194, n_alt = 3
   Insn 92: point = 195, n_alt = 3
   Insn 91: point = 197, n_alt = 0
   Insn 90: point = 199, n_alt = 0
   Insn 89: point = 200, n_alt = 7
   Insn 88: point = 202, n_alt = 3
   Insn 87: point = 203, n_alt = 3
   Insn 86: point = 205, n_alt = 0
   Insn 85: point = 207, n_alt = 0
   Insn 84: point = 208, n_alt = 1
   Insn 83: point = 209, n_alt = 0
   Insn 82: point = 211, n_alt = 0
  BB 2
   Insn 72: point = 213, n_alt = 1
   Insn 71: point = 213, n_alt = 0
   Insn 70: point = 215, n_alt = 3
   Insn 66: point = 216, n_alt = 2
   Insn 65: point = 217, n_alt = 3
   Insn 64: point = 218, n_alt = -1
   Insn 62: point = 220, n_alt = 1
   Insn 60: point = 222, n_alt = 0
   Insn 61: point = 222, n_alt = 2
   Insn 59: point = 223, n_alt = 3
   Insn 58: point = 224, n_alt = 5
   Insn 57: point = 225, n_alt = 0
   Insn 56: point = 227, n_alt = 0
   Insn 55: point = 229, n_alt = 3
   Insn 51: point = 230, n_alt = 2
   Insn 50: point = 231, n_alt = 3
   Insn 49: point = 232, n_alt = -1
   Insn 47: point = 234, n_alt = 1
   Insn 45: point = 236, n_alt = 0
   Insn 46: point = 236, n_alt = 2
   Insn 44: point = 237, n_alt = 3
   Insn 43: point = 238, n_alt = 5
   Insn 42: point = 239, n_alt = 0
   Insn 41: point = 241, n_alt = 0
   Insn 40: point = 243, n_alt = 3
   Insn 36: point = 244, n_alt = 2
   Insn 35: point = 245, n_alt = 3
   Insn 34: point = 246, n_alt = -1
   Insn 32: point = 248, n_alt = 1
   Insn 30: point = 250, n_alt = 0
   Insn 31: point = 250, n_alt = 2
   Insn 29: point = 251, n_alt = 3
   Insn 28: point = 252, n_alt = 5
   Insn 27: point = 253, n_alt = 0
   Insn 26: point = 255, n_alt = 0
   Insn 25: point = 257, n_alt = 3
   Insn 21: point = 258, n_alt = 5
   Insn 20: point = 258, n_alt = 5
   Insn 19: point = 259, n_alt = -1
   Insn 17: point = 261, n_alt = 1
   Insn 15: point = 263, n_alt = 0
   Insn 16: point = 263, n_alt = 2
   Insn 14: point = 264, n_alt = 3
   Insn 13: point = 265, n_alt = 5
   Insn 12: point = 266, n_alt = 0
   Insn 11: point = 268, n_alt = 0
   Insn 10: point = 270, n_alt = 3
   Insn 6: point = 271, n_alt = 5
   Insn 5: point = 271, n_alt = 5
   Insn 4: point = 271, n_alt = 5
   Insn 3: point = 271, n_alt = 5
   Insn 2: point = 271, n_alt = 5
 r87: [267..268]
 r88: [258..259]
 r91: [254..255]
 r92: [245..246]
 r93: [244..271]
 r95: [240..241]
 r96: [231..232]
 r97: [230..271]
 r99: [226..227]
 r100: [217..218]
 r101: [216..271]
 r103: [204..205]
 r104: [201..203]
 r105: [186..200]
 r106: [196..197]
 r107: [193..195]
 r108: [186..192]
 r109: [188..189]
 r110: [183..187]
 r111: [183..185]
 r112: [179..180]
 r113: [176..178]
 r114: [161..175]
 r115: [171..172]
 r116: [168..170]
 r117: [161..167]
 r118: [163..164]
 r119: [158..162]
 r120: [158..160]
 r121: [154..155]
 r122: [151..153]
 r123: [126..150]
 r124: [146..147]
 r125: [143..145]
 r126: [133..142]
 r127: [138..139]
 r128: [135..137]
 r129: [133..134]
 r130: [124..132]
 r131: [128..129]
 r132: [120..127]
 r133: [120..122]
 r134: [116..117]
 r135: [113..115]
 r136: [88..112]
 r137: [108..109]
 r138: [105..107]
 r139: [95..104]
 r140: [100..101]
 r141: [97..99]
 r142: [95..96]
 r143: [86..94]
 r144: [90..91]
 r145: [82..89]
 r146: [82..84]
 r147: [75..76]
 r148: [73..74]
 r149: [70..72]
 r150: [51..69]
 r151: [65..66]
 r152: [63..64]
 r153: [60..62]
 r154: [51..59]
 r155: [55..56]
 r156: [53..54]
 r157: [48..52]
 r158: [48..50]
 r159: [44..45]
 r160: [38..39]
 r161: [35..37]
 r162: [8..34]
 r163: [30..31]
 r164: [27..29]
 r165: [15..26]
 r166: [22..23]
 r167: [20..21]
 r168: [17..19]
 r169: [15..16]
 r170: [6..14]
 r171: [10..11]
 r172: [2..9]
 r173: [2..4]
 r174: [262..264]
 r175: [260..261]
 r179: [249..251]
 r180: [247..248]
 r184: [235..237]
 r185: [233..234]
 r189: [221..223]
 r190: [219..220]
 r194: [79..213]
 r195: [79..80]
 r196: [42..43]
 r197: [0..1]
 r198: [269..270]
 r199: [265..266]
 r200: [262..263]
 r201: [256..257]
 r202: [252..253]
 r203: [249..250]
 r204: [242..243]
 r205: [238..239]
 r206: [235..236]
 r207: [228..229]
 r208: [224..225]
 r209: [221..222]
 r210: [214..215]
 r213: [208..209]
 r214: [210..211]
 r215: [206..207]
 r216: [201..202]
 r217: [198..199]
 r218: [193..194]
 r219: [190..191]
 r220: [183..184]
 r221: [181..182]
 r222: [176..177]
 r223: [173..174]
 r224: [168..169]
 r225: [165..166]
 r226: [158..159]
 r227: [156..157]
 r228: [151..152]
 r229: [148..149]
 r230: [143..144]
 r231: [140..141]
 r232: [135..136]
 r233: [130..131]
 r234: [120..121]
 r235: [118..119]
 r236: [113..114]
 r237: [110..111]
 r238: [105..106]
 r239: [102..103]
 r240: [97..98]
 r241: [92..93]
 r242: [82..83]
 r243: [77..78]
 r244: [70..71]
 r245: [67..68]
 r246: [60..61]
 r247: [57..58]
 r248: [48..49]
 r249: [46..47]
 r250: [40..41]
 r251: [35..36]
 r252: [32..33]
 r253: [27..28]
 r254: [24..25]
 r255: [17..18]
 r256: [12..13]
 r257: [2..3]
 r258: [123..125]
 r259: [85..87]
 r260: [5..7]
Compressing live ranges: from 272 to 222 - 81%
Ranges after the compression:
 r87: [218..219]
 r88: [210..211]
 r91: [206..207]
 r92: [198..199]
 r93: [198..221]
 r95: [194..195]
 r96: [186..187]
 r97: [186..221]
 r99: [182..183]
 r100: [174..175]
 r101: [174..221]
 r103: [164..165]
 r104: [162..163]
 r105: [150..161]
 r106: [158..159]
 r107: [156..157]
 r108: [150..155]
 r109: [152..153]
 r110: [148..151]
 r111: [148..149]
 r112: [144..145]
 r113: [142..143]
 r114: [130..141]
 r115: [138..139]
 r116: [136..137]
 r117: [130..135]
 r118: [132..133]
 r119: [128..131]
 r120: [128..129]
 r121: [124..125]
 r122: [122..123]
 r123: [102..121]
 r124: [118..119]
 r125: [116..117]
 r126: [108..115]
 r127: [112..113]
 r128: [110..111]
 r129: [108..109]
 r130: [100..107]
 r131: [104..105]
 r132: [98..103]
 r133: [98..99]
 r134: [94..95]
 r135: [92..93]
 r136: [72..91]
 r137: [88..89]
 r138: [86..87]
 r139: [78..85]
 r140: [82..83]
 r141: [80..81]
 r142: [78..79]
 r143: [70..77]
 r144: [74..75]
 r145: [68..73]
 r146: [68..69]
 r147: [62..63]
 r148: [60..61]
 r149: [58..59]
 r150: [42..57]
 r151: [54..55]
 r152: [52..53]
 r153: [50..51]
 r154: [42..49]
 r155: [46..47]
 r156: [44..45]
 r157: [40..43]
 r158: [40..41]
 r159: [36..37]
 r160: [30..31]
 r161: [28..29]
 r162: [6..27]
 r163: [24..25]
 r164: [22..23]
 r165: [12..21]
 r166: [18..19]
 r167: [16..17]
 r168: [14..15]
 r169: [12..13]
 r170: [4..11]
 r171: [8..9]
 r172: [2..7]
 r173: [2..3]
 r174: [214..215]
 r175: [212..213]
 r179: [202..203]
 r180: [200..201]
 r184: [190..191]
 r185: [188..189]
 r189: [178..179]
 r190: [176..177]
 r194: [66..171]
 r195: [66..67]
 r196: [34..35]
 r197: [0..1]
 r198: [220..221]
 r199: [216..217]
 r200: [214..215]
 r201: [208..209]
 r202: [204..205]
 r203: [202..203]
 r204: [196..197]
 r205: [192..193]
 r206: [190..191]
 r207: [184..185]
 r208: [180..181]
 r209: [178..179]
 r210: [172..173]
 r213: [168..169]
 r214: [170..171]
 r215: [166..167]
 r216: [162..163]
 r217: [160..161]
 r218: [156..157]
 r219: [154..155]
 r220: [148..149]
 r221: [146..147]
 r222: [142..143]
 r223: [140..141]
 r224: [136..137]
 r225: [134..135]
 r226: [128..129]
 r227: [126..127]
 r228: [122..123]
 r229: [120..121]
 r230: [116..117]
 r231: [114..115]
 r232: [110..111]
 r233: [106..107]
 r234: [98..99]
 r235: [96..97]
 r236: [92..93]
 r237: [90..91]
 r238: [86..87]
 r239: [84..85]
 r240: [80..81]
 r241: [76..77]
 r242: [68..69]
 r243: [64..65]
 r244: [58..59]
 r245: [56..57]
 r246: [50..51]
 r247: [48..49]
 r248: [40..41]
 r249: [38..39]
 r250: [32..33]
 r251: [28..29]
 r252: [26..27]
 r253: [22..23]
 r254: [20..21]
 r255: [14..15]
 r256: [10..11]
 r257: [2..3]
 r258: [100..101]
 r259: [70..71]
 r260: [4..5]

********** Assignment #2: **********


********** Undoing inheritance #2: **********


********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 50
changing reg in insn 56
changing reg in insn 57
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 65
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 89
changing reg in insn 98
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 98
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 100
changing reg in insn 98
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 114
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 110
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 116
changing reg in insn 114
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 136
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 158
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 160
changing reg in insn 160
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 183
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 183
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 185
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 216
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 218
changing reg in insn 218
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 59
changing reg in insn 62
changing reg in insn 60
changing reg in insn 62
changing reg in insn 64
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 188
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 61
changing reg in insn 62
changing reg in insn 70
changing reg in insn 71
changing reg in insn 83
changing reg in insn 84
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 159
changing reg in insn 160
changing reg in insn 167
changing reg in insn 168
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 207
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 217
changing reg in insn 218
deleting insn with uid = 19.
deleting insn with uid = 34.
deleting insn with uid = 49.
deleting insn with uid = 64.
deleting insn with uid = 241.
deleting insn with uid = 243.
deleting insn with uid = 245.
starting the processing of deferred insns
ending the processing of deferred insns


trisol

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14]
;;  ref usage 	r0={96d,99u} r1={13d,13u} r2={15d,15u} r4={1d,1u} r5={1d,1u} r6={1d,83u} r7={1d,10u} r17={34d,8u} r20={1d,1u,2e} r21={16d,15u} r22={10d,9u} r23={4d,3u} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} 
;;    total ref usage 467{206d,259u,2e} in 191{191 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 93 97 101
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97 101
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 174 175 179 180 184 185 189 190 194 198 199 200 201 202 203 204 205 206 207 208 209 210
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [5 b+0 S8 A64])
        (reg:DI 4 si [ b ])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 c+0 S8 A64])
        (reg:DI 1 dx [ c ])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])
        (reg:DI 2 cx [ d ])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])
        (reg:DI 37 r8 [ kk ])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [198]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":231 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [199])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":231 145 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.34+0 S8 A64])
        (reg:DI 0 ax [199])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (set (reg:DI 0 ax [orig:174 size.35_95 ] [174])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.34+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 16 14 15 2 (set (reg:DI 1 dx [200])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 15 16 17 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:174 size.35_95 ] [174])
            (const_int 0 [0]))) "../src/spline.f":231 4 {*cmpdi_ccno_1}
     (nil))
(insn 17 15 20 2 (set (reg:DI 0 ax [orig:175 size.35_96 ] [175])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:174 size.35_95 ] [174])
            (reg:DI 1 dx [200]))) "../src/spline.f":231 967 {*movdicc_noc}
     (nil))
(insn 20 17 21 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [8 %sfp+-112 S8 A128])
        (reg:DI 0 ax [orig:88 size.179_2 ] [88])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 21 20 25 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [8 %sfp+-104 S8 A64])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 25 21 26 2 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [201]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":231 82 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 0 ax [202])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":231 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.30+0 S8 A64])
        (reg:DI 0 ax [202])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 29 28 31 2 (set (reg:DI 0 ax [orig:179 size.31_101 ] [179])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.30+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 31 29 30 2 (set (reg:DI 1 dx [203])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 30 31 32 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:179 size.31_101 ] [179])
            (const_int 0 [0]))) "../src/spline.f":231 4 {*cmpdi_ccno_1}
     (nil))
(insn 32 30 35 2 (set (reg:DI 0 ax [orig:180 size.31_102 ] [180])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:179 size.31_101 ] [179])
            (reg:DI 1 dx [203]))) "../src/spline.f":231 967 {*movdicc_noc}
     (nil))
(insn 35 32 36 2 (set (reg:DI 42 r13 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.181_6 ] [92])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 36 35 40 2 (set (reg:DI 43 r14 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 40 36 41 2 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [204]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":231 82 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 0 ax [205])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":231 145 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.36+0 S8 A64])
        (reg:DI 0 ax [205])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 44 43 46 2 (set (reg:DI 0 ax [orig:184 size.37_107 ] [184])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.36+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 46 44 45 2 (set (reg:DI 1 dx [206])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 45 46 47 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:184 size.37_107 ] [184])
            (const_int 0 [0]))) "../src/spline.f":231 4 {*cmpdi_ccno_1}
     (nil))
(insn 47 45 50 2 (set (reg:DI 0 ax [orig:185 size.37_108 ] [185])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:184 size.37_107 ] [184])
            (reg:DI 1 dx [206]))) "../src/spline.f":231 967 {*movdicc_noc}
     (nil))
(insn 50 47 51 2 (set (reg:DI 40 r11 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.183_10 ] [96])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 51 50 55 2 (set (reg:DI 41 r12 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 55 51 56 2 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [207]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":231 82 {*movsi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:DI 0 ax [208])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "../src/spline.f":231 145 {*extendsidi2_rex64}
     (nil))
(insn 58 57 59 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.32+0 S8 A64])
        (reg:DI 0 ax [208])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 59 58 61 2 (set (reg:DI 0 ax [orig:189 size.33_113 ] [189])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.32+0 S8 A64])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 61 59 60 2 (set (reg:DI 1 dx [209])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 60 61 62 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:189 size.33_113 ] [189])
            (const_int 0 [0]))) "../src/spline.f":231 4 {*cmpdi_ccno_1}
     (nil))
(insn 62 60 65 2 (set (reg:DI 0 ax [orig:190 size.33_114 ] [190])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:189 size.33_113 ] [189])
            (reg:DI 1 dx [209]))) "../src/spline.f":231 967 {*movdicc_noc}
     (nil))
(insn 65 62 66 2 (set (reg:DI 38 r9 [orig:101 _15 ] [101])
        (reg:DI 0 ax [orig:100 size.185_14 ] [100])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 66 65 70 2 (set (reg:DI 39 r10 [ _15+8 ])
        (const_int 0 [0])) "../src/spline.f":231 81 {*movdi_internal}
     (nil))
(insn 70 66 71 2 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":246 81 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (set (reg:SI 1 dx [orig:194 _118 ] [194])
        (mem:SI (reg/f:DI 0 ax [210]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":246 82 {*movsi_internal}
     (nil))
(insn 72 71 162 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":246 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 194

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 194
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 194
;; lr  def 	 17 [flags] 195
(code_label 162 72 73 3 69 (nil) [1 uses])
(note 73 162 74 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
            (reg:SI 1 dx [orig:194 _118 ] [194]))) "../src/spline.f":246 7 {*cmpsi_1}
     (nil))
(insn 75 74 76 3 (set (reg:QI 0 ax [orig:195 _120 ] [195])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":246 613 {*setcc_qi}
     (nil))
(insn 76 75 77 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:195 _120 ] [195])
            (const_int 0 [0]))) "../src/spline.f":246 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 77 76 78 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 235)
            (pc))) "../src/spline.f":246 617 {*jcc_1}
     (nil)
 -> 235)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 194

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 194
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
(note 78 77 82 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 82 78 83 4 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":247 82 {*movsi_internal}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg:SI 0 ax [213])
                (plus:SI (reg:SI 0 ax [214])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":247 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 84 83 85 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])
        (reg:SI 0 ax [213])) "../src/spline.f":247 82 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":248 82 {*movsi_internal}
     (nil))
(insn 86 85 87 4 (set (reg:DI 0 ax [orig:103 _17 ] [103])
        (sign_extend:DI (reg:SI 0 ax [215]))) "../src/spline.f":248 145 {*extendsidi2_rex64}
     (nil))
(insn 87 86 88 4 (parallel [
            (set (reg:DI 2 cx [orig:104 _18 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 _17 ] [103])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":248 218 {*adddi_1}
     (nil))
(insn 88 87 89 4 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 c+0 S8 A64])) "../src/spline.f":248 81 {*movdi_internal}
     (nil))
(insn 89 88 90 4 (set (reg:SF 21 xmm0 [orig:105 _19 ] [105])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:104 _18 ] [104])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [216])) [3 *c_122(D) S4 A32])) "../src/spline.f":248 127 {*movsf_internal}
     (nil))
(insn 90 89 91 4 (set (reg:SI 0 ax [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":248 82 {*movsi_internal}
     (nil))
(insn 91 90 92 4 (set (reg:DI 0 ax [orig:106 _20 ] [106])
        (sign_extend:DI (reg:SI 0 ax [217]))) "../src/spline.f":248 145 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 4 (parallel [
            (set (reg:DI 2 cx [orig:107 _21 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 _20 ] [106])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":248 218 {*adddi_1}
     (nil))
(insn 93 92 94 4 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 a+0 S8 A64])) "../src/spline.f":248 81 {*movdi_internal}
     (nil))
(insn 94 93 95 4 (set (reg:SF 22 xmm1 [orig:108 _22 ] [108])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:107 _21 ] [107])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [218])) [3 *a_123(D) S4 A32])) "../src/spline.f":248 127 {*movsf_internal}
     (nil))
(insn 95 94 96 4 (set (reg:SI 0 ax [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":248 82 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [219]))) "../src/spline.f":248 145 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg:DI 2 cx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":248 218 {*adddi_1}
     (nil))
(insn 98 97 99 4 (set (reg:SF 21 xmm0 [orig:111 _25 ] [111])
        (div:SF (reg:SF 21 xmm0 [orig:105 _19 ] [105])
            (reg:SF 22 xmm1 [orig:108 _22 ] [108]))) "../src/spline.f":248 805 {*fop_sf_1}
     (nil))
(insn 99 98 100 4 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 c+0 S8 A64])) "../src/spline.f":248 81 {*movdi_internal}
     (nil))
(insn 100 99 101 4 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [220])) [3 *c_122(D) S4 A32])
        (reg:SF 21 xmm0 [orig:111 _25 ] [111])) "../src/spline.f":248 127 {*movsf_internal}
     (nil))
(insn 101 100 102 4 (set (reg:SI 0 ax [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":249 82 {*movsi_internal}
     (nil))
(insn 102 101 103 4 (set (reg:DI 0 ax [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 0 ax [221]))) "../src/spline.f":249 145 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg:DI 2 cx [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":249 218 {*adddi_1}
     (nil))
(insn 104 103 105 4 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":249 81 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (set (reg:SF 21 xmm0 [orig:114 _28 ] [114])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:113 _27 ] [113])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [222])) [3 *d_125(D) S4 A32])) "../src/spline.f":249 127 {*movsf_internal}
     (nil))
(insn 106 105 107 4 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":249 82 {*movsi_internal}
     (nil))
(insn 107 106 108 4 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [223]))) "../src/spline.f":249 145 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 4 (parallel [
            (set (reg:DI 2 cx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":249 218 {*adddi_1}
     (nil))
(insn 109 108 110 4 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 a+0 S8 A64])) "../src/spline.f":249 81 {*movdi_internal}
     (nil))
(insn 110 109 111 4 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:116 _30 ] [116])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [224])) [3 *a_123(D) S4 A32])) "../src/spline.f":249 127 {*movsf_internal}
     (nil))
(insn 111 110 112 4 (set (reg:SI 0 ax [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":249 82 {*movsi_internal}
     (nil))
(insn 112 111 113 4 (set (reg:DI 0 ax [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 0 ax [225]))) "../src/spline.f":249 145 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 2 cx [orig:119 _33 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 _32 ] [118])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":249 218 {*adddi_1}
     (nil))
(insn 114 113 115 4 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (div:SF (reg:SF 21 xmm0 [orig:114 _28 ] [114])
            (reg:SF 22 xmm1 [orig:117 _31 ] [117]))) "../src/spline.f":249 805 {*fop_sf_1}
     (nil))
(insn 115 114 116 4 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":249 81 {*movdi_internal}
     (nil))
(insn 116 115 117 4 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:119 _33 ] [119])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [226])) [3 *d_125(D) S4 A32])
        (reg:SF 21 xmm0 [orig:120 _34 ] [120])) "../src/spline.f":249 127 {*movsf_internal}
     (nil))
(insn 117 116 118 4 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":250 82 {*movsi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DI 0 ax [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 0 ax [227]))) "../src/spline.f":250 145 {*extendsidi2_rex64}
     (nil))
(insn 119 118 120 4 (parallel [
            (set (reg:DI 2 cx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":250 218 {*adddi_1}
     (nil))
(insn 120 119 121 4 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 a+0 S8 A64])) "../src/spline.f":250 81 {*movdi_internal}
     (nil))
(insn 121 120 122 4 (set (reg:SF 22 xmm1 [orig:123 _37 ] [123])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:122 _36 ] [122])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [228])) [3 *a_123(D) S4 A32])) "../src/spline.f":250 127 {*movsf_internal}
     (nil))
(insn 122 121 123 4 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":250 82 {*movsi_internal}
     (nil))
(insn 123 122 124 4 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [229]))) "../src/spline.f":250 145 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 4 (parallel [
            (set (reg:DI 2 cx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":250 218 {*adddi_1}
     (nil))
(insn 125 124 126 4 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [5 b+0 S8 A64])) "../src/spline.f":250 81 {*movdi_internal}
     (nil))
(insn 126 125 127 4 (set (reg:SF 23 xmm2 [orig:126 _40 ] [126])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [230])) [3 *b_127(D) S4 A32])) "../src/spline.f":250 127 {*movsf_internal}
     (nil))
(insn 127 126 128 4 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":250 82 {*movsi_internal}
     (nil))
(insn 128 127 129 4 (set (reg:DI 0 ax [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 0 ax [231]))) "../src/spline.f":250 145 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 4 (parallel [
            (set (reg:DI 2 cx [orig:128 _42 ] [128])
                (plus:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":250 218 {*adddi_1}
     (nil))
(insn 130 129 131 4 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 c+0 S8 A64])) "../src/spline.f":250 81 {*movdi_internal}
     (nil))
(insn 131 130 132 4 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:128 _42 ] [128])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [232])) [3 *c_122(D) S4 A32])) "../src/spline.f":250 127 {*movsf_internal}
     (nil))
(insn 132 131 133 4 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (mult:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (reg:SF 23 xmm2 [orig:126 _40 ] [126]))) "../src/spline.f":250 802 {*fop_sf_comm}
     (nil))
(insn 133 132 134 4 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":250 82 {*movsi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DI 0 ax [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 0 ax [233]))) "../src/spline.f":250 145 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 4 (parallel [
            (set (reg:DI 2 cx [orig:132 _46 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 _45 ] [131])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":250 218 {*adddi_1}
     (nil))
(insn 136 135 242 4 (set (reg:SF 22 xmm1 [orig:123 _37 ] [123])
        (minus:SF (reg:SF 22 xmm1 [orig:123 _37 ] [123])
            (reg:SF 21 xmm0 [orig:130 _44 ] [130]))) "../src/spline.f":250 805 {*fop_sf_1}
     (nil))
(insn 242 136 137 4 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (reg:SF 22 xmm1 [orig:123 _37 ] [123])) "../src/spline.f":250 127 {*movsf_internal}
     (nil))
(insn 137 242 138 4 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 a+0 S8 A64])) "../src/spline.f":250 81 {*movdi_internal}
     (nil))
(insn 138 137 139 4 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:132 _46 ] [132])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [234])) [3 *a_123(D) S4 A32])
        (reg:SF 21 xmm0 [orig:133 _47 ] [133])) "../src/spline.f":250 127 {*movsf_internal}
     (nil))
(insn 139 138 140 4 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":251 82 {*movsi_internal}
     (nil))
(insn 140 139 141 4 (set (reg:DI 0 ax [orig:134 _48 ] [134])
        (sign_extend:DI (reg:SI 0 ax [235]))) "../src/spline.f":251 145 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 4 (parallel [
            (set (reg:DI 2 cx [orig:135 _49 ] [135])
                (plus:DI (reg:DI 0 ax [orig:134 _48 ] [134])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":251 218 {*adddi_1}
     (nil))
(insn 142 141 143 4 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":251 81 {*movdi_internal}
     (nil))
(insn 143 142 144 4 (set (reg:SF 22 xmm1 [orig:136 _50 ] [136])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:135 _49 ] [135])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [236])) [3 *d_125(D) S4 A32])) "../src/spline.f":251 127 {*movsf_internal}
     (nil))
(insn 144 143 145 4 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":251 82 {*movsi_internal}
     (nil))
(insn 145 144 146 4 (set (reg:DI 0 ax [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 0 ax [237]))) "../src/spline.f":251 145 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 4 (parallel [
            (set (reg:DI 2 cx [orig:138 _52 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 _51 ] [137])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":251 218 {*adddi_1}
     (nil))
(insn 147 146 148 4 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [5 b+0 S8 A64])) "../src/spline.f":251 81 {*movdi_internal}
     (nil))
(insn 148 147 149 4 (set (reg:SF 23 xmm2 [orig:139 _53 ] [139])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:138 _52 ] [138])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [238])) [3 *b_127(D) S4 A32])) "../src/spline.f":251 127 {*movsf_internal}
     (nil))
(insn 149 148 150 4 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 km+0 S4 A32])) "../src/spline.f":251 82 {*movsi_internal}
     (nil))
(insn 150 149 151 4 (set (reg:DI 0 ax [orig:140 _54 ] [140])
        (sign_extend:DI (reg:SI 0 ax [239]))) "../src/spline.f":251 145 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 4 (parallel [
            (set (reg:DI 2 cx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 _54 ] [140])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":251 218 {*adddi_1}
     (nil))
(insn 152 151 153 4 (set (reg/f:DI 0 ax [240])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":251 81 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:SF 21 xmm0 [orig:142 _56 ] [142])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:141 _55 ] [141])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [240])) [3 *d_125(D) S4 A32])) "../src/spline.f":251 127 {*movsf_internal}
     (nil))
(insn 154 153 155 4 (set (reg:SF 21 xmm0 [orig:143 _57 ] [143])
        (mult:SF (reg:SF 21 xmm0 [orig:142 _56 ] [142])
            (reg:SF 23 xmm2 [orig:139 _53 ] [139]))) "../src/spline.f":251 802 {*fop_sf_comm}
     (nil))
(insn 155 154 156 4 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":251 82 {*movsi_internal}
     (nil))
(insn 156 155 157 4 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [241]))) "../src/spline.f":251 145 {*extendsidi2_rex64}
     (nil))
(insn 157 156 158 4 (parallel [
            (set (reg:DI 2 cx [orig:145 _59 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":251 218 {*adddi_1}
     (nil))
(insn 158 157 244 4 (set (reg:SF 22 xmm1 [orig:136 _50 ] [136])
        (minus:SF (reg:SF 22 xmm1 [orig:136 _50 ] [136])
            (reg:SF 21 xmm0 [orig:143 _57 ] [143]))) "../src/spline.f":251 805 {*fop_sf_1}
     (nil))
(insn 244 158 159 4 (set (reg:SF 21 xmm0 [orig:146 _60 ] [146])
        (reg:SF 22 xmm1 [orig:136 _50 ] [136])) "../src/spline.f":251 127 {*movsf_internal}
     (nil))
(insn 159 244 160 4 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":251 81 {*movdi_internal}
     (nil))
(insn 160 159 161 4 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:145 _59 ] [145])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [242])) [3 *d_125(D) S4 A32])
        (reg:SF 21 xmm0 [orig:146 _60 ] [146])) "../src/spline.f":251 127 {*movsf_internal}
     (nil))
(insn 161 160 230 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":246 217 {*addsi_1}
     (nil))
(jump_insn 230 161 231 4 (set (pc)
        (label_ref 162)) "../src/spline.f":246 649 {jump}
     (nil)
 -> 162)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 194

(barrier 231 230 235)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 235 231 234 9 73 (nil) [1 uses])
(note 234 235 236 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 236 234 165 9 (const_int 0 [0]) "../src/spline.f":252 682 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 6, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 148 149 150 151 152 153 154 155 156 157 158 159 196 243 244 245 246 247 248 249
(code_label 165 236 166 5 68 (nil) [0 uses])
(note 166 165 167 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 5 (set (reg/f:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":254 81 {*movdi_internal}
     (nil))
(insn 168 167 169 5 (set (reg:SI 0 ax [orig:147 _61 ] [147])
        (mem:SI (reg/f:DI 0 ax [243]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":254 82 {*movsi_internal}
     (nil))
(insn 169 168 170 5 (set (reg:DI 0 ax [orig:148 _62 ] [148])
        (sign_extend:DI (reg:SI 0 ax [orig:147 _61 ] [147]))) "../src/spline.f":254 145 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 5 (parallel [
            (set (reg:DI 1 dx [orig:149 _63 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _62 ] [148])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":254 218 {*adddi_1}
     (nil))
(insn 171 170 172 5 (set (reg/f:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":254 81 {*movdi_internal}
     (nil))
(insn 172 171 173 5 (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:149 _63 ] [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [244])) [3 *d_125(D) S4 A32])) "../src/spline.f":254 127 {*movsf_internal}
     (nil))
(insn 173 172 174 5 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":254 81 {*movdi_internal}
     (nil))
(insn 174 173 175 5 (set (reg:SI 0 ax [orig:151 _65 ] [151])
        (mem:SI (reg/f:DI 0 ax [245]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":254 82 {*movsi_internal}
     (nil))
(insn 175 174 176 5 (set (reg:DI 0 ax [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 0 ax [orig:151 _65 ] [151]))) "../src/spline.f":254 145 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 5 (parallel [
            (set (reg:DI 1 dx [orig:153 _67 ] [153])
                (plus:DI (reg:DI 0 ax [orig:152 _66 ] [152])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":254 218 {*adddi_1}
     (nil))
(insn 177 176 178 5 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 a+0 S8 A64])) "../src/spline.f":254 81 {*movdi_internal}
     (nil))
(insn 178 177 179 5 (set (reg:SF 22 xmm1 [orig:154 _68 ] [154])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:153 _67 ] [153])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [246])) [3 *a_123(D) S4 A32])) "../src/spline.f":254 127 {*movsf_internal}
     (nil))
(insn 179 178 180 5 (set (reg/f:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":254 81 {*movdi_internal}
     (nil))
(insn 180 179 181 5 (set (reg:SI 0 ax [orig:155 _69 ] [155])
        (mem:SI (reg/f:DI 0 ax [247]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":254 82 {*movsi_internal}
     (nil))
(insn 181 180 182 5 (set (reg:DI 0 ax [orig:156 _70 ] [156])
        (sign_extend:DI (reg:SI 0 ax [orig:155 _69 ] [155]))) "../src/spline.f":254 145 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 5 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":254 218 {*adddi_1}
     (nil))
(insn 183 182 184 5 (set (reg:SF 21 xmm0 [orig:158 _72 ] [158])
        (div:SF (reg:SF 21 xmm0 [orig:150 _64 ] [150])
            (reg:SF 22 xmm1 [orig:154 _68 ] [154]))) "../src/spline.f":254 805 {*fop_sf_1}
     (nil))
(insn 184 183 185 5 (set (reg/f:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":254 81 {*movdi_internal}
     (nil))
(insn 185 184 186 5 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [248])) [3 *d_125(D) S4 A32])
        (reg:SF 21 xmm0 [orig:158 _72 ] [158])) "../src/spline.f":254 127 {*movsf_internal}
     (nil))
(insn 186 185 187 5 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [6 kk+0 S8 A64])) "../src/spline.f":256 81 {*movdi_internal}
     (nil))
(insn 187 186 188 5 (set (reg:SI 0 ax [orig:159 _73 ] [159])
        (mem:SI (reg/f:DI 0 ax [249]) [1 *kk_93(D)+0 S4 A32])) "../src/spline.f":256 82 {*movsi_internal}
     (nil))
(insn 188 187 189 5 (parallel [
            (set (reg:SI 0 ax [orig:196 _132 ] [196])
                (plus:SI (reg:SI 0 ax [orig:159 _73 ] [159])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":256 217 {*addsi_1}
     (nil))
(insn 189 188 220 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
        (reg:SI 0 ax [orig:196 _132 ] [196])) "../src/spline.f":256 82 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 197
(code_label 220 189 190 6 71 (nil) [1 uses])
(note 190 220 191 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 192 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
            (const_int 0 [0]))) "../src/spline.f":256 3 {*cmpsi_ccno_1}
     (nil))
(insn 192 191 193 6 (set (reg:QI 0 ax [orig:197 _134 ] [197])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) "../src/spline.f":256 613 {*setcc_qi}
     (nil))
(insn 193 192 194 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:197 _134 ] [197])
            (const_int 0 [0]))) "../src/spline.f":256 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 194 193 195 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 238)
            (pc))) "../src/spline.f":256 617 {*jcc_1}
     (nil)
 -> 238)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 10, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 162 163 164 165 166 167 168 169 170 171 172 173 250 251 252 253 254 255 256 257
(note 195 194 196 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 7 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":257 82 {*movsi_internal}
     (nil))
(insn 197 196 198 7 (set (reg:DI 0 ax [orig:160 _74 ] [160])
        (sign_extend:DI (reg:SI 0 ax [250]))) "../src/spline.f":257 145 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 7 (parallel [
            (set (reg:DI 1 dx [orig:161 _75 ] [161])
                (plus:DI (reg:DI 0 ax [orig:160 _74 ] [160])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":257 218 {*adddi_1}
     (nil))
(insn 199 198 200 7 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":257 81 {*movdi_internal}
     (nil))
(insn 200 199 201 7 (set (reg:SF 22 xmm1 [orig:162 _76 ] [162])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:161 _75 ] [161])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [251])) [3 *d_125(D) S4 A32])) "../src/spline.f":257 127 {*movsf_internal}
     (nil))
(insn 201 200 202 7 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":257 82 {*movsi_internal}
     (nil))
(insn 202 201 203 7 (set (reg:DI 0 ax [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 0 ax [252]))) "../src/spline.f":257 145 {*extendsidi2_rex64}
     (nil))
(insn 203 202 204 7 (parallel [
            (set (reg:DI 1 dx [orig:164 _78 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 _77 ] [163])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":257 218 {*adddi_1}
     (nil))
(insn 204 203 205 7 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 c+0 S8 A64])) "../src/spline.f":257 81 {*movdi_internal}
     (nil))
(insn 205 204 206 7 (set (reg:SF 23 xmm2 [orig:165 _79 ] [165])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:164 _78 ] [164])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [253])) [3 *c_122(D) S4 A32])) "../src/spline.f":257 127 {*movsf_internal}
     (nil))
(insn 206 205 207 7 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":257 82 {*movsi_internal}
     (nil))
(insn 207 206 208 7 (parallel [
            (set (reg:SI 0 ax [orig:166 _80 ] [166])
                (plus:SI (reg:SI 0 ax [254])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":257 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 208 207 209 7 (set (reg:DI 0 ax [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 0 ax [orig:166 _80 ] [166]))) "../src/spline.f":257 145 {*extendsidi2_rex64}
     (nil))
(insn 209 208 210 7 (parallel [
            (set (reg:DI 1 dx [orig:168 _82 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":257 218 {*adddi_1}
     (nil))
(insn 210 209 211 7 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":257 81 {*movdi_internal}
     (nil))
(insn 211 210 212 7 (set (reg:SF 21 xmm0 [orig:169 _83 ] [169])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:168 _82 ] [168])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [255])) [3 *d_125(D) S4 A32])) "../src/spline.f":257 127 {*movsf_internal}
     (nil))
(insn 212 211 213 7 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (mult:SF (reg:SF 21 xmm0 [orig:169 _83 ] [169])
            (reg:SF 23 xmm2 [orig:165 _79 ] [165]))) "../src/spline.f":257 802 {*fop_sf_comm}
     (nil))
(insn 213 212 214 7 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])) "../src/spline.f":257 82 {*movsi_internal}
     (nil))
(insn 214 213 215 7 (set (reg:DI 0 ax [orig:171 _85 ] [171])
        (sign_extend:DI (reg:SI 0 ax [256]))) "../src/spline.f":257 145 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 7 (parallel [
            (set (reg:DI 1 dx [orig:172 _86 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 _85 ] [171])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":257 218 {*adddi_1}
     (nil))
(insn 216 215 246 7 (set (reg:SF 22 xmm1 [orig:162 _76 ] [162])
        (minus:SF (reg:SF 22 xmm1 [orig:162 _76 ] [162])
            (reg:SF 21 xmm0 [orig:170 _84 ] [170]))) "../src/spline.f":257 805 {*fop_sf_1}
     (nil))
(insn 246 216 217 7 (set (reg:SF 21 xmm0 [orig:173 _87 ] [173])
        (reg:SF 22 xmm1 [orig:162 _76 ] [162])) "../src/spline.f":257 127 {*movsf_internal}
     (nil))
(insn 217 246 218 7 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 d+0 S8 A64])) "../src/spline.f":257 81 {*movdi_internal}
     (nil))
(insn 218 217 219 7 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:172 _86 ] [172])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [257])) [3 *d_125(D) S4 A32])
        (reg:SF 21 xmm0 [orig:173 _87 ] [173])) "../src/spline.f":257 127 {*movsf_internal}
     (nil))
(insn 219 218 232 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 k+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":256 217 {*addsi_1}
     (nil))
(jump_insn 232 219 233 7 (set (pc)
        (label_ref 220)) "../src/spline.f":256 649 {jump}
     (nil)
 -> 220)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 233 232 238)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 238 233 237 10 74 (nil) [1 uses])
(note 237 238 239 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 239 237 223 10 (const_int 0 [0]) "../src/spline.f":258 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 223 239 224 8 70 (nil) [0 uses])
(note 224 223 229 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 229 224 240 8 (const_int 0 [0]) "../src/spline.f":260 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 240 229 0 NOTE_INSN_DELETED)

;; Function splina (splina_, funcdef_no=6, decl_uid=3786, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 57:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 68:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 70:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 75:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 76:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 77:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 81:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 93:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 113:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 114:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 122:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 123:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 130:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 135:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 1 in insn 136:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 138:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 142:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 143:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 154:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 155:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 12
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 164: point = 0, n_alt = -1
   Insn 155: point = 0, n_alt = 8
   Insn 154: point = 1, n_alt = 7
   Insn 153: point = 2, n_alt = 3
   Insn 152: point = 3, n_alt = 3
   Insn 151: point = 5, n_alt = 0
   Insn 150: point = 7, n_alt = 0
   Insn 149: point = 9, n_alt = 3
  BB 12
   Insn 173: point = 10, n_alt = -1
  BB 3
   Insn 63: point = 10, n_alt = -1
   Insn 62: point = 10, n_alt = 0
   Insn 61: point = 11, n_alt = 0
   Insn 60: point = 12, n_alt = 0
  BB 10
   Insn 169: point = 13, n_alt = -1
   Insn 143: point = 13, n_alt = 1
   Insn 142: point = 13, n_alt = 8
   Insn 141: point = 14, n_alt = 7
  BB 8
   Insn 167: point = 16, n_alt = -1
   Insn 124: point = 16, n_alt = 1
   Insn 123: point = 16, n_alt = 8
   Insn 122: point = 17, n_alt = 7
   Insn 121: point = 18, n_alt = 3
   Insn 120: point = 19, n_alt = 3
   Insn 119: point = 21, n_alt = 0
   Insn 118: point = 23, n_alt = 0
  BB 6
   Insn 165: point = 25, n_alt = -1
   Insn 94: point = 25, n_alt = 1
   Insn 93: point = 25, n_alt = 8
   Insn 92: point = 26, n_alt = 7
   Insn 91: point = 27, n_alt = 3
   Insn 90: point = 28, n_alt = 3
   Insn 89: point = 30, n_alt = 0
   Insn 88: point = 32, n_alt = 0
  BB 9
   Insn 138: point = 34, n_alt = 8
   Insn 137: point = 35, n_alt = 3
   Insn 136: point = 36, n_alt = 1
   Insn 135: point = 38, n_alt = 7
   Insn 134: point = 39, n_alt = 3
   Insn 133: point = 41, n_alt = 0
   Insn 132: point = 43, n_alt = 0
   Insn 131: point = 44, n_alt = -1
   Insn 130: point = 46, n_alt = 1
   Insn 129: point = 48, n_alt = 7
  BB 7
   Insn 116: point = 50, n_alt = -1
   Insn 115: point = 50, n_alt = 1
   Insn 114: point = 50, n_alt = 8
   Insn 113: point = 51, n_alt = 2
   Insn 112: point = 53, n_alt = 7
   Insn 111: point = 54, n_alt = 8
   Insn 110: point = 55, n_alt = 2
   Insn 109: point = 57, n_alt = 7
   Insn 108: point = 59, n_alt = 3
   Insn 107: point = 60, n_alt = 3
   Insn 106: point = 62, n_alt = 0
   Insn 105: point = 64, n_alt = 0
   Insn 104: point = 65, n_alt = 7
   Insn 103: point = 67, n_alt = 3
   Insn 102: point = 68, n_alt = 3
   Insn 101: point = 70, n_alt = 0
   Insn 100: point = 72, n_alt = 0
   Insn 99: point = 74, n_alt = 0
  BB 5
   Insn 83: point = 76, n_alt = -1
   Insn 82: point = 76, n_alt = 1
   Insn 81: point = 77, n_alt = 7
  BB 4
   Insn 80: point = 79, n_alt = -1
   Insn 79: point = 79, n_alt = 1
   Insn 78: point = 80, n_alt = 7
   Insn 77: point = 81, n_alt = 8
   Insn 76: point = 82, n_alt = 2
   Insn 75: point = 84, n_alt = 7
   Insn 74: point = 86, n_alt = 3
   Insn 73: point = 87, n_alt = 3
   Insn 72: point = 89, n_alt = 0
   Insn 71: point = 91, n_alt = 0
   Insn 70: point = 92, n_alt = 7
   Insn 69: point = 94, n_alt = 3
   Insn 68: point = 95, n_alt = 3
   Insn 67: point = 97, n_alt = 0
   Insn 66: point = 99, n_alt = 0
   Insn 65: point = 101, n_alt = 0
  BB 2
   Insn 58: point = 103, n_alt = 1
   Insn 57: point = 103, n_alt = 3
   Insn 56: point = 105, n_alt = 0
   Insn 55: point = 107, n_alt = 3
   Insn 54: point = 108, n_alt = 1
   Insn 50: point = 108, n_alt = 2
   Insn 49: point = 109, n_alt = 3
   Insn 48: point = 110, n_alt = -1
   Insn 46: point = 112, n_alt = 1
   Insn 44: point = 114, n_alt = 0
   Insn 45: point = 114, n_alt = 2
   Insn 43: point = 115, n_alt = 3
   Insn 42: point = 116, n_alt = 5
   Insn 41: point = 117, n_alt = 0
   Insn 40: point = 119, n_alt = 0
   Insn 39: point = 121, n_alt = 3
   Insn 35: point = 122, n_alt = 2
   Insn 34: point = 123, n_alt = 3
   Insn 33: point = 124, n_alt = -1
   Insn 31: point = 126, n_alt = 1
   Insn 29: point = 128, n_alt = 0
   Insn 30: point = 128, n_alt = 2
   Insn 28: point = 129, n_alt = 3
   Insn 27: point = 130, n_alt = 5
   Insn 26: point = 131, n_alt = 0
   Insn 25: point = 133, n_alt = 0
   Insn 24: point = 135, n_alt = 3
   Insn 20: point = 136, n_alt = 2
   Insn 19: point = 137, n_alt = 3
   Insn 18: point = 138, n_alt = -1
   Insn 16: point = 140, n_alt = 1
   Insn 14: point = 142, n_alt = 0
   Insn 15: point = 142, n_alt = 2
   Insn 13: point = 143, n_alt = 3
   Insn 12: point = 144, n_alt = 5
   Insn 11: point = 145, n_alt = 0
   Insn 10: point = 147, n_alt = 0
   Insn 9: point = 149, n_alt = 3
   Insn 5: point = 150, n_alt = 5
   Insn 4: point = 150, n_alt = 5
   Insn 3: point = 150, n_alt = 5
   Insn 2: point = 150, n_alt = 5
 r87: [146..147]
 r88: [137..138]
 r89: [136..150]
 r91: [132..133]
 r92: [123..124]
 r93: [122..150]
 r95: [118..119]
 r96: [109..110]
 r97: [108..150]
 r99: [104..105]
 r100: [98..99]
 r101: [96..97]
 r102: [93..95]
 r103: [83..92]
 r104: [88..89]
 r105: [85..87]
 r106: [83..84]
 r107: [29..30]
 r108: [25..28]
 r109: [71..72]
 r110: [69..70]
 r111: [66..68]
 r112: [56..65]
 r113: [61..62]
 r114: [58..60]
 r115: [56..57]
 r116: [20..21]
 r117: [16..19]
 r118: [45..46]
 r119: [37..44]
 r120: [40..41]
 r121: [34..39]
 r122: [34..36]
 r123: [6..7]
 r124: [4..5]
 r125: [0..3]
 r126: [141..143]
 r127: [139..140]
 r131: [127..129]
 r132: [125..126]
 r136: [113..115]
 r137: [111..112]
 r141: [10..103]
 r142: [10..11]
 r143: [148..149]
 r144: [144..145]
 r145: [141..142]
 r146: [134..135]
 r147: [130..131]
 r148: [127..128]
 r149: [120..121]
 r150: [116..117]
 r151: [113..114]
 r152: [106..107]
 r153: [100..101]
 r154: [93..94]
 r155: [90..91]
 r156: [85..86]
 r157: [81..82]
 r158: [79..80]
 r159: [76..77]
 r160: [31..32]
 r161: [25..27]
 r162: [25..26]
 r163: [73..74]
 r164: [66..67]
 r165: [63..64]
 r166: [58..59]
 r167: [54..55]
 r168: [50..51]
 r169: [52..53]
 r170: [22..23]
 r171: [16..18]
 r172: [16..17]
 r173: [47..48]
 r174: [42..43]
 r175: [37..38]
 r176: [34..35]
 r177: [13..14]
 r178: [8..9]
 r179: [0..2]
 r180: [0..1]
Compressing live ranges: from 151 to 120 - 79%
Ranges after the compression:
 r87: [116..117]
 r88: [108..109]
 r89: [108..119]
 r91: [104..105]
 r92: [96..97]
 r93: [96..119]
 r95: [92..93]
 r96: [84..85]
 r97: [84..119]
 r99: [80..81]
 r100: [76..77]
 r101: [74..75]
 r102: [72..73]
 r103: [64..71]
 r104: [68..69]
 r105: [66..67]
 r106: [64..65]
 r107: [20..21]
 r108: [18..19]
 r109: [54..55]
 r110: [52..53]
 r111: [50..51]
 r112: [42..49]
 r113: [46..47]
 r114: [44..45]
 r115: [42..43]
 r116: [14..15]
 r117: [12..13]
 r118: [32..33]
 r119: [26..31]
 r120: [28..29]
 r121: [24..27]
 r122: [24..25]
 r123: [4..5]
 r124: [2..3]
 r125: [0..1]
 r126: [112..113]
 r127: [110..111]
 r131: [100..101]
 r132: [98..99]
 r136: [88..89]
 r137: [86..87]
 r141: [8..79]
 r142: [8..9]
 r143: [118..119]
 r144: [114..115]
 r145: [112..113]
 r146: [106..107]
 r147: [102..103]
 r148: [100..101]
 r149: [94..95]
 r150: [90..91]
 r151: [88..89]
 r152: [82..83]
 r153: [78..79]
 r154: [72..73]
 r155: [70..71]
 r156: [66..67]
 r157: [62..63]
 r158: [60..61]
 r159: [58..59]
 r160: [22..23]
 r161: [18..19]
 r162: [18..19]
 r163: [56..57]
 r164: [50..51]
 r165: [48..49]
 r166: [44..45]
 r167: [40..41]
 r168: [36..37]
 r169: [38..39]
 r170: [16..17]
 r171: [12..13]
 r172: [12..13]
 r173: [34..35]
 r174: [30..31]
 r175: [26..27]
 r176: [24..25]
 r177: [10..11]
 r178: [6..7]
 r179: [0..1]
 r180: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 49
changing reg in insn 56
changing reg in insn 57
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 76
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 110
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 123
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 138
changing reg in insn 136
changing reg in insn 138
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 155
changing reg in insn 13
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 46
changing reg in insn 48
changing reg in insn 57
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 55
changing reg in insn 56
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 99
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 123
changing reg in insn 122
changing reg in insn 123
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 149
changing reg in insn 150
changing reg in insn 153
changing reg in insn 155
changing reg in insn 154
changing reg in insn 155
deleting insn with uid = 18.
deleting insn with uid = 33.
deleting insn with uid = 48.
starting the processing of deferred insns
ending the processing of deferred insns


splina

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;;  ref usage 	r0={46d,48u} r1={6d,6u} r2={8d,8u} r4={1d,1u} r5={1d,1u} r6={1d,64u} r7={1d,12u} r17={20d,8u} r20={1d,1u,2e} r21={17d,16u} r22={4d,3u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} 
;;    total ref usage 290{120d,168u,2e} in 119{119 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 126 127 131 132 136 137 141 143 144 145 146 147 148 149 150 151 152
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 x+0 S8 A64])
        (reg:DI 5 di [ x ])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 xs+0 S8 A64])
        (reg:DI 4 si [ xs ])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [143]) [1 *n_49(D)+0 S4 A32])) "../src/spline.f":186 82 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [144])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":186 145 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.38+0 S8 A64])
        (reg:DI 0 ax [144])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg:DI 0 ax [orig:126 size.39_51 ] [126])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.38+0 S8 A64])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 15 13 14 2 (set (reg:DI 1 dx [145])
        (const_int 0 [0])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 14 15 16 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:126 size.39_51 ] [126])
            (const_int 0 [0]))) "../src/spline.f":186 4 {*cmpdi_ccno_1}
     (nil))
(insn 16 14 19 2 (set (reg:DI 0 ax [orig:127 size.39_52 ] [127])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:126 size.39_51 ] [126])
            (reg:DI 1 dx [145]))) "../src/spline.f":186 967 {*movdicc_noc}
     (nil))
(insn 19 16 20 2 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.187_2 ] [88])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 20 19 24 2 (set (reg:DI 42 r13 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 24 20 25 2 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [146]) [1 *n_49(D)+0 S4 A32])) "../src/spline.f":186 82 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [147])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":186 145 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.42+0 S8 A64])
        (reg:DI 0 ax [147])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 28 27 30 2 (set (reg:DI 0 ax [orig:131 size.43_57 ] [131])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.42+0 S8 A64])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 30 28 29 2 (set (reg:DI 1 dx [148])
        (const_int 0 [0])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 29 30 31 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:131 size.43_57 ] [131])
            (const_int 0 [0]))) "../src/spline.f":186 4 {*cmpdi_ccno_1}
     (nil))
(insn 31 29 34 2 (set (reg:DI 0 ax [orig:132 size.43_58 ] [132])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:131 size.43_57 ] [131])
            (reg:DI 1 dx [148]))) "../src/spline.f":186 967 {*movdicc_noc}
     (nil))
(insn 34 31 35 2 (set (reg:DI 39 r10 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.189_6 ] [92])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 35 34 39 2 (set (reg:DI 40 r11 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 39 35 40 2 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [149]) [1 *n_49(D)+0 S4 A32])) "../src/spline.f":186 82 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 0 ax [150])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":186 145 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.40+0 S8 A64])
        (reg:DI 0 ax [150])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 43 42 45 2 (set (reg:DI 0 ax [orig:136 size.41_63 ] [136])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.40+0 S8 A64])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 45 43 44 2 (set (reg:DI 1 dx [151])
        (const_int 0 [0])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 44 45 46 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:136 size.41_63 ] [136])
            (const_int 0 [0]))) "../src/spline.f":186 4 {*cmpdi_ccno_1}
     (nil))
(insn 46 44 49 2 (set (reg:DI 0 ax [orig:137 size.41_64 ] [137])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:136 size.41_63 ] [136])
            (reg:DI 1 dx [151]))) "../src/spline.f":186 967 {*movdicc_noc}
     (nil))
(insn 49 46 50 2 (set (reg:DI 37 r8 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.191_10 ] [96])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 50 49 54 2 (set (reg:DI 38 r9 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":186 81 {*movdi_internal}
     (nil))
(insn 54 50 55 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 lend+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":207 82 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":208 81 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [152]) [1 *n_49(D)+0 S4 A32])) "../src/spline.f":208 82 {*movsi_internal}
     (nil))
(insn 57 56 58 2 (parallel [
            (set (reg:SI 1 dx [orig:141 _69 ] [141])
                (plus:SI (reg:SI 0 ax [orig:99 _13 ] [99])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":208 217 {*addsi_1}
     (nil))
(insn 58 57 144 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":208 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              10 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  def 	 17 [flags] 142
(code_label 144 58 59 3 81 (nil) [1 uses])
(note 59 144 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (reg:SI 1 dx [orig:141 _69 ] [141]))) "../src/spline.f":208 7 {*cmpsi_1}
     (nil))
(insn 61 60 62 3 (set (reg:QI 0 ax [orig:142 _73 ] [142])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":208 613 {*setcc_qi}
     (nil))
(insn 62 61 63 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:142 _73 ] [142])
            (const_int 0 [0]))) "../src/spline.f":208 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 63 62 64 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 172)
            (pc))) "../src/spline.f":208 617 {*jcc_1}
     (nil)
 -> 172)
;;  succ:       12
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 105 106 153 154 155 156 157 158
(note 64 63 65 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 4 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":209 82 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (parallel [
            (set (reg:SI 0 ax [orig:100 _14 ] [100])
                (plus:SI (reg:SI 0 ax [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":209 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 67 66 68 4 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [orig:100 _14 ] [100]))) "../src/spline.f":209 145 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:DI 2 cx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":209 218 {*adddi_1}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])) "../src/spline.f":209 81 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:102 _16 ] [102])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [154])) [3 *s_74(D) S4 A32])) "../src/spline.f":209 127 {*movsf_internal}
     (nil))
(insn 71 70 72 4 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":209 82 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 0 ax [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 0 ax [155]))) "../src/spline.f":209 145 {*extendsidi2_rex64}
     (nil))
(insn 73 72 74 4 (parallel [
            (set (reg:DI 2 cx [orig:105 _19 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 _18 ] [104])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":209 218 {*adddi_1}
     (nil))
(insn 74 73 75 4 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])) "../src/spline.f":209 81 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:SF 22 xmm1 [orig:106 _20 ] [106])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:105 _19 ] [105])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [156])) [3 *s_74(D) S4 A32])) "../src/spline.f":209 127 {*movsf_internal}
     (nil))
(insn 76 75 77 4 (set (reg:SF 21 xmm0 [157])
        (minus:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])
            (reg:SF 22 xmm1 [orig:106 _20 ] [106]))) "../src/spline.f":209 805 {*fop_sf_1}
     (nil))
(insn 77 76 78 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [157])) "../src/spline.f":209 127 {*movsf_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SF 21 xmm0 [158])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":210 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 79 78 80 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [158])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [3 ds+0 S4 A32]))) "../src/spline.f":210 51 {*cmpiusf}
     (nil))
(jump_insn 80 79 160 4 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) "../src/spline.f":210 617 {*jcc_1}
     (nil)
 -> 97)
;;  succ:       7
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159
(note 160 80 81 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 81 160 82 5 (set (reg:SF 21 xmm0 [159])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":210 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 82 81 83 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [159])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [3 ds+0 S4 A32]))) "../src/spline.f":210 51 {*cmpiusf}
     (nil))
(jump_insn 83 82 87 5 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 97)
            (pc))) "../src/spline.f":210 617 {*jcc_1}
     (nil)
 -> 97)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 160 161 162
(note 87 83 88 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 6 (set (reg:SI 0 ax [160])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":211 82 {*movsi_internal}
     (nil))
(insn 89 88 90 6 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [160]))) "../src/spline.f":211 145 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 6 (parallel [
            (set (reg:DI 2 cx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":211 218 {*adddi_1}
     (nil))
(insn 91 90 92 6 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 xs+0 S8 A64])) "../src/spline.f":211 81 {*movdi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:SF 21 xmm0 [162])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 xs1+0 S4 A32])) "../src/spline.f":211 127 {*movsf_internal}
     (nil))
(insn 93 92 94 6 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:108 _22 ] [108])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [161])) [3 *xs_79(D) S4 A32])
        (reg:SF 21 xmm0 [162])) "../src/spline.f":211 127 {*movsf_internal}
     (nil))
(insn 94 93 165 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 lend+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":212 82 {*movsi_internal}
     (nil))
(jump_insn 165 94 166 6 (set (pc)
        (label_ref 139)) 649 {jump}
     (nil)
 -> 139)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

(barrier 166 165 97)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 112 113 114 115 163 164 165 166 167 168 169
(code_label 97 166 98 7 77 (nil) [2 uses])
(note 98 97 99 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 7 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":214 82 {*movsi_internal}
     (nil))
(insn 100 99 101 7 (parallel [
            (set (reg:SI 0 ax [orig:109 _23 ] [109])
                (plus:SI (reg:SI 0 ax [163])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":214 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 101 100 102 7 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 _23 ] [109]))) "../src/spline.f":214 145 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 7 (parallel [
            (set (reg:DI 2 cx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":214 218 {*adddi_1}
     (nil))
(insn 103 102 104 7 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 x+0 S8 A64])) "../src/spline.f":214 81 {*movdi_internal}
     (nil))
(insn 104 103 105 7 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:111 _25 ] [111])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [164])) [3 *x_76(D) S4 A32])) "../src/spline.f":214 127 {*movsf_internal}
     (nil))
(insn 105 104 106 7 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":214 82 {*movsi_internal}
     (nil))
(insn 106 105 107 7 (set (reg:DI 0 ax [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 0 ax [165]))) "../src/spline.f":214 145 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 7 (parallel [
            (set (reg:DI 2 cx [orig:114 _28 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":214 218 {*adddi_1}
     (nil))
(insn 108 107 109 7 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 x+0 S8 A64])) "../src/spline.f":214 81 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (set (reg:SF 22 xmm1 [orig:115 _29 ] [115])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:114 _28 ] [114])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [166])) [3 *x_76(D) S4 A32])) "../src/spline.f":214 127 {*movsf_internal}
     (nil))
(insn 110 109 111 7 (set (reg:SF 21 xmm0 [167])
        (minus:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:115 _29 ] [115]))) "../src/spline.f":214 805 {*fop_sf_1}
     (nil))
(insn 111 110 112 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 dx+0 S4 A32])
        (reg:SF 21 xmm0 [167])) "../src/spline.f":214 127 {*movsf_internal}
     (nil))
(insn 112 111 113 7 (set (reg:SF 21 xmm0 [169])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 dx+0 S4 A32])) "../src/spline.f":215 127 {*movsf_internal}
     (nil))
(insn 113 112 114 7 (set (reg:SF 21 xmm0 [168])
        (div:SF (reg:SF 21 xmm0 [169])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [3 ds+0 S4 A32]))) "../src/spline.f":215 805 {*fop_sf_1}
     (nil))
(insn 114 113 115 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 xs2+0 S4 A32])
        (reg:SF 21 xmm0 [168])) "../src/spline.f":215 127 {*movsf_internal}
     (nil))
(insn 115 114 116 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [9 lend+0 S4 A32])
            (const_int 0 [0]))) "../src/spline.f":216 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 116 115 117 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) "../src/spline.f":216 617 {*jcc_1}
     (nil)
 -> 127)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 170 171 172
(note 117 116 118 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 8 (set (reg:SI 0 ax [170])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":217 82 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [170]))) "../src/spline.f":217 145 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 8 (parallel [
            (set (reg:DI 2 cx [orig:117 _31 ] [117])
                (plus:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":217 218 {*adddi_1}
     (nil))
(insn 121 120 122 8 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 xs+0 S8 A64])) "../src/spline.f":217 81 {*movdi_internal}
     (nil))
(insn 122 121 123 8 (set (reg:SF 21 xmm0 [172])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 xs2+0 S4 A32])) "../src/spline.f":217 127 {*movsf_internal}
     (nil))
(insn 123 122 124 8 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:117 _31 ] [117])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [171])) [3 *xs_79(D) S4 A32])
        (reg:SF 21 xmm0 [172])) "../src/spline.f":217 127 {*movsf_internal}
     (nil))
(insn 124 123 167 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 lend+0 S4 A32])
        (const_int 0 [0])) "../src/spline.f":218 82 {*movsi_internal}
     (nil))
(jump_insn 167 124 168 8 (set (pc)
        (label_ref 139)) 649 {jump}
     (nil)
 -> 139)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

(barrier 168 167 127)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 173 174 175 176
(code_label 127 168 128 9 80 (nil) [1 uses])
(note 128 127 129 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 9 (set (reg:SF 21 xmm0 [173])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 xs1+0 S4 A32])) "../src/spline.f":220 127 {*movsf_internal}
     (nil))
(insn 130 129 131 9 (set (reg:SF 21 xmm0 [orig:118 _32 ] [118])
        (plus:SF (reg:SF 21 xmm0 [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [3 xs2+0 S4 A32]))) "../src/spline.f":220 802 {*fop_sf_comm}
     (nil))
(insn 131 130 132 9 (set (reg:SF 22 xmm1 [orig:119 _33 ] [119])
        (reg:SF 21 xmm0 [orig:118 _32 ] [118])) "../src/spline.f":220 127 {*movsf_internal}
     (nil))
(insn 132 131 133 9 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":220 82 {*movsi_internal}
     (nil))
(insn 133 132 134 9 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [174]))) "../src/spline.f":220 145 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 9 (parallel [
            (set (reg:DI 2 cx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":220 218 {*adddi_1}
     (nil))
(insn 135 134 136 9 (set (reg:SF 21 xmm0 [175])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC10") [flags 0x2]) [3  S4 A32])) "../src/spline.f":220 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 136 135 137 9 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (mult:SF (reg:SF 21 xmm0 [175])
            (reg:SF 22 xmm1 [orig:119 _33 ] [119]))) "../src/spline.f":220 802 {*fop_sf_comm}
     (nil))
(insn 137 136 138 9 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 xs+0 S8 A64])) "../src/spline.f":220 81 {*movdi_internal}
     (nil))
(insn 138 137 139 9 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:121 _35 ] [121])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [176])) [3 *xs_79(D) S4 A32])
        (reg:SF 21 xmm0 [orig:122 _36 ] [122])) "../src/spline.f":220 127 {*movsf_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177
(code_label 139 138 140 10 79 (nil) [2 uses])
(note 140 139 141 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 10 (set (reg:SF 21 xmm0 [177])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 xs2+0 S4 A32])) "../src/spline.f":223 127 {*movsf_internal}
     (nil))
(insn 142 141 143 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 xs1+0 S4 A32])
        (reg:SF 21 xmm0 [177])) "../src/spline.f":223 127 {*movsf_internal}
     (nil))
(insn 143 142 169 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":208 217 {*addsi_1}
     (nil))
(jump_insn 169 143 170 10 (set (pc)
        (label_ref 144)) "../src/spline.f":208 649 {jump}
     (nil)
 -> 144)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 141

(barrier 170 169 172)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 172 170 171 12 84 (nil) [1 uses])
(note 171 172 173 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 173 171 147 12 (const_int 0 [0]) "../src/spline.f":224 682 {nop}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 178 179 180
(code_label 147 173 148 11 76 (nil) [0 uses])
(note 148 147 149 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 150 11 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":225 81 {*movdi_internal}
     (nil))
(insn 150 149 151 11 (set (reg:SI 0 ax [orig:123 _37 ] [123])
        (mem:SI (reg/f:DI 0 ax [178]) [1 *n_49(D)+0 S4 A32])) "../src/spline.f":225 82 {*movsi_internal}
     (nil))
(insn 151 150 152 11 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _37 ] [123]))) "../src/spline.f":225 145 {*extendsidi2_rex64}
     (nil))
(insn 152 151 153 11 (parallel [
            (set (reg:DI 1 dx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":225 218 {*adddi_1}
     (nil))
(insn 153 152 154 11 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 xs+0 S8 A64])) "../src/spline.f":225 81 {*movdi_internal}
     (nil))
(insn 154 153 155 11 (set (reg:SF 21 xmm0 [180])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 xs1+0 S4 A32])) "../src/spline.f":225 127 {*movsf_internal}
     (nil))
(insn 155 154 164 11 (set (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [179])) [3 *xs_79(D) S4 A32])
        (reg:SF 21 xmm0 [180])) "../src/spline.f":225 127 {*movsf_internal}
     (nil))
(insn 164 155 174 11 (const_int 0 [0]) "../src/spline.f":227 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 174 164 0 NOTE_INSN_DELETED)

;; Function geval (geval_, funcdef_no=7, decl_uid=3829, cgraph_uid=7, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=56, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=320 from oldreg=247, assigning class GENERAL_REGS to r320
   68: {r320:SI=r320:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  324: r320:SI=r100:SI
    Inserting insn reload after:
  325: r247:SI=r320:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 100:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 101:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 115:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 123:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 132:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 135
	 Choosing alt 1 in insn 135:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 137:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 138:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 142:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 144:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 147:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 150:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 152:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 155
	 Choosing alt 1 in insn 155:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 156:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 158:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 159:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 161:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 162:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 170:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 176:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 179:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 180:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 186:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 188:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 191:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 192:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 198:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 199:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 202:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 205:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 211:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 212:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 213:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 216:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 218:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 222:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 231:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 233:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 234:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 236
	 Choosing alt 1 in insn 236:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 237:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 240:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 242:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 1 in insn 243:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 244:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 245:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 1 in insn 246:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 247:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 248:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 249:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=321 from oldreg=303, assigning class SSE_REGS to r321
  249: r321:SF=r321:SF-r182:SF
      REG_DEAD r303:SF
      REG_DEAD r182:SF
    Inserting insn reload before:
  326: r321:SF=r303:SF
    Inserting insn reload after:
  327: r183:SF=r321:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 254:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 256:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 257
	 Choosing alt 1 in insn 257:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 258:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 259:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 260:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 1 in insn 261:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 262:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 263:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 264:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 1 in insn 266:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 267:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 1 in insn 268:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 270:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 271:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 272:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 273:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 274:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 275:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 276:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 277:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 278
	 Choosing alt 1 in insn 278:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 279:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 280:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 281:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 1 in insn 282:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 283:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 285:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 286:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 287:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 288:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 289:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 290
	 Choosing alt 1 in insn 290:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 291:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 292:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 293:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 294:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 295:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 296:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 297:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 12
EBB 8
EBB 9
EBB 10
EBB 13
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 305: point = 0, n_alt = -1
   Insn 304: point = 0, n_alt = -1
   Insn 300: point = 1, n_alt = -1
   Insn 297: point = 3, n_alt = 7
   Insn 296: point = 4, n_alt = 8
   Insn 295: point = 5, n_alt = 1
   Insn 294: point = 7, n_alt = 7
   Insn 293: point = 8, n_alt = 1
   Insn 292: point = 10, n_alt = 7
   Insn 291: point = 11, n_alt = 8
   Insn 290: point = 12, n_alt = 1
   Insn 289: point = 14, n_alt = 2
   Insn 288: point = 16, n_alt = 7
   Insn 287: point = 17, n_alt = 1
   Insn 286: point = 19, n_alt = 1
   Insn 285: point = 21, n_alt = 1
   Insn 284: point = 23, n_alt = -1
   Insn 283: point = 25, n_alt = 2
   Insn 282: point = 27, n_alt = 1
   Insn 281: point = 29, n_alt = 7
   Insn 280: point = 30, n_alt = 7
   Insn 279: point = 31, n_alt = 1
   Insn 278: point = 33, n_alt = 1
   Insn 277: point = 35, n_alt = 7
   Insn 276: point = 36, n_alt = 7
   Insn 275: point = 37, n_alt = 1
   Insn 274: point = 39, n_alt = 2
   Insn 273: point = 41, n_alt = 7
   Insn 272: point = 42, n_alt = 1
   Insn 271: point = 44, n_alt = 1
   Insn 270: point = 46, n_alt = 1
   Insn 269: point = 48, n_alt = -1
   Insn 268: point = 50, n_alt = 1
   Insn 267: point = 52, n_alt = 1
   Insn 266: point = 54, n_alt = 1
   Insn 265: point = 56, n_alt = 7
   Insn 264: point = 57, n_alt = 7
   Insn 263: point = 58, n_alt = 2
   Insn 262: point = 60, n_alt = 7
   Insn 261: point = 61, n_alt = 1
   Insn 260: point = 63, n_alt = 7
   Insn 259: point = 64, n_alt = 7
   Insn 258: point = 65, n_alt = 1
   Insn 257: point = 67, n_alt = 1
   Insn 256: point = 69, n_alt = 7
   Insn 255: point = 71, n_alt = 3
   Insn 254: point = 72, n_alt = 3
   Insn 253: point = 74, n_alt = 0
   Insn 252: point = 76, n_alt = 0
   Insn 251: point = 78, n_alt = 0
   Insn 250: point = 79, n_alt = -1
   Insn 327: point = 81, n_alt = -1
	Hard reg 21 is preferable by r321 with profit 1
   Insn 249: point = 83, n_alt = 2
   Insn 326: point = 84, n_alt = -1
	Hard reg 21 is preferable by r321 with profit 1
	Hard reg 23 is preferable by r321 with profit 1
   Insn 248: point = 86, n_alt = 7
   Insn 247: point = 87, n_alt = 1
   Insn 246: point = 89, n_alt = 1
   Insn 245: point = 91, n_alt = 7
   Insn 244: point = 92, n_alt = 7
   Insn 243: point = 93, n_alt = 1
   Insn 242: point = 95, n_alt = 7
   Insn 241: point = 97, n_alt = 3
   Insn 240: point = 98, n_alt = 3
   Insn 239: point = 100, n_alt = 0
   Insn 238: point = 102, n_alt = 0
   Insn 237: point = 103, n_alt = 1
   Insn 236: point = 105, n_alt = 1
   Insn 235: point = 107, n_alt = 7
   Insn 234: point = 108, n_alt = 7
   Insn 233: point = 109, n_alt = 8
   Insn 232: point = 110, n_alt = 1
   Insn 231: point = 112, n_alt = 7
   Insn 230: point = 114, n_alt = 3
   Insn 229: point = 115, n_alt = 3
   Insn 228: point = 117, n_alt = 0
   Insn 227: point = 119, n_alt = 0
   Insn 226: point = 121, n_alt = 0
   Insn 225: point = 122, n_alt = 2
   Insn 224: point = 124, n_alt = 7
   Insn 223: point = 126, n_alt = 3
   Insn 222: point = 127, n_alt = 3
   Insn 221: point = 129, n_alt = 0
   Insn 220: point = 131, n_alt = 0
   Insn 219: point = 132, n_alt = 1
   Insn 218: point = 134, n_alt = 7
   Insn 217: point = 136, n_alt = 3
   Insn 216: point = 137, n_alt = 3
   Insn 215: point = 139, n_alt = 0
   Insn 214: point = 141, n_alt = 0
   Insn 213: point = 142, n_alt = 8
   Insn 212: point = 143, n_alt = 1
   Insn 211: point = 145, n_alt = 7
   Insn 210: point = 147, n_alt = 3
   Insn 209: point = 148, n_alt = 3
   Insn 208: point = 150, n_alt = 0
   Insn 207: point = 152, n_alt = 0
   Insn 206: point = 154, n_alt = 0
   Insn 205: point = 155, n_alt = 2
   Insn 204: point = 157, n_alt = 7
   Insn 203: point = 159, n_alt = 3
   Insn 202: point = 160, n_alt = 3
   Insn 201: point = 162, n_alt = 0
   Insn 200: point = 164, n_alt = 0
   Insn 199: point = 165, n_alt = 1
   Insn 198: point = 167, n_alt = 7
   Insn 197: point = 169, n_alt = 3
   Insn 196: point = 170, n_alt = 3
   Insn 195: point = 172, n_alt = 0
   Insn 194: point = 174, n_alt = 0
   Insn 193: point = 176, n_alt = 0
   Insn 192: point = 177, n_alt = 8
   Insn 191: point = 178, n_alt = 2
   Insn 190: point = 180, n_alt = -1
   Insn 189: point = 182, n_alt = 2
   Insn 188: point = 184, n_alt = 7
   Insn 187: point = 186, n_alt = 3
   Insn 186: point = 187, n_alt = 3
   Insn 185: point = 189, n_alt = 0
   Insn 184: point = 191, n_alt = 0
   Insn 183: point = 193, n_alt = 0
   Insn 182: point = 194, n_alt = 7
   Insn 181: point = 196, n_alt = 3
   Insn 180: point = 197, n_alt = 8
   Insn 179: point = 198, n_alt = 2
   Insn 178: point = 200, n_alt = 7
   Insn 177: point = 202, n_alt = 3
   Insn 176: point = 203, n_alt = 3
   Insn 175: point = 205, n_alt = 0
   Insn 174: point = 207, n_alt = 0
   Insn 173: point = 209, n_alt = 0
   Insn 172: point = 210, n_alt = 7
   Insn 171: point = 212, n_alt = 3
   Insn 170: point = 213, n_alt = 3
   Insn 169: point = 215, n_alt = 0
   Insn 168: point = 217, n_alt = 0
  BB 13
   Insn 322: point = 218, n_alt = -1
  BB 9
   Insn 109: point = 218, n_alt = -1
   Insn 108: point = 218, n_alt = 0
   Insn 107: point = 219, n_alt = 0
   Insn 106: point = 220, n_alt = 0
  BB 10
   Insn 315: point = 221, n_alt = -1
   Insn 162: point = 221, n_alt = 1
   Insn 161: point = 221, n_alt = 8
   Insn 160: point = 222, n_alt = 1
   Insn 159: point = 224, n_alt = 7
   Insn 158: point = 225, n_alt = 1
   Insn 157: point = 227, n_alt = 7
   Insn 156: point = 228, n_alt = 8
   Insn 155: point = 229, n_alt = 1
   Insn 154: point = 231, n_alt = 2
   Insn 153: point = 233, n_alt = 7
   Insn 152: point = 234, n_alt = 1
   Insn 151: point = 236, n_alt = -1
   Insn 150: point = 238, n_alt = 2
   Insn 149: point = 240, n_alt = 7
   Insn 148: point = 242, n_alt = 3
   Insn 147: point = 243, n_alt = 3
   Insn 146: point = 245, n_alt = 0
   Insn 145: point = 247, n_alt = 0
   Insn 144: point = 248, n_alt = 7
   Insn 143: point = 250, n_alt = 3
   Insn 142: point = 251, n_alt = 3
   Insn 141: point = 253, n_alt = 0
   Insn 140: point = 255, n_alt = 0
   Insn 139: point = 257, n_alt = 0
   Insn 138: point = 258, n_alt = 1
   Insn 137: point = 260, n_alt = 7
   Insn 136: point = 261, n_alt = -1
   Insn 135: point = 263, n_alt = 1
   Insn 134: point = 265, n_alt = 7
   Insn 133: point = 267, n_alt = 3
   Insn 132: point = 268, n_alt = 3
   Insn 131: point = 270, n_alt = 0
   Insn 130: point = 272, n_alt = 0
   Insn 129: point = 274, n_alt = 0
   Insn 128: point = 275, n_alt = 7
   Insn 127: point = 277, n_alt = 3
   Insn 126: point = 278, n_alt = 3
   Insn 125: point = 280, n_alt = 0
   Insn 124: point = 282, n_alt = 0
   Insn 123: point = 283, n_alt = 8
   Insn 122: point = 284, n_alt = 2
   Insn 121: point = 286, n_alt = 7
   Insn 120: point = 288, n_alt = 3
   Insn 119: point = 289, n_alt = 3
   Insn 118: point = 291, n_alt = 0
   Insn 117: point = 293, n_alt = 0
   Insn 116: point = 295, n_alt = 0
   Insn 115: point = 296, n_alt = 7
   Insn 114: point = 298, n_alt = 3
   Insn 113: point = 299, n_alt = 3
   Insn 112: point = 301, n_alt = 0
   Insn 111: point = 303, n_alt = 0
  BB 8
   Insn 104: point = 305, n_alt = 1
   Insn 103: point = 305, n_alt = 3
   Insn 102: point = 307, n_alt = 0
   Insn 101: point = 308, n_alt = 8
   Insn 100: point = 309, n_alt = 7
  BB 12
   Insn 319: point = 310, n_alt = -1
  BB 3
   Insn 63: point = 310, n_alt = -1
   Insn 62: point = 310, n_alt = 0
   Insn 61: point = 311, n_alt = 1
   Insn 60: point = 313, n_alt = 0
  BB 7
   Insn 313: point = 314, n_alt = -1
  BB 5
   Insn 311: point = 314, n_alt = -1
   Insn 86: point = 314, n_alt = 1
   Insn 85: point = 315, n_alt = 0
  BB 6
   Insn 92: point = 316, n_alt = 1
   Insn 91: point = 317, n_alt = 0
  BB 4
   Insn 80: point = 318, n_alt = -1
   Insn 79: point = 318, n_alt = 1
   Insn 78: point = 319, n_alt = 7
   Insn 77: point = 321, n_alt = 3
   Insn 76: point = 322, n_alt = 3
   Insn 75: point = 324, n_alt = 0
   Insn 74: point = 326, n_alt = 0
   Insn 73: point = 327, n_alt = 7
   Insn 72: point = 329, n_alt = 3
   Insn 71: point = 330, n_alt = 1
   Insn 70: point = 331, n_alt = 0
   Insn 69: point = 333, n_alt = 0
   Insn 325: point = 335, n_alt = -1
	Hard reg 1 is preferable by r320 with profit 1
   Insn 68: point = 337, n_alt = 0
   Insn 324: point = 337, n_alt = -1
   Insn 67: point = 338, n_alt = 0
   Insn 66: point = 340, n_alt = 0
   Insn 65: point = 341, n_alt = 0
  BB 2
   Insn 58: point = 342, n_alt = 1
   Insn 57: point = 343, n_alt = 0
   Insn 56: point = 345, n_alt = 3
   Insn 55: point = 346, n_alt = 1
   Insn 51: point = 346, n_alt = 2
   Insn 50: point = 347, n_alt = 3
   Insn 49: point = 348, n_alt = -1
   Insn 47: point = 350, n_alt = 1
   Insn 45: point = 352, n_alt = 0
   Insn 46: point = 352, n_alt = 2
   Insn 44: point = 353, n_alt = 3
   Insn 43: point = 354, n_alt = 5
   Insn 42: point = 355, n_alt = 0
   Insn 41: point = 357, n_alt = 0
   Insn 40: point = 359, n_alt = 3
   Insn 36: point = 360, n_alt = 2
   Insn 35: point = 361, n_alt = 3
   Insn 34: point = 362, n_alt = -1
   Insn 32: point = 364, n_alt = 1
   Insn 30: point = 366, n_alt = 0
   Insn 31: point = 366, n_alt = 2
   Insn 29: point = 367, n_alt = 3
   Insn 28: point = 368, n_alt = 5
   Insn 27: point = 369, n_alt = 0
   Insn 26: point = 371, n_alt = 0
   Insn 25: point = 373, n_alt = 3
   Insn 21: point = 374, n_alt = 2
   Insn 20: point = 375, n_alt = 3
   Insn 19: point = 376, n_alt = -1
   Insn 17: point = 378, n_alt = 1
   Insn 15: point = 380, n_alt = 0
   Insn 16: point = 380, n_alt = 2
   Insn 14: point = 381, n_alt = 3
   Insn 13: point = 382, n_alt = 5
   Insn 12: point = 383, n_alt = 0
   Insn 11: point = 385, n_alt = 0
   Insn 10: point = 387, n_alt = 3
   Insn 6: point = 388, n_alt = 5
   Insn 5: point = 388, n_alt = 5
   Insn 4: point = 388, n_alt = 5
   Insn 3: point = 388, n_alt = 5
   Insn 2: point = 388, n_alt = 5
 r87: [384..385]
 r88: [375..376]
 r89: [374..388]
 r91: [370..371]
 r92: [361..362]
 r93: [360..388]
 r95: [356..357]
 r96: [347..348]
 r97: [346..388]
 r99: [310..311]
 r100: [334..338]
 r101: [318..327]
 r102: [323..324]
 r103: [320..322]
 r104: [318..319]
 r105: [300..301]
 r106: [297..299]
 r107: [285..296]
 r108: [292..293]
 r109: [290..291]
 r110: [287..289]
 r111: [285..286]
 r112: [279..280]
 r113: [276..278]
 r114: [264..275]
 r115: [271..272]
 r116: [269..270]
 r117: [266..268]
 r118: [264..265]
 r119: [262..263]
 r120: [259..261]
 r121: [230..258]
 r122: [254..255]
 r123: [252..253]
 r124: [249..251]
 r125: [239..248]
 r126: [244..245]
 r127: [241..243]
 r128: [239..240]
 r129: [237..238]
 r130: [235..236]
 r131: [232..234]
 r132: [230..231]
 r133: [223..225]
 r134: [223..224]
 r135: [221..222]
 r136: [214..215]
 r137: [211..213]
 r138: [199..210]
 r139: [206..207]
 r140: [204..205]
 r141: [201..203]
 r142: [199..200]
 r143: [183..194]
 r144: [190..191]
 r145: [188..189]
 r146: [185..187]
 r147: [183..184]
 r148: [181..182]
 r149: [179..180]
 r150: [173..174]
 r151: [171..172]
 r152: [168..170]
 r153: [166..167]
 r154: [156..165]
 r155: [161..162]
 r156: [158..160]
 r157: [156..157]
 r158: [144..155]
 r159: [151..152]
 r160: [149..150]
 r161: [146..148]
 r162: [144..145]
 r163: [138..139]
 r164: [135..137]
 r165: [133..134]
 r166: [123..132]
 r167: [128..129]
 r168: [125..127]
 r169: [123..124]
 r170: [111..122]
 r171: [118..119]
 r172: [116..117]
 r173: [113..115]
 r174: [111..112]
 r175: [104..105]
 r176: [94..103]
 r177: [99..100]
 r178: [96..98]
 r179: [94..95]
 r180: [66..93]
 r181: [88..89]
 r182: [83..87]
 r183: [80..81]
 r184: [68..79]
 r185: [75..76]
 r186: [73..74]
 r187: [70..72]
 r188: [68..69]
 r189: [66..67]
 r190: [38..65]
 r191: [59..61]
 r192: [51..58]
 r193: [53..54]
 r194: [51..52]
 r195: [49..50]
 r196: [47..48]
 r197: [45..46]
 r198: [43..44]
 r199: [40..42]
 r200: [38..39]
 r201: [13..37]
 r202: [32..33]
 r203: [26..31]
 r204: [26..27]
 r205: [24..25]
 r206: [22..23]
 r207: [20..21]
 r208: [18..19]
 r209: [15..17]
 r210: [13..14]
 r211: [6..8]
 r212: [6..7]
 r213: [4..5]
 r214: [379..381]
 r215: [377..378]
 r219: [365..367]
 r220: [363..364]
 r224: [351..353]
 r225: [349..350]
 r229: [218..305]
 r230: [218..219]
 r231: [2..3]
 r232: [0..1]
 r233: [386..387]
 r234: [382..383]
 r235: [379..380]
 r236: [372..373]
 r237: [368..369]
 r238: [365..366]
 r239: [358..359]
 r240: [354..355]
 r241: [351..352]
 r242: [344..345]
 r243: [342..343]
 r244: [312..313]
 r245: [339..341]
 r246: [339..340]
 r247: [334..335]
 r248: [332..333]
 r249: [330..331]
 r250: [328..329]
 r251: [325..326]
 r252: [320..321]
 r253: [314..315]
 r254: [316..317]
 r255: [308..309]
 r256: [306..307]
 r257: [302..303]
 r258: [297..298]
 r259: [294..295]
 r260: [287..288]
 r261: [283..284]
 r262: [281..282]
 r263: [276..277]
 r264: [273..274]
 r265: [266..267]
 r266: [259..260]
 r267: [256..257]
 r268: [249..250]
 r269: [246..247]
 r270: [241..242]
 r271: [232..233]
 r272: [228..229]
 r273: [226..227]
 r274: [216..217]
 r275: [211..212]
 r276: [208..209]
 r277: [201..202]
 r278: [197..198]
 r279: [195..196]
 r280: [192..193]
 r281: [185..186]
 r282: [177..178]
 r283: [175..176]
 r284: [168..169]
 r285: [163..164]
 r286: [158..159]
 r287: [153..154]
 r288: [146..147]
 r289: [142..143]
 r290: [140..141]
 r291: [135..136]
 r292: [130..131]
 r293: [125..126]
 r294: [120..121]
 r295: [113..114]
 r296: [109..110]
 r297: [106..108]
 r298: [106..107]
 r299: [101..102]
 r300: [96..97]
 r301: [90..92]
 r302: [90..91]
 r303: [85..86]
 r304: [77..78]
 r305: [70..71]
 r306: [62..64]
 r307: [62..63]
 r308: [59..60]
 r309: [55..57]
 r310: [55..56]
 r311: [40..41]
 r312: [34..36]
 r313: [34..35]
 r314: [28..30]
 r315: [28..29]
 r316: [15..16]
 r317: [11..12]
 r318: [9..10]
 r320: [336..337]
 r321: [82..84]
Compressing live ranges: from 389 to 326 - 83%
Ranges after the compression:
 r87: [322..323]
 r88: [314..315]
 r89: [314..325]
 r91: [310..311]
 r92: [302..303]
 r93: [302..325]
 r95: [298..299]
 r96: [290..291]
 r97: [290..325]
 r99: [258..259]
 r100: [280..283]
 r101: [266..273]
 r102: [270..271]
 r103: [268..269]
 r104: [266..267]
 r105: [250..251]
 r106: [248..249]
 r107: [238..247]
 r108: [244..245]
 r109: [242..243]
 r110: [240..241]
 r111: [238..239]
 r112: [232..233]
 r113: [230..231]
 r114: [220..229]
 r115: [226..227]
 r116: [224..225]
 r117: [222..223]
 r118: [220..221]
 r119: [218..219]
 r120: [216..217]
 r121: [192..215]
 r122: [212..213]
 r123: [210..211]
 r124: [208..209]
 r125: [200..207]
 r126: [204..205]
 r127: [202..203]
 r128: [200..201]
 r129: [198..199]
 r130: [196..197]
 r131: [194..195]
 r132: [192..193]
 r133: [186..187]
 r134: [186..187]
 r135: [184..185]
 r136: [178..179]
 r137: [176..177]
 r138: [166..175]
 r139: [172..173]
 r140: [170..171]
 r141: [168..169]
 r142: [166..167]
 r143: [152..161]
 r144: [158..159]
 r145: [156..157]
 r146: [154..155]
 r147: [152..153]
 r148: [150..151]
 r149: [148..149]
 r150: [142..143]
 r151: [140..141]
 r152: [138..139]
 r153: [136..137]
 r154: [128..135]
 r155: [132..133]
 r156: [130..131]
 r157: [128..129]
 r158: [118..127]
 r159: [124..125]
 r160: [122..123]
 r161: [120..121]
 r162: [118..119]
 r163: [112..113]
 r164: [110..111]
 r165: [108..109]
 r166: [100..107]
 r167: [104..105]
 r168: [102..103]
 r169: [100..101]
 r170: [90..99]
 r171: [96..97]
 r172: [94..95]
 r173: [92..93]
 r174: [90..91]
 r175: [84..85]
 r176: [76..83]
 r177: [80..81]
 r178: [78..79]
 r179: [76..77]
 r180: [54..75]
 r181: [72..73]
 r182: [68..71]
 r183: [66..67]
 r184: [56..65]
 r185: [62..63]
 r186: [60..61]
 r187: [58..59]
 r188: [56..57]
 r189: [54..55]
 r190: [32..53]
 r191: [50..51]
 r192: [44..49]
 r193: [46..47]
 r194: [44..45]
 r195: [42..43]
 r196: [40..41]
 r197: [38..39]
 r198: [36..37]
 r199: [34..35]
 r200: [32..33]
 r201: [12..31]
 r202: [28..29]
 r203: [24..27]
 r204: [24..25]
 r205: [22..23]
 r206: [20..21]
 r207: [18..19]
 r208: [16..17]
 r209: [14..15]
 r210: [12..13]
 r211: [6..7]
 r212: [6..7]
 r213: [4..5]
 r214: [318..319]
 r215: [316..317]
 r219: [306..307]
 r220: [304..305]
 r224: [294..295]
 r225: [292..293]
 r229: [182..253]
 r230: [182..183]
 r231: [2..3]
 r232: [0..1]
 r233: [324..325]
 r234: [320..321]
 r235: [318..319]
 r236: [312..313]
 r237: [308..309]
 r238: [306..307]
 r239: [300..301]
 r240: [296..297]
 r241: [294..295]
 r242: [288..289]
 r243: [286..287]
 r244: [260..261]
 r245: [284..285]
 r246: [284..285]
 r247: [280..281]
 r248: [278..279]
 r249: [276..277]
 r250: [274..275]
 r251: [272..273]
 r252: [268..269]
 r253: [262..263]
 r254: [264..265]
 r255: [256..257]
 r256: [254..255]
 r257: [252..253]
 r258: [248..249]
 r259: [246..247]
 r260: [240..241]
 r261: [236..237]
 r262: [234..235]
 r263: [230..231]
 r264: [228..229]
 r265: [222..223]
 r266: [216..217]
 r267: [214..215]
 r268: [208..209]
 r269: [206..207]
 r270: [202..203]
 r271: [194..195]
 r272: [190..191]
 r273: [188..189]
 r274: [180..181]
 r275: [176..177]
 r276: [174..175]
 r277: [168..169]
 r278: [164..165]
 r279: [162..163]
 r280: [160..161]
 r281: [154..155]
 r282: [146..147]
 r283: [144..145]
 r284: [138..139]
 r285: [134..135]
 r286: [130..131]
 r287: [126..127]
 r288: [120..121]
 r289: [116..117]
 r290: [114..115]
 r291: [110..111]
 r292: [106..107]
 r293: [102..103]
 r294: [98..99]
 r295: [92..93]
 r296: [88..89]
 r297: [86..87]
 r298: [86..87]
 r299: [82..83]
 r300: [78..79]
 r301: [74..75]
 r302: [74..75]
 r303: [70..71]
 r304: [64..65]
 r305: [58..59]
 r306: [52..53]
 r307: [52..53]
 r308: [50..51]
 r309: [48..49]
 r310: [48..49]
 r311: [34..35]
 r312: [30..31]
 r313: [30..31]
 r314: [26..27]
 r315: [26..27]
 r316: [14..15]
 r317: [10..11]
 r318: [8..9]
 r320: [282..283]
 r321: [68..69]

********** Assignment #1: **********

	 Assigning to 320 (cl=GENERAL_REGS, orig=247, freq=3, tfirst=320, tfreq=3)...
	   Assign 1 to reload r320 (freq=3)
	 Assigning to 321 (cl=SSE_REGS, orig=303, freq=3, tfirst=321, tfreq=3)...
	   Assign 23 to reload r321 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=56, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 50
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 73
changing reg in insn 79
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 115
changing reg in insn 122
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 150
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 154
changing reg in insn 158
changing reg in insn 160
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 179
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 189
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 205
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 212
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 225
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 232
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 242
changing reg in insn 242
changing reg in insn 243
changing reg in insn 258
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 275
changing reg in insn 261
changing reg in insn 263
changing reg in insn 263
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 283
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 293
changing reg in insn 295
changing reg in insn 294
changing reg in insn 295
changing reg in insn 295
changing reg in insn 296
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 297
changing reg in insn 300
changing reg in insn 300
changing reg in insn 304
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 92
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 187
changing reg in insn 188
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 248
changing reg in insn 251
changing reg in insn 252
changing reg in insn 255
changing reg in insn 256
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 277
changing reg in insn 280
changing reg in insn 281
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
deleting insn with uid = 19.
deleting insn with uid = 34.
deleting insn with uid = 49.
deleting insn with uid = 325.
deleting insn with uid = 151.
deleting insn with uid = 190.
deleting insn with uid = 326.
deleting insn with uid = 269.
deleting insn with uid = 284.
deleting insn with uid = 300.
starting the processing of deferred insns
ending the processing of deferred insns


geval

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14]
;;  ref usage 	r0={93d,96u} r1={25d,25u} r2={2d,2u} r4={1d,1u} r5={1d,1u} r6={1d,120u} r7={1d,13u} r17={41d,7u} r20={1d,1u,14e} r21={62d,62u} r22={19d,18u} r23={15d,14u} r24={3d,2u} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} 
;;    total ref usage 654{277d,363u,14e} in 259{259 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 214 215 219 220 224 225 233 234 235 236 237 238 239 240 241 242 243
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])
        (reg:DI 2 cx [ s ])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [6 n+0 S8 A64])
        (reg:DI 37 r8 [ n ])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [6 n+0 S8 A64])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [233]) [1 *n_135(D)+0 S4 A32])) "../src/spline.f":264 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [234])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":264 145 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.44+0 S8 A64])
        (reg:DI 0 ax [234])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (set (reg:DI 0 ax [orig:214 size.45_137 ] [214])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.44+0 S8 A64])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 16 14 15 2 (set (reg:DI 1 dx [235])
        (const_int 0 [0])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 15 16 17 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:214 size.45_137 ] [214])
            (const_int 0 [0]))) "../src/spline.f":264 4 {*cmpdi_ccno_1}
     (nil))
(insn 17 15 20 2 (set (reg:DI 0 ax [orig:215 size.45_138 ] [215])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:214 size.45_137 ] [214])
            (reg:DI 1 dx [235]))) "../src/spline.f":264 967 {*movdicc_noc}
     (nil))
(insn 20 17 21 2 (set (reg:DI 42 r13 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.193_2 ] [88])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 21 20 25 2 (set (reg:DI 43 r14 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 25 21 26 2 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [6 n+0 S8 A64])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [236]) [1 *n_135(D)+0 S4 A32])) "../src/spline.f":264 82 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 0 ax [237])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":264 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.46+0 S8 A64])
        (reg:DI 0 ax [237])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 29 28 31 2 (set (reg:DI 0 ax [orig:219 size.47_143 ] [219])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.46+0 S8 A64])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 31 29 30 2 (set (reg:DI 1 dx [238])
        (const_int 0 [0])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 30 31 32 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:219 size.47_143 ] [219])
            (const_int 0 [0]))) "../src/spline.f":264 4 {*cmpdi_ccno_1}
     (nil))
(insn 32 30 35 2 (set (reg:DI 0 ax [orig:220 size.47_144 ] [220])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:219 size.47_143 ] [219])
            (reg:DI 1 dx [238]))) "../src/spline.f":264 967 {*movdicc_noc}
     (nil))
(insn 35 32 36 2 (set (reg:DI 40 r11 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.195_6 ] [92])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 36 35 40 2 (set (reg:DI 41 r12 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 40 36 41 2 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [6 n+0 S8 A64])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [239]) [1 *n_135(D)+0 S4 A32])) "../src/spline.f":264 82 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 0 ax [240])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":264 145 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.48+0 S8 A64])
        (reg:DI 0 ax [240])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 44 43 46 2 (set (reg:DI 0 ax [orig:224 size.49_149 ] [224])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.48+0 S8 A64])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 46 44 45 2 (set (reg:DI 1 dx [241])
        (const_int 0 [0])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 45 46 47 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:224 size.49_149 ] [224])
            (const_int 0 [0]))) "../src/spline.f":264 4 {*cmpdi_ccno_1}
     (nil))
(insn 47 45 50 2 (set (reg:DI 0 ax [orig:225 size.49_150 ] [225])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:224 size.49_149 ] [224])
            (reg:DI 1 dx [241]))) "../src/spline.f":264 967 {*movdicc_noc}
     (nil))
(insn 50 47 51 2 (set (reg:DI 38 r9 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.197_10 ] [96])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 51 50 55 2 (set (reg:DI 39 r10 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":264 81 {*movdi_internal}
     (nil))
(insn 55 51 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":270 82 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [6 n+0 S8 A64])) "../src/spline.f":271 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [243])
        (mem:SI (reg/f:DI 0 ax [242]) [1 *n_135(D)+0 S4 A32])) "../src/spline.f":271 82 {*movsi_internal}
     (nil))
(insn 58 57 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [243])) "../src/spline.f":271 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 244
(code_label 95 58 59 3 90 (nil) [1 uses])
(note 59 95 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":273 82 {*movsi_internal}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:SI 0 ax [orig:99 _13 ] [99])
                (minus:SI (reg:SI 0 ax [244])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":273 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 62 61 63 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 1 [0x1]))) "../src/spline.f":273 7 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 318)
            (pc))) "../src/spline.f":273 617 {*jcc_1}
     (nil)
 -> 318)
;;  succ:       12
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 245 246 247 248 249 250 251 252
(note 64 63 65 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 4 (set (reg:SI 1 dx [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":275 82 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [246])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":275 82 {*movsi_internal}
     (nil))
(insn 67 66 324 4 (parallel [
            (set (reg:SI 0 ax [orig:100 _14 ] [100])
                (plus:SI (reg:SI 0 ax [246])
                    (reg:SI 1 dx [245])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":275 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 324 67 68 4 (set (reg:SI 1 dx [247])
        (reg:SI 0 ax [orig:100 _14 ] [100])) "../src/spline.f":275 82 {*movsi_internal}
     (nil))
(insn 68 324 69 4 (parallel [
            (set (reg:SI 1 dx [247])
                (lshiftrt:SI (reg:SI 1 dx [247])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":275 544 {*lshrsi3_1}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:SI 0 ax [248])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (reg:SI 1 dx [247])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":275 217 {*addsi_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 0 ax [249])
                (ashiftrt:SI (reg:SI 0 ax [248])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":275 545 {*ashrsi3_1}
     (nil))
(insn 71 70 72 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [249])) "../src/spline.f":275 82 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (set (reg/f:DI 0 ax [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 ss+0 S8 A64])) "../src/spline.f":276 81 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:SF 22 xmm1 [orig:101 _15 ] [101])
        (mem:SF (reg/f:DI 0 ax [250]) [3 *ss_157(D)+0 S4 A32])) "../src/spline.f":276 127 {*movsf_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [251])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 imid+0 S4 A32])) "../src/spline.f":276 82 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [251]))) "../src/spline.f":276 145 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":276 218 {*adddi_1}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])) "../src/spline.f":276 81 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [252])) [3 *s_158(D) S4 A32])) "../src/spline.f":276 127 {*movsf_internal}
     (nil))
(insn 79 78 80 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:101 _15 ] [101]))) "../src/spline.f":276 51 {*cmpiusf}
     (nil))
(jump_insn 80 79 84 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 310)
            (pc))) "../src/spline.f":276 617 {*jcc_1}
     (nil)
 -> 310)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 253
(note 84 80 85 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 5 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 imid+0 S4 A32])) "../src/spline.f":277 82 {*movsi_internal}
     (nil))
(insn 86 85 311 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [253])) "../src/spline.f":277 82 {*movsi_internal}
     (nil))
(jump_insn 311 86 312 5 (set (pc)
        (label_ref 93)) 649 {jump}
     (nil)
 -> 93)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 312 311 310)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 254
(code_label 310 312 90 6 95 (nil) [1 uses])
(note 90 310 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 6 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [1 imid+0 S4 A32])) "../src/spline.f":279 82 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [254])) "../src/spline.f":279 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 12, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 93 92 94 7 89 (nil) [1 uses])
(note 94 93 313 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 313 94 314 7 (set (pc)
        (label_ref 95)) "../src/spline.f":281 649 {jump}
     (nil)
 -> 95)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 314 313 318)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 318 314 317 12 96 (nil) [1 uses])
(note 317 318 319 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 319 317 98 12 (const_int 0 [0]) "../src/spline.f":281 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 9, flags: (RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 229 255 256
(code_label 98 319 99 8 86 (nil) [0 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (set (reg:SF 21 xmm0 [255])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":286 127 {*movsf_internal}
     (nil))
(insn 101 100 102 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 __result_geval+0 S4 A32])
        (reg:SF 21 xmm0 [255])) "../src/spline.f":286 127 {*movsf_internal}
     (nil))
(insn 102 101 103 8 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":287 82 {*movsi_internal}
     (nil))
(insn 103 102 104 8 (parallel [
            (set (reg:SI 2 cx [orig:229 _162 ] [229])
                (plus:SI (reg:SI 0 ax [256])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":287 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 104 103 163 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":287 82 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              10 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  def 	 17 [flags] 230
(code_label 163 104 105 9 92 (nil) [1 uses])
(note 105 163 106 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])
            (reg:SI 2 cx [orig:229 _162 ] [229]))) "../src/spline.f":287 7 {*cmpsi_1}
     (nil))
(insn 107 106 108 9 (set (reg:QI 0 ax [orig:230 _164 ] [230])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":287 613 {*setcc_qi}
     (nil))
(insn 108 107 109 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:230 _164 ] [230])
            (const_int 0 [0]))) "../src/spline.f":287 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 109 108 110 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 321)
            (pc))) "../src/spline.f":287 617 {*jcc_1}
     (nil)
 -> 321)
;;  succ:       13
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 13, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273
(note 110 109 111 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 10 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])) "../src/spline.f":288 82 {*movsi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [257]))) "../src/spline.f":288 145 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 10 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":288 218 {*adddi_1}
     (nil))
(insn 114 113 115 10 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])) "../src/spline.f":288 81 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [258])) [3 *s_158(D) S4 A32])) "../src/spline.f":288 127 {*movsf_internal}
     (nil))
(insn 116 115 117 10 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])) "../src/spline.f":288 82 {*movsi_internal}
     (nil))
(insn 117 116 118 10 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [259])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":288 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 k+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 118 117 119 10 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":288 145 {*extendsidi2_rex64}
     (nil))
(insn 119 118 120 10 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":288 218 {*adddi_1}
     (nil))
(insn 120 119 121 10 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])) "../src/spline.f":288 81 {*movdi_internal}
     (nil))
(insn 121 120 122 10 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [260])) [3 *s_158(D) S4 A32])) "../src/spline.f":288 127 {*movsf_internal}
     (nil))
(insn 122 121 123 10 (set (reg:SF 21 xmm0 [261])
        (minus:SF (reg:SF 21 xmm0 [orig:107 _21 ] [107])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "../src/spline.f":288 805 {*fop_sf_1}
     (nil))
(insn 123 122 124 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [261])) "../src/spline.f":288 127 {*movsf_internal}
     (nil))
(insn 124 123 125 10 (set (reg:SI 0 ax [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])) "../src/spline.f":291 82 {*movsi_internal}
     (nil))
(insn 125 124 126 10 (set (reg:DI 0 ax [orig:112 _26 ] [112])
        (sign_extend:DI (reg:SI 0 ax [262]))) "../src/spline.f":291 145 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 10 (parallel [
            (set (reg:DI 1 dx [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":291 218 {*adddi_1}
     (nil))
(insn 127 126 128 10 (set (reg/f:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":291 81 {*movdi_internal}
     (nil))
(insn 128 127 129 10 (set (reg:SF 22 xmm1 [orig:114 _28 ] [114])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:113 _27 ] [113])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [263])) [3 *x_166(D) S4 A32])) "../src/spline.f":291 127 {*movsf_internal}
     (nil))
(insn 129 128 130 10 (set (reg:SI 0 ax [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])) "../src/spline.f":291 82 {*movsi_internal}
     (nil))
(insn 130 129 131 10 (parallel [
            (set (reg:SI 0 ax [orig:115 _29 ] [115])
                (plus:SI (reg:SI 0 ax [264])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":291 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 k+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 131 130 132 10 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [orig:115 _29 ] [115]))) "../src/spline.f":291 145 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 10 (parallel [
            (set (reg:DI 1 dx [orig:117 _31 ] [117])
                (plus:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":291 218 {*adddi_1}
     (nil))
(insn 133 132 134 10 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":291 81 {*movdi_internal}
     (nil))
(insn 134 133 135 10 (set (reg:SF 21 xmm0 [orig:118 _32 ] [118])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:117 _31 ] [117])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [265])) [3 *x_166(D) S4 A32])) "../src/spline.f":291 127 {*movsf_internal}
     (nil))
(insn 135 134 136 10 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (plus:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (reg:SF 22 xmm1 [orig:114 _28 ] [114]))) "../src/spline.f":291 802 {*fop_sf_comm}
     (nil))
(insn 136 135 137 10 (set (reg:SF 22 xmm1 [orig:120 _34 ] [120])
        (reg:SF 21 xmm0 [orig:119 _33 ] [119])) "../src/spline.f":291 127 {*movsf_internal}
     (nil))
(insn 137 136 138 10 (set (reg:SF 21 xmm0 [266])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC10") [flags 0x2]) [3  S4 A32])) "../src/spline.f":291 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 138 137 139 10 (set (reg:SF 22 xmm1 [orig:121 _35 ] [121])
        (mult:SF (reg:SF 22 xmm1 [orig:120 _34 ] [120])
            (reg:SF 21 xmm0 [266]))) "../src/spline.f":291 802 {*fop_sf_comm}
     (nil))
(insn 139 138 140 10 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])) "../src/spline.f":291 82 {*movsi_internal}
     (nil))
(insn 140 139 141 10 (parallel [
            (set (reg:SI 0 ax [orig:122 _36 ] [122])
                (plus:SI (reg:SI 0 ax [267])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":291 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 k+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 141 140 142 10 (set (reg:DI 0 ax [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 0 ax [orig:122 _36 ] [122]))) "../src/spline.f":291 145 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 10 (parallel [
            (set (reg:DI 1 dx [orig:124 _38 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":291 218 {*adddi_1}
     (nil))
(insn 143 142 144 10 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [5 xs+0 S8 A64])) "../src/spline.f":291 81 {*movdi_internal}
     (nil))
(insn 144 143 145 10 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:124 _38 ] [124])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [268])) [3 *xs_167(D) S4 A32])) "../src/spline.f":291 127 {*movsf_internal}
     (nil))
(insn 145 144 146 10 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])) "../src/spline.f":291 82 {*movsi_internal}
     (nil))
(insn 146 145 147 10 (set (reg:DI 0 ax [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 0 ax [269]))) "../src/spline.f":291 145 {*extendsidi2_rex64}
     (nil))
(insn 147 146 148 10 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (plus:DI (reg:DI 0 ax [orig:126 _40 ] [126])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":291 218 {*adddi_1}
     (nil))
(insn 148 147 149 10 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [5 xs+0 S8 A64])) "../src/spline.f":291 81 {*movdi_internal}
     (nil))
(insn 149 148 150 10 (set (reg:SF 23 xmm2 [orig:128 _42 ] [128])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:127 _41 ] [127])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [270])) [3 *xs_167(D) S4 A32])) "../src/spline.f":291 127 {*movsf_internal}
     (nil))
(insn 150 149 152 10 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (minus:SF (reg:SF 21 xmm0 [orig:125 _39 ] [125])
            (reg:SF 23 xmm2 [orig:128 _42 ] [128]))) "../src/spline.f":291 805 {*fop_sf_1}
     (nil))
(insn 152 150 153 10 (set (reg:SF 21 xmm0 [orig:131 _45 ] [131])
        (mult:SF (reg:SF 21 xmm0 [orig:130 _44 ] [130])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32]))) "../src/spline.f":291 802 {*fop_sf_comm}
     (nil))
(insn 153 152 154 10 (set (reg:SF 23 xmm2 [271])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [3  S4 A32])) "../src/spline.f":291 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 154 153 155 10 (set (reg:SF 21 xmm0 [orig:132 _46 ] [132])
        (div:SF (reg:SF 21 xmm0 [orig:131 _45 ] [131])
            (reg:SF 23 xmm2 [271]))) "../src/spline.f":291 805 {*fop_sf_1}
     (nil))
(insn 155 154 156 10 (set (reg:SF 21 xmm0 [272])
        (plus:SF (reg:SF 21 xmm0 [orig:132 _46 ] [132])
            (reg:SF 22 xmm1 [orig:121 _35 ] [121]))) "../src/spline.f":291 802 {*fop_sf_comm}
     (nil))
(insn 156 155 157 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 dgev+0 S4 A32])
        (reg:SF 21 xmm0 [272])) "../src/spline.f":291 127 {*movsf_internal}
     (nil))
(insn 157 156 158 10 (set (reg:SF 21 xmm0 [273])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 dgev+0 S4 A32])) "../src/spline.f":293 127 {*movsf_internal}
     (nil))
(insn 158 157 159 10 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (mult:SF (reg:SF 21 xmm0 [273])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32]))) "../src/spline.f":293 802 {*fop_sf_comm}
     (nil))
(insn 159 158 160 10 (set (reg:SF 22 xmm1 [orig:134 __result_geval.199_48 ] [134])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 __result_geval+0 S4 A32])) "../src/spline.f":293 127 {*movsf_internal}
     (nil))
(insn 160 159 161 10 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (plus:SF (reg:SF 21 xmm0 [orig:133 _47 ] [133])
            (reg:SF 22 xmm1 [orig:134 __result_geval.199_48 ] [134]))) "../src/spline.f":293 802 {*fop_sf_comm}
     (nil))
(insn 161 160 162 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 __result_geval+0 S4 A32])
        (reg:SF 21 xmm0 [orig:135 _49 ] [135])) "../src/spline.f":293 127 {*movsf_internal}
     (nil))
(insn 162 161 315 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [1 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":287 217 {*addsi_1}
     (nil))
(jump_insn 315 162 316 10 (set (pc)
        (label_ref 163)) "../src/spline.f":287 649 {jump}
     (nil)
 -> 163)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229

(barrier 316 315 321)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 321 316 320 13 97 (nil) [1 uses])
(note 320 321 322 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 322 320 166 13 (const_int 0 [0]) "../src/spline.f":293 682 {nop}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 21 [xmm
(code_label 166 322 167 11 91 (nil) [0 uses])
(note 167 166 168 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 11 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":297 82 {*movsi_internal}
     (nil))
(insn 169 168 170 11 (set (reg:DI 0 ax [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 0 ax [274]))) "../src/spline.f":297 145 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 11 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":297 218 {*adddi_1}
     (nil))
(insn 171 170 172 11 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])) "../src/spline.f":297 81 {*movdi_internal}
     (nil))
(insn 172 171 173 11 (set (reg:SF 21 xmm0 [orig:138 _52 ] [138])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [275])) [3 *s_158(D) S4 A32])) "../src/spline.f":297 127 {*movsf_internal}
     (nil))
(insn 173 172 174 11 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":297 82 {*movsi_internal}
     (nil))
(insn 174 173 175 11 (parallel [
            (set (reg:SI 0 ax [orig:139 _53 ] [139])
                (plus:SI (reg:SI 0 ax [276])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":297 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 175 174 176 11 (set (reg:DI 0 ax [orig:140 _54 ] [140])
        (sign_extend:DI (reg:SI 0 ax [orig:139 _53 ] [139]))) "../src/spline.f":297 145 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 11 (parallel [
            (set (reg:DI 1 dx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 _54 ] [140])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":297 218 {*adddi_1}
     (nil))
(insn 177 176 178 11 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])) "../src/spline.f":297 81 {*movdi_internal}
     (nil))
(insn 178 177 179 11 (set (reg:SF 22 xmm1 [orig:142 _56 ] [142])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:141 _55 ] [141])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [277])) [3 *s_158(D) S4 A32])) "../src/spline.f":297 127 {*movsf_internal}
     (nil))
(insn 179 178 180 11 (set (reg:SF 21 xmm0 [278])
        (minus:SF (reg:SF 21 xmm0 [orig:138 _52 ] [138])
            (reg:SF 22 xmm1 [orig:142 _56 ] [142]))) "../src/spline.f":297 805 {*fop_sf_1}
     (nil))
(insn 180 179 181 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [278])) "../src/spline.f":297 127 {*movsf_internal}
     (nil))
(insn 181 180 182 11 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [4 ss+0 S8 A64])) "../src/spline.f":298 81 {*movdi_internal}
     (nil))
(insn 182 181 183 11 (set (reg:SF 21 xmm0 [orig:143 _57 ] [143])
        (mem:SF (reg/f:DI 0 ax [279]) [3 *ss_157(D)+0 S4 A32])) "../src/spline.f":298 127 {*movsf_internal}
     (nil))
(insn 183 182 184 11 (set (reg:SI 0 ax [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":298 82 {*movsi_internal}
     (nil))
(insn 184 183 185 11 (parallel [
            (set (reg:SI 0 ax [orig:144 _58 ] [144])
                (plus:SI (reg:SI 0 ax [280])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":298 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 185 184 186 11 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (sign_extend:DI (reg:SI 0 ax [orig:144 _58 ] [144]))) "../src/spline.f":298 145 {*extendsidi2_rex64}
     (nil))
(insn 186 185 187 11 (parallel [
            (set (reg:DI 1 dx [orig:146 _60 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":298 218 {*adddi_1}
     (nil))
(insn 187 186 188 11 (set (reg/f:DI 0 ax [281])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [5 s+0 S8 A64])) "../src/spline.f":298 81 {*movdi_internal}
     (nil))
(insn 188 187 189 11 (set (reg:SF 22 xmm1 [orig:147 _61 ] [147])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:146 _60 ] [146])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [281])) [3 *s_158(D) S4 A32])) "../src/spline.f":298 127 {*movsf_internal}
     (nil))
(insn 189 188 191 11 (set (reg:SF 21 xmm0 [orig:148 _62 ] [148])
        (minus:SF (reg:SF 21 xmm0 [orig:143 _57 ] [143])
            (reg:SF 22 xmm1 [orig:147 _61 ] [147]))) "../src/spline.f":298 805 {*fop_sf_1}
     (nil))
(insn 191 189 192 11 (set (reg:SF 21 xmm0 [282])
        (div:SF (reg:SF 21 xmm0 [orig:149 _63 ] [149])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32]))) "../src/spline.f":298 805 {*fop_sf_1}
     (nil))
(insn 192 191 193 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [282])) "../src/spline.f":298 127 {*movsf_internal}
     (nil))
(insn 193 192 194 11 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":299 82 {*movsi_internal}
     (nil))
(insn 194 193 195 11 (parallel [
            (set (reg:SI 0 ax [orig:150 _64 ] [150])
                (plus:SI (reg:SI 0 ax [283])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":299 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 195 194 196 11 (set (reg:DI 0 ax [orig:151 _65 ] [151])
        (sign_extend:DI (reg:SI 0 ax [orig:150 _64 ] [150]))) "../src/spline.f":299 145 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 11 (parallel [
            (set (reg:DI 1 dx [orig:152 _66 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _65 ] [151])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":299 218 {*adddi_1}
     (nil))
(insn 197 196 198 11 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [5 xs+0 S8 A64])) "../src/spline.f":299 81 {*movdi_internal}
     (nil))
(insn 198 197 199 11 (set (reg:SF 21 xmm0 [orig:153 _67 ] [153])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:152 _66 ] [152])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [284])) [3 *xs_167(D) S4 A32])) "../src/spline.f":299 127 {*movsf_internal}
     (nil))
(insn 199 198 200 11 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (mult:SF (reg:SF 21 xmm0 [orig:153 _67 ] [153])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32]))) "../src/spline.f":299 802 {*fop_sf_comm}
     (nil))
(insn 200 199 201 11 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":299 82 {*movsi_internal}
     (nil))
(insn 201 200 202 11 (set (reg:DI 0 ax [orig:155 _69 ] [155])
        (sign_extend:DI (reg:SI 0 ax [285]))) "../src/spline.f":299 145 {*extendsidi2_rex64}
     (nil))
(insn 202 201 203 11 (parallel [
            (set (reg:DI 1 dx [orig:156 _70 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 _69 ] [155])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":299 218 {*adddi_1}
     (nil))
(insn 203 202 204 11 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":299 81 {*movdi_internal}
     (nil))
(insn 204 203 205 11 (set (reg:SF 22 xmm1 [orig:157 _71 ] [157])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:156 _70 ] [156])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [286])) [3 *x_166(D) S4 A32])) "../src/spline.f":299 127 {*movsf_internal}
     (nil))
(insn 205 204 206 11 (set (reg:SF 21 xmm0 [orig:158 _72 ] [158])
        (minus:SF (reg:SF 21 xmm0 [orig:154 _68 ] [154])
            (reg:SF 22 xmm1 [orig:157 _71 ] [157]))) "../src/spline.f":299 805 {*fop_sf_1}
     (nil))
(insn 206 205 207 11 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":299 82 {*movsi_internal}
     (nil))
(insn 207 206 208 11 (parallel [
            (set (reg:SI 0 ax [orig:159 _73 ] [159])
                (plus:SI (reg:SI 0 ax [287])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":299 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 208 207 209 11 (set (reg:DI 0 ax [orig:160 _74 ] [160])
        (sign_extend:DI (reg:SI 0 ax [orig:159 _73 ] [159]))) "../src/spline.f":299 145 {*extendsidi2_rex64}
     (nil))
(insn 209 208 210 11 (parallel [
            (set (reg:DI 1 dx [orig:161 _75 ] [161])
                (plus:DI (reg:DI 0 ax [orig:160 _74 ] [160])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":299 218 {*adddi_1}
     (nil))
(insn 210 209 211 11 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":299 81 {*movdi_internal}
     (nil))
(insn 211 210 212 11 (set (reg:SF 22 xmm1 [orig:162 _76 ] [162])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:161 _75 ] [161])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [288])) [3 *x_166(D) S4 A32])) "../src/spline.f":299 127 {*movsf_internal}
     (nil))
(insn 212 211 213 11 (set (reg:SF 21 xmm0 [289])
        (plus:SF (reg:SF 21 xmm0 [orig:158 _72 ] [158])
            (reg:SF 22 xmm1 [orig:162 _76 ] [162]))) "../src/spline.f":299 802 {*fop_sf_comm}
     (nil))
(insn 213 212 214 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 cx1+0 S4 A32])
        (reg:SF 21 xmm0 [289])) "../src/spline.f":299 127 {*movsf_internal}
     (nil))
(insn 214 213 215 11 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":300 82 {*movsi_internal}
     (nil))
(insn 215 214 216 11 (set (reg:DI 0 ax [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 0 ax [290]))) "../src/spline.f":300 145 {*extendsidi2_rex64}
     (nil))
(insn 216 215 217 11 (parallel [
            (set (reg:DI 1 dx [orig:164 _78 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 _77 ] [163])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":300 218 {*adddi_1}
     (nil))
(insn 217 216 218 11 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [5 xs+0 S8 A64])) "../src/spline.f":300 81 {*movdi_internal}
     (nil))
(insn 218 217 219 11 (set (reg:SF 21 xmm0 [orig:165 _79 ] [165])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:164 _78 ] [164])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [291])) [3 *xs_167(D) S4 A32])) "../src/spline.f":300 127 {*movsf_internal}
     (nil))
(insn 219 218 220 11 (set (reg:SF 21 xmm0 [orig:166 _80 ] [166])
        (mult:SF (reg:SF 21 xmm0 [orig:165 _79 ] [165])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32]))) "../src/spline.f":300 802 {*fop_sf_comm}
     (nil))
(insn 220 219 221 11 (set (reg:SI 0 ax [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":300 82 {*movsi_internal}
     (nil))
(insn 221 220 222 11 (set (reg:DI 0 ax [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 0 ax [292]))) "../src/spline.f":300 145 {*extendsidi2_rex64}
     (nil))
(insn 222 221 223 11 (parallel [
            (set (reg:DI 1 dx [orig:168 _82 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":300 218 {*adddi_1}
     (nil))
(insn 223 222 224 11 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":300 81 {*movdi_internal}
     (nil))
(insn 224 223 225 11 (set (reg:SF 22 xmm1 [orig:169 _83 ] [169])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:168 _82 ] [168])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [293])) [3 *x_166(D) S4 A32])) "../src/spline.f":300 127 {*movsf_internal}
     (nil))
(insn 225 224 226 11 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (minus:SF (reg:SF 21 xmm0 [orig:166 _80 ] [166])
            (reg:SF 22 xmm1 [orig:169 _83 ] [169]))) "../src/spline.f":300 805 {*fop_sf_1}
     (nil))
(insn 226 225 227 11 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":300 82 {*movsi_internal}
     (nil))
(insn 227 226 228 11 (parallel [
            (set (reg:SI 0 ax [orig:171 _85 ] [171])
                (plus:SI (reg:SI 0 ax [294])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":300 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 228 227 229 11 (set (reg:DI 0 ax [orig:172 _86 ] [172])
        (sign_extend:DI (reg:SI 0 ax [orig:171 _85 ] [171]))) "../src/spline.f":300 145 {*extendsidi2_rex64}
     (nil))
(insn 229 228 230 11 (parallel [
            (set (reg:DI 1 dx [orig:173 _87 ] [173])
                (plus:DI (reg:DI 0 ax [orig:172 _86 ] [172])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":300 218 {*adddi_1}
     (nil))
(insn 230 229 231 11 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":300 81 {*movdi_internal}
     (nil))
(insn 231 230 232 11 (set (reg:SF 22 xmm1 [orig:174 _88 ] [174])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:173 _87 ] [173])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [295])) [3 *x_166(D) S4 A32])) "../src/spline.f":300 127 {*movsf_internal}
     (nil))
(insn 232 231 233 11 (set (reg:SF 21 xmm0 [296])
        (plus:SF (reg:SF 21 xmm0 [orig:170 _84 ] [170])
            (reg:SF 22 xmm1 [orig:174 _88 ] [174]))) "../src/spline.f":300 802 {*fop_sf_comm}
     (nil))
(insn 233 232 234 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 cx2+0 S4 A32])
        (reg:SF 21 xmm0 [296])) "../src/spline.f":300 127 {*movsf_internal}
     (nil))
(insn 234 233 235 11 (set (reg:SF 22 xmm1 [297])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 235 234 236 11 (set (reg:SF 21 xmm0 [298])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC10") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 236 235 237 11 (set (reg:SF 21 xmm0 [orig:175 _89 ] [175])
        (mult:SF (reg:SF 21 xmm0 [298])
            (reg:SF 22 xmm1 [297]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 237 236 238 11 (set (reg:SF 21 xmm0 [orig:176 _90 ] [176])
        (mult:SF (reg:SF 21 xmm0 [orig:175 _89 ] [175])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 238 237 239 11 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":305 82 {*movsi_internal}
     (nil))
(insn 239 238 240 11 (set (reg:DI 0 ax [orig:177 _91 ] [177])
        (sign_extend:DI (reg:SI 0 ax [299]))) "../src/spline.f":305 145 {*extendsidi2_rex64}
     (nil))
(insn 240 239 241 11 (parallel [
            (set (reg:DI 1 dx [orig:178 _92 ] [178])
                (plus:DI (reg:DI 0 ax [orig:177 _91 ] [177])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":305 218 {*adddi_1}
     (nil))
(insn 241 240 242 11 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":305 81 {*movdi_internal}
     (nil))
(insn 242 241 243 11 (set (reg:SF 22 xmm1 [orig:179 _93 ] [179])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:178 _92 ] [178])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [300])) [3 *x_166(D) S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 243 242 244 11 (set (reg:SF 22 xmm1 [orig:180 _94 ] [180])
        (mult:SF (reg:SF 22 xmm1 [orig:179 _93 ] [179])
            (reg:SF 21 xmm0 [orig:176 _90 ] [176]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 244 243 245 11 (set (reg:SF 23 xmm2 [301])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 245 244 246 11 (set (reg:SF 21 xmm0 [302])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC10") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 246 245 247 11 (set (reg:SF 21 xmm0 [orig:181 _95 ] [181])
        (mult:SF (reg:SF 21 xmm0 [302])
            (reg:SF 23 xmm2 [301]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 247 246 248 11 (set (reg:SF 21 xmm0 [orig:182 _96 ] [182])
        (mult:SF (reg:SF 21 xmm0 [orig:181 _95 ] [181])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 248 247 249 11 (set (reg:SF 23 xmm2 [303])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 249 248 327 11 (set (reg:SF 23 xmm2 [303])
        (minus:SF (reg:SF 23 xmm2 [303])
            (reg:SF 21 xmm0 [orig:182 _96 ] [182]))) "../src/spline.f":305 805 {*fop_sf_1}
     (nil))
(insn 327 249 250 11 (set (reg:SF 21 xmm0 [orig:183 _97 ] [183])
        (reg:SF 23 xmm2 [303])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 250 327 251 11 (set (reg:SF 23 xmm2 [orig:184 _98 ] [184])
        (reg:SF 21 xmm0 [orig:183 _97 ] [183])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 251 250 252 11 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":305 82 {*movsi_internal}
     (nil))
(insn 252 251 253 11 (parallel [
            (set (reg:SI 0 ax [orig:185 _99 ] [185])
                (plus:SI (reg:SI 0 ax [304])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":305 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 253 252 254 11 (set (reg:DI 0 ax [orig:186 _100 ] [186])
        (sign_extend:DI (reg:SI 0 ax [orig:185 _99 ] [185]))) "../src/spline.f":305 145 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 11 (parallel [
            (set (reg:DI 1 dx [orig:187 _101 ] [187])
                (plus:DI (reg:DI 0 ax [orig:186 _100 ] [186])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":305 218 {*adddi_1}
     (nil))
(insn 255 254 256 11 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 x+0 S8 A64])) "../src/spline.f":305 81 {*movdi_internal}
     (nil))
(insn 256 255 257 11 (set (reg:SF 21 xmm0 [orig:188 _102 ] [188])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:187 _101 ] [187])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [305])) [3 *x_166(D) S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 257 256 258 11 (set (reg:SF 21 xmm0 [orig:189 _103 ] [189])
        (mult:SF (reg:SF 21 xmm0 [orig:188 _102 ] [188])
            (reg:SF 23 xmm2 [orig:184 _98 ] [184]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 258 257 259 11 (set (reg:SF 22 xmm1 [orig:190 _104 ] [190])
        (plus:SF (reg:SF 22 xmm1 [orig:180 _94 ] [180])
            (reg:SF 21 xmm0 [orig:189 _103 ] [189]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 259 258 260 11 (set (reg:SF 23 xmm2 [306])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 260 259 261 11 (set (reg:SF 21 xmm0 [307])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC12") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 8.0e+0 [0x0.8p+4])
        (nil)))
(insn 261 260 262 11 (set (reg:SF 21 xmm0 [orig:191 _105 ] [191])
        (mult:SF (reg:SF 21 xmm0 [307])
            (reg:SF 23 xmm2 [306]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 262 261 263 11 (set (reg:SF 23 xmm2 [308])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 263 262 264 11 (set (reg:SF 23 xmm2 [orig:192 _106 ] [192])
        (minus:SF (reg:SF 23 xmm2 [308])
            (reg:SF 21 xmm0 [orig:191 _105 ] [191]))) "../src/spline.f":305 805 {*fop_sf_1}
     (nil))
(insn 264 263 265 11 (set (reg:SF 24 xmm3 [309])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 265 264 266 11 (set (reg:SF 21 xmm0 [310])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 266 265 267 11 (set (reg:SF 21 xmm0 [orig:193 _107 ] [193])
        (mult:SF (reg:SF 21 xmm0 [310])
            (reg:SF 24 xmm3 [309]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 267 266 268 11 (set (reg:SF 21 xmm0 [orig:194 _108 ] [194])
        (mult:SF (reg:SF 21 xmm0 [orig:193 _107 ] [193])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 268 267 270 11 (set (reg:SF 21 xmm0 [orig:195 _109 ] [195])
        (plus:SF (reg:SF 21 xmm0 [orig:194 _108 ] [194])
            (reg:SF 23 xmm2 [orig:192 _106 ] [192]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 270 268 271 11 (set (reg:SF 21 xmm0 [orig:197 _111 ] [197])
        (mult:SF (reg:SF 21 xmm0 [orig:196 _110 ] [196])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 271 270 272 11 (set (reg:SF 21 xmm0 [orig:198 _112 ] [198])
        (mult:SF (reg:SF 21 xmm0 [orig:197 _111 ] [197])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 272 271 273 11 (set (reg:SF 21 xmm0 [orig:199 _113 ] [199])
        (mult:SF (reg:SF 21 xmm0 [orig:198 _112 ] [198])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 cx1+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 273 272 274 11 (set (reg:SF 23 xmm2 [311])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 274 273 275 11 (set (reg:SF 21 xmm0 [orig:200 _114 ] [200])
        (div:SF (reg:SF 21 xmm0 [orig:199 _113 ] [199])
            (reg:SF 23 xmm2 [311]))) "../src/spline.f":305 805 {*fop_sf_1}
     (nil))
(insn 275 274 276 11 (set (reg:SF 22 xmm1 [orig:201 _115 ] [201])
        (plus:SF (reg:SF 22 xmm1 [orig:190 _104 ] [190])
            (reg:SF 21 xmm0 [orig:200 _114 ] [200]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 276 275 277 11 (set (reg:SF 23 xmm2 [312])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 277 276 278 11 (set (reg:SF 21 xmm0 [313])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 278 277 279 11 (set (reg:SF 21 xmm0 [orig:202 _116 ] [202])
        (mult:SF (reg:SF 21 xmm0 [313])
            (reg:SF 23 xmm2 [312]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 279 278 280 11 (set (reg:SF 21 xmm0 [orig:203 _117 ] [203])
        (mult:SF (reg:SF 21 xmm0 [orig:202 _116 ] [202])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 280 279 281 11 (set (reg:SF 24 xmm3 [314])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 281 280 282 11 (set (reg:SF 23 xmm2 [315])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 282 281 283 11 (set (reg:SF 23 xmm2 [orig:204 _118 ] [204])
        (mult:SF (reg:SF 23 xmm2 [315])
            (reg:SF 24 xmm3 [314]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 283 282 285 11 (set (reg:SF 21 xmm0 [orig:205 _119 ] [205])
        (minus:SF (reg:SF 21 xmm0 [orig:203 _117 ] [203])
            (reg:SF 23 xmm2 [orig:204 _118 ] [204]))) "../src/spline.f":305 805 {*fop_sf_1}
     (nil))
(insn 285 283 286 11 (set (reg:SF 21 xmm0 [orig:207 _121 ] [207])
        (mult:SF (reg:SF 21 xmm0 [orig:206 _120 ] [206])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 286 285 287 11 (set (reg:SF 21 xmm0 [orig:208 _122 ] [208])
        (mult:SF (reg:SF 21 xmm0 [orig:207 _121 ] [207])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 t+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 287 286 288 11 (set (reg:SF 21 xmm0 [orig:209 _123 ] [209])
        (mult:SF (reg:SF 21 xmm0 [orig:208 _122 ] [208])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [3 cx2+0 S4 A32]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 288 287 289 11 (set (reg:SF 23 xmm2 [316])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC11") [flags 0x2]) [3  S4 A32])) "../src/spline.f":305 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 289 288 290 11 (set (reg:SF 21 xmm0 [orig:210 _124 ] [210])
        (div:SF (reg:SF 21 xmm0 [orig:209 _123 ] [209])
            (reg:SF 23 xmm2 [316]))) "../src/spline.f":305 805 {*fop_sf_1}
     (nil))
(insn 290 289 291 11 (set (reg:SF 21 xmm0 [317])
        (plus:SF (reg:SF 21 xmm0 [orig:210 _124 ] [210])
            (reg:SF 22 xmm1 [orig:201 _115 ] [201]))) "../src/spline.f":305 802 {*fop_sf_comm}
     (nil))
(insn 291 290 292 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 dgev+0 S4 A32])
        (reg:SF 21 xmm0 [317])) "../src/spline.f":305 127 {*movsf_internal}
     (nil))
(insn 292 291 293 11 (set (reg:SF 21 xmm0 [318])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 dgev+0 S4 A32])) "../src/spline.f":307 127 {*movsf_internal}
     (nil))
(insn 293 292 294 11 (set (reg:SF 21 xmm0 [orig:211 _125 ] [211])
        (mult:SF (reg:SF 21 xmm0 [318])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 ds+0 S4 A32]))) "../src/spline.f":307 802 {*fop_sf_comm}
     (nil))
(insn 294 293 295 11 (set (reg:SF 22 xmm1 [orig:212 __result_geval.200_126 ] [212])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 __result_geval+0 S4 A32])) "../src/spline.f":307 127 {*movsf_internal}
     (nil))
(insn 295 294 296 11 (set (reg:SF 21 xmm0 [orig:213 _127 ] [213])
        (plus:SF (reg:SF 21 xmm0 [orig:211 _125 ] [211])
            (reg:SF 22 xmm1 [orig:212 __result_geval.200_126 ] [212]))) "../src/spline.f":307 802 {*fop_sf_comm}
     (nil))
(insn 296 295 297 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 __result_geval+0 S4 A32])
        (reg:SF 21 xmm0 [orig:213 _127 ] [213])) "../src/spline.f":307 127 {*movsf_internal}
     (nil))
(insn 297 296 304 11 (set (reg:SF 21 xmm0 [orig:231 _177 ] [231])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 __result_geval+0 S4 A32])) "../src/spline.f":309 127 {*movsf_internal}
     (nil))
(insn 304 297 305 11 (set (reg/i:SF 21 xmm0)
        (reg:SF 21 xmm0 [orig:232 <retval> ] [232])) "../src/spline.f":310 127 {*movsf_internal}
     (nil))
(insn 305 304 323 11 (use (reg/i:SF 21 xmm0)) "../src/spline.f":310 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]

(note 323 305 0 NOTE_INSN_DELETED)

;; Function d2val (d2val_, funcdef_no=8, decl_uid=3878, cgraph_uid=8, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=226 from oldreg=188, assigning class GENERAL_REGS to r226
   68: {r226:SI=r226:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  209: r226:SI=r100:SI
    Inserting insn reload after:
  210: r188:SI=r226:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 78:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 112:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 128:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 130:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 131:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 144:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 161:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 164:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 165:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 1 in insn 168:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 172:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=227 from oldreg=146, assigning class SSE_REGS to r227
  172: r227:SF=r227:SF*[frame:DI-0x50]
      REG_DEAD r146:SF
    Inserting insn reload before:
  211: r227:SF=r146:SF
    Inserting insn reload after:
  212: r147:SF=r227:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 173:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 1 in insn 175:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 179:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 1 in insn 180:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 181:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 185:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=228 from oldreg=153, assigning class SSE_REGS to r228
  185: r228:SF=r228:SF/r171:SF
      REG_DEAD r171:SF
      REG_DEAD r153:SF
    Inserting insn reload before:
  213: r228:SF=r153:SF
    Inserting insn reload after:
  214: r154:SF=r228:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 186:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 195: point = 0, n_alt = -1
   Insn 194: point = 0, n_alt = -1
   Insn 190: point = 1, n_alt = -1
   Insn 187: point = 3, n_alt = 7
   Insn 186: point = 4, n_alt = 8
   Insn 214: point = 5, n_alt = -1
	Hard reg 21 is preferable by r228 with profit 1
   Insn 185: point = 7, n_alt = 2
   Insn 213: point = 8, n_alt = -1
	Hard reg 21 is preferable by r228 with profit 1
	Hard reg 22 is preferable by r228 with profit 1
   Insn 184: point = 10, n_alt = 7
   Insn 183: point = 11, n_alt = 1
   Insn 182: point = 13, n_alt = 7
   Insn 181: point = 14, n_alt = 8
   Insn 180: point = 15, n_alt = 1
   Insn 179: point = 17, n_alt = 1
   Insn 178: point = 19, n_alt = -1
   Insn 177: point = 21, n_alt = 2
   Insn 176: point = 23, n_alt = 7
   Insn 175: point = 24, n_alt = 1
   Insn 174: point = 26, n_alt = 7
   Insn 173: point = 27, n_alt = 7
   Insn 212: point = 28, n_alt = -1
	Hard reg 22 is preferable by r227 with profit 1
   Insn 172: point = 30, n_alt = 1
   Insn 211: point = 30, n_alt = -1
	Hard reg 22 is preferable by r227 with profit 1
	Hard reg 21 is preferable by r227 with profit 1
   Insn 171: point = 32, n_alt = -1
   Insn 170: point = 34, n_alt = 2
   Insn 169: point = 36, n_alt = 7
   Insn 168: point = 37, n_alt = 1
   Insn 167: point = 39, n_alt = 7
   Insn 166: point = 40, n_alt = 7
   Insn 165: point = 41, n_alt = 8
   Insn 164: point = 42, n_alt = 1
   Insn 163: point = 44, n_alt = 7
   Insn 162: point = 46, n_alt = 3
   Insn 161: point = 47, n_alt = 3
   Insn 160: point = 49, n_alt = 0
   Insn 159: point = 51, n_alt = 0
   Insn 158: point = 53, n_alt = 0
   Insn 157: point = 54, n_alt = 2
   Insn 156: point = 56, n_alt = 7
   Insn 155: point = 58, n_alt = 3
   Insn 154: point = 59, n_alt = 3
   Insn 153: point = 61, n_alt = 0
   Insn 152: point = 63, n_alt = 0
   Insn 151: point = 64, n_alt = 1
   Insn 150: point = 66, n_alt = 7
   Insn 149: point = 68, n_alt = 3
   Insn 148: point = 69, n_alt = 3
   Insn 147: point = 71, n_alt = 0
   Insn 146: point = 73, n_alt = 0
   Insn 145: point = 74, n_alt = 8
   Insn 144: point = 75, n_alt = 1
   Insn 143: point = 77, n_alt = 7
   Insn 142: point = 79, n_alt = 3
   Insn 141: point = 80, n_alt = 3
   Insn 140: point = 82, n_alt = 0
   Insn 139: point = 84, n_alt = 0
   Insn 138: point = 86, n_alt = 0
   Insn 137: point = 87, n_alt = 2
   Insn 136: point = 89, n_alt = 7
   Insn 135: point = 91, n_alt = 3
   Insn 134: point = 92, n_alt = 3
   Insn 133: point = 94, n_alt = 0
   Insn 132: point = 96, n_alt = 0
   Insn 131: point = 97, n_alt = 1
   Insn 130: point = 99, n_alt = 7
   Insn 129: point = 101, n_alt = 3
   Insn 128: point = 102, n_alt = 3
   Insn 127: point = 104, n_alt = 0
   Insn 126: point = 106, n_alt = 0
   Insn 125: point = 108, n_alt = 0
   Insn 124: point = 109, n_alt = 8
   Insn 123: point = 110, n_alt = 2
   Insn 122: point = 112, n_alt = -1
   Insn 121: point = 114, n_alt = 2
   Insn 120: point = 116, n_alt = 7
   Insn 119: point = 118, n_alt = 3
   Insn 118: point = 119, n_alt = 3
   Insn 117: point = 121, n_alt = 0
   Insn 116: point = 123, n_alt = 0
   Insn 115: point = 125, n_alt = 0
   Insn 114: point = 126, n_alt = 7
   Insn 113: point = 128, n_alt = 3
   Insn 112: point = 129, n_alt = 8
   Insn 111: point = 130, n_alt = 2
   Insn 110: point = 132, n_alt = 7
   Insn 109: point = 134, n_alt = 3
   Insn 108: point = 135, n_alt = 3
   Insn 107: point = 137, n_alt = 0
   Insn 106: point = 139, n_alt = 0
   Insn 105: point = 141, n_alt = 0
   Insn 104: point = 142, n_alt = 7
   Insn 103: point = 144, n_alt = 3
   Insn 102: point = 145, n_alt = 3
   Insn 101: point = 147, n_alt = 0
   Insn 100: point = 149, n_alt = 0
  BB 9
   Insn 207: point = 150, n_alt = -1
  BB 3
   Insn 63: point = 150, n_alt = -1
   Insn 62: point = 150, n_alt = 0
   Insn 61: point = 151, n_alt = 1
   Insn 60: point = 153, n_alt = 0
  BB 7
   Insn 203: point = 154, n_alt = -1
  BB 5
   Insn 201: point = 154, n_alt = -1
   Insn 86: point = 154, n_alt = 1
   Insn 85: point = 155, n_alt = 0
  BB 6
   Insn 92: point = 156, n_alt = 1
   Insn 91: point = 157, n_alt = 0
  BB 4
   Insn 80: point = 158, n_alt = -1
   Insn 79: point = 158, n_alt = 1
   Insn 78: point = 159, n_alt = 7
   Insn 77: point = 161, n_alt = 3
   Insn 76: point = 162, n_alt = 3
   Insn 75: point = 164, n_alt = 0
   Insn 74: point = 166, n_alt = 0
   Insn 73: point = 167, n_alt = 7
   Insn 72: point = 169, n_alt = 3
   Insn 71: point = 170, n_alt = 1
   Insn 70: point = 171, n_alt = 0
   Insn 69: point = 173, n_alt = 0
   Insn 210: point = 175, n_alt = -1
	Hard reg 1 is preferable by r226 with profit 1
   Insn 68: point = 177, n_alt = 0
   Insn 209: point = 177, n_alt = -1
   Insn 67: point = 178, n_alt = 0
   Insn 66: point = 180, n_alt = 0
   Insn 65: point = 181, n_alt = 0
  BB 2
   Insn 58: point = 182, n_alt = 1
   Insn 57: point = 183, n_alt = 0
   Insn 56: point = 185, n_alt = 3
   Insn 55: point = 186, n_alt = 1
   Insn 51: point = 186, n_alt = 2
   Insn 50: point = 187, n_alt = 3
   Insn 49: point = 188, n_alt = -1
   Insn 47: point = 190, n_alt = 1
   Insn 45: point = 192, n_alt = 0
   Insn 46: point = 192, n_alt = 2
   Insn 44: point = 193, n_alt = 3
   Insn 43: point = 194, n_alt = 5
   Insn 42: point = 195, n_alt = 0
   Insn 41: point = 197, n_alt = 0
   Insn 40: point = 199, n_alt = 3
   Insn 36: point = 200, n_alt = 2
   Insn 35: point = 201, n_alt = 3
   Insn 34: point = 202, n_alt = -1
   Insn 32: point = 204, n_alt = 1
   Insn 30: point = 206, n_alt = 0
   Insn 31: point = 206, n_alt = 2
   Insn 29: point = 207, n_alt = 3
   Insn 28: point = 208, n_alt = 5
   Insn 27: point = 209, n_alt = 0
   Insn 26: point = 211, n_alt = 0
   Insn 25: point = 213, n_alt = 3
   Insn 21: point = 214, n_alt = 2
   Insn 20: point = 215, n_alt = 3
   Insn 19: point = 216, n_alt = -1
   Insn 17: point = 218, n_alt = 1
   Insn 15: point = 220, n_alt = 0
   Insn 16: point = 220, n_alt = 2
   Insn 14: point = 221, n_alt = 3
   Insn 13: point = 222, n_alt = 5
   Insn 12: point = 223, n_alt = 0
   Insn 11: point = 225, n_alt = 0
   Insn 10: point = 227, n_alt = 3
   Insn 6: point = 228, n_alt = 5
   Insn 5: point = 228, n_alt = 5
   Insn 4: point = 228, n_alt = 5
   Insn 3: point = 228, n_alt = 5
   Insn 2: point = 228, n_alt = 5
 r87: [224..225]
 r88: [215..216]
 r89: [214..228]
 r91: [210..211]
 r92: [201..202]
 r93: [200..228]
 r95: [196..197]
 r96: [187..188]
 r97: [186..228]
 r99: [150..151]
 r100: [174..178]
 r101: [158..167]
 r102: [163..164]
 r103: [160..162]
 r104: [158..159]
 r105: [146..147]
 r106: [143..145]
 r107: [131..142]
 r108: [138..139]
 r109: [136..137]
 r110: [133..135]
 r111: [131..132]
 r112: [115..126]
 r113: [122..123]
 r114: [120..121]
 r115: [117..119]
 r116: [115..116]
 r117: [113..114]
 r118: [111..112]
 r119: [105..106]
 r120: [103..104]
 r121: [100..102]
 r122: [98..99]
 r123: [88..97]
 r124: [93..94]
 r125: [90..92]
 r126: [88..89]
 r127: [76..87]
 r128: [83..84]
 r129: [81..82]
 r130: [78..80]
 r131: [76..77]
 r132: [70..71]
 r133: [67..69]
 r134: [65..66]
 r135: [55..64]
 r136: [60..61]
 r137: [57..59]
 r138: [55..56]
 r139: [43..54]
 r140: [50..51]
 r141: [48..49]
 r142: [45..47]
 r143: [43..44]
 r144: [35..37]
 r145: [33..34]
 r146: [31..32]
 r147: [16..28]
 r148: [22..24]
 r149: [20..21]
 r150: [18..19]
 r151: [16..17]
 r152: [14..15]
 r153: [9..10]
 r154: [4..5]
 r155: [219..221]
 r156: [217..218]
 r160: [205..207]
 r161: [203..204]
 r165: [191..193]
 r166: [189..190]
 r170: [12..13]
 r171: [7..11]
 r172: [2..3]
 r173: [0..1]
 r174: [226..227]
 r175: [222..223]
 r176: [219..220]
 r177: [212..213]
 r178: [208..209]
 r179: [205..206]
 r180: [198..199]
 r181: [194..195]
 r182: [191..192]
 r183: [184..185]
 r184: [182..183]
 r185: [152..153]
 r186: [179..181]
 r187: [179..180]
 r188: [174..175]
 r189: [172..173]
 r190: [170..171]
 r191: [168..169]
 r192: [165..166]
 r193: [160..161]
 r194: [154..155]
 r195: [156..157]
 r196: [148..149]
 r197: [143..144]
 r198: [140..141]
 r199: [133..134]
 r200: [129..130]
 r201: [127..128]
 r202: [124..125]
 r203: [117..118]
 r204: [109..110]
 r205: [107..108]
 r206: [100..101]
 r207: [95..96]
 r208: [90..91]
 r209: [85..86]
 r210: [78..79]
 r211: [74..75]
 r212: [72..73]
 r213: [67..68]
 r214: [62..63]
 r215: [57..58]
 r216: [52..53]
 r217: [45..46]
 r218: [41..42]
 r219: [38..40]
 r220: [38..39]
 r221: [35..36]
 r222: [25..27]
 r223: [25..26]
 r224: [22..23]
 r226: [176..177]
 r227: [29..30]
 r228: [6..8]
Compressing live ranges: from 229 to 196 - 85%
Ranges after the compression:
 r87: [192..193]
 r88: [184..185]
 r89: [184..195]
 r91: [180..181]
 r92: [172..173]
 r93: [172..195]
 r95: [168..169]
 r96: [160..161]
 r97: [160..195]
 r99: [128..129]
 r100: [150..153]
 r101: [136..143]
 r102: [140..141]
 r103: [138..139]
 r104: [136..137]
 r105: [124..125]
 r106: [122..123]
 r107: [112..121]
 r108: [118..119]
 r109: [116..117]
 r110: [114..115]
 r111: [112..113]
 r112: [98..107]
 r113: [104..105]
 r114: [102..103]
 r115: [100..101]
 r116: [98..99]
 r117: [96..97]
 r118: [94..95]
 r119: [88..89]
 r120: [86..87]
 r121: [84..85]
 r122: [82..83]
 r123: [74..81]
 r124: [78..79]
 r125: [76..77]
 r126: [74..75]
 r127: [64..73]
 r128: [70..71]
 r129: [68..69]
 r130: [66..67]
 r131: [64..65]
 r132: [58..59]
 r133: [56..57]
 r134: [54..55]
 r135: [46..53]
 r136: [50..51]
 r137: [48..49]
 r138: [46..47]
 r139: [36..45]
 r140: [42..43]
 r141: [40..41]
 r142: [38..39]
 r143: [36..37]
 r144: [30..31]
 r145: [28..29]
 r146: [26..27]
 r147: [14..23]
 r148: [20..21]
 r149: [18..19]
 r150: [16..17]
 r151: [14..15]
 r152: [12..13]
 r153: [8..9]
 r154: [4..5]
 r155: [188..189]
 r156: [186..187]
 r160: [176..177]
 r161: [174..175]
 r165: [164..165]
 r166: [162..163]
 r170: [10..11]
 r171: [6..9]
 r172: [2..3]
 r173: [0..1]
 r174: [194..195]
 r175: [190..191]
 r176: [188..189]
 r177: [182..183]
 r178: [178..179]
 r179: [176..177]
 r180: [170..171]
 r181: [166..167]
 r182: [164..165]
 r183: [158..159]
 r184: [156..157]
 r185: [130..131]
 r186: [154..155]
 r187: [154..155]
 r188: [150..151]
 r189: [148..149]
 r190: [146..147]
 r191: [144..145]
 r192: [142..143]
 r193: [138..139]
 r194: [132..133]
 r195: [134..135]
 r196: [126..127]
 r197: [122..123]
 r198: [120..121]
 r199: [114..115]
 r200: [110..111]
 r201: [108..109]
 r202: [106..107]
 r203: [100..101]
 r204: [92..93]
 r205: [90..91]
 r206: [84..85]
 r207: [80..81]
 r208: [76..77]
 r209: [72..73]
 r210: [66..67]
 r211: [62..63]
 r212: [60..61]
 r213: [56..57]
 r214: [52..53]
 r215: [48..49]
 r216: [44..45]
 r217: [38..39]
 r218: [34..35]
 r219: [32..33]
 r220: [32..33]
 r221: [30..31]
 r222: [22..23]
 r223: [22..23]
 r224: [20..21]
 r226: [152..153]
 r227: [24..25]
 r228: [6..7]

********** Assignment #1: **********

	 Assigning to 226 (cl=GENERAL_REGS, orig=188, freq=3, tfirst=226, tfreq=3)...
	   Assign 1 to reload r226 (freq=3)
	 Assigning to 227 (cl=SSE_REGS, orig=146, freq=3, tfirst=227, tfreq=3)...
	   Assign 22 to reload r227 (freq=3)
	 Assigning to 228 (cl=SSE_REGS, orig=153, freq=3, tfirst=228, tfreq=3)...
	   Assign 22 to reload r228 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=-8, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 50
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 73
changing reg in insn 79
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 111
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 121
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 137
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 144
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 157
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 164
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 168
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 186
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 190
changing reg in insn 190
changing reg in insn 194
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 92
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
deleting insn with uid = 19.
deleting insn with uid = 34.
deleting insn with uid = 49.
deleting insn with uid = 210.
deleting insn with uid = 122.
deleting insn with uid = 171.
deleting insn with uid = 212.
deleting insn with uid = 178.
deleting insn with uid = 213.
deleting insn with uid = 190.
starting the processing of deferred insns
ending the processing of deferred insns


d2val

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14]
;;  ref usage 	r0={63d,66u} r1={17d,17u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,73u} r7={1d,9u} r17={25d,5u} r20={1d,1u,9e} r21={28d,29u} r22={14d,13u} r23={3d,2u} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} 
;;    total ref usage 397{169d,219u,9e} in 156{156 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 155 156 160 161 165 166 174 175 176 177 178 179 180 181 182 183 184
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])
        (reg:DI 2 cx [ s ])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])
        (reg:DI 37 r8 [ n ])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [174]) [1 *n_74(D)+0 S4 A32])) "../src/spline.f":369 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [175])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":369 145 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.50+0 S8 A64])
        (reg:DI 0 ax [175])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (set (reg:DI 0 ax [orig:155 size.51_76 ] [155])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.50+0 S8 A64])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 16 14 15 2 (set (reg:DI 1 dx [176])
        (const_int 0 [0])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 15 16 17 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:155 size.51_76 ] [155])
            (const_int 0 [0]))) "../src/spline.f":369 4 {*cmpdi_ccno_1}
     (nil))
(insn 17 15 20 2 (set (reg:DI 0 ax [orig:156 size.51_77 ] [156])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:155 size.51_76 ] [155])
            (reg:DI 1 dx [176]))) "../src/spline.f":369 967 {*movdicc_noc}
     (nil))
(insn 20 17 21 2 (set (reg:DI 42 r13 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.201_2 ] [88])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 21 20 25 2 (set (reg:DI 43 r14 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 25 21 26 2 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [177]) [1 *n_74(D)+0 S4 A32])) "../src/spline.f":369 82 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 0 ax [178])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":369 145 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.54+0 S8 A64])
        (reg:DI 0 ax [178])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 29 28 31 2 (set (reg:DI 0 ax [orig:160 size.55_82 ] [160])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.54+0 S8 A64])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 31 29 30 2 (set (reg:DI 1 dx [179])
        (const_int 0 [0])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 30 31 32 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:160 size.55_82 ] [160])
            (const_int 0 [0]))) "../src/spline.f":369 4 {*cmpdi_ccno_1}
     (nil))
(insn 32 30 35 2 (set (reg:DI 0 ax [orig:161 size.55_83 ] [161])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:160 size.55_82 ] [160])
            (reg:DI 1 dx [179]))) "../src/spline.f":369 967 {*movdicc_noc}
     (nil))
(insn 35 32 36 2 (set (reg:DI 40 r11 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.203_6 ] [92])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 36 35 40 2 (set (reg:DI 41 r12 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 40 36 41 2 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [180]) [1 *n_74(D)+0 S4 A32])) "../src/spline.f":369 82 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 0 ax [181])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":369 145 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.52+0 S8 A64])
        (reg:DI 0 ax [181])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 44 43 46 2 (set (reg:DI 0 ax [orig:165 size.53_88 ] [165])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.52+0 S8 A64])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 46 44 45 2 (set (reg:DI 1 dx [182])
        (const_int 0 [0])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 45 46 47 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:165 size.53_88 ] [165])
            (const_int 0 [0]))) "../src/spline.f":369 4 {*cmpdi_ccno_1}
     (nil))
(insn 47 45 50 2 (set (reg:DI 0 ax [orig:166 size.53_89 ] [166])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:165 size.53_88 ] [165])
            (reg:DI 1 dx [182]))) "../src/spline.f":369 967 {*movdicc_noc}
     (nil))
(insn 50 47 51 2 (set (reg:DI 38 r9 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.205_10 ] [96])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 51 50 55 2 (set (reg:DI 39 r10 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":369 81 {*movdi_internal}
     (nil))
(insn 55 51 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":375 82 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [6 n+0 S8 A64])) "../src/spline.f":376 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [184])
        (mem:SI (reg/f:DI 0 ax [183]) [1 *n_74(D)+0 S4 A32])) "../src/spline.f":376 82 {*movsi_internal}
     (nil))
(insn 58 57 95 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [184])) "../src/spline.f":376 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 185
(code_label 95 58 59 3 103 (nil) [1 uses])
(note 59 95 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":378 82 {*movsi_internal}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:SI 0 ax [orig:99 _13 ] [99])
                (minus:SI (reg:SI 0 ax [185])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":378 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 62 61 63 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:99 _13 ] [99])
            (const_int 1 [0x1]))) "../src/spline.f":378 7 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 206)
            (pc))) "../src/spline.f":378 617 {*jcc_1}
     (nil)
 -> 206)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 103 104 186 187 188 189 190 191 192 193
(note 64 63 65 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 4 (set (reg:SI 1 dx [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":380 82 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":380 82 {*movsi_internal}
     (nil))
(insn 67 66 209 4 (parallel [
            (set (reg:SI 0 ax [orig:100 _14 ] [100])
                (plus:SI (reg:SI 0 ax [187])
                    (reg:SI 1 dx [186])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":380 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 209 67 68 4 (set (reg:SI 1 dx [188])
        (reg:SI 0 ax [orig:100 _14 ] [100])) "../src/spline.f":380 82 {*movsi_internal}
     (nil))
(insn 68 209 69 4 (parallel [
            (set (reg:SI 1 dx [188])
                (lshiftrt:SI (reg:SI 1 dx [188])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":380 544 {*lshrsi3_1}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:SI 0 ax [189])
                (plus:SI (reg:SI 0 ax [orig:100 _14 ] [100])
                    (reg:SI 1 dx [188])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":380 217 {*addsi_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 0 ax [190])
                (ashiftrt:SI (reg:SI 0 ax [189])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":380 545 {*ashrsi3_1}
     (nil))
(insn 71 70 72 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [190])) "../src/spline.f":380 82 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":381 81 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:SF 22 xmm1 [orig:101 _15 ] [101])
        (mem:SF (reg/f:DI 0 ax [191]) [3 *ss_96(D)+0 S4 A32])) "../src/spline.f":381 127 {*movsf_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":381 82 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [192]))) "../src/spline.f":381 145 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":381 218 {*adddi_1}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":381 81 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [193])) [3 *s_97(D) S4 A32])) "../src/spline.f":381 127 {*movsf_internal}
     (nil))
(insn 79 78 80 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:101 _15 ] [101]))) "../src/spline.f":381 51 {*cmpiusf}
     (nil))
(jump_insn 80 79 84 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 200)
            (pc))) "../src/spline.f":381 617 {*jcc_1}
     (nil)
 -> 200)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 194
(note 84 80 85 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 5 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":382 82 {*movsi_internal}
     (nil))
(insn 86 85 201 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [194])) "../src/spline.f":382 82 {*movsi_internal}
     (nil))
(jump_insn 201 86 202 5 (set (pc)
        (label_ref 93)) 649 {jump}
     (nil)
 -> 93)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 202 201 200)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 195
(code_label 200 202 90 6 106 (nil) [1 uses])
(note 90 200 91 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 6 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 imid+0 S4 A32])) "../src/spline.f":384 82 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [195])) "../src/spline.f":384 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 93 92 94 7 102 (nil) [1 uses])
(note 94 93 203 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 203 94 204 7 (set (pc)
        (label_ref 95)) "../src/spline.f":386 649 {jump}
     (nil)
 -> 95)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 204 203 206)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 206 204 205 9 107 (nil) [1 uses])
(note 205 206 207 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 207 205 98 9 (const_int 0 [0]) "../src/spline.f":386 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 21 [xmm0] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 170 171 172 173 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224
(code_label 98 207 99 8 99 (nil) [0 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":388 82 {*movsi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [196]))) "../src/spline.f":388 145 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":388 218 {*adddi_1}
     (nil))
(insn 103 102 104 8 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":388 81 {*movdi_internal}
     (nil))
(insn 104 103 105 8 (set (reg:SF 21 xmm0 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [197])) [3 *s_97(D) S4 A32])) "../src/spline.f":388 127 {*movsf_internal}
     (nil))
(insn 105 104 106 8 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":388 82 {*movsi_internal}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [198])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":388 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 107 106 108 8 (set (reg:DI 0 ax [orig:109 _23 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _22 ] [108]))) "../src/spline.f":388 145 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 8 (parallel [
            (set (reg:DI 1 dx [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":388 218 {*adddi_1}
     (nil))
(insn 109 108 110 8 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":388 81 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:110 _24 ] [110])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [199])) [3 *s_97(D) S4 A32])) "../src/spline.f":388 127 {*movsf_internal}
     (nil))
(insn 111 110 112 8 (set (reg:SF 21 xmm0 [200])
        (minus:SF (reg:SF 21 xmm0 [orig:107 _21 ] [107])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "../src/spline.f":388 805 {*fop_sf_1}
     (nil))
(insn 112 111 113 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [200])) "../src/spline.f":388 127 {*movsf_internal}
     (nil))
(insn 113 112 114 8 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 ss+0 S8 A64])) "../src/spline.f":389 81 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (reg/f:DI 0 ax [201]) [3 *ss_96(D)+0 S4 A32])) "../src/spline.f":389 127 {*movsf_internal}
     (nil))
(insn 115 114 116 8 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":389 82 {*movsi_internal}
     (nil))
(insn 116 115 117 8 (parallel [
            (set (reg:SI 0 ax [orig:113 _27 ] [113])
                (plus:SI (reg:SI 0 ax [202])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":389 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 117 116 118 8 (set (reg:DI 0 ax [orig:114 _28 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _27 ] [113]))) "../src/spline.f":389 145 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 8 (parallel [
            (set (reg:DI 1 dx [orig:115 _29 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _28 ] [114])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":389 218 {*adddi_1}
     (nil))
(insn 119 118 120 8 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [5 s+0 S8 A64])) "../src/spline.f":389 81 {*movdi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:SF 22 xmm1 [orig:116 _30 ] [116])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:115 _29 ] [115])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [203])) [3 *s_97(D) S4 A32])) "../src/spline.f":389 127 {*movsf_internal}
     (nil))
(insn 121 120 123 8 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (minus:SF (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:116 _30 ] [116]))) "../src/spline.f":389 805 {*fop_sf_1}
     (nil))
(insn 123 121 124 8 (set (reg:SF 21 xmm0 [204])
        (div:SF (reg:SF 21 xmm0 [orig:118 _32 ] [118])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":389 805 {*fop_sf_1}
     (nil))
(insn 124 123 125 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [204])) "../src/spline.f":389 127 {*movsf_internal}
     (nil))
(insn 125 124 126 8 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":390 82 {*movsi_internal}
     (nil))
(insn 126 125 127 8 (parallel [
            (set (reg:SI 0 ax [orig:119 _33 ] [119])
                (plus:SI (reg:SI 0 ax [205])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":390 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 127 126 128 8 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _33 ] [119]))) "../src/spline.f":390 145 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg:DI 1 dx [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":390 218 {*adddi_1}
     (nil))
(insn 129 128 130 8 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":390 81 {*movdi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [206])) [3 *xs_102(D) S4 A32])) "../src/spline.f":390 127 {*movsf_internal}
     (nil))
(insn 131 130 132 8 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (mult:SF (reg:SF 21 xmm0 [orig:122 _36 ] [122])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":390 802 {*fop_sf_comm}
     (nil))
(insn 132 131 133 8 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":390 82 {*movsi_internal}
     (nil))
(insn 133 132 134 8 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [207]))) "../src/spline.f":390 145 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 8 (parallel [
            (set (reg:DI 1 dx [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":390 218 {*adddi_1}
     (nil))
(insn 135 134 136 8 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":390 81 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:SF 22 xmm1 [orig:126 _40 ] [126])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [208])) [3 *x_103(D) S4 A32])) "../src/spline.f":390 127 {*movsf_internal}
     (nil))
(insn 137 136 138 8 (set (reg:SF 21 xmm0 [orig:127 _41 ] [127])
        (minus:SF (reg:SF 21 xmm0 [orig:123 _37 ] [123])
            (reg:SF 22 xmm1 [orig:126 _40 ] [126]))) "../src/spline.f":390 805 {*fop_sf_1}
     (nil))
(insn 138 137 139 8 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":390 82 {*movsi_internal}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:SI 0 ax [orig:128 _42 ] [128])
                (plus:SI (reg:SI 0 ax [209])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":390 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 140 139 141 8 (set (reg:DI 0 ax [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 0 ax [orig:128 _42 ] [128]))) "../src/spline.f":390 145 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":390 218 {*adddi_1}
     (nil))
(insn 142 141 143 8 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":390 81 {*movdi_internal}
     (nil))
(insn 143 142 144 8 (set (reg:SF 22 xmm1 [orig:131 _45 ] [131])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:130 _44 ] [130])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [210])) [3 *x_103(D) S4 A32])) "../src/spline.f":390 127 {*movsf_internal}
     (nil))
(insn 144 143 145 8 (set (reg:SF 21 xmm0 [211])
        (plus:SF (reg:SF 21 xmm0 [orig:127 _41 ] [127])
            (reg:SF 22 xmm1 [orig:131 _45 ] [131]))) "../src/spline.f":390 802 {*fop_sf_comm}
     (nil))
(insn 145 144 146 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [3 cx1+0 S4 A32])
        (reg:SF 21 xmm0 [211])) "../src/spline.f":390 127 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SI 0 ax [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":391 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [212]))) "../src/spline.f":391 145 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 8 (parallel [
            (set (reg:DI 1 dx [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":391 218 {*adddi_1}
     (nil))
(insn 149 148 150 8 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 xs+0 S8 A64])) "../src/spline.f":391 81 {*movdi_internal}
     (nil))
(insn 150 149 151 8 (set (reg:SF 21 xmm0 [orig:134 _48 ] [134])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [213])) [3 *xs_102(D) S4 A32])) "../src/spline.f":391 127 {*movsf_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (mult:SF (reg:SF 21 xmm0 [orig:134 _48 ] [134])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32]))) "../src/spline.f":391 802 {*fop_sf_comm}
     (nil))
(insn 152 151 153 8 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":391 82 {*movsi_internal}
     (nil))
(insn 153 152 154 8 (set (reg:DI 0 ax [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 0 ax [214]))) "../src/spline.f":391 145 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 8 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":391 218 {*adddi_1}
     (nil))
(insn 155 154 156 8 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":391 81 {*movdi_internal}
     (nil))
(insn 156 155 157 8 (set (reg:SF 22 xmm1 [orig:138 _52 ] [138])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:137 _51 ] [137])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [215])) [3 *x_103(D) S4 A32])) "../src/spline.f":391 127 {*movsf_internal}
     (nil))
(insn 157 156 158 8 (set (reg:SF 21 xmm0 [orig:139 _53 ] [139])
        (minus:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (reg:SF 22 xmm1 [orig:138 _52 ] [138]))) "../src/spline.f":391 805 {*fop_sf_1}
     (nil))
(insn 158 157 159 8 (set (reg:SI 0 ax [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":391 82 {*movsi_internal}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:SI 0 ax [orig:140 _54 ] [140])
                (plus:SI (reg:SI 0 ax [216])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":391 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 160 159 161 8 (set (reg:DI 0 ax [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 0 ax [orig:140 _54 ] [140]))) "../src/spline.f":391 145 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 8 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 _55 ] [141])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":391 218 {*adddi_1}
     (nil))
(insn 162 161 163 8 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 x+0 S8 A64])) "../src/spline.f":391 81 {*movdi_internal}
     (nil))
(insn 163 162 164 8 (set (reg:SF 22 xmm1 [orig:143 _57 ] [143])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:142 _56 ] [142])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [217])) [3 *x_103(D) S4 A32])) "../src/spline.f":391 127 {*movsf_internal}
     (nil))
(insn 164 163 165 8 (set (reg:SF 21 xmm0 [218])
        (plus:SF (reg:SF 21 xmm0 [orig:139 _53 ] [139])
            (reg:SF 22 xmm1 [orig:143 _57 ] [143]))) "../src/spline.f":391 802 {*fop_sf_comm}
     (nil))
(insn 165 164 166 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 cx2+0 S4 A32])
        (reg:SF 21 xmm0 [218])) "../src/spline.f":391 127 {*movsf_internal}
     (nil))
(insn 166 165 167 8 (set (reg:SF 22 xmm1 [219])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":392 127 {*movsf_internal}
     (nil))
(insn 167 166 168 8 (set (reg:SF 21 xmm0 [220])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":392 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 168 167 169 8 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (mult:SF (reg:SF 21 xmm0 [220])
            (reg:SF 22 xmm1 [219]))) "../src/spline.f":392 802 {*fop_sf_comm}
     (nil))
(insn 169 168 170 8 (set (reg:SF 22 xmm1 [221])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":392 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 170 169 211 8 (set (reg:SF 21 xmm0 [orig:145 _59 ] [145])
        (minus:SF (reg:SF 21 xmm0 [orig:144 _58 ] [144])
            (reg:SF 22 xmm1 [221]))) "../src/spline.f":392 805 {*fop_sf_1}
     (nil))
(insn 211 170 172 8 (set (reg:SF 22 xmm1 [orig:146 _60 ] [146])
        (reg:SF 21 xmm0 [orig:146 _60 ] [146])) "../src/spline.f":392 127 {*movsf_internal}
     (nil))
(insn 172 211 173 8 (set (reg:SF 22 xmm1 [orig:146 _60 ] [146])
        (mult:SF (reg:SF 22 xmm1 [orig:146 _60 ] [146])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [3 cx1+0 S4 A32]))) "../src/spline.f":392 802 {*fop_sf_comm}
     (nil))
(insn 173 172 174 8 (set (reg:SF 23 xmm2 [222])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 t+0 S4 A32])) "../src/spline.f":392 127 {*movsf_internal}
     (nil))
(insn 174 173 175 8 (set (reg:SF 21 xmm0 [223])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":392 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 175 174 176 8 (set (reg:SF 21 xmm0 [orig:148 _62 ] [148])
        (mult:SF (reg:SF 21 xmm0 [223])
            (reg:SF 23 xmm2 [222]))) "../src/spline.f":392 802 {*fop_sf_comm}
     (nil))
(insn 176 175 177 8 (set (reg:SF 23 xmm2 [224])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":392 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 177 176 179 8 (set (reg:SF 21 xmm0 [orig:149 _63 ] [149])
        (minus:SF (reg:SF 21 xmm0 [orig:148 _62 ] [148])
            (reg:SF 23 xmm2 [224]))) "../src/spline.f":392 805 {*fop_sf_1}
     (nil))
(insn 179 177 180 8 (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
        (mult:SF (reg:SF 21 xmm0 [orig:150 _64 ] [150])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [3 cx2+0 S4 A32]))) "../src/spline.f":392 802 {*fop_sf_comm}
     (nil))
(insn 180 179 181 8 (set (reg:SF 21 xmm0 [orig:152 _66 ] [152])
        (plus:SF (reg:SF 21 xmm0 [orig:151 _65 ] [151])
            (reg:SF 22 xmm1 [orig:147 _61 ] [147]))) "../src/spline.f":392 802 {*fop_sf_comm}
     (nil))
(insn 181 180 182 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_d2val+0 S4 A64])
        (reg:SF 21 xmm0 [orig:152 _66 ] [152])) "../src/spline.f":392 127 {*movsf_internal}
     (nil))
(insn 182 181 183 8 (set (reg:SF 21 xmm0 [orig:170 _107 ] [170])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 ds+0 S4 A32])) "../src/spline.f":393 127 {*movsf_internal}
     (nil))
(insn 183 182 184 8 (set (reg:SF 21 xmm0 [orig:171 _108 ] [171])
        (mult:SF (reg:SF 21 xmm0 [orig:170 _107 ] [170])
            (reg:SF 21 xmm0 [orig:170 _107 ] [170]))) "../src/spline.f":393 802 {*fop_sf_comm}
     (nil))
(insn 184 183 185 8 (set (reg:SF 22 xmm1 [orig:153 __result_d2val.207_67 ] [153])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_d2val+0 S4 A64])) "../src/spline.f":393 127 {*movsf_internal}
     (nil))
(insn 185 184 214 8 (set (reg:SF 22 xmm1 [orig:153 __result_d2val.207_67 ] [153])
        (div:SF (reg:SF 22 xmm1 [orig:153 __result_d2val.207_67 ] [153])
            (reg:SF 21 xmm0 [orig:171 _108 ] [171]))) "../src/spline.f":393 805 {*fop_sf_1}
     (nil))
(insn 214 185 186 8 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (reg:SF 22 xmm1 [orig:153 __result_d2val.207_67 ] [153])) "../src/spline.f":393 127 {*movsf_internal}
     (nil))
(insn 186 214 187 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_d2val+0 S4 A64])
        (reg:SF 21 xmm0 [orig:154 _68 ] [154])) "../src/spline.f":393 127 {*movsf_internal}
     (nil))
(insn 187 186 194 8 (set (reg:SF 21 xmm0 [orig:172 _110 ] [172])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 __result_d2val+0 S4 A64])) "../src/spline.f":394 127 {*movsf_internal}
     (nil))
(insn 194 187 195 8 (set (reg/i:SF 21 xmm0)
        (reg:SF 21 xmm0 [orig:173 <retval> ] [173])) "../src/spline.f":395 127 {*movsf_internal}
     (nil))
(insn 195 194 208 8 (use (reg/i:SF 21 xmm0)) "../src/spline.f":395 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]

(note 208 195 0 NOTE_INSN_DELETED)

;; Function sevlin (sevlin_, funcdef_no=9, decl_uid=3922, cgraph_uid=9, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 54:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=186 from oldreg=158, assigning class GENERAL_REGS to r186
   54: {r186:SI=r186:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  163: r186:SI=r96:SI
    Inserting insn reload after:
  164: r158:SI=r186:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 59:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 90:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 96:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 98:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 100:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 110:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 115:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 116:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=187 from oldreg=117, assigning class SSE_REGS to r187
  116: r187:SF=r187:SF*[frame:DI-0x34]
      REG_DEAD r117:SF
    Inserting insn reload before:
  165: r187:SF=r117:SF
    Inserting insn reload after:
  166: r118:SF=r187:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 1 in insn 126:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 1 in insn 127:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 129:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 132:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 153: point = 0, n_alt = -1
   Insn 145: point = 0, n_alt = 8
   Insn 144: point = 1, n_alt = 3
   Insn 143: point = 2, n_alt = 2
   Insn 142: point = 4, n_alt = -1
   Insn 141: point = 6, n_alt = 2
   Insn 140: point = 8, n_alt = 7
   Insn 139: point = 10, n_alt = 3
   Insn 138: point = 11, n_alt = 3
   Insn 137: point = 13, n_alt = 0
   Insn 136: point = 15, n_alt = 0
   Insn 135: point = 17, n_alt = 0
   Insn 134: point = 18, n_alt = 7
   Insn 133: point = 20, n_alt = 3
   Insn 132: point = 21, n_alt = 3
   Insn 131: point = 23, n_alt = 0
   Insn 130: point = 25, n_alt = 0
   Insn 129: point = 26, n_alt = 8
   Insn 128: point = 27, n_alt = 3
   Insn 127: point = 28, n_alt = 1
   Insn 126: point = 30, n_alt = 1
   Insn 125: point = 32, n_alt = 7
   Insn 124: point = 34, n_alt = 3
   Insn 123: point = 35, n_alt = 3
   Insn 122: point = 37, n_alt = 0
   Insn 121: point = 39, n_alt = 0
   Insn 120: point = 41, n_alt = 0
   Insn 119: point = 42, n_alt = -1
   Insn 118: point = 44, n_alt = 2
   Insn 117: point = 46, n_alt = 7
   Insn 166: point = 47, n_alt = -1
	Hard reg 22 is preferable by r187 with profit 1
   Insn 116: point = 49, n_alt = 1
   Insn 165: point = 49, n_alt = -1
	Hard reg 22 is preferable by r187 with profit 1
	Hard reg 21 is preferable by r187 with profit 1
   Insn 115: point = 51, n_alt = 7
   Insn 114: point = 53, n_alt = 3
   Insn 113: point = 54, n_alt = 3
   Insn 112: point = 56, n_alt = 0
   Insn 111: point = 58, n_alt = 0
   Insn 110: point = 59, n_alt = 8
   Insn 109: point = 60, n_alt = 2
   Insn 108: point = 62, n_alt = -1
   Insn 107: point = 64, n_alt = 2
   Insn 106: point = 66, n_alt = 7
   Insn 105: point = 68, n_alt = 3
   Insn 104: point = 69, n_alt = 3
   Insn 103: point = 71, n_alt = 0
   Insn 102: point = 73, n_alt = 0
   Insn 101: point = 75, n_alt = 0
   Insn 100: point = 76, n_alt = 7
   Insn 99: point = 78, n_alt = 3
   Insn 98: point = 79, n_alt = 8
   Insn 97: point = 80, n_alt = 2
   Insn 96: point = 82, n_alt = 7
   Insn 95: point = 84, n_alt = 3
   Insn 94: point = 85, n_alt = 3
   Insn 93: point = 87, n_alt = 0
   Insn 92: point = 89, n_alt = 0
   Insn 91: point = 91, n_alt = 0
   Insn 90: point = 92, n_alt = 7
   Insn 89: point = 94, n_alt = 3
   Insn 88: point = 95, n_alt = 3
   Insn 87: point = 97, n_alt = 0
   Insn 86: point = 99, n_alt = 0
  BB 9
   Insn 161: point = 100, n_alt = -1
  BB 3
   Insn 49: point = 100, n_alt = -1
   Insn 48: point = 100, n_alt = 0
   Insn 47: point = 101, n_alt = 1
   Insn 46: point = 103, n_alt = 0
  BB 7
   Insn 157: point = 104, n_alt = -1
  BB 5
   Insn 155: point = 104, n_alt = -1
   Insn 72: point = 104, n_alt = 1
   Insn 71: point = 105, n_alt = 0
  BB 6
   Insn 78: point = 106, n_alt = 1
   Insn 77: point = 107, n_alt = 0
  BB 4
   Insn 66: point = 108, n_alt = -1
   Insn 65: point = 108, n_alt = 1
   Insn 64: point = 109, n_alt = 7
   Insn 63: point = 111, n_alt = 3
   Insn 62: point = 112, n_alt = 3
   Insn 61: point = 114, n_alt = 0
   Insn 60: point = 116, n_alt = 0
   Insn 59: point = 117, n_alt = 7
   Insn 58: point = 119, n_alt = 3
   Insn 57: point = 120, n_alt = 1
   Insn 56: point = 121, n_alt = 0
   Insn 55: point = 123, n_alt = 0
   Insn 164: point = 125, n_alt = -1
	Hard reg 1 is preferable by r186 with profit 1
   Insn 54: point = 127, n_alt = 0
   Insn 163: point = 127, n_alt = -1
   Insn 53: point = 128, n_alt = 0
   Insn 52: point = 130, n_alt = 0
   Insn 51: point = 131, n_alt = 0
  BB 2
   Insn 44: point = 132, n_alt = 1
   Insn 43: point = 133, n_alt = 0
   Insn 42: point = 135, n_alt = 3
   Insn 41: point = 136, n_alt = 1
   Insn 37: point = 136, n_alt = 2
   Insn 36: point = 137, n_alt = 3
   Insn 35: point = 138, n_alt = -1
   Insn 33: point = 140, n_alt = 1
   Insn 31: point = 142, n_alt = 0
   Insn 32: point = 142, n_alt = 2
   Insn 30: point = 143, n_alt = 3
   Insn 29: point = 144, n_alt = 5
   Insn 28: point = 145, n_alt = 0
   Insn 27: point = 147, n_alt = 0
   Insn 26: point = 149, n_alt = 3
   Insn 22: point = 150, n_alt = 2
   Insn 21: point = 151, n_alt = 3
   Insn 20: point = 152, n_alt = -1
   Insn 18: point = 154, n_alt = 1
   Insn 16: point = 156, n_alt = 0
   Insn 17: point = 156, n_alt = 2
   Insn 15: point = 157, n_alt = 3
   Insn 14: point = 158, n_alt = 5
   Insn 13: point = 159, n_alt = 0
   Insn 12: point = 161, n_alt = 0
   Insn 11: point = 163, n_alt = 3
   Insn 7: point = 164, n_alt = 5
   Insn 6: point = 164, n_alt = 5
   Insn 5: point = 164, n_alt = 5
   Insn 4: point = 164, n_alt = 5
   Insn 3: point = 164, n_alt = 5
   Insn 2: point = 164, n_alt = 5
 r87: [160..161]
 r88: [151..152]
 r89: [150..164]
 r91: [146..147]
 r92: [137..138]
 r93: [136..164]
 r95: [100..101]
 r96: [124..128]
 r97: [108..117]
 r98: [113..114]
 r99: [110..112]
 r100: [108..109]
 r101: [96..97]
 r102: [93..95]
 r103: [81..92]
 r104: [88..89]
 r105: [86..87]
 r106: [83..85]
 r107: [81..82]
 r108: [65..76]
 r109: [72..73]
 r110: [70..71]
 r111: [67..69]
 r112: [65..66]
 r113: [63..64]
 r114: [61..62]
 r115: [55..56]
 r116: [52..54]
 r117: [50..51]
 r118: [29..47]
 r119: [43..44]
 r120: [31..42]
 r121: [38..39]
 r122: [36..37]
 r123: [33..35]
 r124: [31..32]
 r125: [29..30]
 r126: [26..28]
 r127: [22..23]
 r128: [19..21]
 r129: [7..18]
 r130: [14..15]
 r131: [12..13]
 r132: [9..11]
 r133: [7..8]
 r134: [5..6]
 r135: [3..4]
 r136: [0..2]
 r137: [155..157]
 r138: [153..154]
 r142: [141..143]
 r143: [139..140]
 r147: [162..163]
 r148: [158..159]
 r149: [155..156]
 r150: [148..149]
 r151: [144..145]
 r152: [141..142]
 r153: [134..135]
 r154: [132..133]
 r155: [102..103]
 r156: [129..131]
 r157: [129..130]
 r158: [124..125]
 r159: [122..123]
 r160: [120..121]
 r161: [118..119]
 r162: [115..116]
 r163: [110..111]
 r164: [104..105]
 r165: [106..107]
 r166: [98..99]
 r167: [93..94]
 r168: [90..91]
 r169: [83..84]
 r170: [79..80]
 r171: [77..78]
 r172: [74..75]
 r173: [67..68]
 r174: [59..60]
 r175: [57..58]
 r176: [52..53]
 r177: [45..46]
 r178: [40..41]
 r179: [33..34]
 r180: [26..27]
 r181: [24..25]
 r182: [19..20]
 r183: [16..17]
 r184: [9..10]
 r185: [0..1]
 r186: [126..127]
 r187: [48..49]
Compressing live ranges: from 165 to 142 - 86%
Ranges after the compression:
 r87: [138..139]
 r88: [130..131]
 r89: [130..141]
 r91: [126..127]
 r92: [118..119]
 r93: [118..141]
 r95: [86..87]
 r96: [108..111]
 r97: [94..101]
 r98: [98..99]
 r99: [96..97]
 r100: [94..95]
 r101: [82..83]
 r102: [80..81]
 r103: [70..79]
 r104: [76..77]
 r105: [74..75]
 r106: [72..73]
 r107: [70..71]
 r108: [56..65]
 r109: [62..63]
 r110: [60..61]
 r111: [58..59]
 r112: [56..57]
 r113: [54..55]
 r114: [52..53]
 r115: [46..47]
 r116: [44..45]
 r117: [42..43]
 r118: [24..39]
 r119: [36..37]
 r120: [26..35]
 r121: [32..33]
 r122: [30..31]
 r123: [28..29]
 r124: [26..27]
 r125: [24..25]
 r126: [22..23]
 r127: [18..19]
 r128: [16..17]
 r129: [6..15]
 r130: [12..13]
 r131: [10..11]
 r132: [8..9]
 r133: [6..7]
 r134: [4..5]
 r135: [2..3]
 r136: [0..1]
 r137: [134..135]
 r138: [132..133]
 r142: [122..123]
 r143: [120..121]
 r147: [140..141]
 r148: [136..137]
 r149: [134..135]
 r150: [128..129]
 r151: [124..125]
 r152: [122..123]
 r153: [116..117]
 r154: [114..115]
 r155: [88..89]
 r156: [112..113]
 r157: [112..113]
 r158: [108..109]
 r159: [106..107]
 r160: [104..105]
 r161: [102..103]
 r162: [100..101]
 r163: [96..97]
 r164: [90..91]
 r165: [92..93]
 r166: [84..85]
 r167: [80..81]
 r168: [78..79]
 r169: [72..73]
 r170: [68..69]
 r171: [66..67]
 r172: [64..65]
 r173: [58..59]
 r174: [50..51]
 r175: [48..49]
 r176: [44..45]
 r177: [38..39]
 r178: [34..35]
 r179: [28..29]
 r180: [22..23]
 r181: [20..21]
 r182: [16..17]
 r183: [14..15]
 r184: [8..9]
 r185: [0..1]
 r186: [110..111]
 r187: [40..41]

********** Assignment #1: **********

	 Assigning to 186 (cl=GENERAL_REGS, orig=158, freq=3, tfirst=186, tfreq=3)...
	   Assign 1 to reload r186 (freq=3)
	 Assigning to 187 (cl=SSE_REGS, orig=117, freq=3, tfirst=187, tfreq=3)...
	   Assign 22 to reload r187 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 47
changing reg in insn 48
changing reg in insn 53
changing reg in insn 59
changing reg in insn 65
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 97
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 107
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 134
changing reg in insn 134
changing reg in insn 141
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 140
changing reg in insn 144
changing reg in insn 145
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 164.
deleting insn with uid = 108.
deleting insn with uid = 166.
deleting insn with uid = 142.
starting the processing of deferred insns
ending the processing of deferred insns


sevlin

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;;  ref usage 	r0={53d,55u} r1={14d,14u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,59u} r7={1d,9u} r17={21d,4u} r20={1d,1u,8e} r21={16d,15u} r22={7d,6u} r23={2d,1u} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} r39={1d} r40={1d} r41={1d} r42={1d} 
;;    total ref usage 307{130d,169u,8e} in 118{118 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93
;; lr  def 	 17 [flags] 87 88 91 92 137 138 142 143 147 148 149 150 151 152 153 154
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 xx+0 S8 A64])
        (reg:DI 37 r8 [ xx ])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 xxs+0 S8 A64])
        (reg:DI 38 r9 [ xxs ])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [147]) [1 *n_56(D)+0 S4 A32])) "../src/spline.f":439 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [148])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":439 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ubound.56+0 S8 A64])
        (reg:DI 0 ax [148])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:137 size.57_58 ] [137])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ubound.56+0 S8 A64])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [149])
        (const_int 0 [0])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:137 size.57_58 ] [137])
            (const_int 0 [0]))) "../src/spline.f":439 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:138 size.57_59 ] [138])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:137 size.57_58 ] [137])
            (reg:DI 1 dx [149]))) "../src/spline.f":439 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.208_2 ] [88])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (reg:DI 42 r13 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [150]) [1 *n_56(D)+0 S4 A32])) "../src/spline.f":439 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [151])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":439 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.58+0 S8 A64])
        (reg:DI 0 ax [151])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:142 size.59_64 ] [142])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.58+0 S8 A64])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [152])
        (const_int 0 [0])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:142 size.59_64 ] [142])
            (const_int 0 [0]))) "../src/spline.f":439 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:143 size.59_65 ] [143])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:142 size.59_64 ] [142])
            (reg:DI 1 dx [152]))) "../src/spline.f":439 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (reg:DI 39 r10 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.210_6 ] [92])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (reg:DI 40 r11 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":439 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":446 82 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [6 n+0 S8 A64])) "../src/spline.f":447 81 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:SI 0 ax [154])
        (mem:SI (reg/f:DI 0 ax [153]) [1 *n_56(D)+0 S4 A32])) "../src/spline.f":447 82 {*movsi_internal}
     (nil))
(insn 44 43 81 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (reg:SI 0 ax [154])) "../src/spline.f":447 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 155
(code_label 81 44 45 3 113 (nil) [1 uses])
(note 45 81 46 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 3 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":449 82 {*movsi_internal}
     (nil))
(insn 47 46 48 3 (parallel [
            (set (reg:SI 0 ax [orig:95 _9 ] [95])
                (minus:SI (reg:SI 0 ax [155])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":449 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 48 47 49 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:95 _9 ] [95])
            (const_int 1 [0x1]))) "../src/spline.f":449 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 50 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) "../src/spline.f":449 617 {*jcc_1}
     (nil)
 -> 160)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 99 100 156 157 158 159 160 161 162 163
(note 50 49 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 4 (set (reg:SI 1 dx [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":451 82 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 ilow+0 S4 A32])) "../src/spline.f":451 82 {*movsi_internal}
     (nil))
(insn 53 52 163 4 (parallel [
            (set (reg:SI 0 ax [orig:96 _10 ] [96])
                (plus:SI (reg:SI 0 ax [157])
                    (reg:SI 1 dx [156])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":451 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 163 53 54 4 (set (reg:SI 1 dx [158])
        (reg:SI 0 ax [orig:96 _10 ] [96])) "../src/spline.f":451 82 {*movsi_internal}
     (nil))
(insn 54 163 55 4 (parallel [
            (set (reg:SI 1 dx [158])
                (lshiftrt:SI (reg:SI 1 dx [158])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":451 544 {*lshrsi3_1}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:SI 0 ax [159])
                (plus:SI (reg:SI 0 ax [orig:96 _10 ] [96])
                    (reg:SI 1 dx [158])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":451 217 {*addsi_1}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg:SI 0 ax [160])
                (ashiftrt:SI (reg:SI 0 ax [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":451 545 {*ashrsi3_1}
     (nil))
(insn 57 56 58 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [160])) "../src/spline.f":451 82 {*movsi_internal}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [4 ss+0 S8 A64])) "../src/spline.f":452 81 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SF 22 xmm1 [orig:97 _11 ] [97])
        (mem:SF (reg/f:DI 0 ax [161]) [3 *ss_72(D)+0 S4 A32])) "../src/spline.f":452 127 {*movsf_internal}
     (nil))
(insn 60 59 61 4 (set (reg:SI 0 ax [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 imid+0 S4 A32])) "../src/spline.f":452 82 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 0 ax [orig:98 _12 ] [98])
        (sign_extend:DI (reg:SI 0 ax [162]))) "../src/spline.f":452 145 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 _12 ] [98])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":452 218 {*adddi_1}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])) "../src/spline.f":452 81 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SF 21 xmm0 [orig:100 _14 ] [100])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:99 _13 ] [99])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [163])) [3 *s_73(D) S4 A32])) "../src/spline.f":452 127 {*movsf_internal}
     (nil))
(insn 65 64 66 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:100 _14 ] [100])
            (reg:SF 22 xmm1 [orig:97 _11 ] [97]))) "../src/spline.f":452 51 {*cmpiusf}
     (nil))
(jump_insn 66 65 70 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 154)
            (pc))) "../src/spline.f":452 617 {*jcc_1}
     (nil)
 -> 154)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 164
(note 70 66 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 5 (set (reg:SI 0 ax [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 imid+0 S4 A32])) "../src/spline.f":453 82 {*movsi_internal}
     (nil))
(insn 72 71 155 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (reg:SI 0 ax [164])) "../src/spline.f":453 82 {*movsi_internal}
     (nil))
(jump_insn 155 72 156 5 (set (pc)
        (label_ref 79)) 649 {jump}
     (nil)
 -> 79)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 156 155 154)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 165
(code_label 154 156 76 6 116 (nil) [1 uses])
(note 76 154 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 6 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 imid+0 S4 A32])) "../src/spline.f":455 82 {*movsi_internal}
     (nil))
(insn 78 77 79 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [165])) "../src/spline.f":455 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 78 80 7 112 (nil) [1 uses])
(note 80 79 157 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 157 80 158 7 (set (pc)
        (label_ref 81)) "../src/spline.f":457 649 {jump}
     (nil)
 -> 81)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 160)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 160 158 159 9 117 (nil) [1 uses])
(note 159 160 161 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 161 159 84 9 (const_int 0 [0]) "../src/spline.f":457 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185
(code_label 84 161 85 8 109 (nil) [0 uses])
(note 85 84 86 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 8 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":459 82 {*movsi_internal}
     (nil))
(insn 87 86 88 8 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [166]))) "../src/spline.f":459 145 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 8 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":459 218 {*adddi_1}
     (nil))
(insn 89 88 90 8 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])) "../src/spline.f":459 81 {*movdi_internal}
     (nil))
(insn 90 89 91 8 (set (reg:SF 21 xmm0 [orig:103 _17 ] [103])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:102 _16 ] [102])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [167])) [3 *s_73(D) S4 A32])) "../src/spline.f":459 127 {*movsf_internal}
     (nil))
(insn 91 90 92 8 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":459 82 {*movsi_internal}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg:SI 0 ax [orig:104 _18 ] [104])
                (plus:SI (reg:SI 0 ax [168])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":459 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 93 92 94 8 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [orig:104 _18 ] [104]))) "../src/spline.f":459 145 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg:DI 1 dx [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":459 218 {*adddi_1}
     (nil))
(insn 95 94 96 8 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])) "../src/spline.f":459 81 {*movdi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:SF 22 xmm1 [orig:107 _21 ] [107])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:106 _20 ] [106])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [169])) [3 *s_73(D) S4 A32])) "../src/spline.f":459 127 {*movsf_internal}
     (nil))
(insn 97 96 98 8 (set (reg:SF 21 xmm0 [170])
        (minus:SF (reg:SF 21 xmm0 [orig:103 _17 ] [103])
            (reg:SF 22 xmm1 [orig:107 _21 ] [107]))) "../src/spline.f":459 805 {*fop_sf_1}
     (nil))
(insn 98 97 99 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [170])) "../src/spline.f":459 127 {*movsf_internal}
     (nil))
(insn 99 98 100 8 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [4 ss+0 S8 A64])) "../src/spline.f":460 81 {*movdi_internal}
     (nil))
(insn 100 99 101 8 (set (reg:SF 21 xmm0 [orig:108 _22 ] [108])
        (mem:SF (reg/f:DI 0 ax [171]) [3 *ss_72(D)+0 S4 A32])) "../src/spline.f":460 127 {*movsf_internal}
     (nil))
(insn 101 100 102 8 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":460 82 {*movsi_internal}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:SI 0 ax [orig:109 _23 ] [109])
                (plus:SI (reg:SI 0 ax [172])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":460 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 103 102 104 8 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 _23 ] [109]))) "../src/spline.f":460 145 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg:DI 1 dx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":460 218 {*adddi_1}
     (nil))
(insn 105 104 106 8 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 s+0 S8 A64])) "../src/spline.f":460 81 {*movdi_internal}
     (nil))
(insn 106 105 107 8 (set (reg:SF 22 xmm1 [orig:112 _26 ] [112])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [173])) [3 *s_73(D) S4 A32])) "../src/spline.f":460 127 {*movsf_internal}
     (nil))
(insn 107 106 109 8 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (minus:SF (reg:SF 21 xmm0 [orig:108 _22 ] [108])
            (reg:SF 22 xmm1 [orig:112 _26 ] [112]))) "../src/spline.f":460 805 {*fop_sf_1}
     (nil))
(insn 109 107 110 8 (set (reg:SF 21 xmm0 [174])
        (div:SF (reg:SF 21 xmm0 [orig:114 _28 ] [114])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 ds+0 S4 A32]))) "../src/spline.f":460 805 {*fop_sf_1}
     (nil))
(insn 110 109 111 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [174])) "../src/spline.f":460 127 {*movsf_internal}
     (nil))
(insn 111 110 112 8 (set (reg:SI 0 ax [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":461 82 {*movsi_internal}
     (nil))
(insn 112 111 113 8 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [175]))) "../src/spline.f":461 145 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 8 (parallel [
            (set (reg:DI 1 dx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":461 218 {*adddi_1}
     (nil))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 x+0 S8 A64])) "../src/spline.f":461 81 {*movdi_internal}
     (nil))
(insn 115 114 165 8 (set (reg:SF 21 xmm0 [orig:117 _31 ] [117])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [176])) [3 *x_78(D) S4 A32])) "../src/spline.f":461 127 {*movsf_internal}
     (nil))
(insn 165 115 116 8 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (reg:SF 21 xmm0 [orig:117 _31 ] [117])) "../src/spline.f":461 127 {*movsf_internal}
     (nil))
(insn 116 165 117 8 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (mult:SF (reg:SF 22 xmm1 [orig:117 _31 ] [117])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [3 t+0 S4 A32]))) "../src/spline.f":461 802 {*fop_sf_comm}
     (nil))
(insn 117 116 118 8 (set (reg:SF 21 xmm0 [177])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":461 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 118 117 119 8 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (minus:SF (reg:SF 21 xmm0 [177])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [3 t+0 S4 A32]))) "../src/spline.f":461 805 {*fop_sf_1}
     (nil))
(insn 119 118 120 8 (set (reg:SF 23 xmm2 [orig:120 _34 ] [120])
        (reg:SF 21 xmm0 [orig:119 _33 ] [119])) "../src/spline.f":461 127 {*movsf_internal}
     (nil))
(insn 120 119 121 8 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":461 82 {*movsi_internal}
     (nil))
(insn 121 120 122 8 (parallel [
            (set (reg:SI 0 ax [orig:121 _35 ] [121])
                (plus:SI (reg:SI 0 ax [178])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":461 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 122 121 123 8 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [orig:121 _35 ] [121]))) "../src/spline.f":461 145 {*extendsidi2_rex64}
     (nil))
(insn 123 122 124 8 (parallel [
            (set (reg:DI 1 dx [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":461 218 {*adddi_1}
     (nil))
(insn 124 123 125 8 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 x+0 S8 A64])) "../src/spline.f":461 81 {*movdi_internal}
     (nil))
(insn 125 124 126 8 (set (reg:SF 21 xmm0 [orig:124 _38 ] [124])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [179])) [3 *x_78(D) S4 A32])) "../src/spline.f":461 127 {*movsf_internal}
     (nil))
(insn 126 125 127 8 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (mult:SF (reg:SF 21 xmm0 [orig:124 _38 ] [124])
            (reg:SF 23 xmm2 [orig:120 _34 ] [120]))) "../src/spline.f":461 802 {*fop_sf_comm}
     (nil))
(insn 127 126 128 8 (set (reg:SF 21 xmm0 [orig:126 _40 ] [126])
        (plus:SF (reg:SF 21 xmm0 [orig:125 _39 ] [125])
            (reg:SF 22 xmm1 [orig:118 _32 ] [118]))) "../src/spline.f":461 802 {*fop_sf_comm}
     (nil))
(insn 128 127 129 8 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [4 xx+0 S8 A64])) "../src/spline.f":461 81 {*movdi_internal}
     (nil))
(insn 129 128 130 8 (set (mem:SF (reg/f:DI 0 ax [180]) [3 *xx_79(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:126 _40 ] [126])) "../src/spline.f":461 127 {*movsf_internal}
     (nil))
(insn 130 129 131 8 (set (reg:SI 0 ax [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":462 82 {*movsi_internal}
     (nil))
(insn 131 130 132 8 (set (reg:DI 0 ax [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 0 ax [181]))) "../src/spline.f":462 145 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 8 (parallel [
            (set (reg:DI 1 dx [orig:128 _42 ] [128])
                (plus:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":462 218 {*adddi_1}
     (nil))
(insn 133 132 134 8 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 x+0 S8 A64])) "../src/spline.f":462 81 {*movdi_internal}
     (nil))
(insn 134 133 135 8 (set (reg:SF 21 xmm0 [orig:129 _43 ] [129])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:128 _42 ] [128])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [182])) [3 *x_78(D) S4 A32])) "../src/spline.f":462 127 {*movsf_internal}
     (nil))
(insn 135 134 136 8 (set (reg:SI 0 ax [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":462 82 {*movsi_internal}
     (nil))
(insn 136 135 137 8 (parallel [
            (set (reg:SI 0 ax [orig:130 _44 ] [130])
                (plus:SI (reg:SI 0 ax [183])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":462 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 137 136 138 8 (set (reg:DI 0 ax [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 0 ax [orig:130 _44 ] [130]))) "../src/spline.f":462 145 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 8 (parallel [
            (set (reg:DI 1 dx [orig:132 _46 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 _45 ] [131])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":462 218 {*adddi_1}
     (nil))
(insn 139 138 140 8 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [5 x+0 S8 A64])) "../src/spline.f":462 81 {*movdi_internal}
     (nil))
(insn 140 139 141 8 (set (reg:SF 22 xmm1 [orig:133 _47 ] [133])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:132 _46 ] [132])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [184])) [3 *x_78(D) S4 A32])) "../src/spline.f":462 127 {*movsf_internal}
     (nil))
(insn 141 140 143 8 (set (reg:SF 21 xmm0 [orig:134 _48 ] [134])
        (minus:SF (reg:SF 21 xmm0 [orig:129 _43 ] [129])
            (reg:SF 22 xmm1 [orig:133 _47 ] [133]))) "../src/spline.f":462 805 {*fop_sf_1}
     (nil))
(insn 143 141 144 8 (set (reg:SF 21 xmm0 [orig:136 _50 ] [136])
        (div:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 ds+0 S4 A32]))) "../src/spline.f":462 805 {*fop_sf_1}
     (nil))
(insn 144 143 145 8 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [4 xxs+0 S8 A64])) "../src/spline.f":462 81 {*movdi_internal}
     (nil))
(insn 145 144 153 8 (set (mem:SF (reg/f:DI 0 ax [185]) [3 *xxs_81(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:136 _50 ] [136])) "../src/spline.f":462 127 {*movsf_internal}
     (nil))
(insn 153 145 162 8 (const_int 0 [0]) "../src/spline.f":464 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 162 153 0 NOTE_INSN_DELETED)

;; Function curv (curv_, funcdef_no=10, decl_uid=3958, cgraph_uid=10, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=208, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 62:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 74:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=379 from oldreg=293, assigning class GENERAL_REGS to r379
   99: {r379:SI=r379:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  379: r379:SI=r108:SI
    Inserting insn reload after:
  380: r293:SI=r379:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 135:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 139:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 143:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 145:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 149:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 151:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 155:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 159:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 162:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 163
	 Choosing alt 1 in insn 163:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 164:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 167:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 173:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 175:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 176:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 179:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 189:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 192:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 194:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 195:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=380 from oldreg=140, assigning class SSE_REGS to r380
  195: r380:SF=r380:SF-r151:SF
      REG_DEAD r151:SF
      REG_DEAD r140:SF
    Inserting insn reload before:
  381: r380:SF=r140:SF
    Inserting insn reload after:
  382: r323:SF=r380:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 196:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 200:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 205:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 207:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 208
	 Choosing alt 1 in insn 208:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 210:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 215:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 219:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 221:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 227:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 228:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=381 from oldreg=333, assigning class SSE_REGS to r381
  228: r381:SF=r381:SF+r333:SF
      REG_DEAD r333:SF
    Inserting insn reload before:
  383: r381:SF=r333:SF
    Inserting insn reload after:
  384: r172:SF=r381:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 229:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 230:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 1 in insn 231:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 233
	 Choosing alt 1 in insn 233:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 235:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 236:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 237
	 Choosing alt 1 in insn 237:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 238:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 240:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=382 from oldreg=338, assigning class SSE_REGS to r382
  240: r382:SF=r382:SF+r338:SF
      REG_DEAD r338:SF
    Inserting insn reload before:
  385: r382:SF=r338:SF
    Inserting insn reload after:
  386: r178:SF=r382:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 241:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 242:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 1 in insn 243:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 244:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 1 in insn 245:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 246:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 250:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 253:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 254
	 Choosing alt 1 in insn 254:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 255:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 258:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 260:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 262:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 264:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 266:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 267:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 269:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 270:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 274:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 276:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 280:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 281:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 282:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 283:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 285:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 286:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=383 from oldreg=194, assigning class SSE_REGS to r383
  286: r383:SF=r383:SF-r205:SF
      REG_DEAD r205:SF
      REG_DEAD r194:SF
    Inserting insn reload before:
  387: r383:SF=r194:SF
    Inserting insn reload after:
  388: r355:SF=r383:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 287:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 293:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 296:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 298:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 299
	 Choosing alt 1 in insn 299:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 301:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 304:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 306:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 310:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 312:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 313:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 315:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 316:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 317:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 318:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 319:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=384 from oldreg=365, assigning class SSE_REGS to r384
  319: r384:SF=r384:SF+r365:SF
      REG_DEAD r365:SF
    Inserting insn reload before:
  389: r384:SF=r365:SF
    Inserting insn reload after:
  390: r226:SF=r384:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 320:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 321:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 1 in insn 322:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 323:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 324
	 Choosing alt 1 in insn 324:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 326:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 327:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 328
	 Choosing alt 1 in insn 328:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 329:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 330:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 331:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=385 from oldreg=370, assigning class SSE_REGS to r385
  331: r385:SF=r385:SF+r370:SF
      REG_DEAD r370:SF
    Inserting insn reload before:
  391: r385:SF=r370:SF
    Inserting insn reload after:
  392: r232:SF=r385:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 332:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 333:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 334
	 Choosing alt 1 in insn 334:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 335:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 336
	 Choosing alt 1 in insn 336:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 337:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 338:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 339:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=386 from oldreg=374, assigning class SSE_REGS to r386
  339: r386:SF=r386:SF*[frame:DI-0x6c]
      REG_DEAD r374:SF
    Inserting insn reload before:
  393: r386:SF=r374:SF
    Inserting insn reload after:
  394: r235:SF=r386:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 340:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 341:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 342
	 Choosing alt 1 in insn 342:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 344:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 345:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 346:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 347:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 348:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=619,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 349:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =v  (1) vm {*sqrtsf2_sse}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 355:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=387 from oldreg=241, assigning class SSE_REGS to r387
  355: r387:SF=r387:SF/r243:SF
      REG_DEAD r243:SF
      REG_DEAD r241:SF
    Inserting insn reload before:
  395: r387:SF=r241:SF
    Inserting insn reload after:
  396: r244:SF=r387:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=622,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 395:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 356:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 357:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=388 from oldreg=241, assigning class SSE_REGS to inheritance r388
    Original reg change 241->388 (bb8):
  349: r388:SF=r240:SF
      REG_DEAD r240:SF
    Add original<-inheritance after:
  397: r241:SF=r388:SF

    Inheritance reuse change 241->388 (bb8):
  395: r387:SF=r388:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   397: r241:SF=r388:SF
deleting insn with uid = 397.

********** Pseudo live ranges #1: **********

  BB 8
   Insn 365: point = 0, n_alt = -1
   Insn 364: point = 0, n_alt = -1
   Insn 360: point = 1, n_alt = -1
   Insn 357: point = 3, n_alt = 7
   Insn 356: point = 4, n_alt = 8
   Insn 396: point = 5, n_alt = -1
	Hard reg 21 is preferable by r387 with profit 1
   Insn 355: point = 7, n_alt = 2
   Insn 395: point = 8, n_alt = 7
	   Creating copy r387<-r388@1
   Insn 354: point = 10, n_alt = 0
   Insn 353: point = 12, n_alt = -1
   Insn 352: point = 13, n_alt = 0
   Insn 351: point = 13, n_alt = -1
   Insn 350: point = 14, n_alt = 0
   Insn 349: point = 14, n_alt = 8
	Hard reg 21 is preferable by r388 with profit 1
   Insn 348: point = 16, n_alt = 2
   Insn 347: point = 18, n_alt = 1
   Insn 346: point = 20, n_alt = 7
   Insn 345: point = 21, n_alt = 1
   Insn 344: point = 23, n_alt = 7
   Insn 343: point = 24, n_alt = -1
   Insn 342: point = 26, n_alt = 1
   Insn 341: point = 28, n_alt = 1
   Insn 340: point = 30, n_alt = 7
   Insn 394: point = 31, n_alt = -1
	Hard reg 22 is preferable by r386 with profit 1
   Insn 339: point = 33, n_alt = 1
   Insn 393: point = 33, n_alt = -1
	Hard reg 22 is preferable by r386 with profit 1
	Hard reg 21 is preferable by r386 with profit 1
   Insn 338: point = 35, n_alt = 7
   Insn 337: point = 36, n_alt = 8
   Insn 336: point = 37, n_alt = 1
   Insn 335: point = 39, n_alt = 1
   Insn 334: point = 41, n_alt = 1
   Insn 333: point = 43, n_alt = 7
   Insn 332: point = 44, n_alt = 7
   Insn 392: point = 45, n_alt = -1
	Hard reg 22 is preferable by r385 with profit 1
   Insn 331: point = 47, n_alt = 1
   Insn 391: point = 48, n_alt = -1
	Hard reg 22 is preferable by r385 with profit 1
	Hard reg 21 is preferable by r385 with profit 1
   Insn 330: point = 49, n_alt = 7
   Insn 329: point = 50, n_alt = 8
   Insn 328: point = 51, n_alt = 1
   Insn 327: point = 53, n_alt = 7
   Insn 326: point = 54, n_alt = 1
   Insn 325: point = 56, n_alt = -1
   Insn 324: point = 58, n_alt = 1
   Insn 323: point = 60, n_alt = 1
   Insn 322: point = 62, n_alt = 1
   Insn 321: point = 64, n_alt = 7
   Insn 320: point = 65, n_alt = 7
   Insn 390: point = 66, n_alt = -1
	Hard reg 22 is preferable by r384 with profit 1
   Insn 319: point = 68, n_alt = 1
   Insn 389: point = 69, n_alt = -1
	Hard reg 22 is preferable by r384 with profit 1
	Hard reg 21 is preferable by r384 with profit 1
   Insn 318: point = 70, n_alt = 7
   Insn 317: point = 71, n_alt = 8
   Insn 316: point = 72, n_alt = 2
   Insn 315: point = 74, n_alt = 1
   Insn 314: point = 76, n_alt = -1
   Insn 313: point = 78, n_alt = 2
   Insn 312: point = 80, n_alt = 7
   Insn 311: point = 82, n_alt = 3
   Insn 310: point = 83, n_alt = 3
   Insn 309: point = 85, n_alt = 0
   Insn 308: point = 87, n_alt = 0
   Insn 307: point = 89, n_alt = 0
   Insn 306: point = 90, n_alt = 7
   Insn 305: point = 92, n_alt = 3
   Insn 304: point = 93, n_alt = 3
   Insn 303: point = 95, n_alt = 0
   Insn 302: point = 97, n_alt = 0
   Insn 301: point = 98, n_alt = 1
   Insn 300: point = 100, n_alt = -1
   Insn 299: point = 102, n_alt = 1
   Insn 298: point = 104, n_alt = 7
   Insn 297: point = 106, n_alt = 3
   Insn 296: point = 107, n_alt = 3
   Insn 295: point = 109, n_alt = 0
   Insn 294: point = 111, n_alt = 0
   Insn 293: point = 112, n_alt = 7
   Insn 292: point = 114, n_alt = 3
   Insn 291: point = 115, n_alt = 3
   Insn 290: point = 117, n_alt = 0
   Insn 289: point = 119, n_alt = 0
   Insn 288: point = 121, n_alt = 0
   Insn 287: point = 122, n_alt = 8
   Insn 388: point = 123, n_alt = -1
	Hard reg 21 is preferable by r383 with profit 1
   Insn 286: point = 125, n_alt = 2
   Insn 387: point = 126, n_alt = -1
	Hard reg 21 is preferable by r383 with profit 1
	Hard reg 22 is preferable by r383 with profit 1
   Insn 285: point = 128, n_alt = 1
   Insn 284: point = 130, n_alt = -1
   Insn 283: point = 132, n_alt = 1
   Insn 282: point = 134, n_alt = 7
   Insn 281: point = 136, n_alt = 3
   Insn 280: point = 137, n_alt = 3
   Insn 279: point = 139, n_alt = 0
   Insn 278: point = 141, n_alt = 0
   Insn 277: point = 142, n_alt = 1
   Insn 276: point = 144, n_alt = 7
   Insn 275: point = 146, n_alt = 3
   Insn 274: point = 147, n_alt = 3
   Insn 273: point = 149, n_alt = 0
   Insn 272: point = 151, n_alt = 0
   Insn 271: point = 153, n_alt = 0
   Insn 270: point = 154, n_alt = 1
   Insn 269: point = 156, n_alt = 7
   Insn 268: point = 157, n_alt = -1
   Insn 267: point = 159, n_alt = 2
   Insn 266: point = 161, n_alt = 7
   Insn 265: point = 163, n_alt = 3
   Insn 264: point = 164, n_alt = 3
   Insn 263: point = 166, n_alt = 0
   Insn 262: point = 168, n_alt = 0
   Insn 261: point = 170, n_alt = 0
   Insn 260: point = 171, n_alt = 7
   Insn 259: point = 173, n_alt = 3
   Insn 258: point = 174, n_alt = 3
   Insn 257: point = 176, n_alt = 0
   Insn 256: point = 178, n_alt = 0
   Insn 255: point = 179, n_alt = 8
   Insn 254: point = 180, n_alt = 1
   Insn 253: point = 182, n_alt = 7
   Insn 252: point = 183, n_alt = 7
   Insn 251: point = 185, n_alt = 3
   Insn 250: point = 186, n_alt = 3
   Insn 249: point = 188, n_alt = 0
   Insn 248: point = 190, n_alt = 0
   Insn 247: point = 192, n_alt = 0
   Insn 246: point = 193, n_alt = 8
   Insn 245: point = 194, n_alt = 1
   Insn 244: point = 196, n_alt = 1
   Insn 243: point = 198, n_alt = 1
   Insn 242: point = 200, n_alt = 7
   Insn 241: point = 201, n_alt = 7
   Insn 386: point = 202, n_alt = -1
	Hard reg 22 is preferable by r382 with profit 1
   Insn 240: point = 204, n_alt = 1
   Insn 385: point = 205, n_alt = -1
	Hard reg 22 is preferable by r382 with profit 1
	Hard reg 21 is preferable by r382 with profit 1
   Insn 239: point = 206, n_alt = 7
   Insn 238: point = 207, n_alt = 8
   Insn 237: point = 208, n_alt = 1
   Insn 236: point = 210, n_alt = 7
   Insn 235: point = 211, n_alt = 1
   Insn 234: point = 213, n_alt = -1
   Insn 233: point = 215, n_alt = 1
   Insn 232: point = 217, n_alt = 1
   Insn 231: point = 219, n_alt = 1
   Insn 230: point = 221, n_alt = 7
   Insn 229: point = 222, n_alt = 7
   Insn 384: point = 223, n_alt = -1
	Hard reg 22 is preferable by r381 with profit 1
   Insn 228: point = 225, n_alt = 1
   Insn 383: point = 226, n_alt = -1
	Hard reg 22 is preferable by r381 with profit 1
	Hard reg 21 is preferable by r381 with profit 1
   Insn 227: point = 227, n_alt = 7
   Insn 226: point = 228, n_alt = 8
   Insn 225: point = 229, n_alt = 2
   Insn 224: point = 231, n_alt = 1
   Insn 223: point = 233, n_alt = -1
   Insn 222: point = 235, n_alt = 2
   Insn 221: point = 237, n_alt = 7
   Insn 220: point = 239, n_alt = 3
   Insn 219: point = 240, n_alt = 3
   Insn 218: point = 242, n_alt = 0
   Insn 217: point = 244, n_alt = 0
   Insn 216: point = 246, n_alt = 0
   Insn 215: point = 247, n_alt = 7
   Insn 214: point = 249, n_alt = 3
   Insn 213: point = 250, n_alt = 3
   Insn 212: point = 252, n_alt = 0
   Insn 211: point = 254, n_alt = 0
   Insn 210: point = 255, n_alt = 1
   Insn 209: point = 257, n_alt = -1
   Insn 208: point = 259, n_alt = 1
   Insn 207: point = 261, n_alt = 7
   Insn 206: point = 263, n_alt = 3
   Insn 205: point = 264, n_alt = 3
   Insn 204: point = 266, n_alt = 0
   Insn 203: point = 268, n_alt = 0
   Insn 202: point = 269, n_alt = 7
   Insn 201: point = 271, n_alt = 3
   Insn 200: point = 272, n_alt = 3
   Insn 199: point = 274, n_alt = 0
   Insn 198: point = 276, n_alt = 0
   Insn 197: point = 278, n_alt = 0
   Insn 196: point = 279, n_alt = 8
   Insn 382: point = 280, n_alt = -1
	Hard reg 21 is preferable by r380 with profit 1
   Insn 195: point = 282, n_alt = 2
   Insn 381: point = 283, n_alt = -1
	Hard reg 21 is preferable by r380 with profit 1
	Hard reg 22 is preferable by r380 with profit 1
   Insn 194: point = 285, n_alt = 1
   Insn 193: point = 287, n_alt = -1
   Insn 192: point = 289, n_alt = 1
   Insn 191: point = 291, n_alt = 7
   Insn 190: point = 293, n_alt = 3
   Insn 189: point = 294, n_alt = 3
   Insn 188: point = 296, n_alt = 0
   Insn 187: point = 298, n_alt = 0
   Insn 186: point = 299, n_alt = 1
   Insn 185: point = 301, n_alt = 7
   Insn 184: point = 303, n_alt = 3
   Insn 183: point = 304, n_alt = 3
   Insn 182: point = 306, n_alt = 0
   Insn 181: point = 308, n_alt = 0
   Insn 180: point = 310, n_alt = 0
   Insn 179: point = 311, n_alt = 1
   Insn 178: point = 313, n_alt = 7
   Insn 177: point = 314, n_alt = -1
   Insn 176: point = 316, n_alt = 2
   Insn 175: point = 318, n_alt = 7
   Insn 174: point = 320, n_alt = 3
   Insn 173: point = 321, n_alt = 3
   Insn 172: point = 323, n_alt = 0
   Insn 171: point = 325, n_alt = 0
   Insn 170: point = 327, n_alt = 0
   Insn 169: point = 328, n_alt = 7
   Insn 168: point = 330, n_alt = 3
   Insn 167: point = 331, n_alt = 3
   Insn 166: point = 333, n_alt = 0
   Insn 165: point = 335, n_alt = 0
   Insn 164: point = 336, n_alt = 8
   Insn 163: point = 337, n_alt = 1
   Insn 162: point = 339, n_alt = 7
   Insn 161: point = 340, n_alt = 7
   Insn 160: point = 342, n_alt = 3
   Insn 159: point = 343, n_alt = 3
   Insn 158: point = 345, n_alt = 0
   Insn 157: point = 347, n_alt = 0
   Insn 156: point = 349, n_alt = 0
   Insn 155: point = 350, n_alt = 8
   Insn 154: point = 351, n_alt = 2
   Insn 153: point = 353, n_alt = -1
   Insn 152: point = 355, n_alt = 2
   Insn 151: point = 357, n_alt = 7
   Insn 150: point = 359, n_alt = 3
   Insn 149: point = 360, n_alt = 3
   Insn 148: point = 362, n_alt = 0
   Insn 147: point = 364, n_alt = 0
   Insn 146: point = 366, n_alt = 0
   Insn 145: point = 367, n_alt = 7
   Insn 144: point = 369, n_alt = 3
   Insn 143: point = 370, n_alt = 8
   Insn 142: point = 371, n_alt = 2
   Insn 141: point = 373, n_alt = 7
   Insn 140: point = 375, n_alt = 3
   Insn 139: point = 376, n_alt = 3
   Insn 138: point = 378, n_alt = 0
   Insn 137: point = 380, n_alt = 0
   Insn 136: point = 382, n_alt = 0
   Insn 135: point = 383, n_alt = 7
   Insn 134: point = 385, n_alt = 3
   Insn 133: point = 386, n_alt = 3
   Insn 132: point = 388, n_alt = 0
   Insn 131: point = 390, n_alt = 0
  BB 9
   Insn 377: point = 391, n_alt = -1
  BB 3
   Insn 94: point = 391, n_alt = -1
   Insn 93: point = 391, n_alt = 0
   Insn 92: point = 392, n_alt = 1
   Insn 91: point = 394, n_alt = 0
  BB 7
   Insn 373: point = 395, n_alt = -1
  BB 5
   Insn 371: point = 395, n_alt = -1
   Insn 117: point = 395, n_alt = 1
   Insn 116: point = 396, n_alt = 0
  BB 6
   Insn 123: point = 397, n_alt = 1
   Insn 122: point = 398, n_alt = 0
  BB 4
   Insn 111: point = 399, n_alt = -1
   Insn 110: point = 399, n_alt = 1
   Insn 109: point = 400, n_alt = 7
   Insn 108: point = 402, n_alt = 3
   Insn 107: point = 403, n_alt = 3
   Insn 106: point = 405, n_alt = 0
   Insn 105: point = 407, n_alt = 0
   Insn 104: point = 408, n_alt = 7
   Insn 103: point = 410, n_alt = 3
   Insn 102: point = 411, n_alt = 1
   Insn 101: point = 412, n_alt = 0
   Insn 100: point = 414, n_alt = 0
   Insn 380: point = 416, n_alt = -1
	Hard reg 1 is preferable by r379 with profit 1
   Insn 99: point = 418, n_alt = 0
   Insn 379: point = 418, n_alt = -1
   Insn 98: point = 419, n_alt = 0
   Insn 97: point = 421, n_alt = 0
   Insn 96: point = 422, n_alt = 0
  BB 2
   Insn 89: point = 423, n_alt = 1
   Insn 88: point = 424, n_alt = 0
   Insn 87: point = 426, n_alt = 3
   Insn 86: point = 427, n_alt = 1
   Insn 82: point = 427, n_alt = 2
   Insn 81: point = 428, n_alt = 3
   Insn 80: point = 429, n_alt = -1
   Insn 78: point = 431, n_alt = 1
   Insn 76: point = 433, n_alt = 0
   Insn 77: point = 433, n_alt = 2
   Insn 75: point = 434, n_alt = 3
   Insn 74: point = 435, n_alt = 5
   Insn 73: point = 436, n_alt = 0
   Insn 72: point = 438, n_alt = 0
   Insn 71: point = 440, n_alt = 3
   Insn 67: point = 441, n_alt = 2
   Insn 66: point = 442, n_alt = 3
   Insn 65: point = 443, n_alt = -1
   Insn 63: point = 445, n_alt = 1
   Insn 61: point = 447, n_alt = 0
   Insn 62: point = 447, n_alt = 2
   Insn 60: point = 448, n_alt = 3
   Insn 59: point = 449, n_alt = 5
   Insn 58: point = 450, n_alt = 0
   Insn 57: point = 452, n_alt = 0
   Insn 56: point = 454, n_alt = 3
   Insn 52: point = 455, n_alt = 2
   Insn 51: point = 456, n_alt = 3
   Insn 50: point = 457, n_alt = -1
   Insn 48: point = 459, n_alt = 1
   Insn 46: point = 461, n_alt = 0
   Insn 47: point = 461, n_alt = 2
   Insn 45: point = 462, n_alt = 3
   Insn 44: point = 463, n_alt = 5
   Insn 43: point = 464, n_alt = 0
   Insn 42: point = 466, n_alt = 0
   Insn 41: point = 468, n_alt = 3
   Insn 37: point = 469, n_alt = 5
   Insn 36: point = 470, n_alt = 5
   Insn 35: point = 471, n_alt = -1
   Insn 33: point = 473, n_alt = 1
   Insn 31: point = 475, n_alt = 0
   Insn 32: point = 475, n_alt = 2
   Insn 30: point = 476, n_alt = 3
   Insn 29: point = 477, n_alt = 5
   Insn 28: point = 478, n_alt = 0
   Insn 27: point = 480, n_alt = 0
   Insn 26: point = 482, n_alt = 3
   Insn 22: point = 483, n_alt = 5
   Insn 21: point = 484, n_alt = 5
   Insn 20: point = 485, n_alt = -1
   Insn 18: point = 487, n_alt = 1
   Insn 16: point = 489, n_alt = 0
   Insn 17: point = 489, n_alt = 2
   Insn 15: point = 490, n_alt = 3
   Insn 14: point = 491, n_alt = 5
   Insn 13: point = 492, n_alt = 0
   Insn 12: point = 494, n_alt = 0
   Insn 11: point = 496, n_alt = 3
   Insn 7: point = 497, n_alt = 5
   Insn 6: point = 497, n_alt = 5
   Insn 5: point = 497, n_alt = 5
   Insn 4: point = 497, n_alt = 5
   Insn 3: point = 497, n_alt = 5
   Insn 2: point = 497, n_alt = 5
 r87: [493..494]
 r88: [484..485]
 r89: [483..497]
 r91: [479..480]
 r92: [470..471]
 r93: [469..497]
 r95: [465..466]
 r96: [456..457]
 r97: [455..497]
 r99: [451..452]
 r100: [442..443]
 r101: [441..497]
 r103: [437..438]
 r104: [428..429]
 r105: [427..497]
 r107: [391..392]
 r108: [415..419]
 r109: [399..408]
 r110: [404..405]
 r111: [401..403]
 r112: [399..400]
 r113: [387..388]
 r114: [384..386]
 r115: [372..383]
 r116: [379..380]
 r117: [377..378]
 r118: [374..376]
 r119: [372..373]
 r120: [356..367]
 r121: [363..364]
 r122: [361..362]
 r123: [358..360]
 r124: [356..357]
 r125: [354..355]
 r126: [352..353]
 r127: [346..347]
 r128: [344..345]
 r129: [341..343]
 r130: [338..340]
 r131: [332..333]
 r132: [329..331]
 r133: [317..328]
 r134: [324..325]
 r135: [322..323]
 r136: [319..321]
 r137: [317..318]
 r138: [315..316]
 r139: [312..314]
 r140: [284..311]
 r141: [307..308]
 r142: [305..306]
 r143: [302..304]
 r144: [300..301]
 r145: [290..299]
 r146: [295..296]
 r147: [292..294]
 r148: [290..291]
 r149: [288..289]
 r150: [286..287]
 r151: [282..285]
 r152: [275..276]
 r153: [273..274]
 r154: [270..272]
 r155: [260..269]
 r156: [265..266]
 r157: [262..264]
 r158: [260..261]
 r159: [258..259]
 r160: [256..257]
 r161: [230..255]
 r162: [251..252]
 r163: [248..250]
 r164: [236..247]
 r165: [243..244]
 r166: [241..242]
 r167: [238..240]
 r168: [236..237]
 r169: [234..235]
 r170: [232..233]
 r171: [230..231]
 r172: [216..223]
 r173: [218..219]
 r174: [216..217]
 r175: [214..215]
 r176: [212..213]
 r177: [209..211]
 r178: [195..202]
 r179: [197..198]
 r180: [195..196]
 r181: [189..190]
 r182: [187..188]
 r183: [184..186]
 r184: [181..183]
 r185: [175..176]
 r186: [172..174]
 r187: [160..171]
 r188: [167..168]
 r189: [165..166]
 r190: [162..164]
 r191: [160..161]
 r192: [158..159]
 r193: [155..157]
 r194: [127..154]
 r195: [150..151]
 r196: [148..149]
 r197: [145..147]
 r198: [143..144]
 r199: [133..142]
 r200: [138..139]
 r201: [135..137]
 r202: [133..134]
 r203: [131..132]
 r204: [129..130]
 r205: [125..128]
 r206: [118..119]
 r207: [116..117]
 r208: [113..115]
 r209: [103..112]
 r210: [108..109]
 r211: [105..107]
 r212: [103..104]
 r213: [101..102]
 r214: [99..100]
 r215: [73..98]
 r216: [94..95]
 r217: [91..93]
 r218: [79..90]
 r219: [86..87]
 r220: [84..85]
 r221: [81..83]
 r222: [79..80]
 r223: [77..78]
 r224: [75..76]
 r225: [73..74]
 r226: [59..66]
 r227: [61..62]
 r228: [59..60]
 r229: [57..58]
 r230: [55..56]
 r231: [52..54]
 r232: [38..45]
 r233: [40..41]
 r234: [38..39]
 r235: [27..31]
 r236: [27..28]
 r237: [25..26]
 r238: [17..21]
 r239: [17..18]
 r240: [15..16]
 r242: [11..12]
 r243: [7..10]
 r244: [4..5]
 r245: [488..490]
 r246: [486..487]
 r250: [474..476]
 r251: [472..473]
 r255: [460..462]
 r256: [458..459]
 r260: [446..448]
 r261: [444..445]
 r265: [432..434]
 r266: [430..431]
 r270: [13..24]
 r271: [2..3]
 r272: [0..1]
 r273: [495..496]
 r274: [491..492]
 r275: [488..489]
 r276: [481..482]
 r277: [477..478]
 r278: [474..475]
 r279: [467..468]
 r280: [463..464]
 r281: [460..461]
 r282: [453..454]
 r283: [449..450]
 r284: [446..447]
 r285: [439..440]
 r286: [435..436]
 r287: [432..433]
 r288: [425..426]
 r289: [423..424]
 r290: [393..394]
 r291: [420..422]
 r292: [420..421]
 r293: [415..416]
 r294: [413..414]
 r295: [411..412]
 r296: [409..410]
 r297: [406..407]
 r298: [401..402]
 r299: [395..396]
 r300: [397..398]
 r301: [389..390]
 r302: [384..385]
 r303: [381..382]
 r304: [374..375]
 r305: [370..371]
 r306: [368..369]
 r307: [365..366]
 r308: [358..359]
 r309: [350..351]
 r310: [348..349]
 r311: [341..342]
 r312: [336..337]
 r313: [338..339]
 r314: [334..335]
 r315: [329..330]
 r316: [326..327]
 r317: [319..320]
 r318: [312..313]
 r319: [309..310]
 r320: [302..303]
 r321: [297..298]
 r322: [292..293]
 r323: [279..280]
 r324: [277..278]
 r325: [270..271]
 r326: [267..268]
 r327: [262..263]
 r328: [253..254]
 r329: [248..249]
 r330: [245..246]
 r331: [238..239]
 r332: [228..229]
 r333: [225..227]
 r334: [220..222]
 r335: [220..221]
 r336: [207..208]
 r337: [209..210]
 r338: [204..206]
 r339: [199..201]
 r340: [199..200]
 r341: [193..194]
 r342: [191..192]
 r343: [184..185]
 r344: [179..180]
 r345: [181..182]
 r346: [177..178]
 r347: [172..173]
 r348: [169..170]
 r349: [162..163]
 r350: [155..156]
 r351: [152..153]
 r352: [145..146]
 r353: [140..141]
 r354: [135..136]
 r355: [122..123]
 r356: [120..121]
 r357: [113..114]
 r358: [110..111]
 r359: [105..106]
 r360: [96..97]
 r361: [91..92]
 r362: [88..89]
 r363: [81..82]
 r364: [71..72]
 r365: [68..70]
 r366: [63..65]
 r367: [63..64]
 r368: [50..51]
 r369: [52..53]
 r370: [47..49]
 r371: [42..44]
 r372: [42..43]
 r373: [36..37]
 r374: [34..35]
 r375: [29..30]
 r376: [22..23]
 r377: [19..20]
 r379: [417..418]
 r380: [281..283]
 r381: [224..226]
 r382: [203..205]
 r383: [124..126]
 r384: [67..69]
 r385: [46..48]
 r386: [32..33]
 r387: [6..8]
 r388: [9..14]
Compressing live ranges: from 498 to 420 - 84%
Ranges after the compression:
 r87: [416..417]
 r88: [408..409]
 r89: [408..419]
 r91: [404..405]
 r92: [396..397]
 r93: [396..419]
 r95: [392..393]
 r96: [384..385]
 r97: [384..419]
 r99: [380..381]
 r100: [372..373]
 r101: [372..419]
 r103: [368..369]
 r104: [360..361]
 r105: [360..419]
 r107: [328..329]
 r108: [350..353]
 r109: [336..343]
 r110: [340..341]
 r111: [338..339]
 r112: [336..337]
 r113: [324..325]
 r114: [322..323]
 r115: [312..321]
 r116: [318..319]
 r117: [316..317]
 r118: [314..315]
 r119: [312..313]
 r120: [298..307]
 r121: [304..305]
 r122: [302..303]
 r123: [300..301]
 r124: [298..299]
 r125: [296..297]
 r126: [294..295]
 r127: [288..289]
 r128: [286..287]
 r129: [284..285]
 r130: [282..283]
 r131: [276..277]
 r132: [274..275]
 r133: [264..273]
 r134: [270..271]
 r135: [268..269]
 r136: [266..267]
 r137: [264..265]
 r138: [262..263]
 r139: [260..261]
 r140: [236..259]
 r141: [256..257]
 r142: [254..255]
 r143: [252..253]
 r144: [250..251]
 r145: [242..249]
 r146: [246..247]
 r147: [244..245]
 r148: [242..243]
 r149: [240..241]
 r150: [238..239]
 r151: [234..237]
 r152: [228..229]
 r153: [226..227]
 r154: [224..225]
 r155: [216..223]
 r156: [220..221]
 r157: [218..219]
 r158: [216..217]
 r159: [214..215]
 r160: [212..213]
 r161: [190..211]
 r162: [208..209]
 r163: [206..207]
 r164: [196..205]
 r165: [202..203]
 r166: [200..201]
 r167: [198..199]
 r168: [196..197]
 r169: [194..195]
 r170: [192..193]
 r171: [190..191]
 r172: [180..185]
 r173: [182..183]
 r174: [180..181]
 r175: [178..179]
 r176: [176..177]
 r177: [174..175]
 r178: [164..169]
 r179: [166..167]
 r180: [164..165]
 r181: [158..159]
 r182: [156..157]
 r183: [154..155]
 r184: [152..153]
 r185: [146..147]
 r186: [144..145]
 r187: [134..143]
 r188: [140..141]
 r189: [138..139]
 r190: [136..137]
 r191: [134..135]
 r192: [132..133]
 r193: [130..131]
 r194: [106..129]
 r195: [126..127]
 r196: [124..125]
 r197: [122..123]
 r198: [120..121]
 r199: [112..119]
 r200: [116..117]
 r201: [114..115]
 r202: [112..113]
 r203: [110..111]
 r204: [108..109]
 r205: [104..107]
 r206: [98..99]
 r207: [96..97]
 r208: [94..95]
 r209: [86..93]
 r210: [90..91]
 r211: [88..89]
 r212: [86..87]
 r213: [84..85]
 r214: [82..83]
 r215: [60..81]
 r216: [78..79]
 r217: [76..77]
 r218: [66..75]
 r219: [72..73]
 r220: [70..71]
 r221: [68..69]
 r222: [66..67]
 r223: [64..65]
 r224: [62..63]
 r225: [60..61]
 r226: [50..55]
 r227: [52..53]
 r228: [50..51]
 r229: [48..49]
 r230: [46..47]
 r231: [44..45]
 r232: [34..39]
 r233: [36..37]
 r234: [34..35]
 r235: [24..27]
 r236: [24..25]
 r237: [22..23]
 r238: [16..19]
 r239: [16..17]
 r240: [14..15]
 r242: [10..11]
 r243: [6..9]
 r244: [4..5]
 r245: [412..413]
 r246: [410..411]
 r250: [400..401]
 r251: [398..399]
 r255: [388..389]
 r256: [386..387]
 r260: [376..377]
 r261: [374..375]
 r265: [364..365]
 r266: [362..363]
 r270: [12..21]
 r271: [2..3]
 r272: [0..1]
 r273: [418..419]
 r274: [414..415]
 r275: [412..413]
 r276: [406..407]
 r277: [402..403]
 r278: [400..401]
 r279: [394..395]
 r280: [390..391]
 r281: [388..389]
 r282: [382..383]
 r283: [378..379]
 r284: [376..377]
 r285: [370..371]
 r286: [366..367]
 r287: [364..365]
 r288: [358..359]
 r289: [356..357]
 r290: [330..331]
 r291: [354..355]
 r292: [354..355]
 r293: [350..351]
 r294: [348..349]
 r295: [346..347]
 r296: [344..345]
 r297: [342..343]
 r298: [338..339]
 r299: [332..333]
 r300: [334..335]
 r301: [326..327]
 r302: [322..323]
 r303: [320..321]
 r304: [314..315]
 r305: [310..311]
 r306: [308..309]
 r307: [306..307]
 r308: [300..301]
 r309: [292..293]
 r310: [290..291]
 r311: [284..285]
 r312: [280..281]
 r313: [282..283]
 r314: [278..279]
 r315: [274..275]
 r316: [272..273]
 r317: [266..267]
 r318: [260..261]
 r319: [258..259]
 r320: [252..253]
 r321: [248..249]
 r322: [244..245]
 r323: [232..233]
 r324: [230..231]
 r325: [224..225]
 r326: [222..223]
 r327: [218..219]
 r328: [210..211]
 r329: [206..207]
 r330: [204..205]
 r331: [198..199]
 r332: [188..189]
 r333: [186..187]
 r334: [184..185]
 r335: [184..185]
 r336: [172..173]
 r337: [174..175]
 r338: [170..171]
 r339: [168..169]
 r340: [168..169]
 r341: [162..163]
 r342: [160..161]
 r343: [154..155]
 r344: [150..151]
 r345: [152..153]
 r346: [148..149]
 r347: [144..145]
 r348: [142..143]
 r349: [136..137]
 r350: [130..131]
 r351: [128..129]
 r352: [122..123]
 r353: [118..119]
 r354: [114..115]
 r355: [102..103]
 r356: [100..101]
 r357: [94..95]
 r358: [92..93]
 r359: [88..89]
 r360: [80..81]
 r361: [76..77]
 r362: [74..75]
 r363: [68..69]
 r364: [58..59]
 r365: [56..57]
 r366: [54..55]
 r367: [54..55]
 r368: [42..43]
 r369: [44..45]
 r370: [40..41]
 r371: [38..39]
 r372: [38..39]
 r373: [32..33]
 r374: [30..31]
 r375: [26..27]
 r376: [20..21]
 r377: [18..19]
 r379: [352..353]
 r380: [234..235]
 r381: [186..187]
 r382: [170..171]
 r383: [104..105]
 r384: [56..57]
 r385: [40..41]
 r386: [28..29]
 r387: [6..7]
 r388: [8..13]

********** Assignment #1: **********

	 Assigning to 379 (cl=GENERAL_REGS, orig=293, freq=3, tfirst=379, tfreq=3)...
	   Assign 1 to reload r379 (freq=3)
	 Assigning to 380 (cl=SSE_REGS, orig=140, freq=3, tfirst=380, tfreq=3)...
	   Assign 22 to reload r380 (freq=3)
	 Assigning to 381 (cl=SSE_REGS, orig=333, freq=3, tfirst=381, tfreq=3)...
	   Assign 22 to reload r381 (freq=3)
	 Assigning to 382 (cl=SSE_REGS, orig=338, freq=3, tfirst=382, tfreq=3)...
	   Assign 22 to reload r382 (freq=3)
	 Assigning to 383 (cl=SSE_REGS, orig=194, freq=3, tfirst=383, tfreq=3)...
	   Assign 22 to reload r383 (freq=3)
	 Assigning to 384 (cl=SSE_REGS, orig=365, freq=3, tfirst=384, tfreq=3)...
	   Assign 22 to reload r384 (freq=3)
	 Assigning to 385 (cl=SSE_REGS, orig=370, freq=3, tfirst=385, tfreq=3)...
	   Assign 22 to reload r385 (freq=3)
	 Assigning to 386 (cl=SSE_REGS, orig=374, freq=3, tfirst=386, tfreq=3)...
	   Assign 22 to reload r386 (freq=3)
	 Assigning to 388 (cl=SSE_REGS, orig=241, freq=2, tfirst=387, tfreq=3)...
	 Assigning to 387 (cl=SSE_REGS, orig=241, freq=3, tfirst=387, tfreq=3)...
	   Assign 24 to reload r387 (freq=3)
	Hard reg 21 is preferable by r388 with profit 1
	Hard reg 24 is preferable by r388 with profit 1
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  395: r387:SF=r241:SF
      REG_DEAD r241:SF
   Insn after restoring regs:
  349: r241:SF=r240:SF
      REG_DEAD r240:SF

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #2: **********

  BB 8
   Insn 365: point = 0, n_alt = -1
   Insn 364: point = 0, n_alt = -1
   Insn 360: point = 1, n_alt = -1
   Insn 357: point = 3, n_alt = 7
   Insn 356: point = 4, n_alt = 8
   Insn 396: point = 5, n_alt = -1
   Insn 355: point = 7, n_alt = 2
   Insn 395: point = 8, n_alt = 7
   Insn 354: point = 10, n_alt = 0
   Insn 353: point = 12, n_alt = -1
   Insn 352: point = 13, n_alt = 0
   Insn 351: point = 13, n_alt = -1
   Insn 350: point = 14, n_alt = 0
   Insn 349: point = 14, n_alt = 8
   Insn 348: point = 16, n_alt = 2
   Insn 347: point = 18, n_alt = 1
   Insn 346: point = 20, n_alt = 7
   Insn 345: point = 21, n_alt = 1
   Insn 344: point = 23, n_alt = 7
   Insn 343: point = 24, n_alt = -1
   Insn 342: point = 26, n_alt = 1
   Insn 341: point = 28, n_alt = 1
   Insn 340: point = 30, n_alt = 7
   Insn 394: point = 31, n_alt = -1
   Insn 339: point = 33, n_alt = 1
   Insn 393: point = 33, n_alt = -1
   Insn 338: point = 35, n_alt = 7
   Insn 337: point = 36, n_alt = 8
   Insn 336: point = 37, n_alt = 1
   Insn 335: point = 39, n_alt = 1
   Insn 334: point = 41, n_alt = 1
   Insn 333: point = 43, n_alt = 7
   Insn 332: point = 44, n_alt = 7
   Insn 392: point = 45, n_alt = -1
   Insn 331: point = 47, n_alt = 1
   Insn 391: point = 48, n_alt = -1
   Insn 330: point = 49, n_alt = 7
   Insn 329: point = 50, n_alt = 8
   Insn 328: point = 51, n_alt = 1
   Insn 327: point = 53, n_alt = 7
   Insn 326: point = 54, n_alt = 1
   Insn 325: point = 56, n_alt = -1
   Insn 324: point = 58, n_alt = 1
   Insn 323: point = 60, n_alt = 1
   Insn 322: point = 62, n_alt = 1
   Insn 321: point = 64, n_alt = 7
   Insn 320: point = 65, n_alt = 7
   Insn 390: point = 66, n_alt = -1
   Insn 319: point = 68, n_alt = 1
   Insn 389: point = 69, n_alt = -1
   Insn 318: point = 70, n_alt = 7
   Insn 317: point = 71, n_alt = 8
   Insn 316: point = 72, n_alt = 2
   Insn 315: point = 74, n_alt = 1
   Insn 314: point = 76, n_alt = -1
   Insn 313: point = 78, n_alt = 2
   Insn 312: point = 80, n_alt = 7
   Insn 311: point = 82, n_alt = 3
   Insn 310: point = 83, n_alt = 3
   Insn 309: point = 85, n_alt = 0
   Insn 308: point = 87, n_alt = 0
   Insn 307: point = 89, n_alt = 0
   Insn 306: point = 90, n_alt = 7
   Insn 305: point = 92, n_alt = 3
   Insn 304: point = 93, n_alt = 3
   Insn 303: point = 95, n_alt = 0
   Insn 302: point = 97, n_alt = 0
   Insn 301: point = 98, n_alt = 1
   Insn 300: point = 100, n_alt = -1
   Insn 299: point = 102, n_alt = 1
   Insn 298: point = 104, n_alt = 7
   Insn 297: point = 106, n_alt = 3
   Insn 296: point = 107, n_alt = 3
   Insn 295: point = 109, n_alt = 0
   Insn 294: point = 111, n_alt = 0
   Insn 293: point = 112, n_alt = 7
   Insn 292: point = 114, n_alt = 3
   Insn 291: point = 115, n_alt = 3
   Insn 290: point = 117, n_alt = 0
   Insn 289: point = 119, n_alt = 0
   Insn 288: point = 121, n_alt = 0
   Insn 287: point = 122, n_alt = 8
   Insn 388: point = 123, n_alt = -1
   Insn 286: point = 125, n_alt = 2
   Insn 387: point = 126, n_alt = -1
   Insn 285: point = 128, n_alt = 1
   Insn 284: point = 130, n_alt = -1
   Insn 283: point = 132, n_alt = 1
   Insn 282: point = 134, n_alt = 7
   Insn 281: point = 136, n_alt = 3
   Insn 280: point = 137, n_alt = 3
   Insn 279: point = 139, n_alt = 0
   Insn 278: point = 141, n_alt = 0
   Insn 277: point = 142, n_alt = 1
   Insn 276: point = 144, n_alt = 7
   Insn 275: point = 146, n_alt = 3
   Insn 274: point = 147, n_alt = 3
   Insn 273: point = 149, n_alt = 0
   Insn 272: point = 151, n_alt = 0
   Insn 271: point = 153, n_alt = 0
   Insn 270: point = 154, n_alt = 1
   Insn 269: point = 156, n_alt = 7
   Insn 268: point = 157, n_alt = -1
   Insn 267: point = 159, n_alt = 2
   Insn 266: point = 161, n_alt = 7
   Insn 265: point = 163, n_alt = 3
   Insn 264: point = 164, n_alt = 3
   Insn 263: point = 166, n_alt = 0
   Insn 262: point = 168, n_alt = 0
   Insn 261: point = 170, n_alt = 0
   Insn 260: point = 171, n_alt = 7
   Insn 259: point = 173, n_alt = 3
   Insn 258: point = 174, n_alt = 3
   Insn 257: point = 176, n_alt = 0
   Insn 256: point = 178, n_alt = 0
   Insn 255: point = 179, n_alt = 8
   Insn 254: point = 180, n_alt = 1
   Insn 253: point = 182, n_alt = 7
   Insn 252: point = 183, n_alt = 7
   Insn 251: point = 185, n_alt = 3
   Insn 250: point = 186, n_alt = 3
   Insn 249: point = 188, n_alt = 0
   Insn 248: point = 190, n_alt = 0
   Insn 247: point = 192, n_alt = 0
   Insn 246: point = 193, n_alt = 8
   Insn 245: point = 194, n_alt = 1
   Insn 244: point = 196, n_alt = 1
   Insn 243: point = 198, n_alt = 1
   Insn 242: point = 200, n_alt = 7
   Insn 241: point = 201, n_alt = 7
   Insn 386: point = 202, n_alt = -1
   Insn 240: point = 204, n_alt = 1
   Insn 385: point = 205, n_alt = -1
   Insn 239: point = 206, n_alt = 7
   Insn 238: point = 207, n_alt = 8
   Insn 237: point = 208, n_alt = 1
   Insn 236: point = 210, n_alt = 7
   Insn 235: point = 211, n_alt = 1
   Insn 234: point = 213, n_alt = -1
   Insn 233: point = 215, n_alt = 1
   Insn 232: point = 217, n_alt = 1
   Insn 231: point = 219, n_alt = 1
   Insn 230: point = 221, n_alt = 7
   Insn 229: point = 222, n_alt = 7
   Insn 384: point = 223, n_alt = -1
   Insn 228: point = 225, n_alt = 1
   Insn 383: point = 226, n_alt = -1
   Insn 227: point = 227, n_alt = 7
   Insn 226: point = 228, n_alt = 8
   Insn 225: point = 229, n_alt = 2
   Insn 224: point = 231, n_alt = 1
   Insn 223: point = 233, n_alt = -1
   Insn 222: point = 235, n_alt = 2
   Insn 221: point = 237, n_alt = 7
   Insn 220: point = 239, n_alt = 3
   Insn 219: point = 240, n_alt = 3
   Insn 218: point = 242, n_alt = 0
   Insn 217: point = 244, n_alt = 0
   Insn 216: point = 246, n_alt = 0
   Insn 215: point = 247, n_alt = 7
   Insn 214: point = 249, n_alt = 3
   Insn 213: point = 250, n_alt = 3
   Insn 212: point = 252, n_alt = 0
   Insn 211: point = 254, n_alt = 0
   Insn 210: point = 255, n_alt = 1
   Insn 209: point = 257, n_alt = -1
   Insn 208: point = 259, n_alt = 1
   Insn 207: point = 261, n_alt = 7
   Insn 206: point = 263, n_alt = 3
   Insn 205: point = 264, n_alt = 3
   Insn 204: point = 266, n_alt = 0
   Insn 203: point = 268, n_alt = 0
   Insn 202: point = 269, n_alt = 7
   Insn 201: point = 271, n_alt = 3
   Insn 200: point = 272, n_alt = 3
   Insn 199: point = 274, n_alt = 0
   Insn 198: point = 276, n_alt = 0
   Insn 197: point = 278, n_alt = 0
   Insn 196: point = 279, n_alt = 8
   Insn 382: point = 280, n_alt = -1
   Insn 195: point = 282, n_alt = 2
   Insn 381: point = 283, n_alt = -1
   Insn 194: point = 285, n_alt = 1
   Insn 193: point = 287, n_alt = -1
   Insn 192: point = 289, n_alt = 1
   Insn 191: point = 291, n_alt = 7
   Insn 190: point = 293, n_alt = 3
   Insn 189: point = 294, n_alt = 3
   Insn 188: point = 296, n_alt = 0
   Insn 187: point = 298, n_alt = 0
   Insn 186: point = 299, n_alt = 1
   Insn 185: point = 301, n_alt = 7
   Insn 184: point = 303, n_alt = 3
   Insn 183: point = 304, n_alt = 3
   Insn 182: point = 306, n_alt = 0
   Insn 181: point = 308, n_alt = 0
   Insn 180: point = 310, n_alt = 0
   Insn 179: point = 311, n_alt = 1
   Insn 178: point = 313, n_alt = 7
   Insn 177: point = 314, n_alt = -1
   Insn 176: point = 316, n_alt = 2
   Insn 175: point = 318, n_alt = 7
   Insn 174: point = 320, n_alt = 3
   Insn 173: point = 321, n_alt = 3
   Insn 172: point = 323, n_alt = 0
   Insn 171: point = 325, n_alt = 0
   Insn 170: point = 327, n_alt = 0
   Insn 169: point = 328, n_alt = 7
   Insn 168: point = 330, n_alt = 3
   Insn 167: point = 331, n_alt = 3
   Insn 166: point = 333, n_alt = 0
   Insn 165: point = 335, n_alt = 0
   Insn 164: point = 336, n_alt = 8
   Insn 163: point = 337, n_alt = 1
   Insn 162: point = 339, n_alt = 7
   Insn 161: point = 340, n_alt = 7
   Insn 160: point = 342, n_alt = 3
   Insn 159: point = 343, n_alt = 3
   Insn 158: point = 345, n_alt = 0
   Insn 157: point = 347, n_alt = 0
   Insn 156: point = 349, n_alt = 0
   Insn 155: point = 350, n_alt = 8
   Insn 154: point = 351, n_alt = 2
   Insn 153: point = 353, n_alt = -1
   Insn 152: point = 355, n_alt = 2
   Insn 151: point = 357, n_alt = 7
   Insn 150: point = 359, n_alt = 3
   Insn 149: point = 360, n_alt = 3
   Insn 148: point = 362, n_alt = 0
   Insn 147: point = 364, n_alt = 0
   Insn 146: point = 366, n_alt = 0
   Insn 145: point = 367, n_alt = 7
   Insn 144: point = 369, n_alt = 3
   Insn 143: point = 370, n_alt = 8
   Insn 142: point = 371, n_alt = 2
   Insn 141: point = 373, n_alt = 7
   Insn 140: point = 375, n_alt = 3
   Insn 139: point = 376, n_alt = 3
   Insn 138: point = 378, n_alt = 0
   Insn 137: point = 380, n_alt = 0
   Insn 136: point = 382, n_alt = 0
   Insn 135: point = 383, n_alt = 7
   Insn 134: point = 385, n_alt = 3
   Insn 133: point = 386, n_alt = 3
   Insn 132: point = 388, n_alt = 0
   Insn 131: point = 390, n_alt = 0
  BB 9
   Insn 377: point = 391, n_alt = -1
  BB 3
   Insn 94: point = 391, n_alt = -1
   Insn 93: point = 391, n_alt = 0
   Insn 92: point = 392, n_alt = 1
   Insn 91: point = 394, n_alt = 0
  BB 7
   Insn 373: point = 395, n_alt = -1
  BB 5
   Insn 371: point = 395, n_alt = -1
   Insn 117: point = 395, n_alt = 1
   Insn 116: point = 396, n_alt = 0
  BB 6
   Insn 123: point = 397, n_alt = 1
   Insn 122: point = 398, n_alt = 0
  BB 4
   Insn 111: point = 399, n_alt = -1
   Insn 110: point = 399, n_alt = 1
   Insn 109: point = 400, n_alt = 7
   Insn 108: point = 402, n_alt = 3
   Insn 107: point = 403, n_alt = 3
   Insn 106: point = 405, n_alt = 0
   Insn 105: point = 407, n_alt = 0
   Insn 104: point = 408, n_alt = 7
   Insn 103: point = 410, n_alt = 3
   Insn 102: point = 411, n_alt = 1
   Insn 101: point = 412, n_alt = 0
   Insn 100: point = 414, n_alt = 0
   Insn 380: point = 416, n_alt = -1
   Insn 99: point = 418, n_alt = 0
   Insn 379: point = 418, n_alt = -1
   Insn 98: point = 419, n_alt = 0
   Insn 97: point = 421, n_alt = 0
   Insn 96: point = 422, n_alt = 0
  BB 2
   Insn 89: point = 423, n_alt = 1
   Insn 88: point = 424, n_alt = 0
   Insn 87: point = 426, n_alt = 3
   Insn 86: point = 427, n_alt = 1
   Insn 82: point = 427, n_alt = 2
   Insn 81: point = 428, n_alt = 3
   Insn 80: point = 429, n_alt = -1
   Insn 78: point = 431, n_alt = 1
   Insn 76: point = 433, n_alt = 0
   Insn 77: point = 433, n_alt = 2
   Insn 75: point = 434, n_alt = 3
   Insn 74: point = 435, n_alt = 5
   Insn 73: point = 436, n_alt = 0
   Insn 72: point = 438, n_alt = 0
   Insn 71: point = 440, n_alt = 3
   Insn 67: point = 441, n_alt = 2
   Insn 66: point = 442, n_alt = 3
   Insn 65: point = 443, n_alt = -1
   Insn 63: point = 445, n_alt = 1
   Insn 61: point = 447, n_alt = 0
   Insn 62: point = 447, n_alt = 2
   Insn 60: point = 448, n_alt = 3
   Insn 59: point = 449, n_alt = 5
   Insn 58: point = 450, n_alt = 0
   Insn 57: point = 452, n_alt = 0
   Insn 56: point = 454, n_alt = 3
   Insn 52: point = 455, n_alt = 2
   Insn 51: point = 456, n_alt = 3
   Insn 50: point = 457, n_alt = -1
   Insn 48: point = 459, n_alt = 1
   Insn 46: point = 461, n_alt = 0
   Insn 47: point = 461, n_alt = 2
   Insn 45: point = 462, n_alt = 3
   Insn 44: point = 463, n_alt = 5
   Insn 43: point = 464, n_alt = 0
   Insn 42: point = 466, n_alt = 0
   Insn 41: point = 468, n_alt = 3
   Insn 37: point = 469, n_alt = 5
   Insn 36: point = 470, n_alt = 5
   Insn 35: point = 471, n_alt = -1
   Insn 33: point = 473, n_alt = 1
   Insn 31: point = 475, n_alt = 0
   Insn 32: point = 475, n_alt = 2
   Insn 30: point = 476, n_alt = 3
   Insn 29: point = 477, n_alt = 5
   Insn 28: point = 478, n_alt = 0
   Insn 27: point = 480, n_alt = 0
   Insn 26: point = 482, n_alt = 3
   Insn 22: point = 483, n_alt = 5
   Insn 21: point = 484, n_alt = 5
   Insn 20: point = 485, n_alt = -1
   Insn 18: point = 487, n_alt = 1
   Insn 16: point = 489, n_alt = 0
   Insn 17: point = 489, n_alt = 2
   Insn 15: point = 490, n_alt = 3
   Insn 14: point = 491, n_alt = 5
   Insn 13: point = 492, n_alt = 0
   Insn 12: point = 494, n_alt = 0
   Insn 11: point = 496, n_alt = 3
   Insn 7: point = 497, n_alt = 5
   Insn 6: point = 497, n_alt = 5
   Insn 5: point = 497, n_alt = 5
   Insn 4: point = 497, n_alt = 5
   Insn 3: point = 497, n_alt = 5
   Insn 2: point = 497, n_alt = 5
 r89: [483..497]
 r93: [469..497]
 r241: [9..14]
Compressing live ranges: from 498 to 4 - 0%
Ranges after the compression:
 r89: [2..3]
 r93: [2..3]
 r241: [0..1]
  Slot 0 regnos (width = 0):	 89	 241
  Slot 1 regnos (width = 0):	 93
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #22
Changing spilled pseudos to memory in insn #36
Changing spilled pseudos to memory in insn #37
Changing spilled pseudos to memory in insn #349
Changing spilled pseudos to memory in insn #395
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 7 for insn #395
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 395:  (0) v  (1) m {*movsf_internal}
Reusing alternative 8 for insn #349
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 349:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #3: **********

  BB 8
   Insn 365: point = 0, n_alt = -1
   Insn 364: point = 0, n_alt = -1
   Insn 360: point = 1, n_alt = -1
   Insn 357: point = 3, n_alt = 7
   Insn 356: point = 4, n_alt = 8
   Insn 396: point = 5, n_alt = -1
   Insn 355: point = 7, n_alt = 2
   Insn 395: point = 8, n_alt = 7
   Insn 354: point = 9, n_alt = 0
   Insn 353: point = 11, n_alt = -1
   Insn 352: point = 12, n_alt = 0
   Insn 351: point = 12, n_alt = -1
   Insn 350: point = 13, n_alt = 0
   Insn 349: point = 13, n_alt = 8
   Insn 348: point = 14, n_alt = 2
   Insn 347: point = 16, n_alt = 1
   Insn 346: point = 18, n_alt = 7
   Insn 345: point = 19, n_alt = 1
   Insn 344: point = 21, n_alt = 7
   Insn 343: point = 22, n_alt = -1
   Insn 342: point = 24, n_alt = 1
   Insn 341: point = 26, n_alt = 1
   Insn 340: point = 28, n_alt = 7
   Insn 394: point = 29, n_alt = -1
   Insn 339: point = 31, n_alt = 1
   Insn 393: point = 31, n_alt = -1
   Insn 338: point = 33, n_alt = 7
   Insn 337: point = 34, n_alt = 8
   Insn 336: point = 35, n_alt = 1
   Insn 335: point = 37, n_alt = 1
   Insn 334: point = 39, n_alt = 1
   Insn 333: point = 41, n_alt = 7
   Insn 332: point = 42, n_alt = 7
   Insn 392: point = 43, n_alt = -1
   Insn 331: point = 45, n_alt = 1
   Insn 391: point = 46, n_alt = -1
   Insn 330: point = 47, n_alt = 7
   Insn 329: point = 48, n_alt = 8
   Insn 328: point = 49, n_alt = 1
   Insn 327: point = 51, n_alt = 7
   Insn 326: point = 52, n_alt = 1
   Insn 325: point = 54, n_alt = -1
   Insn 324: point = 56, n_alt = 1
   Insn 323: point = 58, n_alt = 1
   Insn 322: point = 60, n_alt = 1
   Insn 321: point = 62, n_alt = 7
   Insn 320: point = 63, n_alt = 7
   Insn 390: point = 64, n_alt = -1
   Insn 319: point = 66, n_alt = 1
   Insn 389: point = 67, n_alt = -1
   Insn 318: point = 68, n_alt = 7
   Insn 317: point = 69, n_alt = 8
   Insn 316: point = 70, n_alt = 2
   Insn 315: point = 72, n_alt = 1
   Insn 314: point = 74, n_alt = -1
   Insn 313: point = 76, n_alt = 2
   Insn 312: point = 78, n_alt = 7
   Insn 311: point = 80, n_alt = 3
   Insn 310: point = 81, n_alt = 3
   Insn 309: point = 83, n_alt = 0
   Insn 308: point = 85, n_alt = 0
   Insn 307: point = 87, n_alt = 0
   Insn 306: point = 88, n_alt = 7
   Insn 305: point = 90, n_alt = 3
   Insn 304: point = 91, n_alt = 3
   Insn 303: point = 93, n_alt = 0
   Insn 302: point = 95, n_alt = 0
   Insn 301: point = 96, n_alt = 1
   Insn 300: point = 98, n_alt = -1
   Insn 299: point = 100, n_alt = 1
   Insn 298: point = 102, n_alt = 7
   Insn 297: point = 104, n_alt = 3
   Insn 296: point = 105, n_alt = 3
   Insn 295: point = 107, n_alt = 0
   Insn 294: point = 109, n_alt = 0
   Insn 293: point = 110, n_alt = 7
   Insn 292: point = 112, n_alt = 3
   Insn 291: point = 113, n_alt = 3
   Insn 290: point = 115, n_alt = 0
   Insn 289: point = 117, n_alt = 0
   Insn 288: point = 119, n_alt = 0
   Insn 287: point = 120, n_alt = 8
   Insn 388: point = 121, n_alt = -1
   Insn 286: point = 123, n_alt = 2
   Insn 387: point = 124, n_alt = -1
   Insn 285: point = 126, n_alt = 1
   Insn 284: point = 128, n_alt = -1
   Insn 283: point = 130, n_alt = 1
   Insn 282: point = 132, n_alt = 7
   Insn 281: point = 134, n_alt = 3
   Insn 280: point = 135, n_alt = 3
   Insn 279: point = 137, n_alt = 0
   Insn 278: point = 139, n_alt = 0
   Insn 277: point = 140, n_alt = 1
   Insn 276: point = 142, n_alt = 7
   Insn 275: point = 144, n_alt = 3
   Insn 274: point = 145, n_alt = 3
   Insn 273: point = 147, n_alt = 0
   Insn 272: point = 149, n_alt = 0
   Insn 271: point = 151, n_alt = 0
   Insn 270: point = 152, n_alt = 1
   Insn 269: point = 154, n_alt = 7
   Insn 268: point = 155, n_alt = -1
   Insn 267: point = 157, n_alt = 2
   Insn 266: point = 159, n_alt = 7
   Insn 265: point = 161, n_alt = 3
   Insn 264: point = 162, n_alt = 3
   Insn 263: point = 164, n_alt = 0
   Insn 262: point = 166, n_alt = 0
   Insn 261: point = 168, n_alt = 0
   Insn 260: point = 169, n_alt = 7
   Insn 259: point = 171, n_alt = 3
   Insn 258: point = 172, n_alt = 3
   Insn 257: point = 174, n_alt = 0
   Insn 256: point = 176, n_alt = 0
   Insn 255: point = 177, n_alt = 8
   Insn 254: point = 178, n_alt = 1
   Insn 253: point = 180, n_alt = 7
   Insn 252: point = 181, n_alt = 7
   Insn 251: point = 183, n_alt = 3
   Insn 250: point = 184, n_alt = 3
   Insn 249: point = 186, n_alt = 0
   Insn 248: point = 188, n_alt = 0
   Insn 247: point = 190, n_alt = 0
   Insn 246: point = 191, n_alt = 8
   Insn 245: point = 192, n_alt = 1
   Insn 244: point = 194, n_alt = 1
   Insn 243: point = 196, n_alt = 1
   Insn 242: point = 198, n_alt = 7
   Insn 241: point = 199, n_alt = 7
   Insn 386: point = 200, n_alt = -1
   Insn 240: point = 202, n_alt = 1
   Insn 385: point = 203, n_alt = -1
   Insn 239: point = 204, n_alt = 7
   Insn 238: point = 205, n_alt = 8
   Insn 237: point = 206, n_alt = 1
   Insn 236: point = 208, n_alt = 7
   Insn 235: point = 209, n_alt = 1
   Insn 234: point = 211, n_alt = -1
   Insn 233: point = 213, n_alt = 1
   Insn 232: point = 215, n_alt = 1
   Insn 231: point = 217, n_alt = 1
   Insn 230: point = 219, n_alt = 7
   Insn 229: point = 220, n_alt = 7
   Insn 384: point = 221, n_alt = -1
   Insn 228: point = 223, n_alt = 1
   Insn 383: point = 224, n_alt = -1
   Insn 227: point = 225, n_alt = 7
   Insn 226: point = 226, n_alt = 8
   Insn 225: point = 227, n_alt = 2
   Insn 224: point = 229, n_alt = 1
   Insn 223: point = 231, n_alt = -1
   Insn 222: point = 233, n_alt = 2
   Insn 221: point = 235, n_alt = 7
   Insn 220: point = 237, n_alt = 3
   Insn 219: point = 238, n_alt = 3
   Insn 218: point = 240, n_alt = 0
   Insn 217: point = 242, n_alt = 0
   Insn 216: point = 244, n_alt = 0
   Insn 215: point = 245, n_alt = 7
   Insn 214: point = 247, n_alt = 3
   Insn 213: point = 248, n_alt = 3
   Insn 212: point = 250, n_alt = 0
   Insn 211: point = 252, n_alt = 0
   Insn 210: point = 253, n_alt = 1
   Insn 209: point = 255, n_alt = -1
   Insn 208: point = 257, n_alt = 1
   Insn 207: point = 259, n_alt = 7
   Insn 206: point = 261, n_alt = 3
   Insn 205: point = 262, n_alt = 3
   Insn 204: point = 264, n_alt = 0
   Insn 203: point = 266, n_alt = 0
   Insn 202: point = 267, n_alt = 7
   Insn 201: point = 269, n_alt = 3
   Insn 200: point = 270, n_alt = 3
   Insn 199: point = 272, n_alt = 0
   Insn 198: point = 274, n_alt = 0
   Insn 197: point = 276, n_alt = 0
   Insn 196: point = 277, n_alt = 8
   Insn 382: point = 278, n_alt = -1
   Insn 195: point = 280, n_alt = 2
   Insn 381: point = 281, n_alt = -1
   Insn 194: point = 283, n_alt = 1
   Insn 193: point = 285, n_alt = -1
   Insn 192: point = 287, n_alt = 1
   Insn 191: point = 289, n_alt = 7
   Insn 190: point = 291, n_alt = 3
   Insn 189: point = 292, n_alt = 3
   Insn 188: point = 294, n_alt = 0
   Insn 187: point = 296, n_alt = 0
   Insn 186: point = 297, n_alt = 1
   Insn 185: point = 299, n_alt = 7
   Insn 184: point = 301, n_alt = 3
   Insn 183: point = 302, n_alt = 3
   Insn 182: point = 304, n_alt = 0
   Insn 181: point = 306, n_alt = 0
   Insn 180: point = 308, n_alt = 0
   Insn 179: point = 309, n_alt = 1
   Insn 178: point = 311, n_alt = 7
   Insn 177: point = 312, n_alt = -1
   Insn 176: point = 314, n_alt = 2
   Insn 175: point = 316, n_alt = 7
   Insn 174: point = 318, n_alt = 3
   Insn 173: point = 319, n_alt = 3
   Insn 172: point = 321, n_alt = 0
   Insn 171: point = 323, n_alt = 0
   Insn 170: point = 325, n_alt = 0
   Insn 169: point = 326, n_alt = 7
   Insn 168: point = 328, n_alt = 3
   Insn 167: point = 329, n_alt = 3
   Insn 166: point = 331, n_alt = 0
   Insn 165: point = 333, n_alt = 0
   Insn 164: point = 334, n_alt = 8
   Insn 163: point = 335, n_alt = 1
   Insn 162: point = 337, n_alt = 7
   Insn 161: point = 338, n_alt = 7
   Insn 160: point = 340, n_alt = 3
   Insn 159: point = 341, n_alt = 3
   Insn 158: point = 343, n_alt = 0
   Insn 157: point = 345, n_alt = 0
   Insn 156: point = 347, n_alt = 0
   Insn 155: point = 348, n_alt = 8
   Insn 154: point = 349, n_alt = 2
   Insn 153: point = 351, n_alt = -1
   Insn 152: point = 353, n_alt = 2
   Insn 151: point = 355, n_alt = 7
   Insn 150: point = 357, n_alt = 3
   Insn 149: point = 358, n_alt = 3
   Insn 148: point = 360, n_alt = 0
   Insn 147: point = 362, n_alt = 0
   Insn 146: point = 364, n_alt = 0
   Insn 145: point = 365, n_alt = 7
   Insn 144: point = 367, n_alt = 3
   Insn 143: point = 368, n_alt = 8
   Insn 142: point = 369, n_alt = 2
   Insn 141: point = 371, n_alt = 7
   Insn 140: point = 373, n_alt = 3
   Insn 139: point = 374, n_alt = 3
   Insn 138: point = 376, n_alt = 0
   Insn 137: point = 378, n_alt = 0
   Insn 136: point = 380, n_alt = 0
   Insn 135: point = 381, n_alt = 7
   Insn 134: point = 383, n_alt = 3
   Insn 133: point = 384, n_alt = 3
   Insn 132: point = 386, n_alt = 0
   Insn 131: point = 388, n_alt = 0
  BB 9
   Insn 377: point = 389, n_alt = -1
  BB 3
   Insn 94: point = 389, n_alt = -1
   Insn 93: point = 389, n_alt = 0
   Insn 92: point = 390, n_alt = 1
   Insn 91: point = 392, n_alt = 0
  BB 7
   Insn 373: point = 393, n_alt = -1
  BB 5
   Insn 371: point = 393, n_alt = -1
   Insn 117: point = 393, n_alt = 1
   Insn 116: point = 394, n_alt = 0
  BB 6
   Insn 123: point = 395, n_alt = 1
   Insn 122: point = 396, n_alt = 0
  BB 4
   Insn 111: point = 397, n_alt = -1
   Insn 110: point = 397, n_alt = 1
   Insn 109: point = 398, n_alt = 7
   Insn 108: point = 400, n_alt = 3
   Insn 107: point = 401, n_alt = 3
   Insn 106: point = 403, n_alt = 0
   Insn 105: point = 405, n_alt = 0
   Insn 104: point = 406, n_alt = 7
   Insn 103: point = 408, n_alt = 3
   Insn 102: point = 409, n_alt = 1
   Insn 101: point = 410, n_alt = 0
   Insn 100: point = 412, n_alt = 0
   Insn 380: point = 414, n_alt = -1
   Insn 99: point = 416, n_alt = 0
   Insn 379: point = 416, n_alt = -1
   Insn 98: point = 417, n_alt = 0
   Insn 97: point = 419, n_alt = 0
   Insn 96: point = 420, n_alt = 0
  BB 2
   Insn 89: point = 421, n_alt = 1
   Insn 88: point = 422, n_alt = 0
   Insn 87: point = 424, n_alt = 3
   Insn 86: point = 425, n_alt = 1
   Insn 82: point = 425, n_alt = 2
   Insn 81: point = 426, n_alt = 3
   Insn 80: point = 427, n_alt = -1
   Insn 78: point = 429, n_alt = 1
   Insn 76: point = 431, n_alt = 0
   Insn 77: point = 431, n_alt = 2
   Insn 75: point = 432, n_alt = 3
   Insn 74: point = 433, n_alt = 5
   Insn 73: point = 434, n_alt = 0
   Insn 72: point = 436, n_alt = 0
   Insn 71: point = 438, n_alt = 3
   Insn 67: point = 439, n_alt = 2
   Insn 66: point = 440, n_alt = 3
   Insn 65: point = 441, n_alt = -1
   Insn 63: point = 443, n_alt = 1
   Insn 61: point = 445, n_alt = 0
   Insn 62: point = 445, n_alt = 2
   Insn 60: point = 446, n_alt = 3
   Insn 59: point = 447, n_alt = 5
   Insn 58: point = 448, n_alt = 0
   Insn 57: point = 450, n_alt = 0
   Insn 56: point = 452, n_alt = 3
   Insn 52: point = 453, n_alt = 2
   Insn 51: point = 454, n_alt = 3
   Insn 50: point = 455, n_alt = -1
   Insn 48: point = 457, n_alt = 1
   Insn 46: point = 459, n_alt = 0
   Insn 47: point = 459, n_alt = 2
   Insn 45: point = 460, n_alt = 3
   Insn 44: point = 461, n_alt = 5
   Insn 43: point = 462, n_alt = 0
   Insn 42: point = 464, n_alt = 0
   Insn 41: point = 466, n_alt = 3
   Insn 37: point = 467, n_alt = 5
   Insn 36: point = 467, n_alt = 5
   Insn 35: point = 468, n_alt = -1
   Insn 33: point = 470, n_alt = 1
   Insn 31: point = 472, n_alt = 0
   Insn 32: point = 472, n_alt = 2
   Insn 30: point = 473, n_alt = 3
   Insn 29: point = 474, n_alt = 5
   Insn 28: point = 475, n_alt = 0
   Insn 27: point = 477, n_alt = 0
   Insn 26: point = 479, n_alt = 3
   Insn 22: point = 480, n_alt = 5
   Insn 21: point = 480, n_alt = 5
   Insn 20: point = 481, n_alt = -1
   Insn 18: point = 483, n_alt = 1
   Insn 16: point = 485, n_alt = 0
   Insn 17: point = 485, n_alt = 2
   Insn 15: point = 486, n_alt = 3
   Insn 14: point = 487, n_alt = 5
   Insn 13: point = 488, n_alt = 0
   Insn 12: point = 490, n_alt = 0
   Insn 11: point = 492, n_alt = 3
   Insn 7: point = 493, n_alt = 5
   Insn 6: point = 493, n_alt = 5
   Insn 5: point = 493, n_alt = 5
   Insn 4: point = 493, n_alt = 5
   Insn 3: point = 493, n_alt = 5
   Insn 2: point = 493, n_alt = 5
 r87: [489..490]
 r88: [480..481]
 r91: [476..477]
 r92: [467..468]
 r95: [463..464]
 r96: [454..455]
 r97: [453..493]
 r99: [449..450]
 r100: [440..441]
 r101: [439..493]
 r103: [435..436]
 r104: [426..427]
 r105: [425..493]
 r107: [389..390]
 r108: [413..417]
 r109: [397..406]
 r110: [402..403]
 r111: [399..401]
 r112: [397..398]
 r113: [385..386]
 r114: [382..384]
 r115: [370..381]
 r116: [377..378]
 r117: [375..376]
 r118: [372..374]
 r119: [370..371]
 r120: [354..365]
 r121: [361..362]
 r122: [359..360]
 r123: [356..358]
 r124: [354..355]
 r125: [352..353]
 r126: [350..351]
 r127: [344..345]
 r128: [342..343]
 r129: [339..341]
 r130: [336..338]
 r131: [330..331]
 r132: [327..329]
 r133: [315..326]
 r134: [322..323]
 r135: [320..321]
 r136: [317..319]
 r137: [315..316]
 r138: [313..314]
 r139: [310..312]
 r140: [282..309]
 r141: [305..306]
 r142: [303..304]
 r143: [300..302]
 r144: [298..299]
 r145: [288..297]
 r146: [293..294]
 r147: [290..292]
 r148: [288..289]
 r149: [286..287]
 r150: [284..285]
 r151: [280..283]
 r152: [273..274]
 r153: [271..272]
 r154: [268..270]
 r155: [258..267]
 r156: [263..264]
 r157: [260..262]
 r158: [258..259]
 r159: [256..257]
 r160: [254..255]
 r161: [228..253]
 r162: [249..250]
 r163: [246..248]
 r164: [234..245]
 r165: [241..242]
 r166: [239..240]
 r167: [236..238]
 r168: [234..235]
 r169: [232..233]
 r170: [230..231]
 r171: [228..229]
 r172: [214..221]
 r173: [216..217]
 r174: [214..215]
 r175: [212..213]
 r176: [210..211]
 r177: [207..209]
 r178: [193..200]
 r179: [195..196]
 r180: [193..194]
 r181: [187..188]
 r182: [185..186]
 r183: [182..184]
 r184: [179..181]
 r185: [173..174]
 r186: [170..172]
 r187: [158..169]
 r188: [165..166]
 r189: [163..164]
 r190: [160..162]
 r191: [158..159]
 r192: [156..157]
 r193: [153..155]
 r194: [125..152]
 r195: [148..149]
 r196: [146..147]
 r197: [143..145]
 r198: [141..142]
 r199: [131..140]
 r200: [136..137]
 r201: [133..135]
 r202: [131..132]
 r203: [129..130]
 r204: [127..128]
 r205: [123..126]
 r206: [116..117]
 r207: [114..115]
 r208: [111..113]
 r209: [101..110]
 r210: [106..107]
 r211: [103..105]
 r212: [101..102]
 r213: [99..100]
 r214: [97..98]
 r215: [71..96]
 r216: [92..93]
 r217: [89..91]
 r218: [77..88]
 r219: [84..85]
 r220: [82..83]
 r221: [79..81]
 r222: [77..78]
 r223: [75..76]
 r224: [73..74]
 r225: [71..72]
 r226: [57..64]
 r227: [59..60]
 r228: [57..58]
 r229: [55..56]
 r230: [53..54]
 r231: [50..52]
 r232: [36..43]
 r233: [38..39]
 r234: [36..37]
 r235: [25..29]
 r236: [25..26]
 r237: [23..24]
 r238: [15..19]
 r239: [15..16]
 r240: [13..14]
 r242: [10..11]
 r243: [7..9]
 r244: [4..5]
 r245: [484..486]
 r246: [482..483]
 r250: [471..473]
 r251: [469..470]
 r255: [458..460]
 r256: [456..457]
 r260: [444..446]
 r261: [442..443]
 r265: [430..432]
 r266: [428..429]
 r270: [12..22]
 r271: [2..3]
 r272: [0..1]
 r273: [491..492]
 r274: [487..488]
 r275: [484..485]
 r276: [478..479]
 r277: [474..475]
 r278: [471..472]
 r279: [465..466]
 r280: [461..462]
 r281: [458..459]
 r282: [451..452]
 r283: [447..448]
 r284: [444..445]
 r285: [437..438]
 r286: [433..434]
 r287: [430..431]
 r288: [423..424]
 r289: [421..422]
 r290: [391..392]
 r291: [418..420]
 r292: [418..419]
 r293: [413..414]
 r294: [411..412]
 r295: [409..410]
 r296: [407..408]
 r297: [404..405]
 r298: [399..400]
 r299: [393..394]
 r300: [395..396]
 r301: [387..388]
 r302: [382..383]
 r303: [379..380]
 r304: [372..373]
 r305: [368..369]
 r306: [366..367]
 r307: [363..364]
 r308: [356..357]
 r309: [348..349]
 r310: [346..347]
 r311: [339..340]
 r312: [334..335]
 r313: [336..337]
 r314: [332..333]
 r315: [327..328]
 r316: [324..325]
 r317: [317..318]
 r318: [310..311]
 r319: [307..308]
 r320: [300..301]
 r321: [295..296]
 r322: [290..291]
 r323: [277..278]
 r324: [275..276]
 r325: [268..269]
 r326: [265..266]
 r327: [260..261]
 r328: [251..252]
 r329: [246..247]
 r330: [243..244]
 r331: [236..237]
 r332: [226..227]
 r333: [223..225]
 r334: [218..220]
 r335: [218..219]
 r336: [205..206]
 r337: [207..208]
 r338: [202..204]
 r339: [197..199]
 r340: [197..198]
 r341: [191..192]
 r342: [189..190]
 r343: [182..183]
 r344: [177..178]
 r345: [179..180]
 r346: [175..176]
 r347: [170..171]
 r348: [167..168]
 r349: [160..161]
 r350: [153..154]
 r351: [150..151]
 r352: [143..144]
 r353: [138..139]
 r354: [133..134]
 r355: [120..121]
 r356: [118..119]
 r357: [111..112]
 r358: [108..109]
 r359: [103..104]
 r360: [94..95]
 r361: [89..90]
 r362: [86..87]
 r363: [79..80]
 r364: [69..70]
 r365: [66..68]
 r366: [61..63]
 r367: [61..62]
 r368: [48..49]
 r369: [50..51]
 r370: [45..47]
 r371: [40..42]
 r372: [40..41]
 r373: [34..35]
 r374: [32..33]
 r375: [27..28]
 r376: [20..21]
 r377: [17..18]
 r379: [415..416]
 r380: [279..281]
 r381: [222..224]
 r382: [201..203]
 r383: [122..124]
 r384: [65..67]
 r385: [44..46]
 r386: [30..31]
 r387: [6..8]
Compressing live ranges: from 494 to 416 - 84%
Ranges after the compression:
 r87: [412..413]
 r88: [404..405]
 r91: [400..401]
 r92: [392..393]
 r95: [388..389]
 r96: [380..381]
 r97: [380..415]
 r99: [376..377]
 r100: [368..369]
 r101: [368..415]
 r103: [364..365]
 r104: [356..357]
 r105: [356..415]
 r107: [324..325]
 r108: [346..349]
 r109: [332..339]
 r110: [336..337]
 r111: [334..335]
 r112: [332..333]
 r113: [320..321]
 r114: [318..319]
 r115: [308..317]
 r116: [314..315]
 r117: [312..313]
 r118: [310..311]
 r119: [308..309]
 r120: [294..303]
 r121: [300..301]
 r122: [298..299]
 r123: [296..297]
 r124: [294..295]
 r125: [292..293]
 r126: [290..291]
 r127: [284..285]
 r128: [282..283]
 r129: [280..281]
 r130: [278..279]
 r131: [272..273]
 r132: [270..271]
 r133: [260..269]
 r134: [266..267]
 r135: [264..265]
 r136: [262..263]
 r137: [260..261]
 r138: [258..259]
 r139: [256..257]
 r140: [232..255]
 r141: [252..253]
 r142: [250..251]
 r143: [248..249]
 r144: [246..247]
 r145: [238..245]
 r146: [242..243]
 r147: [240..241]
 r148: [238..239]
 r149: [236..237]
 r150: [234..235]
 r151: [230..233]
 r152: [224..225]
 r153: [222..223]
 r154: [220..221]
 r155: [212..219]
 r156: [216..217]
 r157: [214..215]
 r158: [212..213]
 r159: [210..211]
 r160: [208..209]
 r161: [186..207]
 r162: [204..205]
 r163: [202..203]
 r164: [192..201]
 r165: [198..199]
 r166: [196..197]
 r167: [194..195]
 r168: [192..193]
 r169: [190..191]
 r170: [188..189]
 r171: [186..187]
 r172: [176..181]
 r173: [178..179]
 r174: [176..177]
 r175: [174..175]
 r176: [172..173]
 r177: [170..171]
 r178: [160..165]
 r179: [162..163]
 r180: [160..161]
 r181: [154..155]
 r182: [152..153]
 r183: [150..151]
 r184: [148..149]
 r185: [142..143]
 r186: [140..141]
 r187: [130..139]
 r188: [136..137]
 r189: [134..135]
 r190: [132..133]
 r191: [130..131]
 r192: [128..129]
 r193: [126..127]
 r194: [102..125]
 r195: [122..123]
 r196: [120..121]
 r197: [118..119]
 r198: [116..117]
 r199: [108..115]
 r200: [112..113]
 r201: [110..111]
 r202: [108..109]
 r203: [106..107]
 r204: [104..105]
 r205: [100..103]
 r206: [94..95]
 r207: [92..93]
 r208: [90..91]
 r209: [82..89]
 r210: [86..87]
 r211: [84..85]
 r212: [82..83]
 r213: [80..81]
 r214: [78..79]
 r215: [56..77]
 r216: [74..75]
 r217: [72..73]
 r218: [62..71]
 r219: [68..69]
 r220: [66..67]
 r221: [64..65]
 r222: [62..63]
 r223: [60..61]
 r224: [58..59]
 r225: [56..57]
 r226: [46..51]
 r227: [48..49]
 r228: [46..47]
 r229: [44..45]
 r230: [42..43]
 r231: [40..41]
 r232: [30..35]
 r233: [32..33]
 r234: [30..31]
 r235: [20..23]
 r236: [20..21]
 r237: [18..19]
 r238: [12..15]
 r239: [12..13]
 r240: [10..11]
 r242: [8..9]
 r243: [6..7]
 r244: [4..5]
 r245: [408..409]
 r246: [406..407]
 r250: [396..397]
 r251: [394..395]
 r255: [384..385]
 r256: [382..383]
 r260: [372..373]
 r261: [370..371]
 r265: [360..361]
 r266: [358..359]
 r270: [10..17]
 r271: [2..3]
 r272: [0..1]
 r273: [414..415]
 r274: [410..411]
 r275: [408..409]
 r276: [402..403]
 r277: [398..399]
 r278: [396..397]
 r279: [390..391]
 r280: [386..387]
 r281: [384..385]
 r282: [378..379]
 r283: [374..375]
 r284: [372..373]
 r285: [366..367]
 r286: [362..363]
 r287: [360..361]
 r288: [354..355]
 r289: [352..353]
 r290: [326..327]
 r291: [350..351]
 r292: [350..351]
 r293: [346..347]
 r294: [344..345]
 r295: [342..343]
 r296: [340..341]
 r297: [338..339]
 r298: [334..335]
 r299: [328..329]
 r300: [330..331]
 r301: [322..323]
 r302: [318..319]
 r303: [316..317]
 r304: [310..311]
 r305: [306..307]
 r306: [304..305]
 r307: [302..303]
 r308: [296..297]
 r309: [288..289]
 r310: [286..287]
 r311: [280..281]
 r312: [276..277]
 r313: [278..279]
 r314: [274..275]
 r315: [270..271]
 r316: [268..269]
 r317: [262..263]
 r318: [256..257]
 r319: [254..255]
 r320: [248..249]
 r321: [244..245]
 r322: [240..241]
 r323: [228..229]
 r324: [226..227]
 r325: [220..221]
 r326: [218..219]
 r327: [214..215]
 r328: [206..207]
 r329: [202..203]
 r330: [200..201]
 r331: [194..195]
 r332: [184..185]
 r333: [182..183]
 r334: [180..181]
 r335: [180..181]
 r336: [168..169]
 r337: [170..171]
 r338: [166..167]
 r339: [164..165]
 r340: [164..165]
 r341: [158..159]
 r342: [156..157]
 r343: [150..151]
 r344: [146..147]
 r345: [148..149]
 r346: [144..145]
 r347: [140..141]
 r348: [138..139]
 r349: [132..133]
 r350: [126..127]
 r351: [124..125]
 r352: [118..119]
 r353: [114..115]
 r354: [110..111]
 r355: [98..99]
 r356: [96..97]
 r357: [90..91]
 r358: [88..89]
 r359: [84..85]
 r360: [76..77]
 r361: [72..73]
 r362: [70..71]
 r363: [64..65]
 r364: [54..55]
 r365: [52..53]
 r366: [50..51]
 r367: [50..51]
 r368: [38..39]
 r369: [40..41]
 r370: [36..37]
 r371: [34..35]
 r372: [34..35]
 r373: [28..29]
 r374: [26..27]
 r375: [22..23]
 r376: [16..17]
 r377: [14..15]
 r379: [348..349]
 r380: [230..231]
 r381: [182..183]
 r382: [166..167]
 r383: [100..101]
 r384: [52..53]
 r385: [36..37]
 r386: [24..25]
 r387: [6..7]

********** Assignment #2: **********


********** Undoing inheritance #2: **********


********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=240, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=192, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 66
changing reg in insn 72
changing reg in insn 73
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 81
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 104
changing reg in insn 110
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 142
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 145
changing reg in insn 152
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 169
changing reg in insn 176
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 186
changing reg in insn 192
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 225
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 215
changing reg in insn 215
changing reg in insn 222
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 252
changing reg in insn 252
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 260
changing reg in insn 267
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 270
changing reg in insn 270
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 277
changing reg in insn 283
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 316
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 306
changing reg in insn 306
changing reg in insn 313
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 315
changing reg in insn 316
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 345
changing reg in insn 348
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 60
changing reg in insn 63
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 75
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 80
changing reg in insn 343
changing reg in insn 351
changing reg in insn 357
changing reg in insn 360
changing reg in insn 360
changing reg in insn 364
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 116
changing reg in insn 117
changing reg in insn 122
changing reg in insn 123
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 150
changing reg in insn 151
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 164
changing reg in insn 162
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 220
changing reg in insn 221
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 237
changing reg in insn 238
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 253
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 265
changing reg in insn 266
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 272
changing reg in insn 275
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 281
changing reg in insn 282
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 297
changing reg in insn 298
changing reg in insn 302
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 311
changing reg in insn 312
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 328
changing reg in insn 329
changing reg in insn 327
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 340
changing reg in insn 341
changing reg in insn 344
changing reg in insn 345
changing reg in insn 346
changing reg in insn 347
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 65.
deleting insn with uid = 80.
deleting insn with uid = 380.
deleting insn with uid = 153.
deleting insn with uid = 193.
deleting insn with uid = 381.
deleting insn with uid = 209.
deleting insn with uid = 223.
deleting insn with uid = 384.
deleting insn with uid = 234.
deleting insn with uid = 386.
deleting insn with uid = 284.
deleting insn with uid = 387.
deleting insn with uid = 300.
deleting insn with uid = 314.
deleting insn with uid = 390.
deleting insn with uid = 325.
deleting insn with uid = 392.
deleting insn with uid = 394.
deleting insn with uid = 353.
deleting insn with uid = 360.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 352.


curv

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={117d,121u} r1={32d,31u} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,139u} r7={1d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={47d,7u} r18={1d} r19={1d} r20={1d,1u,16e} r21={72d,78u} r22={37d,37u} r23={11d,9u} r24={4d,2u} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={2d,1u} r39={2d} r40={2d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 861{404d,441u,16e} in 316{315 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 97 101 105
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97 101 105
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 103 104 245 246 250 251 255 256 260 261 265 266 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 y+0 S8 A64])
        (reg:DI 2 cx [ y ])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 ys+0 S8 A64])
        (reg:DI 37 r8 [ ys ])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 s+0 S8 A64])
        (reg:DI 38 r9 [ s ])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [273]) [1 *n_164(D)+0 S4 A32])) "../src/spline.f":469 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [274])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":469 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.60+0 S8 A64])
        (reg:DI 0 ax [274])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:245 size.61_166 ] [245])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.60+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [275])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:245 size.61_166 ] [245])
            (const_int 0 [0]))) "../src/spline.f":469 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:246 size.61_167 ] [246])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:245 size.61_166 ] [245])
            (reg:DI 1 dx [275]))) "../src/spline.f":469 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [8 %sfp+-176 S8 A128])
        (reg:DI 0 ax [orig:88 size.212_2 ] [88])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [8 %sfp+-168 S8 A64])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [276]) [1 *n_164(D)+0 S4 A32])) "../src/spline.f":469 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [277])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":469 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.64+0 S8 A64])
        (reg:DI 0 ax [277])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:250 size.65_172 ] [250])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.64+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [278])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:250 size.65_172 ] [250])
            (const_int 0 [0]))) "../src/spline.f":469 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:251 size.65_173 ] [251])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:250 size.65_172 ] [250])
            (reg:DI 1 dx [278]))) "../src/spline.f":469 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [8 %sfp+-192 S8 A128])
        (reg:DI 0 ax [orig:92 size.214_6 ] [92])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [8 %sfp+-184 S8 A64])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [279]) [1 *n_164(D)+0 S4 A32])) "../src/spline.f":469 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [280])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":469 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.62+0 S8 A64])
        (reg:DI 0 ax [280])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:255 size.63_178 ] [255])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.62+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [281])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:255 size.63_178 ] [255])
            (const_int 0 [0]))) "../src/spline.f":469 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:256 size.63_179 ] [256])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:255 size.63_178 ] [255])
            (reg:DI 1 dx [281]))) "../src/spline.f":469 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 43 r14 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.216_10 ] [96])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 44 r15 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 56 52 57 2 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [282]) [1 *n_164(D)+0 S4 A32])) "../src/spline.f":469 82 {*movsi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:DI 0 ax [283])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "../src/spline.f":469 145 {*extendsidi2_rex64}
     (nil))
(insn 59 58 60 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.68+0 S8 A64])
        (reg:DI 0 ax [283])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 60 59 62 2 (set (reg:DI 0 ax [orig:260 size.69_184 ] [260])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.68+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 62 60 61 2 (set (reg:DI 1 dx [284])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 61 62 63 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:260 size.69_184 ] [260])
            (const_int 0 [0]))) "../src/spline.f":469 4 {*cmpdi_ccno_1}
     (nil))
(insn 63 61 66 2 (set (reg:DI 0 ax [orig:261 size.69_185 ] [261])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:260 size.69_184 ] [260])
            (reg:DI 1 dx [284]))) "../src/spline.f":469 967 {*movdicc_noc}
     (nil))
(insn 66 63 67 2 (set (reg:DI 41 r12 [orig:101 _15 ] [101])
        (reg:DI 0 ax [orig:100 size.218_14 ] [100])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 67 66 71 2 (set (reg:DI 42 r13 [ _15+8 ])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 71 67 72 2 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (reg/f:DI 0 ax [285]) [1 *n_164(D)+0 S4 A32])) "../src/spline.f":469 82 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 0 ax [286])
        (sign_extend:DI (reg:SI 0 ax [orig:103 _17 ] [103]))) "../src/spline.f":469 145 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.66+0 S8 A64])
        (reg:DI 0 ax [286])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 75 74 77 2 (set (reg:DI 0 ax [orig:265 size.67_190 ] [265])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.66+0 S8 A64])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 77 75 76 2 (set (reg:DI 1 dx [287])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 76 77 78 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:265 size.67_190 ] [265])
            (const_int 0 [0]))) "../src/spline.f":469 4 {*cmpdi_ccno_1}
     (nil))
(insn 78 76 81 2 (set (reg:DI 0 ax [orig:266 size.67_191 ] [266])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:265 size.67_190 ] [265])
            (reg:DI 1 dx [287]))) "../src/spline.f":469 967 {*movdicc_noc}
     (nil))
(insn 81 78 82 2 (set (reg:DI 39 r10 [orig:105 _19 ] [105])
        (reg:DI 0 ax [orig:104 size.220_18 ] [104])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 82 81 86 2 (set (reg:DI 40 r11 [ _19+8 ])
        (const_int 0 [0])) "../src/spline.f":469 81 {*movdi_internal}
     (nil))
(insn 86 82 87 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":481 82 {*movsi_internal}
     (nil))
(insn 87 86 88 2 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":482 81 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:SI 0 ax [289])
        (mem:SI (reg/f:DI 0 ax [288]) [1 *n_164(D)+0 S4 A32])) "../src/spline.f":482 82 {*movsi_internal}
     (nil))
(insn 89 88 126 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [289])) "../src/spline.f":482 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 290
(code_label 126 89 90 3 123 (nil) [1 uses])
(note 90 126 91 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 3 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":484 82 {*movsi_internal}
     (nil))
(insn 92 91 93 3 (parallel [
            (set (reg:SI 0 ax [orig:107 _21 ] [107])
                (minus:SI (reg:SI 0 ax [290])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":484 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 93 92 94 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:107 _21 ] [107])
            (const_int 1 [0x1]))) "../src/spline.f":484 7 {*cmpsi_1}
     (nil))
(jump_insn 94 93 95 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 376)
            (pc))) "../src/spline.f":484 617 {*jcc_1}
     (nil)
 -> 376)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 109 110 111 112 291 292 293 294 295 296 297 298
(note 95 94 96 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 4 (set (reg:SI 1 dx [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":486 82 {*movsi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:SI 0 ax [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":486 82 {*movsi_internal}
     (nil))
(insn 98 97 379 4 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [292])
                    (reg:SI 1 dx [291])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":486 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 379 98 99 4 (set (reg:SI 1 dx [293])
        (reg:SI 0 ax [orig:108 _22 ] [108])) "../src/spline.f":486 82 {*movsi_internal}
     (nil))
(insn 99 379 100 4 (parallel [
            (set (reg:SI 1 dx [293])
                (lshiftrt:SI (reg:SI 1 dx [293])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":486 544 {*lshrsi3_1}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg:SI 0 ax [294])
                (plus:SI (reg:SI 0 ax [orig:108 _22 ] [108])
                    (reg:SI 1 dx [293])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":486 217 {*addsi_1}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:SI 0 ax [295])
                (ashiftrt:SI (reg:SI 0 ax [294])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":486 545 {*ashrsi3_1}
     (nil))
(insn 102 101 103 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [295])) "../src/spline.f":486 82 {*movsi_internal}
     (nil))
(insn 103 102 104 4 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [4 ss+0 S8 A64])) "../src/spline.f":487 81 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:SF 22 xmm1 [orig:109 _23 ] [109])
        (mem:SF (reg/f:DI 0 ax [296]) [3 *ss_198(D)+0 S4 A32])) "../src/spline.f":487 127 {*movsf_internal}
     (nil))
(insn 105 104 106 4 (set (reg:SI 0 ax [297])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])) "../src/spline.f":487 82 {*movsi_internal}
     (nil))
(insn 106 105 107 4 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [297]))) "../src/spline.f":487 145 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg:DI 1 dx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":487 218 {*adddi_1}
     (nil))
(insn 108 107 109 4 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 s+0 S8 A64])) "../src/spline.f":487 81 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [298])) [3 *s_199(D) S4 A32])) "../src/spline.f":487 127 {*movsf_internal}
     (nil))
(insn 110 109 111 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:109 _23 ] [109]))) "../src/spline.f":487 51 {*cmpiusf}
     (nil))
(jump_insn 111 110 115 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 370)
            (pc))) "../src/spline.f":487 617 {*jcc_1}
     (nil)
 -> 370)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 299
(note 115 111 116 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 5 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])) "../src/spline.f":488 82 {*movsi_internal}
     (nil))
(insn 117 116 371 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [299])) "../src/spline.f":488 82 {*movsi_internal}
     (nil))
(jump_insn 371 117 372 5 (set (pc)
        (label_ref 124)) 649 {jump}
     (nil)
 -> 124)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 372 371 370)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 300
(code_label 370 372 121 6 126 (nil) [1 uses])
(note 121 370 122 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 6 (set (reg:SI 0 ax [300])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])) "../src/spline.f":490 82 {*movsi_internal}
     (nil))
(insn 123 122 124 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [300])) "../src/spline.f":490 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 124 123 125 7 122 (nil) [1 uses])
(note 125 124 373 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 373 125 374 7 (set (pc)
        (label_ref 126)) "../src/spline.f":492 649 {jump}
     (nil)
 -> 126)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 374 373 376)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 376 374 375 9 127 (nil) [1 uses])
(note 375 376 377 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 377 375 129 9 (const_int 0 [0]) "../src/spline.f":492 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 270 271 272 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
(code_label 129 377 130 8 119 (nil) [0 uses])
(note 130 129 131 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 8 (set (reg:SI 0 ax [301])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":494 82 {*movsi_internal}
     (nil))
(insn 132 131 133 8 (set (reg:DI 0 ax [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 0 ax [301]))) "../src/spline.f":494 145 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 8 (parallel [
            (set (reg:DI 1 dx [orig:114 _28 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":494 218 {*adddi_1}
     (nil))
(insn 134 133 135 8 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 s+0 S8 A64])) "../src/spline.f":494 81 {*movdi_internal}
     (nil))
(insn 135 134 136 8 (set (reg:SF 21 xmm0 [orig:115 _29 ] [115])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:114 _28 ] [114])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [302])) [3 *s_199(D) S4 A32])) "../src/spline.f":494 127 {*movsf_internal}
     (nil))
(insn 136 135 137 8 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":494 82 {*movsi_internal}
     (nil))
(insn 137 136 138 8 (parallel [
            (set (reg:SI 0 ax [orig:116 _30 ] [116])
                (plus:SI (reg:SI 0 ax [303])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":494 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 138 137 139 8 (set (reg:DI 0 ax [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 0 ax [orig:116 _30 ] [116]))) "../src/spline.f":494 145 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 1 dx [orig:118 _32 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":494 218 {*adddi_1}
     (nil))
(insn 140 139 141 8 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 s+0 S8 A64])) "../src/spline.f":494 81 {*movdi_internal}
     (nil))
(insn 141 140 142 8 (set (reg:SF 22 xmm1 [orig:119 _33 ] [119])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:118 _32 ] [118])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [304])) [3 *s_199(D) S4 A32])) "../src/spline.f":494 127 {*movsf_internal}
     (nil))
(insn 142 141 143 8 (set (reg:SF 21 xmm0 [305])
        (minus:SF (reg:SF 21 xmm0 [orig:115 _29 ] [115])
            (reg:SF 22 xmm1 [orig:119 _33 ] [119]))) "../src/spline.f":494 805 {*fop_sf_1}
     (nil))
(insn 143 142 144 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [305])) "../src/spline.f":494 127 {*movsf_internal}
     (nil))
(insn 144 143 145 8 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [4 ss+0 S8 A64])) "../src/spline.f":495 81 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (mem:SF (reg/f:DI 0 ax [306]) [3 *ss_198(D)+0 S4 A32])) "../src/spline.f":495 127 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SI 0 ax [307])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":495 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (parallel [
            (set (reg:SI 0 ax [orig:121 _35 ] [121])
                (plus:SI (reg:SI 0 ax [307])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":495 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 148 147 149 8 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [orig:121 _35 ] [121]))) "../src/spline.f":495 145 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 8 (parallel [
            (set (reg:DI 1 dx [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":495 218 {*adddi_1}
     (nil))
(insn 150 149 151 8 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 s+0 S8 A64])) "../src/spline.f":495 81 {*movdi_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SF 22 xmm1 [orig:124 _38 ] [124])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [308])) [3 *s_199(D) S4 A32])) "../src/spline.f":495 127 {*movsf_internal}
     (nil))
(insn 152 151 154 8 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (minus:SF (reg:SF 21 xmm0 [orig:120 _34 ] [120])
            (reg:SF 22 xmm1 [orig:124 _38 ] [124]))) "../src/spline.f":495 805 {*fop_sf_1}
     (nil))
(insn 154 152 155 8 (set (reg:SF 21 xmm0 [309])
        (div:SF (reg:SF 21 xmm0 [orig:126 _40 ] [126])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":495 805 {*fop_sf_1}
     (nil))
(insn 155 154 156 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [309])) "../src/spline.f":495 127 {*movsf_internal}
     (nil))
(insn 156 155 157 8 (set (reg:SI 0 ax [310])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":497 82 {*movsi_internal}
     (nil))
(insn 157 156 158 8 (parallel [
            (set (reg:SI 0 ax [orig:127 _41 ] [127])
                (plus:SI (reg:SI 0 ax [310])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":497 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 158 157 159 8 (set (reg:DI 0 ax [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 0 ax [orig:127 _41 ] [127]))) "../src/spline.f":497 145 {*extendsidi2_rex64}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":497 218 {*adddi_1}
     (nil))
(insn 160 159 161 8 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [5 xs+0 S8 A64])) "../src/spline.f":497 81 {*movdi_internal}
     (nil))
(insn 161 160 162 8 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [311])) [3 *xs_204(D) S4 A32])) "../src/spline.f":497 127 {*movsf_internal}
     (nil))
(insn 162 161 163 8 (set (reg:SF 22 xmm1 [313])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32])) "../src/spline.f":497 127 {*movsf_internal}
     (nil))
(insn 163 162 164 8 (set (reg:SF 21 xmm0 [312])
        (mult:SF (reg:SF 21 xmm0 [orig:130 _44 ] [130])
            (reg:SF 22 xmm1 [313]))) "../src/spline.f":497 802 {*fop_sf_comm}
     (nil))
(insn 164 163 165 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 f1+0 S4 A32])
        (reg:SF 21 xmm0 [312])) "../src/spline.f":497 127 {*movsf_internal}
     (nil))
(insn 165 164 166 8 (set (reg:SI 0 ax [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":498 82 {*movsi_internal}
     (nil))
(insn 166 165 167 8 (set (reg:DI 0 ax [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 0 ax [314]))) "../src/spline.f":498 145 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 8 (parallel [
            (set (reg:DI 1 dx [orig:132 _46 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 _45 ] [131])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":498 218 {*adddi_1}
     (nil))
(insn 168 167 169 8 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [5 x+0 S8 A64])) "../src/spline.f":498 81 {*movdi_internal}
     (nil))
(insn 169 168 170 8 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:132 _46 ] [132])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [315])) [3 *x_206(D) S4 A32])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 170 169 171 8 (set (reg:SI 0 ax [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":498 82 {*movsi_internal}
     (nil))
(insn 171 170 172 8 (parallel [
            (set (reg:SI 0 ax [orig:134 _48 ] [134])
                (plus:SI (reg:SI 0 ax [316])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":498 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 172 171 173 8 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [orig:134 _48 ] [134]))) "../src/spline.f":498 145 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 8 (parallel [
            (set (reg:DI 1 dx [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":498 218 {*adddi_1}
     (nil))
(insn 174 173 175 8 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [5 x+0 S8 A64])) "../src/spline.f":498 81 {*movdi_internal}
     (nil))
(insn 175 174 176 8 (set (reg:SF 22 xmm1 [orig:137 _51 ] [137])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:136 _50 ] [136])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [317])) [3 *x_206(D) S4 A32])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 176 175 177 8 (set (reg:SF 21 xmm0 [orig:138 _52 ] [138])
        (minus:SF (reg:SF 21 xmm0 [orig:133 _47 ] [133])
            (reg:SF 22 xmm1 [orig:137 _51 ] [137]))) "../src/spline.f":498 805 {*fop_sf_1}
     (nil))
(insn 177 176 178 8 (set (reg:SF 22 xmm1 [orig:139 _53 ] [139])
        (reg:SF 21 xmm0 [orig:138 _52 ] [138])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 178 177 179 8 (set (reg:SF 21 xmm0 [318])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":498 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 179 178 180 8 (set (reg:SF 22 xmm1 [orig:140 _54 ] [140])
        (mult:SF (reg:SF 22 xmm1 [orig:139 _53 ] [139])
            (reg:SF 21 xmm0 [318]))) "../src/spline.f":498 802 {*fop_sf_comm}
     (nil))
(insn 180 179 181 8 (set (reg:SI 0 ax [319])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":498 82 {*movsi_internal}
     (nil))
(insn 181 180 182 8 (parallel [
            (set (reg:SI 0 ax [orig:141 _55 ] [141])
                (plus:SI (reg:SI 0 ax [319])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":498 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 182 181 183 8 (set (reg:DI 0 ax [orig:142 _56 ] [142])
        (sign_extend:DI (reg:SI 0 ax [orig:141 _55 ] [141]))) "../src/spline.f":498 145 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 8 (parallel [
            (set (reg:DI 1 dx [orig:143 _57 ] [143])
                (plus:DI (reg:DI 0 ax [orig:142 _56 ] [142])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":498 218 {*adddi_1}
     (nil))
(insn 184 183 185 8 (set (reg/f:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [5 xs+0 S8 A64])) "../src/spline.f":498 81 {*movdi_internal}
     (nil))
(insn 185 184 186 8 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:143 _57 ] [143])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [320])) [3 *xs_204(D) S4 A32])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 186 185 187 8 (set (reg:SF 21 xmm0 [orig:145 _59 ] [145])
        (plus:SF (reg:SF 21 xmm0 [orig:144 _58 ] [144])
            (reg:SF 21 xmm0 [orig:144 _58 ] [144]))) "../src/spline.f":498 802 {*fop_sf_comm}
     (nil))
(insn 187 186 188 8 (set (reg:SI 0 ax [321])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":498 82 {*movsi_internal}
     (nil))
(insn 188 187 189 8 (set (reg:DI 0 ax [orig:146 _60 ] [146])
        (sign_extend:DI (reg:SI 0 ax [321]))) "../src/spline.f":498 145 {*extendsidi2_rex64}
     (nil))
(insn 189 188 190 8 (parallel [
            (set (reg:DI 1 dx [orig:147 _61 ] [147])
                (plus:DI (reg:DI 0 ax [orig:146 _60 ] [146])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":498 218 {*adddi_1}
     (nil))
(insn 190 189 191 8 (set (reg/f:DI 0 ax [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [5 xs+0 S8 A64])) "../src/spline.f":498 81 {*movdi_internal}
     (nil))
(insn 191 190 192 8 (set (reg:SF 23 xmm2 [orig:148 _62 ] [148])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:147 _61 ] [147])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [322])) [3 *xs_204(D) S4 A32])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 192 191 194 8 (set (reg:SF 21 xmm0 [orig:149 _63 ] [149])
        (plus:SF (reg:SF 21 xmm0 [orig:145 _59 ] [145])
            (reg:SF 23 xmm2 [orig:148 _62 ] [148]))) "../src/spline.f":498 802 {*fop_sf_comm}
     (nil))
(insn 194 192 195 8 (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
        (mult:SF (reg:SF 21 xmm0 [orig:150 _64 ] [150])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":498 802 {*fop_sf_comm}
     (nil))
(insn 195 194 382 8 (set (reg:SF 22 xmm1 [orig:140 _54 ] [140])
        (minus:SF (reg:SF 22 xmm1 [orig:140 _54 ] [140])
            (reg:SF 21 xmm0 [orig:151 _65 ] [151]))) "../src/spline.f":498 805 {*fop_sf_1}
     (nil))
(insn 382 195 196 8 (set (reg:SF 21 xmm0 [323])
        (reg:SF 22 xmm1 [orig:140 _54 ] [140])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 196 382 197 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 f2+0 S4 A32])
        (reg:SF 21 xmm0 [323])) "../src/spline.f":498 127 {*movsf_internal}
     (nil))
(insn 197 196 198 8 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":499 82 {*movsi_internal}
     (nil))
(insn 198 197 199 8 (parallel [
            (set (reg:SI 0 ax [orig:152 _66 ] [152])
                (plus:SI (reg:SI 0 ax [324])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":499 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 199 198 200 8 (set (reg:DI 0 ax [orig:153 _67 ] [153])
        (sign_extend:DI (reg:SI 0 ax [orig:152 _66 ] [152]))) "../src/spline.f":499 145 {*extendsidi2_rex64}
     (nil))
(insn 200 199 201 8 (parallel [
            (set (reg:DI 1 dx [orig:154 _68 ] [154])
                (plus:DI (reg:DI 0 ax [orig:153 _67 ] [153])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":499 218 {*adddi_1}
     (nil))
(insn 201 200 202 8 (set (reg/f:DI 0 ax [325])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [5 xs+0 S8 A64])) "../src/spline.f":499 81 {*movdi_internal}
     (nil))
(insn 202 201 203 8 (set (reg:SF 22 xmm1 [orig:155 _69 ] [155])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:154 _68 ] [154])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [325])) [3 *xs_204(D) S4 A32])) "../src/spline.f":499 127 {*movsf_internal}
     (nil))
(insn 203 202 204 8 (set (reg:SI 0 ax [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":499 82 {*movsi_internal}
     (nil))
(insn 204 203 205 8 (set (reg:DI 0 ax [orig:156 _70 ] [156])
        (sign_extend:DI (reg:SI 0 ax [326]))) "../src/spline.f":499 145 {*extendsidi2_rex64}
     (nil))
(insn 205 204 206 8 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":499 218 {*adddi_1}
     (nil))
(insn 206 205 207 8 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [5 xs+0 S8 A64])) "../src/spline.f":499 81 {*movdi_internal}
     (nil))
(insn 207 206 208 8 (set (reg:SF 21 xmm0 [orig:158 _72 ] [158])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [327])) [3 *xs_204(D) S4 A32])) "../src/spline.f":499 127 {*movsf_internal}
     (nil))
(insn 208 207 210 8 (set (reg:SF 21 xmm0 [orig:159 _73 ] [159])
        (plus:SF (reg:SF 21 xmm0 [orig:158 _72 ] [158])
            (reg:SF 22 xmm1 [orig:155 _69 ] [155]))) "../src/spline.f":499 802 {*fop_sf_comm}
     (nil))
(insn 210 208 211 8 (set (reg:SF 21 xmm0 [orig:161 _75 ] [161])
        (mult:SF (reg:SF 21 xmm0 [orig:160 _74 ] [160])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":499 802 {*fop_sf_comm}
     (nil))
(insn 211 210 212 8 (set (reg:SI 0 ax [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":499 82 {*movsi_internal}
     (nil))
(insn 212 211 213 8 (set (reg:DI 0 ax [orig:162 _76 ] [162])
        (sign_extend:DI (reg:SI 0 ax [328]))) "../src/spline.f":499 145 {*extendsidi2_rex64}
     (nil))
(insn 213 212 214 8 (parallel [
            (set (reg:DI 1 dx [orig:163 _77 ] [163])
                (plus:DI (reg:DI 0 ax [orig:162 _76 ] [162])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":499 218 {*adddi_1}
     (nil))
(insn 214 213 215 8 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [5 x+0 S8 A64])) "../src/spline.f":499 81 {*movdi_internal}
     (nil))
(insn 215 214 216 8 (set (reg:SF 22 xmm1 [orig:164 _78 ] [164])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [329])) [3 *x_206(D) S4 A32])) "../src/spline.f":499 127 {*movsf_internal}
     (nil))
(insn 216 215 217 8 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":499 82 {*movsi_internal}
     (nil))
(insn 217 216 218 8 (parallel [
            (set (reg:SI 0 ax [orig:165 _79 ] [165])
                (plus:SI (reg:SI 0 ax [330])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":499 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 218 217 219 8 (set (reg:DI 0 ax [orig:166 _80 ] [166])
        (sign_extend:DI (reg:SI 0 ax [orig:165 _79 ] [165]))) "../src/spline.f":499 145 {*extendsidi2_rex64}
     (nil))
(insn 219 218 220 8 (parallel [
            (set (reg:DI 1 dx [orig:167 _81 ] [167])
                (plus:DI (reg:DI 0 ax [orig:166 _80 ] [166])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":499 218 {*adddi_1}
     (nil))
(insn 220 219 221 8 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [5 x+0 S8 A64])) "../src/spline.f":499 81 {*movdi_internal}
     (nil))
(insn 221 220 222 8 (set (reg:SF 23 xmm2 [orig:168 _82 ] [168])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:167 _81 ] [167])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [331])) [3 *x_206(D) S4 A32])) "../src/spline.f":499 127 {*movsf_internal}
     (nil))
(insn 222 221 224 8 (set (reg:SF 22 xmm1 [orig:169 _83 ] [169])
        (minus:SF (reg:SF 22 xmm1 [orig:164 _78 ] [164])
            (reg:SF 23 xmm2 [orig:168 _82 ] [168]))) "../src/spline.f":499 805 {*fop_sf_1}
     (nil))
(insn 224 222 225 8 (set (reg:SF 22 xmm1 [orig:171 _85 ] [171])
        (plus:SF (reg:SF 22 xmm1 [orig:170 _84 ] [170])
            (reg:SF 22 xmm1 [orig:170 _84 ] [170]))) "../src/spline.f":499 802 {*fop_sf_comm}
     (nil))
(insn 225 224 226 8 (set (reg:SF 21 xmm0 [332])
        (minus:SF (reg:SF 21 xmm0 [orig:161 _75 ] [161])
            (reg:SF 22 xmm1 [orig:171 _85 ] [171]))) "../src/spline.f":499 805 {*fop_sf_1}
     (nil))
(insn 226 225 227 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 f3+0 S4 A32])
        (reg:SF 21 xmm0 [332])) "../src/spline.f":499 127 {*movsf_internal}
     (nil))
(insn 227 226 383 8 (set (reg:SF 21 xmm0 [333])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 f2+0 S4 A32])) "../src/spline.f":501 127 {*movsf_internal}
     (nil))
(insn 383 227 228 8 (set (reg:SF 22 xmm1 [333])
        (reg:SF 21 xmm0 [333])) "../src/spline.f":501 127 {*movsf_internal}
     (nil))
(insn 228 383 229 8 (set (reg:SF 22 xmm1 [333])
        (plus:SF (reg:SF 22 xmm1 [333])
            (reg:SF 21 xmm0 [333]))) "../src/spline.f":501 802 {*fop_sf_comm}
     (nil))
(insn 229 228 230 8 (set (reg:SF 23 xmm2 [334])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":501 127 {*movsf_internal}
     (nil))
(insn 230 229 231 8 (set (reg:SF 21 xmm0 [335])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":501 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 231 230 232 8 (set (reg:SF 21 xmm0 [orig:173 _87 ] [173])
        (mult:SF (reg:SF 21 xmm0 [335])
            (reg:SF 23 xmm2 [334]))) "../src/spline.f":501 802 {*fop_sf_comm}
     (nil))
(insn 232 231 233 8 (set (reg:SF 21 xmm0 [orig:174 _88 ] [174])
        (mult:SF (reg:SF 21 xmm0 [orig:173 _87 ] [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [3 f3+0 S4 A32]))) "../src/spline.f":501 802 {*fop_sf_comm}
     (nil))
(insn 233 232 235 8 (set (reg:SF 21 xmm0 [orig:175 _89 ] [175])
        (plus:SF (reg:SF 21 xmm0 [orig:174 _88 ] [174])
            (reg:SF 22 xmm1 [orig:172 _86 ] [172]))) "../src/spline.f":501 802 {*fop_sf_comm}
     (nil))
(insn 235 233 236 8 (set (reg:SF 21 xmm0 [orig:177 _91 ] [177])
        (mult:SF (reg:SF 21 xmm0 [orig:176 _90 ] [176])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":501 802 {*fop_sf_comm}
     (nil))
(insn 236 235 237 8 (set (reg:SF 22 xmm1 [337])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 f1+0 S4 A32])) "../src/spline.f":501 127 {*movsf_internal}
     (nil))
(insn 237 236 238 8 (set (reg:SF 21 xmm0 [336])
        (plus:SF (reg:SF 21 xmm0 [orig:177 _91 ] [177])
            (reg:SF 22 xmm1 [337]))) "../src/spline.f":501 802 {*fop_sf_comm}
     (nil))
(insn 238 237 239 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xd+0 S4 A32])
        (reg:SF 21 xmm0 [336])) "../src/spline.f":501 127 {*movsf_internal}
     (nil))
(insn 239 238 385 8 (set (reg:SF 21 xmm0 [338])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 f2+0 S4 A32])) "../src/spline.f":502 127 {*movsf_internal}
     (nil))
(insn 385 239 240 8 (set (reg:SF 22 xmm1 [338])
        (reg:SF 21 xmm0 [338])) "../src/spline.f":502 127 {*movsf_internal}
     (nil))
(insn 240 385 241 8 (set (reg:SF 22 xmm1 [338])
        (plus:SF (reg:SF 22 xmm1 [338])
            (reg:SF 21 xmm0 [338]))) "../src/spline.f":502 802 {*fop_sf_comm}
     (nil))
(insn 241 240 242 8 (set (reg:SF 23 xmm2 [339])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":502 127 {*movsf_internal}
     (nil))
(insn 242 241 243 8 (set (reg:SF 21 xmm0 [340])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":502 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 243 242 244 8 (set (reg:SF 21 xmm0 [orig:179 _93 ] [179])
        (mult:SF (reg:SF 21 xmm0 [340])
            (reg:SF 23 xmm2 [339]))) "../src/spline.f":502 802 {*fop_sf_comm}
     (nil))
(insn 244 243 245 8 (set (reg:SF 21 xmm0 [orig:180 _94 ] [180])
        (mult:SF (reg:SF 21 xmm0 [orig:179 _93 ] [179])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [3 f3+0 S4 A32]))) "../src/spline.f":502 802 {*fop_sf_comm}
     (nil))
(insn 245 244 246 8 (set (reg:SF 21 xmm0 [341])
        (plus:SF (reg:SF 21 xmm0 [orig:180 _94 ] [180])
            (reg:SF 22 xmm1 [orig:178 _92 ] [178]))) "../src/spline.f":502 802 {*fop_sf_comm}
     (nil))
(insn 246 245 247 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 xdd+0 S4 A32])
        (reg:SF 21 xmm0 [341])) "../src/spline.f":502 127 {*movsf_internal}
     (nil))
(insn 247 246 248 8 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":505 82 {*movsi_internal}
     (nil))
(insn 248 247 249 8 (parallel [
            (set (reg:SI 0 ax [orig:181 _95 ] [181])
                (plus:SI (reg:SI 0 ax [342])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":505 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 249 248 250 8 (set (reg:DI 0 ax [orig:182 _96 ] [182])
        (sign_extend:DI (reg:SI 0 ax [orig:181 _95 ] [181]))) "../src/spline.f":505 145 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 8 (parallel [
            (set (reg:DI 1 dx [orig:183 _97 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 _96 ] [182])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":505 218 {*adddi_1}
     (nil))
(insn 251 250 252 8 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 ys+0 S8 A64])) "../src/spline.f":505 81 {*movdi_internal}
     (nil))
(insn 252 251 253 8 (set (reg:SF 21 xmm0 [orig:184 _98 ] [184])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:183 _97 ] [183])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [343])) [3 *ys_211(D) S4 A32])) "../src/spline.f":505 127 {*movsf_internal}
     (nil))
(insn 253 252 254 8 (set (reg:SF 22 xmm1 [345])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32])) "../src/spline.f":505 127 {*movsf_internal}
     (nil))
(insn 254 253 255 8 (set (reg:SF 21 xmm0 [344])
        (mult:SF (reg:SF 21 xmm0 [orig:184 _98 ] [184])
            (reg:SF 22 xmm1 [345]))) "../src/spline.f":505 802 {*fop_sf_comm}
     (nil))
(insn 255 254 256 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 g1+0 S4 A32])
        (reg:SF 21 xmm0 [344])) "../src/spline.f":505 127 {*movsf_internal}
     (nil))
(insn 256 255 257 8 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":506 82 {*movsi_internal}
     (nil))
(insn 257 256 258 8 (set (reg:DI 0 ax [orig:185 _99 ] [185])
        (sign_extend:DI (reg:SI 0 ax [346]))) "../src/spline.f":506 145 {*extendsidi2_rex64}
     (nil))
(insn 258 257 259 8 (parallel [
            (set (reg:DI 1 dx [orig:186 _100 ] [186])
                (plus:DI (reg:DI 0 ax [orig:185 _99 ] [185])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":506 218 {*adddi_1}
     (nil))
(insn 259 258 260 8 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 y+0 S8 A64])) "../src/spline.f":506 81 {*movdi_internal}
     (nil))
(insn 260 259 261 8 (set (reg:SF 21 xmm0 [orig:187 _101 ] [187])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:186 _100 ] [186])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [347])) [3 *y_213(D) S4 A32])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 261 260 262 8 (set (reg:SI 0 ax [348])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":506 82 {*movsi_internal}
     (nil))
(insn 262 261 263 8 (parallel [
            (set (reg:SI 0 ax [orig:188 _102 ] [188])
                (plus:SI (reg:SI 0 ax [348])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":506 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 263 262 264 8 (set (reg:DI 0 ax [orig:189 _103 ] [189])
        (sign_extend:DI (reg:SI 0 ax [orig:188 _102 ] [188]))) "../src/spline.f":506 145 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 8 (parallel [
            (set (reg:DI 1 dx [orig:190 _104 ] [190])
                (plus:DI (reg:DI 0 ax [orig:189 _103 ] [189])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":506 218 {*adddi_1}
     (nil))
(insn 265 264 266 8 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 y+0 S8 A64])) "../src/spline.f":506 81 {*movdi_internal}
     (nil))
(insn 266 265 267 8 (set (reg:SF 22 xmm1 [orig:191 _105 ] [191])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:190 _104 ] [190])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [349])) [3 *y_213(D) S4 A32])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 267 266 268 8 (set (reg:SF 21 xmm0 [orig:192 _106 ] [192])
        (minus:SF (reg:SF 21 xmm0 [orig:187 _101 ] [187])
            (reg:SF 22 xmm1 [orig:191 _105 ] [191]))) "../src/spline.f":506 805 {*fop_sf_1}
     (nil))
(insn 268 267 269 8 (set (reg:SF 22 xmm1 [orig:193 _107 ] [193])
        (reg:SF 21 xmm0 [orig:192 _106 ] [192])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 269 268 270 8 (set (reg:SF 21 xmm0 [350])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":506 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 270 269 271 8 (set (reg:SF 22 xmm1 [orig:194 _108 ] [194])
        (mult:SF (reg:SF 22 xmm1 [orig:193 _107 ] [193])
            (reg:SF 21 xmm0 [350]))) "../src/spline.f":506 802 {*fop_sf_comm}
     (nil))
(insn 271 270 272 8 (set (reg:SI 0 ax [351])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":506 82 {*movsi_internal}
     (nil))
(insn 272 271 273 8 (parallel [
            (set (reg:SI 0 ax [orig:195 _109 ] [195])
                (plus:SI (reg:SI 0 ax [351])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":506 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 273 272 274 8 (set (reg:DI 0 ax [orig:196 _110 ] [196])
        (sign_extend:DI (reg:SI 0 ax [orig:195 _109 ] [195]))) "../src/spline.f":506 145 {*extendsidi2_rex64}
     (nil))
(insn 274 273 275 8 (parallel [
            (set (reg:DI 1 dx [orig:197 _111 ] [197])
                (plus:DI (reg:DI 0 ax [orig:196 _110 ] [196])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":506 218 {*adddi_1}
     (nil))
(insn 275 274 276 8 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 ys+0 S8 A64])) "../src/spline.f":506 81 {*movdi_internal}
     (nil))
(insn 276 275 277 8 (set (reg:SF 21 xmm0 [orig:198 _112 ] [198])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [352])) [3 *ys_211(D) S4 A32])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 277 276 278 8 (set (reg:SF 21 xmm0 [orig:199 _113 ] [199])
        (plus:SF (reg:SF 21 xmm0 [orig:198 _112 ] [198])
            (reg:SF 21 xmm0 [orig:198 _112 ] [198]))) "../src/spline.f":506 802 {*fop_sf_comm}
     (nil))
(insn 278 277 279 8 (set (reg:SI 0 ax [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":506 82 {*movsi_internal}
     (nil))
(insn 279 278 280 8 (set (reg:DI 0 ax [orig:200 _114 ] [200])
        (sign_extend:DI (reg:SI 0 ax [353]))) "../src/spline.f":506 145 {*extendsidi2_rex64}
     (nil))
(insn 280 279 281 8 (parallel [
            (set (reg:DI 1 dx [orig:201 _115 ] [201])
                (plus:DI (reg:DI 0 ax [orig:200 _114 ] [200])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":506 218 {*adddi_1}
     (nil))
(insn 281 280 282 8 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 ys+0 S8 A64])) "../src/spline.f":506 81 {*movdi_internal}
     (nil))
(insn 282 281 283 8 (set (reg:SF 23 xmm2 [orig:202 _116 ] [202])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:201 _115 ] [201])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [354])) [3 *ys_211(D) S4 A32])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 283 282 285 8 (set (reg:SF 21 xmm0 [orig:203 _117 ] [203])
        (plus:SF (reg:SF 21 xmm0 [orig:199 _113 ] [199])
            (reg:SF 23 xmm2 [orig:202 _116 ] [202]))) "../src/spline.f":506 802 {*fop_sf_comm}
     (nil))
(insn 285 283 286 8 (set (reg:SF 21 xmm0 [orig:205 _119 ] [205])
        (mult:SF (reg:SF 21 xmm0 [orig:204 _118 ] [204])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":506 802 {*fop_sf_comm}
     (nil))
(insn 286 285 388 8 (set (reg:SF 22 xmm1 [orig:194 _108 ] [194])
        (minus:SF (reg:SF 22 xmm1 [orig:194 _108 ] [194])
            (reg:SF 21 xmm0 [orig:205 _119 ] [205]))) "../src/spline.f":506 805 {*fop_sf_1}
     (nil))
(insn 388 286 287 8 (set (reg:SF 21 xmm0 [355])
        (reg:SF 22 xmm1 [orig:194 _108 ] [194])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 287 388 288 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 g2+0 S4 A32])
        (reg:SF 21 xmm0 [355])) "../src/spline.f":506 127 {*movsf_internal}
     (nil))
(insn 288 287 289 8 (set (reg:SI 0 ax [356])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":507 82 {*movsi_internal}
     (nil))
(insn 289 288 290 8 (parallel [
            (set (reg:SI 0 ax [orig:206 _120 ] [206])
                (plus:SI (reg:SI 0 ax [356])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":507 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 290 289 291 8 (set (reg:DI 0 ax [orig:207 _121 ] [207])
        (sign_extend:DI (reg:SI 0 ax [orig:206 _120 ] [206]))) "../src/spline.f":507 145 {*extendsidi2_rex64}
     (nil))
(insn 291 290 292 8 (parallel [
            (set (reg:DI 1 dx [orig:208 _122 ] [208])
                (plus:DI (reg:DI 0 ax [orig:207 _121 ] [207])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":507 218 {*adddi_1}
     (nil))
(insn 292 291 293 8 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 ys+0 S8 A64])) "../src/spline.f":507 81 {*movdi_internal}
     (nil))
(insn 293 292 294 8 (set (reg:SF 22 xmm1 [orig:209 _123 ] [209])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [357])) [3 *ys_211(D) S4 A32])) "../src/spline.f":507 127 {*movsf_internal}
     (nil))
(insn 294 293 295 8 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":507 82 {*movsi_internal}
     (nil))
(insn 295 294 296 8 (set (reg:DI 0 ax [orig:210 _124 ] [210])
        (sign_extend:DI (reg:SI 0 ax [358]))) "../src/spline.f":507 145 {*extendsidi2_rex64}
     (nil))
(insn 296 295 297 8 (parallel [
            (set (reg:DI 1 dx [orig:211 _125 ] [211])
                (plus:DI (reg:DI 0 ax [orig:210 _124 ] [210])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":507 218 {*adddi_1}
     (nil))
(insn 297 296 298 8 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 ys+0 S8 A64])) "../src/spline.f":507 81 {*movdi_internal}
     (nil))
(insn 298 297 299 8 (set (reg:SF 21 xmm0 [orig:212 _126 ] [212])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:211 _125 ] [211])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [359])) [3 *ys_211(D) S4 A32])) "../src/spline.f":507 127 {*movsf_internal}
     (nil))
(insn 299 298 301 8 (set (reg:SF 21 xmm0 [orig:213 _127 ] [213])
        (plus:SF (reg:SF 21 xmm0 [orig:212 _126 ] [212])
            (reg:SF 22 xmm1 [orig:209 _123 ] [209]))) "../src/spline.f":507 802 {*fop_sf_comm}
     (nil))
(insn 301 299 302 8 (set (reg:SF 21 xmm0 [orig:215 _129 ] [215])
        (mult:SF (reg:SF 21 xmm0 [orig:214 _128 ] [214])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":507 802 {*fop_sf_comm}
     (nil))
(insn 302 301 303 8 (set (reg:SI 0 ax [360])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":507 82 {*movsi_internal}
     (nil))
(insn 303 302 304 8 (set (reg:DI 0 ax [orig:216 _130 ] [216])
        (sign_extend:DI (reg:SI 0 ax [360]))) "../src/spline.f":507 145 {*extendsidi2_rex64}
     (nil))
(insn 304 303 305 8 (parallel [
            (set (reg:DI 1 dx [orig:217 _131 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 _130 ] [216])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":507 218 {*adddi_1}
     (nil))
(insn 305 304 306 8 (set (reg/f:DI 0 ax [361])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 y+0 S8 A64])) "../src/spline.f":507 81 {*movdi_internal}
     (nil))
(insn 306 305 307 8 (set (reg:SF 22 xmm1 [orig:218 _132 ] [218])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:217 _131 ] [217])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [361])) [3 *y_213(D) S4 A32])) "../src/spline.f":507 127 {*movsf_internal}
     (nil))
(insn 307 306 308 8 (set (reg:SI 0 ax [362])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":507 82 {*movsi_internal}
     (nil))
(insn 308 307 309 8 (parallel [
            (set (reg:SI 0 ax [orig:219 _133 ] [219])
                (plus:SI (reg:SI 0 ax [362])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":507 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 309 308 310 8 (set (reg:DI 0 ax [orig:220 _134 ] [220])
        (sign_extend:DI (reg:SI 0 ax [orig:219 _133 ] [219]))) "../src/spline.f":507 145 {*extendsidi2_rex64}
     (nil))
(insn 310 309 311 8 (parallel [
            (set (reg:DI 1 dx [orig:221 _135 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 _134 ] [220])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":507 218 {*adddi_1}
     (nil))
(insn 311 310 312 8 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 y+0 S8 A64])) "../src/spline.f":507 81 {*movdi_internal}
     (nil))
(insn 312 311 313 8 (set (reg:SF 23 xmm2 [orig:222 _136 ] [222])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:221 _135 ] [221])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [363])) [3 *y_213(D) S4 A32])) "../src/spline.f":507 127 {*movsf_internal}
     (nil))
(insn 313 312 315 8 (set (reg:SF 22 xmm1 [orig:223 _137 ] [223])
        (minus:SF (reg:SF 22 xmm1 [orig:218 _132 ] [218])
            (reg:SF 23 xmm2 [orig:222 _136 ] [222]))) "../src/spline.f":507 805 {*fop_sf_1}
     (nil))
(insn 315 313 316 8 (set (reg:SF 22 xmm1 [orig:225 _139 ] [225])
        (plus:SF (reg:SF 22 xmm1 [orig:224 _138 ] [224])
            (reg:SF 22 xmm1 [orig:224 _138 ] [224]))) "../src/spline.f":507 802 {*fop_sf_comm}
     (nil))
(insn 316 315 317 8 (set (reg:SF 21 xmm0 [364])
        (minus:SF (reg:SF 21 xmm0 [orig:215 _129 ] [215])
            (reg:SF 22 xmm1 [orig:225 _139 ] [225]))) "../src/spline.f":507 805 {*fop_sf_1}
     (nil))
(insn 317 316 318 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 g3+0 S4 A32])
        (reg:SF 21 xmm0 [364])) "../src/spline.f":507 127 {*movsf_internal}
     (nil))
(insn 318 317 389 8 (set (reg:SF 21 xmm0 [365])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 g2+0 S4 A32])) "../src/spline.f":509 127 {*movsf_internal}
     (nil))
(insn 389 318 319 8 (set (reg:SF 22 xmm1 [365])
        (reg:SF 21 xmm0 [365])) "../src/spline.f":509 127 {*movsf_internal}
     (nil))
(insn 319 389 320 8 (set (reg:SF 22 xmm1 [365])
        (plus:SF (reg:SF 22 xmm1 [365])
            (reg:SF 21 xmm0 [365]))) "../src/spline.f":509 802 {*fop_sf_comm}
     (nil))
(insn 320 319 321 8 (set (reg:SF 23 xmm2 [366])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":509 127 {*movsf_internal}
     (nil))
(insn 321 320 322 8 (set (reg:SF 21 xmm0 [367])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":509 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 322 321 323 8 (set (reg:SF 21 xmm0 [orig:227 _141 ] [227])
        (mult:SF (reg:SF 21 xmm0 [367])
            (reg:SF 23 xmm2 [366]))) "../src/spline.f":509 802 {*fop_sf_comm}
     (nil))
(insn 323 322 324 8 (set (reg:SF 21 xmm0 [orig:228 _142 ] [228])
        (mult:SF (reg:SF 21 xmm0 [orig:227 _141 ] [227])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [3 g3+0 S4 A32]))) "../src/spline.f":509 802 {*fop_sf_comm}
     (nil))
(insn 324 323 326 8 (set (reg:SF 21 xmm0 [orig:229 _143 ] [229])
        (plus:SF (reg:SF 21 xmm0 [orig:228 _142 ] [228])
            (reg:SF 22 xmm1 [orig:226 _140 ] [226]))) "../src/spline.f":509 802 {*fop_sf_comm}
     (nil))
(insn 326 324 327 8 (set (reg:SF 21 xmm0 [orig:231 _145 ] [231])
        (mult:SF (reg:SF 21 xmm0 [orig:230 _144 ] [230])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":509 802 {*fop_sf_comm}
     (nil))
(insn 327 326 328 8 (set (reg:SF 22 xmm1 [369])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 g1+0 S4 A32])) "../src/spline.f":509 127 {*movsf_internal}
     (nil))
(insn 328 327 329 8 (set (reg:SF 21 xmm0 [368])
        (plus:SF (reg:SF 21 xmm0 [orig:231 _145 ] [231])
            (reg:SF 22 xmm1 [369]))) "../src/spline.f":509 802 {*fop_sf_comm}
     (nil))
(insn 329 328 330 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 yd+0 S4 A32])
        (reg:SF 21 xmm0 [368])) "../src/spline.f":509 127 {*movsf_internal}
     (nil))
(insn 330 329 391 8 (set (reg:SF 21 xmm0 [370])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 g2+0 S4 A32])) "../src/spline.f":510 127 {*movsf_internal}
     (nil))
(insn 391 330 331 8 (set (reg:SF 22 xmm1 [370])
        (reg:SF 21 xmm0 [370])) "../src/spline.f":510 127 {*movsf_internal}
     (nil))
(insn 331 391 332 8 (set (reg:SF 22 xmm1 [370])
        (plus:SF (reg:SF 22 xmm1 [370])
            (reg:SF 21 xmm0 [370]))) "../src/spline.f":510 802 {*fop_sf_comm}
     (nil))
(insn 332 331 333 8 (set (reg:SF 23 xmm2 [371])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":510 127 {*movsf_internal}
     (nil))
(insn 333 332 334 8 (set (reg:SF 21 xmm0 [372])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":510 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 334 333 335 8 (set (reg:SF 21 xmm0 [orig:233 _147 ] [233])
        (mult:SF (reg:SF 21 xmm0 [372])
            (reg:SF 23 xmm2 [371]))) "../src/spline.f":510 802 {*fop_sf_comm}
     (nil))
(insn 335 334 336 8 (set (reg:SF 21 xmm0 [orig:234 _148 ] [234])
        (mult:SF (reg:SF 21 xmm0 [orig:233 _147 ] [233])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [3 g3+0 S4 A32]))) "../src/spline.f":510 802 {*fop_sf_comm}
     (nil))
(insn 336 335 337 8 (set (reg:SF 21 xmm0 [373])
        (plus:SF (reg:SF 21 xmm0 [orig:234 _148 ] [234])
            (reg:SF 22 xmm1 [orig:232 _146 ] [232]))) "../src/spline.f":510 802 {*fop_sf_comm}
     (nil))
(insn 337 336 338 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -132 [0xffffffffffffff7c])) [3 ydd+0 S4 A32])
        (reg:SF 21 xmm0 [373])) "../src/spline.f":510 127 {*movsf_internal}
     (nil))
(insn 338 337 393 8 (set (reg:SF 21 xmm0 [374])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xd+0 S4 A32])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 393 338 339 8 (set (reg:SF 22 xmm1 [374])
        (reg:SF 21 xmm0 [374])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 339 393 340 8 (set (reg:SF 22 xmm1 [374])
        (mult:SF (reg:SF 22 xmm1 [374])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])) [3 xd+0 S4 A32]))) "../src/spline.f":513 802 {*fop_sf_comm}
     (nil))
(insn 340 339 341 8 (set (reg:SF 21 xmm0 [375])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 yd+0 S4 A32])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 341 340 342 8 (set (reg:SF 21 xmm0 [orig:236 _150 ] [236])
        (mult:SF (reg:SF 21 xmm0 [375])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [3 yd+0 S4 A32]))) "../src/spline.f":513 802 {*fop_sf_comm}
     (nil))
(insn 342 341 343 8 (set (reg:SF 21 xmm0 [orig:237 _151 ] [237])
        (plus:SF (reg:SF 21 xmm0 [orig:236 _150 ] [236])
            (reg:SF 22 xmm1 [orig:235 _149 ] [235]))) "../src/spline.f":513 802 {*fop_sf_comm}
     (nil))
(insn 343 342 344 8 (set (reg:SF 23 xmm2 [orig:270 _218 ] [270])
        (reg:SF 21 xmm0 [orig:237 _151 ] [237])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 344 343 345 8 (set (reg:SF 21 xmm0 [376])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xd+0 S4 A32])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 345 344 346 8 (set (reg:SF 21 xmm0 [orig:238 _152 ] [238])
        (mult:SF (reg:SF 21 xmm0 [376])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -132 [0xffffffffffffff7c])) [3 ydd+0 S4 A32]))) "../src/spline.f":513 802 {*fop_sf_comm}
     (nil))
(insn 346 345 347 8 (set (reg:SF 22 xmm1 [377])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 yd+0 S4 A32])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 347 346 348 8 (set (reg:SF 22 xmm1 [orig:239 _153 ] [239])
        (mult:SF (reg:SF 22 xmm1 [377])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [3 xdd+0 S4 A32]))) "../src/spline.f":513 802 {*fop_sf_comm}
     (nil))
(insn 348 347 349 8 (set (reg:SF 21 xmm0 [orig:240 _154 ] [240])
        (minus:SF (reg:SF 21 xmm0 [orig:238 _152 ] [238])
            (reg:SF 22 xmm1 [orig:239 _153 ] [239]))) "../src/spline.f":513 805 {*fop_sf_1}
     (nil))
(insn 349 348 397 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [8 %sfp+-176 S4 A128])
        (reg:SF 21 xmm0 [orig:240 _154 ] [240])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(note 397 349 350 8 NOTE_INSN_DELETED)
(insn 350 397 351 8 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "../src/spline.f":513 82 {*movsi_internal}
     (nil))
(insn 351 350 352 8 (set (reg:SF 21 xmm0)
        (reg:SF 23 xmm2 [orig:270 _218 ] [270])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(call_insn/u 352 351 354 8 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("__powisf2") [flags 0x41]) [0  S1 A8])
            (const_int 0 [0]))) "../src/spline.f":513 665 {*call_value}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (expr_list (use (reg:SI 5 di))
        (expr_list (use (reg:SF 21 xmm0))
            (nil))))
(insn 354 352 395 8 (set (reg:SF 21 xmm0 [orig:243 _157 ] [243])
        (sqrt:SF (reg:SF 21 xmm0 [orig:242 _156 ] [242]))) "../src/spline.f":513 836 {*sqrtsf2_sse}
     (nil))
(insn 395 354 355 8 (set (reg:SF 24 xmm3 [orig:241 _155 ] [241])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [8 %sfp+-176 S4 A128])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 355 395 396 8 (set (reg:SF 24 xmm3 [orig:241 _155 ] [241])
        (div:SF (reg:SF 24 xmm3 [orig:241 _155 ] [241])
            (reg:SF 21 xmm0 [orig:243 _157 ] [243]))) "../src/spline.f":513 805 {*fop_sf_1}
     (nil))
(insn 396 355 356 8 (set (reg:SF 21 xmm0 [orig:244 _158 ] [244])
        (reg:SF 24 xmm3 [orig:241 _155 ] [241])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 356 396 357 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 __result_curv+0 S4 A64])
        (reg:SF 21 xmm0 [orig:244 _158 ] [244])) "../src/spline.f":513 127 {*movsf_internal}
     (nil))
(insn 357 356 364 8 (set (reg:SF 21 xmm0 [orig:271 _220 ] [271])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 __result_curv+0 S4 A64])) "../src/spline.f":515 127 {*movsf_internal}
     (nil))
(insn 364 357 365 8 (set (reg/i:SF 21 xmm0)
        (reg:SF 21 xmm0 [orig:272 <retval> ] [272])) "../src/spline.f":516 127 {*movsf_internal}
     (nil))
(insn 365 364 378 8 (use (reg/i:SF 21 xmm0)) "../src/spline.f":516 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]

(note 378 365 0 NOTE_INSN_DELETED)

;; Function curvs (curvs_, funcdef_no=11, decl_uid=4028, cgraph_uid=11, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=256, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=208, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 62:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 74:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=597 from oldreg=415, assigning class GENERAL_REGS to r597
   99: {r597:SI=r597:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  614: r597:SI=r108:SI
    Inserting insn reload after:
  615: r415:SI=r597:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 135:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 139:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 143:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 145:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 149:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 151:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 155:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 159:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 162:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 165:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 172:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 175:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 176:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 179:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 181:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 182:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 185:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 188:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 192:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 195:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 196:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 201:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 205:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 207:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 208:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=598 from oldreg=154, assigning class SSE_REGS to r598
  208: r598:SF=r598:SF-r158:SF
      REG_DEAD r158:SF
      REG_DEAD r154:SF
    Inserting insn reload before:
  616: r598:SF=r154:SF
    Inserting insn reload after:
  617: r159:SF=r598:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 209:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 210:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 211
	 Choosing alt 1 in insn 211:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 212:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 213:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 214:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 215:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 1 in insn 216:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 217:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 1 in insn 218:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 220:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 221:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 222:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 223:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 224
	 Choosing alt 1 in insn 224:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 225:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 226:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 228:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 229:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 230
	 Choosing alt 1 in insn 230:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 231:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 232:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 233:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 234
	 Choosing alt 1 in insn 234:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 236:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 238:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=599 from oldreg=175, assigning class SSE_REGS to r599
  238: r599:SF=r599:SF*[frame:DI-0x60]
      REG_DEAD r175:SF
    Inserting insn reload before:
  618: r599:SF=r175:SF
    Inserting insn reload after:
  619: r176:SF=r599:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 240:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 241
	 Choosing alt 1 in insn 241:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 242:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 243:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 245:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 1 in insn 246:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 247:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 248:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 249:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 250:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 251:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 253
	 Choosing alt 1 in insn 253:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 254
	 Choosing alt 1 in insn 254:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 255:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 259:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 261:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 262:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 265:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 267:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 268:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 272:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 274:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 275:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 276:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 279:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 281:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 282:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 285:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 287:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 288:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 290:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 292:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 294:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 295:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 296:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 299:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 301:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 303:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 305:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 307:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 308:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=600 from oldreg=210, assigning class SSE_REGS to r600
  308: r600:SF=r600:SF-r214:SF
      REG_DEAD r214:SF
      REG_DEAD r210:SF
    Inserting insn reload before:
  620: r600:SF=r210:SF
    Inserting insn reload after:
  621: r215:SF=r600:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 309:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 310:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 311
	 Choosing alt 1 in insn 311:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 312:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 313:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 314:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 315:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 316
	 Choosing alt 1 in insn 316:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 317:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 318
	 Choosing alt 1 in insn 318:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 320:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 321:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 322:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 323:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 324
	 Choosing alt 1 in insn 324:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 325:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 326:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 328:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 329:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 330
	 Choosing alt 1 in insn 330:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 331:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 332:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 333:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 334
	 Choosing alt 1 in insn 334:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 335:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 336:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 338:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=601 from oldreg=231, assigning class SSE_REGS to r601
  338: r601:SF=r601:SF*[frame:DI-0x74]
      REG_DEAD r231:SF
    Inserting insn reload before:
  622: r601:SF=r231:SF
    Inserting insn reload after:
  623: r232:SF=r601:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 339:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 340:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 341
	 Choosing alt 1 in insn 341:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 342:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 343:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 345:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 346
	 Choosing alt 1 in insn 346:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 347:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 348:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 349:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 350:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 351:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 352:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 353
	 Choosing alt 1 in insn 353:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 354
	 Choosing alt 1 in insn 354:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 355:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 357:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 359:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 361:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 362:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 1 in insn 363:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 364:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 367:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 369:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 373:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 375:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 376:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 378:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 379:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 383:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 385:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 386:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 389:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 390:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 391:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 392:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 394:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 395:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=602 from oldreg=252, assigning class SSE_REGS to r602
  395: r602:SF=r602:SF-r263:SF
      REG_DEAD r263:SF
      REG_DEAD r252:SF
    Inserting insn reload before:
  624: r602:SF=r252:SF
    Inserting insn reload after:
  625: r523:SF=r602:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 396:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 400:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 401:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 402:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 405:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 407:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 408
	 Choosing alt 1 in insn 408:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 410:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 413:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 414:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 415:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 419:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 421:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 422:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 425:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 426:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 427:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 428:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=603 from oldreg=533, assigning class SSE_REGS to r603
  428: r603:SF=r603:SF+r533:SF
      REG_DEAD r533:SF
    Inserting insn reload before:
  626: r603:SF=r533:SF
    Inserting insn reload after:
  627: r284:SF=r603:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 429:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 430:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 431
	 Choosing alt 1 in insn 431:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 432:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 433
	 Choosing alt 1 in insn 433:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 435:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 436:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 437
	 Choosing alt 1 in insn 437:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 438:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 439:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 440:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=604 from oldreg=538, assigning class SSE_REGS to r604
  440: r604:SF=r604:SF+r538:SF
      REG_DEAD r538:SF
    Inserting insn reload before:
  628: r604:SF=r538:SF
    Inserting insn reload after:
  629: r290:SF=r604:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 441:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 442:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 443
	 Choosing alt 1 in insn 443:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 444:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 445
	 Choosing alt 1 in insn 445:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 446:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 447:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 448:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 449
	 Choosing alt 1 in insn 449:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 450:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 454:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 456:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 457:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 458
	 Choosing alt 1 in insn 458:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 459:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 462:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 463:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 464:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 468:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 470:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 471:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 473:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 474:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 476:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 478:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 479:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 480:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 484:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 486:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 487:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 489:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 490:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=605 from oldreg=306, assigning class SSE_REGS to r605
  490: r605:SF=r605:SF-r317:SF
      REG_DEAD r317:SF
      REG_DEAD r306:SF
    Inserting insn reload before:
  630: r605:SF=r306:SF
    Inserting insn reload after:
  631: r558:SF=r605:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 491:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 495:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 497:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 500:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 502:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 503
	 Choosing alt 1 in insn 503:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 505:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 508:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 510:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 514:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 516:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 517:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 520:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 521:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 522:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 523:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=606 from oldreg=568, assigning class SSE_REGS to r606
  523: r606:SF=r606:SF+r568:SF
      REG_DEAD r568:SF
    Inserting insn reload before:
  632: r606:SF=r568:SF
    Inserting insn reload after:
  633: r338:SF=r606:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 524:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 525:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 526
	 Choosing alt 1 in insn 526:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 527:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 528
	 Choosing alt 1 in insn 528:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 530:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 531:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 532
	 Choosing alt 1 in insn 532:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 533:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 534:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 535:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=607 from oldreg=573, assigning class SSE_REGS to r607
  535: r607:SF=r607:SF+r573:SF
      REG_DEAD r573:SF
    Inserting insn reload before:
  634: r607:SF=r573:SF
    Inserting insn reload after:
  635: r344:SF=r607:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 536:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 537:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 538
	 Choosing alt 1 in insn 538:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 539:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 540
	 Choosing alt 1 in insn 540:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 541:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 542:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 543:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 544
	 Choosing alt 1 in insn 544:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 545:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 546:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 547:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=608 from oldreg=580, assigning class SSE_REGS to r608
  547: r608:SF=r608:SF*[frame:DI-0x68]
      REG_DEAD r580:SF
    Inserting insn reload before:
  636: r608:SF=r580:SF
    Inserting insn reload after:
  637: r347:SF=r608:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 548:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 549:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 550
	 Choosing alt 1 in insn 550:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =v  (1) vm {*sqrtsf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 552:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 553:  (0) ?r  (1) rmF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=21,losers=1,rld_nregs=0
            alt=5: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=8,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=9,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 555:  (0) ?Yi  (1) r {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1225,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=615,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=3,overall=1223,losers=2 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=4,overall=614,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=23,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 557:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 558:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 559:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 560
	 Choosing alt 1 in insn 560:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 561:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 562:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=609 from oldreg=585, assigning class SSE_REGS to r609
  562: r609:SF=r609:SF*[frame:DI-0x6c]
      REG_DEAD r585:SF
    Inserting insn reload before:
  638: r609:SF=r585:SF
    Inserting insn reload after:
  639: r351:SF=r609:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 563:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 564:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 565
	 Choosing alt 1 in insn 565:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 567:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 568:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 569:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 570:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 571:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 572:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 573:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 574:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 575:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 576:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 577:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 578:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 579:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 581:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 582:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=610 from oldreg=391, assigning class SSE_REGS to r610
  582: r610:SF=r610:SF*r391:SF
      REG_DEAD r391:SF
    Inserting insn reload before:
  640: r610:SF=r391:SF
    Inserting insn reload after:
  641: r392:SF=r610:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 583:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 584:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 585:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 586:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 587:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 589:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 590:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 591:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 592:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 600: point = 0, n_alt = -1
   Insn 599: point = 0, n_alt = -1
   Insn 595: point = 1, n_alt = -1
   Insn 592: point = 3, n_alt = 7
   Insn 591: point = 4, n_alt = 8
   Insn 590: point = 5, n_alt = 2
   Insn 589: point = 7, n_alt = 2
   Insn 588: point = 9, n_alt = -1
   Insn 587: point = 11, n_alt = 2
   Insn 586: point = 13, n_alt = 1
   Insn 585: point = 15, n_alt = 7
   Insn 584: point = 16, n_alt = 1
   Insn 583: point = 18, n_alt = 7
   Insn 641: point = 19, n_alt = -1
	Hard reg 22 is preferable by r610 with profit 1
   Insn 582: point = 21, n_alt = 1
   Insn 640: point = 22, n_alt = -1
	Hard reg 22 is preferable by r610 with profit 1
	Hard reg 21 is preferable by r610 with profit 1
   Insn 581: point = 23, n_alt = 7
   Insn 580: point = 24, n_alt = 8
   Insn 579: point = 25, n_alt = 2
   Insn 578: point = 27, n_alt = 1
   Insn 577: point = 29, n_alt = 7
   Insn 576: point = 30, n_alt = 1
   Insn 575: point = 32, n_alt = 7
   Insn 574: point = 33, n_alt = 8
   Insn 573: point = 34, n_alt = 2
   Insn 572: point = 36, n_alt = 1
   Insn 571: point = 38, n_alt = 7
   Insn 570: point = 39, n_alt = 1
   Insn 569: point = 41, n_alt = 7
   Insn 568: point = 42, n_alt = 8
   Insn 567: point = 43, n_alt = 1
   Insn 566: point = 45, n_alt = -1
   Insn 565: point = 47, n_alt = 1
   Insn 564: point = 49, n_alt = 1
   Insn 563: point = 51, n_alt = 7
   Insn 639: point = 52, n_alt = -1
	Hard reg 23 is preferable by r609 with profit 1
   Insn 562: point = 54, n_alt = 1
   Insn 638: point = 54, n_alt = -1
	Hard reg 23 is preferable by r609 with profit 1
	Hard reg 22 is preferable by r609 with profit 1
   Insn 561: point = 56, n_alt = 7
   Insn 560: point = 57, n_alt = 1
   Insn 559: point = 59, n_alt = 7
   Insn 558: point = 60, n_alt = 7
   Insn 557: point = 61, n_alt = 8
   Insn 556: point = 61, n_alt = 0
   Insn 555: point = 61, n_alt = 10
   Insn 554: point = 62, n_alt = 0
   Insn 553: point = 62, n_alt = 3
   Insn 552: point = 63, n_alt = 8
   Insn 551: point = 64, n_alt = 0
   Insn 550: point = 66, n_alt = 1
   Insn 549: point = 68, n_alt = 1
   Insn 548: point = 70, n_alt = 7
   Insn 637: point = 71, n_alt = -1
	Hard reg 22 is preferable by r608 with profit 1
   Insn 547: point = 73, n_alt = 1
   Insn 636: point = 73, n_alt = -1
	Hard reg 22 is preferable by r608 with profit 1
	Hard reg 21 is preferable by r608 with profit 1
   Insn 546: point = 75, n_alt = 7
   Insn 545: point = 76, n_alt = 8
   Insn 544: point = 77, n_alt = 1
   Insn 543: point = 79, n_alt = 7
   Insn 542: point = 80, n_alt = 7
   Insn 541: point = 81, n_alt = 8
   Insn 540: point = 82, n_alt = 1
   Insn 539: point = 84, n_alt = 1
   Insn 538: point = 86, n_alt = 1
   Insn 537: point = 88, n_alt = 7
   Insn 536: point = 89, n_alt = 7
   Insn 635: point = 90, n_alt = -1
	Hard reg 22 is preferable by r607 with profit 1
   Insn 535: point = 92, n_alt = 1
   Insn 634: point = 93, n_alt = -1
	Hard reg 22 is preferable by r607 with profit 1
	Hard reg 21 is preferable by r607 with profit 1
   Insn 534: point = 94, n_alt = 7
   Insn 533: point = 95, n_alt = 8
   Insn 532: point = 96, n_alt = 1
   Insn 531: point = 98, n_alt = 7
   Insn 530: point = 99, n_alt = 1
   Insn 529: point = 101, n_alt = -1
   Insn 528: point = 103, n_alt = 1
   Insn 527: point = 105, n_alt = 1
   Insn 526: point = 107, n_alt = 1
   Insn 525: point = 109, n_alt = 7
   Insn 524: point = 110, n_alt = 7
   Insn 633: point = 111, n_alt = -1
	Hard reg 22 is preferable by r606 with profit 1
   Insn 523: point = 113, n_alt = 1
   Insn 632: point = 114, n_alt = -1
	Hard reg 22 is preferable by r606 with profit 1
	Hard reg 21 is preferable by r606 with profit 1
   Insn 522: point = 115, n_alt = 7
   Insn 521: point = 116, n_alt = 8
   Insn 520: point = 117, n_alt = 2
   Insn 519: point = 119, n_alt = 1
   Insn 518: point = 121, n_alt = -1
   Insn 517: point = 123, n_alt = 2
   Insn 516: point = 125, n_alt = 7
   Insn 515: point = 127, n_alt = 3
   Insn 514: point = 128, n_alt = 3
   Insn 513: point = 130, n_alt = 0
   Insn 512: point = 132, n_alt = 0
   Insn 511: point = 134, n_alt = 0
   Insn 510: point = 135, n_alt = 7
   Insn 509: point = 137, n_alt = 3
   Insn 508: point = 138, n_alt = 3
   Insn 507: point = 140, n_alt = 0
   Insn 506: point = 142, n_alt = 0
   Insn 505: point = 143, n_alt = 1
   Insn 504: point = 145, n_alt = -1
   Insn 503: point = 147, n_alt = 1
   Insn 502: point = 149, n_alt = 7
   Insn 501: point = 151, n_alt = 3
   Insn 500: point = 152, n_alt = 3
   Insn 499: point = 154, n_alt = 0
   Insn 498: point = 156, n_alt = 0
   Insn 497: point = 157, n_alt = 7
   Insn 496: point = 159, n_alt = 3
   Insn 495: point = 160, n_alt = 3
   Insn 494: point = 162, n_alt = 0
   Insn 493: point = 164, n_alt = 0
   Insn 492: point = 166, n_alt = 0
   Insn 491: point = 167, n_alt = 8
   Insn 631: point = 168, n_alt = -1
	Hard reg 21 is preferable by r605 with profit 1
   Insn 490: point = 170, n_alt = 2
   Insn 630: point = 171, n_alt = -1
	Hard reg 21 is preferable by r605 with profit 1
	Hard reg 22 is preferable by r605 with profit 1
   Insn 489: point = 173, n_alt = 1
   Insn 488: point = 175, n_alt = -1
   Insn 487: point = 177, n_alt = 1
   Insn 486: point = 179, n_alt = 7
   Insn 485: point = 181, n_alt = 3
   Insn 484: point = 182, n_alt = 3
   Insn 483: point = 184, n_alt = 0
   Insn 482: point = 186, n_alt = 0
   Insn 481: point = 187, n_alt = 1
   Insn 480: point = 189, n_alt = 7
   Insn 479: point = 191, n_alt = 3
   Insn 478: point = 192, n_alt = 3
   Insn 477: point = 194, n_alt = 0
   Insn 476: point = 196, n_alt = 0
   Insn 475: point = 198, n_alt = 0
   Insn 474: point = 199, n_alt = 1
   Insn 473: point = 201, n_alt = 7
   Insn 472: point = 202, n_alt = -1
   Insn 471: point = 204, n_alt = 2
   Insn 470: point = 206, n_alt = 7
   Insn 469: point = 208, n_alt = 3
   Insn 468: point = 209, n_alt = 3
   Insn 467: point = 211, n_alt = 0
   Insn 466: point = 213, n_alt = 0
   Insn 465: point = 215, n_alt = 0
   Insn 464: point = 216, n_alt = 7
   Insn 463: point = 218, n_alt = 3
   Insn 462: point = 219, n_alt = 3
   Insn 461: point = 221, n_alt = 0
   Insn 460: point = 223, n_alt = 0
   Insn 459: point = 224, n_alt = 8
   Insn 458: point = 225, n_alt = 1
   Insn 457: point = 227, n_alt = 7
   Insn 456: point = 228, n_alt = 7
   Insn 455: point = 230, n_alt = 3
   Insn 454: point = 231, n_alt = 3
   Insn 453: point = 233, n_alt = 0
   Insn 452: point = 235, n_alt = 0
   Insn 451: point = 237, n_alt = 0
   Insn 450: point = 238, n_alt = 8
   Insn 449: point = 239, n_alt = 1
   Insn 448: point = 241, n_alt = 7
   Insn 447: point = 242, n_alt = 7
   Insn 446: point = 243, n_alt = 8
   Insn 445: point = 244, n_alt = 1
   Insn 444: point = 246, n_alt = 1
   Insn 443: point = 248, n_alt = 1
   Insn 442: point = 250, n_alt = 7
   Insn 441: point = 251, n_alt = 7
   Insn 629: point = 252, n_alt = -1
	Hard reg 22 is preferable by r604 with profit 1
   Insn 440: point = 254, n_alt = 1
   Insn 628: point = 255, n_alt = -1
	Hard reg 22 is preferable by r604 with profit 1
	Hard reg 21 is preferable by r604 with profit 1
   Insn 439: point = 256, n_alt = 7
   Insn 438: point = 257, n_alt = 8
   Insn 437: point = 258, n_alt = 1
   Insn 436: point = 260, n_alt = 7
   Insn 435: point = 261, n_alt = 1
   Insn 434: point = 263, n_alt = -1
   Insn 433: point = 265, n_alt = 1
   Insn 432: point = 267, n_alt = 1
   Insn 431: point = 269, n_alt = 1
   Insn 430: point = 271, n_alt = 7
   Insn 429: point = 272, n_alt = 7
   Insn 627: point = 273, n_alt = -1
	Hard reg 22 is preferable by r603 with profit 1
   Insn 428: point = 275, n_alt = 1
   Insn 626: point = 276, n_alt = -1
	Hard reg 22 is preferable by r603 with profit 1
	Hard reg 21 is preferable by r603 with profit 1
   Insn 427: point = 277, n_alt = 7
   Insn 426: point = 278, n_alt = 8
   Insn 425: point = 279, n_alt = 2
   Insn 424: point = 281, n_alt = 1
   Insn 423: point = 283, n_alt = -1
   Insn 422: point = 285, n_alt = 2
   Insn 421: point = 287, n_alt = 7
   Insn 420: point = 289, n_alt = 3
   Insn 419: point = 290, n_alt = 3
   Insn 418: point = 292, n_alt = 0
   Insn 417: point = 294, n_alt = 0
   Insn 416: point = 296, n_alt = 0
   Insn 415: point = 297, n_alt = 7
   Insn 414: point = 299, n_alt = 3
   Insn 413: point = 300, n_alt = 3
   Insn 412: point = 302, n_alt = 0
   Insn 411: point = 304, n_alt = 0
   Insn 410: point = 305, n_alt = 1
   Insn 409: point = 307, n_alt = -1
   Insn 408: point = 309, n_alt = 1
   Insn 407: point = 311, n_alt = 7
   Insn 406: point = 313, n_alt = 3
   Insn 405: point = 314, n_alt = 3
   Insn 404: point = 316, n_alt = 0
   Insn 403: point = 318, n_alt = 0
   Insn 402: point = 319, n_alt = 7
   Insn 401: point = 321, n_alt = 3
   Insn 400: point = 322, n_alt = 3
   Insn 399: point = 324, n_alt = 0
   Insn 398: point = 326, n_alt = 0
   Insn 397: point = 328, n_alt = 0
   Insn 396: point = 329, n_alt = 8
   Insn 625: point = 330, n_alt = -1
	Hard reg 21 is preferable by r602 with profit 1
   Insn 395: point = 332, n_alt = 2
   Insn 624: point = 333, n_alt = -1
	Hard reg 21 is preferable by r602 with profit 1
	Hard reg 22 is preferable by r602 with profit 1
   Insn 394: point = 335, n_alt = 1
   Insn 393: point = 337, n_alt = -1
   Insn 392: point = 339, n_alt = 1
   Insn 391: point = 341, n_alt = 7
   Insn 390: point = 343, n_alt = 3
   Insn 389: point = 344, n_alt = 3
   Insn 388: point = 346, n_alt = 0
   Insn 387: point = 348, n_alt = 0
   Insn 386: point = 349, n_alt = 1
   Insn 385: point = 351, n_alt = 7
   Insn 384: point = 353, n_alt = 3
   Insn 383: point = 354, n_alt = 3
   Insn 382: point = 356, n_alt = 0
   Insn 381: point = 358, n_alt = 0
   Insn 380: point = 360, n_alt = 0
   Insn 379: point = 361, n_alt = 1
   Insn 378: point = 363, n_alt = 7
   Insn 377: point = 364, n_alt = -1
   Insn 376: point = 366, n_alt = 2
   Insn 375: point = 368, n_alt = 7
   Insn 374: point = 370, n_alt = 3
   Insn 373: point = 371, n_alt = 3
   Insn 372: point = 373, n_alt = 0
   Insn 371: point = 375, n_alt = 0
   Insn 370: point = 377, n_alt = 0
   Insn 369: point = 378, n_alt = 7
   Insn 368: point = 380, n_alt = 3
   Insn 367: point = 381, n_alt = 3
   Insn 366: point = 383, n_alt = 0
   Insn 365: point = 385, n_alt = 0
   Insn 364: point = 386, n_alt = 8
   Insn 363: point = 387, n_alt = 1
   Insn 362: point = 389, n_alt = 7
   Insn 361: point = 390, n_alt = 7
   Insn 360: point = 392, n_alt = 3
   Insn 359: point = 393, n_alt = 3
   Insn 358: point = 395, n_alt = 0
   Insn 357: point = 397, n_alt = 0
   Insn 356: point = 399, n_alt = 0
   Insn 355: point = 400, n_alt = 8
   Insn 354: point = 401, n_alt = 1
   Insn 353: point = 403, n_alt = 1
   Insn 352: point = 405, n_alt = 7
   Insn 351: point = 406, n_alt = 7
   Insn 350: point = 407, n_alt = 1
   Insn 349: point = 409, n_alt = 7
   Insn 348: point = 410, n_alt = 7
   Insn 347: point = 411, n_alt = 8
   Insn 346: point = 412, n_alt = 1
   Insn 345: point = 414, n_alt = 1
   Insn 344: point = 416, n_alt = -1
   Insn 343: point = 418, n_alt = 2
   Insn 342: point = 420, n_alt = 7
   Insn 341: point = 421, n_alt = 1
   Insn 340: point = 423, n_alt = 7
   Insn 339: point = 424, n_alt = 7
   Insn 623: point = 425, n_alt = -1
	Hard reg 22 is preferable by r601 with profit 1
   Insn 338: point = 427, n_alt = 1
   Insn 622: point = 427, n_alt = -1
	Hard reg 22 is preferable by r601 with profit 1
	Hard reg 21 is preferable by r601 with profit 1
   Insn 337: point = 429, n_alt = -1
   Insn 336: point = 431, n_alt = 2
   Insn 335: point = 433, n_alt = 7
   Insn 334: point = 434, n_alt = 1
   Insn 333: point = 436, n_alt = 7
   Insn 332: point = 437, n_alt = 7
   Insn 331: point = 438, n_alt = 8
   Insn 330: point = 439, n_alt = 1
   Insn 329: point = 441, n_alt = 1
   Insn 328: point = 443, n_alt = 1
   Insn 327: point = 445, n_alt = -1
   Insn 326: point = 447, n_alt = 2
   Insn 325: point = 449, n_alt = 7
   Insn 324: point = 450, n_alt = 1
   Insn 323: point = 452, n_alt = 7
   Insn 322: point = 453, n_alt = 7
   Insn 321: point = 454, n_alt = 1
   Insn 320: point = 456, n_alt = 1
   Insn 319: point = 458, n_alt = -1
   Insn 318: point = 460, n_alt = 1
   Insn 317: point = 462, n_alt = 1
   Insn 316: point = 464, n_alt = 1
   Insn 315: point = 466, n_alt = 7
   Insn 314: point = 467, n_alt = 7
   Insn 313: point = 468, n_alt = 2
   Insn 312: point = 470, n_alt = 7
   Insn 311: point = 471, n_alt = 1
   Insn 310: point = 473, n_alt = 7
   Insn 309: point = 474, n_alt = 7
   Insn 621: point = 475, n_alt = -1
	Hard reg 22 is preferable by r600 with profit 1
   Insn 308: point = 477, n_alt = 2
   Insn 620: point = 478, n_alt = -1
	Hard reg 22 is preferable by r600 with profit 1
	Hard reg 21 is preferable by r600 with profit 1
   Insn 307: point = 480, n_alt = 7
   Insn 306: point = 482, n_alt = 3
   Insn 305: point = 483, n_alt = 3
   Insn 304: point = 485, n_alt = 0
   Insn 303: point = 487, n_alt = 0
   Insn 302: point = 489, n_alt = 0
   Insn 301: point = 490, n_alt = 7
   Insn 300: point = 492, n_alt = 3
   Insn 299: point = 493, n_alt = 3
   Insn 298: point = 495, n_alt = 0
   Insn 297: point = 497, n_alt = 0
   Insn 296: point = 498, n_alt = 8
   Insn 295: point = 499, n_alt = 1
   Insn 294: point = 501, n_alt = 7
   Insn 293: point = 503, n_alt = 3
   Insn 292: point = 504, n_alt = 3
   Insn 291: point = 506, n_alt = 0
   Insn 290: point = 508, n_alt = 0
   Insn 289: point = 510, n_alt = 0
   Insn 288: point = 511, n_alt = 2
   Insn 287: point = 513, n_alt = 7
   Insn 286: point = 515, n_alt = 3
   Insn 285: point = 516, n_alt = 3
   Insn 284: point = 518, n_alt = 0
   Insn 283: point = 520, n_alt = 0
   Insn 282: point = 521, n_alt = 1
   Insn 281: point = 523, n_alt = 7
   Insn 280: point = 525, n_alt = 3
   Insn 279: point = 526, n_alt = 3
   Insn 278: point = 528, n_alt = 0
   Insn 277: point = 530, n_alt = 0
   Insn 276: point = 531, n_alt = 8
   Insn 275: point = 532, n_alt = 1
   Insn 274: point = 534, n_alt = 7
   Insn 273: point = 536, n_alt = 3
   Insn 272: point = 537, n_alt = 3
   Insn 271: point = 539, n_alt = 0
   Insn 270: point = 541, n_alt = 0
   Insn 269: point = 543, n_alt = 0
   Insn 268: point = 544, n_alt = 2
   Insn 267: point = 546, n_alt = 7
   Insn 266: point = 548, n_alt = 3
   Insn 265: point = 549, n_alt = 3
   Insn 264: point = 551, n_alt = 0
   Insn 263: point = 553, n_alt = 0
   Insn 262: point = 554, n_alt = 1
   Insn 261: point = 556, n_alt = 7
   Insn 260: point = 558, n_alt = 3
   Insn 259: point = 559, n_alt = 3
   Insn 258: point = 561, n_alt = 0
   Insn 257: point = 563, n_alt = 0
   Insn 256: point = 565, n_alt = 0
   Insn 255: point = 566, n_alt = 8
   Insn 254: point = 567, n_alt = 1
   Insn 253: point = 569, n_alt = 1
   Insn 252: point = 571, n_alt = 7
   Insn 251: point = 572, n_alt = 7
   Insn 250: point = 573, n_alt = 1
   Insn 249: point = 575, n_alt = 7
   Insn 248: point = 576, n_alt = 7
   Insn 247: point = 577, n_alt = 8
   Insn 246: point = 578, n_alt = 1
   Insn 245: point = 580, n_alt = 1
   Insn 244: point = 582, n_alt = -1
   Insn 243: point = 584, n_alt = 2
   Insn 242: point = 586, n_alt = 7
   Insn 241: point = 587, n_alt = 1
   Insn 240: point = 589, n_alt = 7
   Insn 239: point = 590, n_alt = 7
   Insn 619: point = 591, n_alt = -1
	Hard reg 22 is preferable by r599 with profit 1
   Insn 238: point = 593, n_alt = 1
   Insn 618: point = 593, n_alt = -1
	Hard reg 22 is preferable by r599 with profit 1
	Hard reg 21 is preferable by r599 with profit 1
   Insn 237: point = 595, n_alt = -1
   Insn 236: point = 597, n_alt = 2
   Insn 235: point = 599, n_alt = 7
   Insn 234: point = 600, n_alt = 1
   Insn 233: point = 602, n_alt = 7
   Insn 232: point = 603, n_alt = 7
   Insn 231: point = 604, n_alt = 8
   Insn 230: point = 605, n_alt = 1
   Insn 229: point = 607, n_alt = 1
   Insn 228: point = 609, n_alt = 1
   Insn 227: point = 611, n_alt = -1
   Insn 226: point = 613, n_alt = 2
   Insn 225: point = 615, n_alt = 7
   Insn 224: point = 616, n_alt = 1
   Insn 223: point = 618, n_alt = 7
   Insn 222: point = 619, n_alt = 7
   Insn 221: point = 620, n_alt = 1
   Insn 220: point = 622, n_alt = 1
   Insn 219: point = 624, n_alt = -1
   Insn 218: point = 626, n_alt = 1
   Insn 217: point = 628, n_alt = 1
   Insn 216: point = 630, n_alt = 1
   Insn 215: point = 632, n_alt = 7
   Insn 214: point = 633, n_alt = 7
   Insn 213: point = 634, n_alt = 2
   Insn 212: point = 636, n_alt = 7
   Insn 211: point = 637, n_alt = 1
   Insn 210: point = 639, n_alt = 7
   Insn 209: point = 640, n_alt = 7
   Insn 617: point = 641, n_alt = -1
	Hard reg 22 is preferable by r598 with profit 1
   Insn 208: point = 643, n_alt = 2
   Insn 616: point = 644, n_alt = -1
	Hard reg 22 is preferable by r598 with profit 1
	Hard reg 21 is preferable by r598 with profit 1
   Insn 207: point = 646, n_alt = 7
   Insn 206: point = 648, n_alt = 3
   Insn 205: point = 649, n_alt = 3
   Insn 204: point = 651, n_alt = 0
   Insn 203: point = 653, n_alt = 0
   Insn 202: point = 655, n_alt = 0
   Insn 201: point = 656, n_alt = 7
   Insn 200: point = 658, n_alt = 3
   Insn 199: point = 659, n_alt = 3
   Insn 198: point = 661, n_alt = 0
   Insn 197: point = 663, n_alt = 0
   Insn 196: point = 664, n_alt = 8
   Insn 195: point = 665, n_alt = 1
   Insn 194: point = 667, n_alt = 7
   Insn 193: point = 669, n_alt = 3
   Insn 192: point = 670, n_alt = 3
   Insn 191: point = 672, n_alt = 0
   Insn 190: point = 674, n_alt = 0
   Insn 189: point = 676, n_alt = 0
   Insn 188: point = 677, n_alt = 2
   Insn 187: point = 679, n_alt = 7
   Insn 186: point = 681, n_alt = 3
   Insn 185: point = 682, n_alt = 3
   Insn 184: point = 684, n_alt = 0
   Insn 183: point = 686, n_alt = 0
   Insn 182: point = 687, n_alt = 1
   Insn 181: point = 689, n_alt = 7
   Insn 180: point = 691, n_alt = 3
   Insn 179: point = 692, n_alt = 3
   Insn 178: point = 694, n_alt = 0
   Insn 177: point = 696, n_alt = 0
   Insn 176: point = 697, n_alt = 8
   Insn 175: point = 698, n_alt = 1
   Insn 174: point = 700, n_alt = 7
   Insn 173: point = 702, n_alt = 3
   Insn 172: point = 703, n_alt = 3
   Insn 171: point = 705, n_alt = 0
   Insn 170: point = 707, n_alt = 0
   Insn 169: point = 709, n_alt = 0
   Insn 168: point = 710, n_alt = 2
   Insn 167: point = 712, n_alt = 7
   Insn 166: point = 714, n_alt = 3
   Insn 165: point = 715, n_alt = 3
   Insn 164: point = 717, n_alt = 0
   Insn 163: point = 719, n_alt = 0
   Insn 162: point = 720, n_alt = 1
   Insn 161: point = 722, n_alt = 7
   Insn 160: point = 724, n_alt = 3
   Insn 159: point = 725, n_alt = 3
   Insn 158: point = 727, n_alt = 0
   Insn 157: point = 729, n_alt = 0
   Insn 156: point = 731, n_alt = 0
   Insn 155: point = 732, n_alt = 8
   Insn 154: point = 733, n_alt = 2
   Insn 153: point = 735, n_alt = -1
   Insn 152: point = 737, n_alt = 2
   Insn 151: point = 739, n_alt = 7
   Insn 150: point = 741, n_alt = 3
   Insn 149: point = 742, n_alt = 3
   Insn 148: point = 744, n_alt = 0
   Insn 147: point = 746, n_alt = 0
   Insn 146: point = 748, n_alt = 0
   Insn 145: point = 749, n_alt = 7
   Insn 144: point = 751, n_alt = 3
   Insn 143: point = 752, n_alt = 8
   Insn 142: point = 753, n_alt = 2
   Insn 141: point = 755, n_alt = 7
   Insn 140: point = 757, n_alt = 3
   Insn 139: point = 758, n_alt = 3
   Insn 138: point = 760, n_alt = 0
   Insn 137: point = 762, n_alt = 0
   Insn 136: point = 764, n_alt = 0
   Insn 135: point = 765, n_alt = 7
   Insn 134: point = 767, n_alt = 3
   Insn 133: point = 768, n_alt = 3
   Insn 132: point = 770, n_alt = 0
   Insn 131: point = 772, n_alt = 0
  BB 9
   Insn 612: point = 773, n_alt = -1
  BB 3
   Insn 94: point = 773, n_alt = -1
   Insn 93: point = 773, n_alt = 0
   Insn 92: point = 774, n_alt = 1
   Insn 91: point = 776, n_alt = 0
  BB 7
   Insn 608: point = 777, n_alt = -1
  BB 5
   Insn 606: point = 777, n_alt = -1
   Insn 117: point = 777, n_alt = 1
   Insn 116: point = 778, n_alt = 0
  BB 6
   Insn 123: point = 779, n_alt = 1
   Insn 122: point = 780, n_alt = 0
  BB 4
   Insn 111: point = 781, n_alt = -1
   Insn 110: point = 781, n_alt = 1
   Insn 109: point = 782, n_alt = 7
   Insn 108: point = 784, n_alt = 3
   Insn 107: point = 785, n_alt = 3
   Insn 106: point = 787, n_alt = 0
   Insn 105: point = 789, n_alt = 0
   Insn 104: point = 790, n_alt = 7
   Insn 103: point = 792, n_alt = 3
   Insn 102: point = 793, n_alt = 1
   Insn 101: point = 794, n_alt = 0
   Insn 100: point = 796, n_alt = 0
   Insn 615: point = 798, n_alt = -1
	Hard reg 1 is preferable by r597 with profit 1
   Insn 99: point = 800, n_alt = 0
   Insn 614: point = 800, n_alt = -1
   Insn 98: point = 801, n_alt = 0
   Insn 97: point = 803, n_alt = 0
   Insn 96: point = 804, n_alt = 0
  BB 2
   Insn 89: point = 805, n_alt = 1
   Insn 88: point = 806, n_alt = 0
   Insn 87: point = 808, n_alt = 3
   Insn 86: point = 809, n_alt = 1
   Insn 82: point = 809, n_alt = 2
   Insn 81: point = 810, n_alt = 3
   Insn 80: point = 811, n_alt = -1
   Insn 78: point = 813, n_alt = 1
   Insn 76: point = 815, n_alt = 0
   Insn 77: point = 815, n_alt = 2
   Insn 75: point = 816, n_alt = 3
   Insn 74: point = 817, n_alt = 5
   Insn 73: point = 818, n_alt = 0
   Insn 72: point = 820, n_alt = 0
   Insn 71: point = 822, n_alt = 3
   Insn 67: point = 823, n_alt = 2
   Insn 66: point = 824, n_alt = 3
   Insn 65: point = 825, n_alt = -1
   Insn 63: point = 827, n_alt = 1
   Insn 61: point = 829, n_alt = 0
   Insn 62: point = 829, n_alt = 2
   Insn 60: point = 830, n_alt = 3
   Insn 59: point = 831, n_alt = 5
   Insn 58: point = 832, n_alt = 0
   Insn 57: point = 834, n_alt = 0
   Insn 56: point = 836, n_alt = 3
   Insn 52: point = 837, n_alt = 2
   Insn 51: point = 838, n_alt = 3
   Insn 50: point = 839, n_alt = -1
   Insn 48: point = 841, n_alt = 1
   Insn 46: point = 843, n_alt = 0
   Insn 47: point = 843, n_alt = 2
   Insn 45: point = 844, n_alt = 3
   Insn 44: point = 845, n_alt = 5
   Insn 43: point = 846, n_alt = 0
   Insn 42: point = 848, n_alt = 0
   Insn 41: point = 850, n_alt = 3
   Insn 37: point = 851, n_alt = 5
   Insn 36: point = 852, n_alt = 5
   Insn 35: point = 853, n_alt = -1
   Insn 33: point = 855, n_alt = 1
   Insn 31: point = 857, n_alt = 0
   Insn 32: point = 857, n_alt = 2
   Insn 30: point = 858, n_alt = 3
   Insn 29: point = 859, n_alt = 5
   Insn 28: point = 860, n_alt = 0
   Insn 27: point = 862, n_alt = 0
   Insn 26: point = 864, n_alt = 3
   Insn 22: point = 865, n_alt = 5
   Insn 21: point = 866, n_alt = 5
   Insn 20: point = 867, n_alt = -1
   Insn 18: point = 869, n_alt = 1
   Insn 16: point = 871, n_alt = 0
   Insn 17: point = 871, n_alt = 2
   Insn 15: point = 872, n_alt = 3
   Insn 14: point = 873, n_alt = 5
   Insn 13: point = 874, n_alt = 0
   Insn 12: point = 876, n_alt = 0
   Insn 11: point = 878, n_alt = 3
   Insn 7: point = 879, n_alt = 5
   Insn 6: point = 879, n_alt = 5
   Insn 5: point = 879, n_alt = 5
   Insn 4: point = 879, n_alt = 5
   Insn 3: point = 879, n_alt = 5
   Insn 2: point = 879, n_alt = 5
 r87: [875..876]
 r88: [866..867]
 r89: [865..879]
 r91: [861..862]
 r92: [852..853]
 r93: [851..879]
 r95: [847..848]
 r96: [838..839]
 r97: [837..879]
 r99: [833..834]
 r100: [824..825]
 r101: [823..879]
 r103: [819..820]
 r104: [810..811]
 r105: [809..879]
 r107: [773..774]
 r108: [797..801]
 r109: [781..790]
 r110: [786..787]
 r111: [783..785]
 r112: [781..782]
 r113: [769..770]
 r114: [766..768]
 r115: [754..765]
 r116: [761..762]
 r117: [759..760]
 r118: [756..758]
 r119: [754..755]
 r120: [738..749]
 r121: [745..746]
 r122: [743..744]
 r123: [740..742]
 r124: [738..739]
 r125: [736..737]
 r126: [734..735]
 r127: [728..729]
 r128: [726..727]
 r129: [723..725]
 r130: [721..722]
 r131: [711..720]
 r132: [716..717]
 r133: [713..715]
 r134: [711..712]
 r135: [699..710]
 r136: [706..707]
 r137: [704..705]
 r138: [701..703]
 r139: [699..700]
 r140: [693..694]
 r141: [690..692]
 r142: [688..689]
 r143: [678..687]
 r144: [683..684]
 r145: [680..682]
 r146: [678..679]
 r147: [666..677]
 r148: [673..674]
 r149: [671..672]
 r150: [668..670]
 r151: [666..667]
 r152: [660..661]
 r153: [657..659]
 r154: [645..656]
 r155: [652..653]
 r156: [650..651]
 r157: [647..649]
 r158: [643..646]
 r159: [621..641]
 r160: [635..637]
 r161: [627..634]
 r162: [629..630]
 r163: [627..628]
 r164: [625..626]
 r165: [623..624]
 r166: [621..622]
 r167: [606..620]
 r168: [614..616]
 r169: [612..613]
 r170: [610..611]
 r171: [608..609]
 r172: [606..607]
 r173: [598..600]
 r174: [596..597]
 r175: [594..595]
 r176: [579..591]
 r177: [585..587]
 r178: [583..584]
 r179: [581..582]
 r180: [579..580]
 r181: [568..573]
 r182: [568..569]
 r183: [562..563]
 r184: [560..561]
 r185: [557..559]
 r186: [555..556]
 r187: [545..554]
 r188: [550..551]
 r189: [547..549]
 r190: [545..546]
 r191: [533..544]
 r192: [540..541]
 r193: [538..539]
 r194: [535..537]
 r195: [533..534]
 r196: [527..528]
 r197: [524..526]
 r198: [522..523]
 r199: [512..521]
 r200: [517..518]
 r201: [514..516]
 r202: [512..513]
 r203: [500..511]
 r204: [507..508]
 r205: [505..506]
 r206: [502..504]
 r207: [500..501]
 r208: [494..495]
 r209: [491..493]
 r210: [479..490]
 r211: [486..487]
 r212: [484..485]
 r213: [481..483]
 r214: [477..480]
 r215: [455..475]
 r216: [469..471]
 r217: [461..468]
 r218: [463..464]
 r219: [461..462]
 r220: [459..460]
 r221: [457..458]
 r222: [455..456]
 r223: [440..454]
 r224: [448..450]
 r225: [446..447]
 r226: [444..445]
 r227: [442..443]
 r228: [440..441]
 r229: [432..434]
 r230: [430..431]
 r231: [428..429]
 r232: [413..425]
 r233: [419..421]
 r234: [417..418]
 r235: [415..416]
 r236: [413..414]
 r237: [402..407]
 r238: [402..403]
 r239: [396..397]
 r240: [394..395]
 r241: [391..393]
 r242: [388..390]
 r243: [382..383]
 r244: [379..381]
 r245: [367..378]
 r246: [374..375]
 r247: [372..373]
 r248: [369..371]
 r249: [367..368]
 r250: [365..366]
 r251: [362..364]
 r252: [334..361]
 r253: [357..358]
 r254: [355..356]
 r255: [352..354]
 r256: [350..351]
 r257: [340..349]
 r258: [345..346]
 r259: [342..344]
 r260: [340..341]
 r261: [338..339]
 r262: [336..337]
 r263: [332..335]
 r264: [325..326]
 r265: [323..324]
 r266: [320..322]
 r267: [310..319]
 r268: [315..316]
 r269: [312..314]
 r270: [310..311]
 r271: [308..309]
 r272: [306..307]
 r273: [280..305]
 r274: [301..302]
 r275: [298..300]
 r276: [286..297]
 r277: [293..294]
 r278: [291..292]
 r279: [288..290]
 r280: [286..287]
 r281: [284..285]
 r282: [282..283]
 r283: [280..281]
 r284: [266..273]
 r285: [268..269]
 r286: [266..267]
 r287: [264..265]
 r288: [262..263]
 r289: [259..261]
 r290: [245..252]
 r291: [247..248]
 r292: [245..246]
 r293: [234..235]
 r294: [232..233]
 r295: [229..231]
 r296: [226..228]
 r297: [220..221]
 r298: [217..219]
 r299: [205..216]
 r300: [212..213]
 r301: [210..211]
 r302: [207..209]
 r303: [205..206]
 r304: [203..204]
 r305: [200..202]
 r306: [172..199]
 r307: [195..196]
 r308: [193..194]
 r309: [190..192]
 r310: [188..189]
 r311: [178..187]
 r312: [183..184]
 r313: [180..182]
 r314: [178..179]
 r315: [176..177]
 r316: [174..175]
 r317: [170..173]
 r318: [163..164]
 r319: [161..162]
 r320: [158..160]
 r321: [148..157]
 r322: [153..154]
 r323: [150..152]
 r324: [148..149]
 r325: [146..147]
 r326: [144..145]
 r327: [118..143]
 r328: [139..140]
 r329: [136..138]
 r330: [124..135]
 r331: [131..132]
 r332: [129..130]
 r333: [126..128]
 r334: [124..125]
 r335: [122..123]
 r336: [120..121]
 r337: [118..119]
 r338: [104..111]
 r339: [106..107]
 r340: [104..105]
 r341: [102..103]
 r342: [100..101]
 r343: [97..99]
 r344: [83..90]
 r345: [85..86]
 r346: [83..84]
 r347: [67..71]
 r348: [67..68]
 r349: [65..66]
 r350: [44..57]
 r351: [48..52]
 r352: [48..49]
 r353: [46..47]
 r354: [44..45]
 r355: [35..39]
 r356: [35..36]
 r357: [26..30]
 r358: [26..27]
 r359: [12..16]
 r360: [12..13]
 r361: [10..11]
 r362: [8..9]
 r363: [6..7]
 r364: [4..5]
 r365: [870..872]
 r366: [868..869]
 r370: [856..858]
 r371: [854..855]
 r375: [842..844]
 r376: [840..841]
 r380: [828..830]
 r381: [826..827]
 r385: [814..816]
 r386: [812..813]
 r390: [61..62]
 r391: [21..23]
 r392: [8..19]
 r393: [2..3]
 r394: [0..1]
 r395: [877..878]
 r396: [873..874]
 r397: [870..871]
 r398: [863..864]
 r399: [859..860]
 r400: [856..857]
 r401: [849..850]
 r402: [845..846]
 r403: [842..843]
 r404: [835..836]
 r405: [831..832]
 r406: [828..829]
 r407: [821..822]
 r408: [817..818]
 r409: [814..815]
 r410: [807..808]
 r411: [805..806]
 r412: [775..776]
 r413: [802..804]
 r414: [802..803]
 r415: [797..798]
 r416: [795..796]
 r417: [793..794]
 r418: [791..792]
 r419: [788..789]
 r420: [783..784]
 r421: [777..778]
 r422: [779..780]
 r423: [771..772]
 r424: [766..767]
 r425: [763..764]
 r426: [756..757]
 r427: [752..753]
 r428: [750..751]
 r429: [747..748]
 r430: [740..741]
 r431: [732..733]
 r432: [730..731]
 r433: [723..724]
 r434: [718..719]
 r435: [713..714]
 r436: [708..709]
 r437: [701..702]
 r438: [697..698]
 r439: [695..696]
 r440: [690..691]
 r441: [685..686]
 r442: [680..681]
 r443: [675..676]
 r444: [668..669]
 r445: [664..665]
 r446: [662..663]
 r447: [657..658]
 r448: [654..655]
 r449: [647..648]
 r450: [638..640]
 r451: [638..639]
 r452: [635..636]
 r453: [631..633]
 r454: [631..632]
 r455: [617..619]
 r456: [617..618]
 r457: [614..615]
 r458: [604..605]
 r459: [601..603]
 r460: [601..602]
 r461: [598..599]
 r462: [588..590]
 r463: [588..589]
 r464: [585..586]
 r465: [577..578]
 r466: [574..576]
 r467: [574..575]
 r468: [570..572]
 r469: [570..571]
 r470: [566..567]
 r471: [564..565]
 r472: [557..558]
 r473: [552..553]
 r474: [547..548]
 r475: [542..543]
 r476: [535..536]
 r477: [531..532]
 r478: [529..530]
 r479: [524..525]
 r480: [519..520]
 r481: [514..515]
 r482: [509..510]
 r483: [502..503]
 r484: [498..499]
 r485: [496..497]
 r486: [491..492]
 r487: [488..489]
 r488: [481..482]
 r489: [472..474]
 r490: [472..473]
 r491: [469..470]
 r492: [465..467]
 r493: [465..466]
 r494: [451..453]
 r495: [451..452]
 r496: [448..449]
 r497: [438..439]
 r498: [435..437]
 r499: [435..436]
 r500: [432..433]
 r501: [422..424]
 r502: [422..423]
 r503: [419..420]
 r504: [411..412]
 r505: [408..410]
 r506: [408..409]
 r507: [404..406]
 r508: [404..405]
 r509: [400..401]
 r510: [398..399]
 r511: [391..392]
 r512: [386..387]
 r513: [388..389]
 r514: [384..385]
 r515: [379..380]
 r516: [376..377]
 r517: [369..370]
 r518: [362..363]
 r519: [359..360]
 r520: [352..353]
 r521: [347..348]
 r522: [342..343]
 r523: [329..330]
 r524: [327..328]
 r525: [320..321]
 r526: [317..318]
 r527: [312..313]
 r528: [303..304]
 r529: [298..299]
 r530: [295..296]
 r531: [288..289]
 r532: [278..279]
 r533: [275..277]
 r534: [270..272]
 r535: [270..271]
 r536: [257..258]
 r537: [259..260]
 r538: [254..256]
 r539: [249..251]
 r540: [249..250]
 r541: [243..244]
 r542: [238..239]
 r543: [240..242]
 r544: [240..241]
 r545: [236..237]
 r546: [229..230]
 r547: [224..225]
 r548: [226..227]
 r549: [222..223]
 r550: [217..218]
 r551: [214..215]
 r552: [207..208]
 r553: [200..201]
 r554: [197..198]
 r555: [190..191]
 r556: [185..186]
 r557: [180..181]
 r558: [167..168]
 r559: [165..166]
 r560: [158..159]
 r561: [155..156]
 r562: [150..151]
 r563: [141..142]
 r564: [136..137]
 r565: [133..134]
 r566: [126..127]
 r567: [116..117]
 r568: [113..115]
 r569: [108..110]
 r570: [108..109]
 r571: [95..96]
 r572: [97..98]
 r573: [92..94]
 r574: [87..89]
 r575: [87..88]
 r576: [81..82]
 r577: [76..77]
 r578: [78..80]
 r579: [78..79]
 r580: [74..75]
 r581: [69..70]
 r582: [63..64]
 r583: [58..60]
 r584: [58..59]
 r585: [55..56]
 r586: [50..51]
 r587: [42..43]
 r588: [40..41]
 r589: [37..38]
 r590: [33..34]
 r591: [31..32]
 r592: [28..29]
 r593: [24..25]
 r594: [17..18]
 r595: [14..15]
 r597: [799..800]
 r598: [642..644]
 r599: [592..593]
 r600: [476..478]
 r601: [426..427]
 r602: [331..333]
 r603: [274..276]
 r604: [253..255]
 r605: [169..171]
 r606: [112..114]
 r607: [91..93]
 r608: [72..73]
 r609: [53..54]
 r610: [20..22]
Compressing live ranges: from 880 to 734 - 83%
Ranges after the compression:
 r87: [730..731]
 r88: [722..723]
 r89: [722..733]
 r91: [718..719]
 r92: [710..711]
 r93: [710..733]
 r95: [706..707]
 r96: [698..699]
 r97: [698..733]
 r99: [694..695]
 r100: [686..687]
 r101: [686..733]
 r103: [682..683]
 r104: [674..675]
 r105: [674..733]
 r107: [642..643]
 r108: [664..667]
 r109: [650..657]
 r110: [654..655]
 r111: [652..653]
 r112: [650..651]
 r113: [638..639]
 r114: [636..637]
 r115: [626..635]
 r116: [632..633]
 r117: [630..631]
 r118: [628..629]
 r119: [626..627]
 r120: [612..621]
 r121: [618..619]
 r122: [616..617]
 r123: [614..615]
 r124: [612..613]
 r125: [610..611]
 r126: [608..609]
 r127: [602..603]
 r128: [600..601]
 r129: [598..599]
 r130: [596..597]
 r131: [588..595]
 r132: [592..593]
 r133: [590..591]
 r134: [588..589]
 r135: [578..587]
 r136: [584..585]
 r137: [582..583]
 r138: [580..581]
 r139: [578..579]
 r140: [572..573]
 r141: [570..571]
 r142: [568..569]
 r143: [560..567]
 r144: [564..565]
 r145: [562..563]
 r146: [560..561]
 r147: [550..559]
 r148: [556..557]
 r149: [554..555]
 r150: [552..553]
 r151: [550..551]
 r152: [544..545]
 r153: [542..543]
 r154: [532..541]
 r155: [538..539]
 r156: [536..537]
 r157: [534..535]
 r158: [530..533]
 r159: [514..529]
 r160: [526..527]
 r161: [520..525]
 r162: [522..523]
 r163: [520..521]
 r164: [518..519]
 r165: [516..517]
 r166: [514..515]
 r167: [502..513]
 r168: [510..511]
 r169: [508..509]
 r170: [506..507]
 r171: [504..505]
 r172: [502..503]
 r173: [496..497]
 r174: [494..495]
 r175: [492..493]
 r176: [480..489]
 r177: [486..487]
 r178: [484..485]
 r179: [482..483]
 r180: [480..481]
 r181: [472..475]
 r182: [472..473]
 r183: [466..467]
 r184: [464..465]
 r185: [462..463]
 r186: [460..461]
 r187: [452..459]
 r188: [456..457]
 r189: [454..455]
 r190: [452..453]
 r191: [442..451]
 r192: [448..449]
 r193: [446..447]
 r194: [444..445]
 r195: [442..443]
 r196: [436..437]
 r197: [434..435]
 r198: [432..433]
 r199: [424..431]
 r200: [428..429]
 r201: [426..427]
 r202: [424..425]
 r203: [414..423]
 r204: [420..421]
 r205: [418..419]
 r206: [416..417]
 r207: [414..415]
 r208: [408..409]
 r209: [406..407]
 r210: [396..405]
 r211: [402..403]
 r212: [400..401]
 r213: [398..399]
 r214: [394..397]
 r215: [378..393]
 r216: [390..391]
 r217: [384..389]
 r218: [386..387]
 r219: [384..385]
 r220: [382..383]
 r221: [380..381]
 r222: [378..379]
 r223: [366..377]
 r224: [374..375]
 r225: [372..373]
 r226: [370..371]
 r227: [368..369]
 r228: [366..367]
 r229: [360..361]
 r230: [358..359]
 r231: [356..357]
 r232: [344..353]
 r233: [350..351]
 r234: [348..349]
 r235: [346..347]
 r236: [344..345]
 r237: [336..339]
 r238: [336..337]
 r239: [330..331]
 r240: [328..329]
 r241: [326..327]
 r242: [324..325]
 r243: [318..319]
 r244: [316..317]
 r245: [306..315]
 r246: [312..313]
 r247: [310..311]
 r248: [308..309]
 r249: [306..307]
 r250: [304..305]
 r251: [302..303]
 r252: [278..301]
 r253: [298..299]
 r254: [296..297]
 r255: [294..295]
 r256: [292..293]
 r257: [284..291]
 r258: [288..289]
 r259: [286..287]
 r260: [284..285]
 r261: [282..283]
 r262: [280..281]
 r263: [276..279]
 r264: [270..271]
 r265: [268..269]
 r266: [266..267]
 r267: [258..265]
 r268: [262..263]
 r269: [260..261]
 r270: [258..259]
 r271: [256..257]
 r272: [254..255]
 r273: [232..253]
 r274: [250..251]
 r275: [248..249]
 r276: [238..247]
 r277: [244..245]
 r278: [242..243]
 r279: [240..241]
 r280: [238..239]
 r281: [236..237]
 r282: [234..235]
 r283: [232..233]
 r284: [222..227]
 r285: [224..225]
 r286: [222..223]
 r287: [220..221]
 r288: [218..219]
 r289: [216..217]
 r290: [206..211]
 r291: [208..209]
 r292: [206..207]
 r293: [196..197]
 r294: [194..195]
 r295: [192..193]
 r296: [190..191]
 r297: [184..185]
 r298: [182..183]
 r299: [172..181]
 r300: [178..179]
 r301: [176..177]
 r302: [174..175]
 r303: [172..173]
 r304: [170..171]
 r305: [168..169]
 r306: [144..167]
 r307: [164..165]
 r308: [162..163]
 r309: [160..161]
 r310: [158..159]
 r311: [150..157]
 r312: [154..155]
 r313: [152..153]
 r314: [150..151]
 r315: [148..149]
 r316: [146..147]
 r317: [142..145]
 r318: [136..137]
 r319: [134..135]
 r320: [132..133]
 r321: [124..131]
 r322: [128..129]
 r323: [126..127]
 r324: [124..125]
 r325: [122..123]
 r326: [120..121]
 r327: [98..119]
 r328: [116..117]
 r329: [114..115]
 r330: [104..113]
 r331: [110..111]
 r332: [108..109]
 r333: [106..107]
 r334: [104..105]
 r335: [102..103]
 r336: [100..101]
 r337: [98..99]
 r338: [88..93]
 r339: [90..91]
 r340: [88..89]
 r341: [86..87]
 r342: [84..85]
 r343: [82..83]
 r344: [72..77]
 r345: [74..75]
 r346: [72..73]
 r347: [58..61]
 r348: [58..59]
 r349: [56..57]
 r350: [38..49]
 r351: [42..45]
 r352: [42..43]
 r353: [40..41]
 r354: [38..39]
 r355: [30..33]
 r356: [30..31]
 r357: [22..25]
 r358: [22..23]
 r359: [12..15]
 r360: [12..13]
 r361: [10..11]
 r362: [8..9]
 r363: [6..7]
 r364: [4..5]
 r365: [726..727]
 r366: [724..725]
 r370: [714..715]
 r371: [712..713]
 r375: [702..703]
 r376: [700..701]
 r380: [690..691]
 r381: [688..689]
 r385: [678..679]
 r386: [676..677]
 r390: [52..53]
 r391: [18..19]
 r392: [8..17]
 r393: [2..3]
 r394: [0..1]
 r395: [732..733]
 r396: [728..729]
 r397: [726..727]
 r398: [720..721]
 r399: [716..717]
 r400: [714..715]
 r401: [708..709]
 r402: [704..705]
 r403: [702..703]
 r404: [696..697]
 r405: [692..693]
 r406: [690..691]
 r407: [684..685]
 r408: [680..681]
 r409: [678..679]
 r410: [672..673]
 r411: [670..671]
 r412: [644..645]
 r413: [668..669]
 r414: [668..669]
 r415: [664..665]
 r416: [662..663]
 r417: [660..661]
 r418: [658..659]
 r419: [656..657]
 r420: [652..653]
 r421: [646..647]
 r422: [648..649]
 r423: [640..641]
 r424: [636..637]
 r425: [634..635]
 r426: [628..629]
 r427: [624..625]
 r428: [622..623]
 r429: [620..621]
 r430: [614..615]
 r431: [606..607]
 r432: [604..605]
 r433: [598..599]
 r434: [594..595]
 r435: [590..591]
 r436: [586..587]
 r437: [580..581]
 r438: [576..577]
 r439: [574..575]
 r440: [570..571]
 r441: [566..567]
 r442: [562..563]
 r443: [558..559]
 r444: [552..553]
 r445: [548..549]
 r446: [546..547]
 r447: [542..543]
 r448: [540..541]
 r449: [534..535]
 r450: [528..529]
 r451: [528..529]
 r452: [526..527]
 r453: [524..525]
 r454: [524..525]
 r455: [512..513]
 r456: [512..513]
 r457: [510..511]
 r458: [500..501]
 r459: [498..499]
 r460: [498..499]
 r461: [496..497]
 r462: [488..489]
 r463: [488..489]
 r464: [486..487]
 r465: [478..479]
 r466: [476..477]
 r467: [476..477]
 r468: [474..475]
 r469: [474..475]
 r470: [470..471]
 r471: [468..469]
 r472: [462..463]
 r473: [458..459]
 r474: [454..455]
 r475: [450..451]
 r476: [444..445]
 r477: [440..441]
 r478: [438..439]
 r479: [434..435]
 r480: [430..431]
 r481: [426..427]
 r482: [422..423]
 r483: [416..417]
 r484: [412..413]
 r485: [410..411]
 r486: [406..407]
 r487: [404..405]
 r488: [398..399]
 r489: [392..393]
 r490: [392..393]
 r491: [390..391]
 r492: [388..389]
 r493: [388..389]
 r494: [376..377]
 r495: [376..377]
 r496: [374..375]
 r497: [364..365]
 r498: [362..363]
 r499: [362..363]
 r500: [360..361]
 r501: [352..353]
 r502: [352..353]
 r503: [350..351]
 r504: [342..343]
 r505: [340..341]
 r506: [340..341]
 r507: [338..339]
 r508: [338..339]
 r509: [334..335]
 r510: [332..333]
 r511: [326..327]
 r512: [322..323]
 r513: [324..325]
 r514: [320..321]
 r515: [316..317]
 r516: [314..315]
 r517: [308..309]
 r518: [302..303]
 r519: [300..301]
 r520: [294..295]
 r521: [290..291]
 r522: [286..287]
 r523: [274..275]
 r524: [272..273]
 r525: [266..267]
 r526: [264..265]
 r527: [260..261]
 r528: [252..253]
 r529: [248..249]
 r530: [246..247]
 r531: [240..241]
 r532: [230..231]
 r533: [228..229]
 r534: [226..227]
 r535: [226..227]
 r536: [214..215]
 r537: [216..217]
 r538: [212..213]
 r539: [210..211]
 r540: [210..211]
 r541: [204..205]
 r542: [200..201]
 r543: [202..203]
 r544: [202..203]
 r545: [198..199]
 r546: [192..193]
 r547: [188..189]
 r548: [190..191]
 r549: [186..187]
 r550: [182..183]
 r551: [180..181]
 r552: [174..175]
 r553: [168..169]
 r554: [166..167]
 r555: [160..161]
 r556: [156..157]
 r557: [152..153]
 r558: [140..141]
 r559: [138..139]
 r560: [132..133]
 r561: [130..131]
 r562: [126..127]
 r563: [118..119]
 r564: [114..115]
 r565: [112..113]
 r566: [106..107]
 r567: [96..97]
 r568: [94..95]
 r569: [92..93]
 r570: [92..93]
 r571: [80..81]
 r572: [82..83]
 r573: [78..79]
 r574: [76..77]
 r575: [76..77]
 r576: [70..71]
 r577: [66..67]
 r578: [68..69]
 r579: [68..69]
 r580: [64..65]
 r581: [60..61]
 r582: [54..55]
 r583: [50..51]
 r584: [50..51]
 r585: [48..49]
 r586: [44..45]
 r587: [36..37]
 r588: [34..35]
 r589: [32..33]
 r590: [28..29]
 r591: [26..27]
 r592: [24..25]
 r593: [20..21]
 r594: [16..17]
 r595: [14..15]
 r597: [666..667]
 r598: [530..531]
 r599: [490..491]
 r600: [394..395]
 r601: [354..355]
 r602: [276..277]
 r603: [228..229]
 r604: [212..213]
 r605: [142..143]
 r606: [94..95]
 r607: [78..79]
 r608: [62..63]
 r609: [46..47]
 r610: [18..19]

********** Assignment #1: **********

	 Assigning to 597 (cl=GENERAL_REGS, orig=415, freq=3, tfirst=597, tfreq=3)...
	   Assign 1 to reload r597 (freq=3)
	 Assigning to 598 (cl=SSE_REGS, orig=154, freq=3, tfirst=598, tfreq=3)...
	   Assign 21 to reload r598 (freq=3)
	 Assigning to 599 (cl=SSE_REGS, orig=175, freq=3, tfirst=599, tfreq=3)...
	   Assign 22 to reload r599 (freq=3)
	 Assigning to 600 (cl=SSE_REGS, orig=210, freq=3, tfirst=600, tfreq=3)...
	   Assign 21 to reload r600 (freq=3)
	 Assigning to 601 (cl=SSE_REGS, orig=231, freq=3, tfirst=601, tfreq=3)...
	   Assign 22 to reload r601 (freq=3)
	 Assigning to 602 (cl=SSE_REGS, orig=252, freq=3, tfirst=602, tfreq=3)...
	   Assign 22 to reload r602 (freq=3)
	 Assigning to 603 (cl=SSE_REGS, orig=533, freq=3, tfirst=603, tfreq=3)...
	   Assign 22 to reload r603 (freq=3)
	 Assigning to 604 (cl=SSE_REGS, orig=538, freq=3, tfirst=604, tfreq=3)...
	   Assign 22 to reload r604 (freq=3)
	 Assigning to 605 (cl=SSE_REGS, orig=306, freq=3, tfirst=605, tfreq=3)...
	   Assign 22 to reload r605 (freq=3)
	 Assigning to 606 (cl=SSE_REGS, orig=568, freq=3, tfirst=606, tfreq=3)...
	   Assign 22 to reload r606 (freq=3)
	 Assigning to 607 (cl=SSE_REGS, orig=573, freq=3, tfirst=607, tfreq=3)...
	   Assign 22 to reload r607 (freq=3)
	 Assigning to 608 (cl=SSE_REGS, orig=580, freq=3, tfirst=608, tfreq=3)...
	   Assign 22 to reload r608 (freq=3)
	 Assigning to 609 (cl=SSE_REGS, orig=585, freq=3, tfirst=609, tfreq=3)...
	   Assign 23 to reload r609 (freq=3)
	 Assigning to 610 (cl=SSE_REGS, orig=391, freq=3, tfirst=610, tfreq=3)...
	   Assign 22 to reload r610 (freq=3)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 89
  Slot 1 regnos (width = 0):	 93
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #22
Changing spilled pseudos to memory in insn #36
Changing spilled pseudos to memory in insn #37
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #2: **********

  BB 8
   Insn 600: point = 0, n_alt = -1
   Insn 599: point = 0, n_alt = -1
   Insn 595: point = 1, n_alt = -1
   Insn 592: point = 3, n_alt = 7
   Insn 591: point = 4, n_alt = 8
   Insn 590: point = 5, n_alt = 2
   Insn 589: point = 7, n_alt = 2
   Insn 588: point = 9, n_alt = -1
   Insn 587: point = 11, n_alt = 2
   Insn 586: point = 13, n_alt = 1
   Insn 585: point = 15, n_alt = 7
   Insn 584: point = 16, n_alt = 1
   Insn 583: point = 18, n_alt = 7
   Insn 641: point = 19, n_alt = -1
   Insn 582: point = 21, n_alt = 1
   Insn 640: point = 22, n_alt = -1
   Insn 581: point = 23, n_alt = 7
   Insn 580: point = 24, n_alt = 8
   Insn 579: point = 25, n_alt = 2
   Insn 578: point = 27, n_alt = 1
   Insn 577: point = 29, n_alt = 7
   Insn 576: point = 30, n_alt = 1
   Insn 575: point = 32, n_alt = 7
   Insn 574: point = 33, n_alt = 8
   Insn 573: point = 34, n_alt = 2
   Insn 572: point = 36, n_alt = 1
   Insn 571: point = 38, n_alt = 7
   Insn 570: point = 39, n_alt = 1
   Insn 569: point = 41, n_alt = 7
   Insn 568: point = 42, n_alt = 8
   Insn 567: point = 43, n_alt = 1
   Insn 566: point = 45, n_alt = -1
   Insn 565: point = 47, n_alt = 1
   Insn 564: point = 49, n_alt = 1
   Insn 563: point = 51, n_alt = 7
   Insn 639: point = 52, n_alt = -1
   Insn 562: point = 54, n_alt = 1
   Insn 638: point = 54, n_alt = -1
   Insn 561: point = 56, n_alt = 7
   Insn 560: point = 57, n_alt = 1
   Insn 559: point = 59, n_alt = 7
   Insn 558: point = 60, n_alt = 7
   Insn 557: point = 61, n_alt = 8
   Insn 556: point = 61, n_alt = 0
   Insn 555: point = 61, n_alt = 10
   Insn 554: point = 62, n_alt = 0
   Insn 553: point = 62, n_alt = 3
   Insn 552: point = 63, n_alt = 8
   Insn 551: point = 64, n_alt = 0
   Insn 550: point = 66, n_alt = 1
   Insn 549: point = 68, n_alt = 1
   Insn 548: point = 70, n_alt = 7
   Insn 637: point = 71, n_alt = -1
   Insn 547: point = 73, n_alt = 1
   Insn 636: point = 73, n_alt = -1
   Insn 546: point = 75, n_alt = 7
   Insn 545: point = 76, n_alt = 8
   Insn 544: point = 77, n_alt = 1
   Insn 543: point = 79, n_alt = 7
   Insn 542: point = 80, n_alt = 7
   Insn 541: point = 81, n_alt = 8
   Insn 540: point = 82, n_alt = 1
   Insn 539: point = 84, n_alt = 1
   Insn 538: point = 86, n_alt = 1
   Insn 537: point = 88, n_alt = 7
   Insn 536: point = 89, n_alt = 7
   Insn 635: point = 90, n_alt = -1
   Insn 535: point = 92, n_alt = 1
   Insn 634: point = 93, n_alt = -1
   Insn 534: point = 94, n_alt = 7
   Insn 533: point = 95, n_alt = 8
   Insn 532: point = 96, n_alt = 1
   Insn 531: point = 98, n_alt = 7
   Insn 530: point = 99, n_alt = 1
   Insn 529: point = 101, n_alt = -1
   Insn 528: point = 103, n_alt = 1
   Insn 527: point = 105, n_alt = 1
   Insn 526: point = 107, n_alt = 1
   Insn 525: point = 109, n_alt = 7
   Insn 524: point = 110, n_alt = 7
   Insn 633: point = 111, n_alt = -1
   Insn 523: point = 113, n_alt = 1
   Insn 632: point = 114, n_alt = -1
   Insn 522: point = 115, n_alt = 7
   Insn 521: point = 116, n_alt = 8
   Insn 520: point = 117, n_alt = 2
   Insn 519: point = 119, n_alt = 1
   Insn 518: point = 121, n_alt = -1
   Insn 517: point = 123, n_alt = 2
   Insn 516: point = 125, n_alt = 7
   Insn 515: point = 127, n_alt = 3
   Insn 514: point = 128, n_alt = 3
   Insn 513: point = 130, n_alt = 0
   Insn 512: point = 132, n_alt = 0
   Insn 511: point = 134, n_alt = 0
   Insn 510: point = 135, n_alt = 7
   Insn 509: point = 137, n_alt = 3
   Insn 508: point = 138, n_alt = 3
   Insn 507: point = 140, n_alt = 0
   Insn 506: point = 142, n_alt = 0
   Insn 505: point = 143, n_alt = 1
   Insn 504: point = 145, n_alt = -1
   Insn 503: point = 147, n_alt = 1
   Insn 502: point = 149, n_alt = 7
   Insn 501: point = 151, n_alt = 3
   Insn 500: point = 152, n_alt = 3
   Insn 499: point = 154, n_alt = 0
   Insn 498: point = 156, n_alt = 0
   Insn 497: point = 157, n_alt = 7
   Insn 496: point = 159, n_alt = 3
   Insn 495: point = 160, n_alt = 3
   Insn 494: point = 162, n_alt = 0
   Insn 493: point = 164, n_alt = 0
   Insn 492: point = 166, n_alt = 0
   Insn 491: point = 167, n_alt = 8
   Insn 631: point = 168, n_alt = -1
   Insn 490: point = 170, n_alt = 2
   Insn 630: point = 171, n_alt = -1
   Insn 489: point = 173, n_alt = 1
   Insn 488: point = 175, n_alt = -1
   Insn 487: point = 177, n_alt = 1
   Insn 486: point = 179, n_alt = 7
   Insn 485: point = 181, n_alt = 3
   Insn 484: point = 182, n_alt = 3
   Insn 483: point = 184, n_alt = 0
   Insn 482: point = 186, n_alt = 0
   Insn 481: point = 187, n_alt = 1
   Insn 480: point = 189, n_alt = 7
   Insn 479: point = 191, n_alt = 3
   Insn 478: point = 192, n_alt = 3
   Insn 477: point = 194, n_alt = 0
   Insn 476: point = 196, n_alt = 0
   Insn 475: point = 198, n_alt = 0
   Insn 474: point = 199, n_alt = 1
   Insn 473: point = 201, n_alt = 7
   Insn 472: point = 202, n_alt = -1
   Insn 471: point = 204, n_alt = 2
   Insn 470: point = 206, n_alt = 7
   Insn 469: point = 208, n_alt = 3
   Insn 468: point = 209, n_alt = 3
   Insn 467: point = 211, n_alt = 0
   Insn 466: point = 213, n_alt = 0
   Insn 465: point = 215, n_alt = 0
   Insn 464: point = 216, n_alt = 7
   Insn 463: point = 218, n_alt = 3
   Insn 462: point = 219, n_alt = 3
   Insn 461: point = 221, n_alt = 0
   Insn 460: point = 223, n_alt = 0
   Insn 459: point = 224, n_alt = 8
   Insn 458: point = 225, n_alt = 1
   Insn 457: point = 227, n_alt = 7
   Insn 456: point = 228, n_alt = 7
   Insn 455: point = 230, n_alt = 3
   Insn 454: point = 231, n_alt = 3
   Insn 453: point = 233, n_alt = 0
   Insn 452: point = 235, n_alt = 0
   Insn 451: point = 237, n_alt = 0
   Insn 450: point = 238, n_alt = 8
   Insn 449: point = 239, n_alt = 1
   Insn 448: point = 241, n_alt = 7
   Insn 447: point = 242, n_alt = 7
   Insn 446: point = 243, n_alt = 8
   Insn 445: point = 244, n_alt = 1
   Insn 444: point = 246, n_alt = 1
   Insn 443: point = 248, n_alt = 1
   Insn 442: point = 250, n_alt = 7
   Insn 441: point = 251, n_alt = 7
   Insn 629: point = 252, n_alt = -1
   Insn 440: point = 254, n_alt = 1
   Insn 628: point = 255, n_alt = -1
   Insn 439: point = 256, n_alt = 7
   Insn 438: point = 257, n_alt = 8
   Insn 437: point = 258, n_alt = 1
   Insn 436: point = 260, n_alt = 7
   Insn 435: point = 261, n_alt = 1
   Insn 434: point = 263, n_alt = -1
   Insn 433: point = 265, n_alt = 1
   Insn 432: point = 267, n_alt = 1
   Insn 431: point = 269, n_alt = 1
   Insn 430: point = 271, n_alt = 7
   Insn 429: point = 272, n_alt = 7
   Insn 627: point = 273, n_alt = -1
   Insn 428: point = 275, n_alt = 1
   Insn 626: point = 276, n_alt = -1
   Insn 427: point = 277, n_alt = 7
   Insn 426: point = 278, n_alt = 8
   Insn 425: point = 279, n_alt = 2
   Insn 424: point = 281, n_alt = 1
   Insn 423: point = 283, n_alt = -1
   Insn 422: point = 285, n_alt = 2
   Insn 421: point = 287, n_alt = 7
   Insn 420: point = 289, n_alt = 3
   Insn 419: point = 290, n_alt = 3
   Insn 418: point = 292, n_alt = 0
   Insn 417: point = 294, n_alt = 0
   Insn 416: point = 296, n_alt = 0
   Insn 415: point = 297, n_alt = 7
   Insn 414: point = 299, n_alt = 3
   Insn 413: point = 300, n_alt = 3
   Insn 412: point = 302, n_alt = 0
   Insn 411: point = 304, n_alt = 0
   Insn 410: point = 305, n_alt = 1
   Insn 409: point = 307, n_alt = -1
   Insn 408: point = 309, n_alt = 1
   Insn 407: point = 311, n_alt = 7
   Insn 406: point = 313, n_alt = 3
   Insn 405: point = 314, n_alt = 3
   Insn 404: point = 316, n_alt = 0
   Insn 403: point = 318, n_alt = 0
   Insn 402: point = 319, n_alt = 7
   Insn 401: point = 321, n_alt = 3
   Insn 400: point = 322, n_alt = 3
   Insn 399: point = 324, n_alt = 0
   Insn 398: point = 326, n_alt = 0
   Insn 397: point = 328, n_alt = 0
   Insn 396: point = 329, n_alt = 8
   Insn 625: point = 330, n_alt = -1
   Insn 395: point = 332, n_alt = 2
   Insn 624: point = 333, n_alt = -1
   Insn 394: point = 335, n_alt = 1
   Insn 393: point = 337, n_alt = -1
   Insn 392: point = 339, n_alt = 1
   Insn 391: point = 341, n_alt = 7
   Insn 390: point = 343, n_alt = 3
   Insn 389: point = 344, n_alt = 3
   Insn 388: point = 346, n_alt = 0
   Insn 387: point = 348, n_alt = 0
   Insn 386: point = 349, n_alt = 1
   Insn 385: point = 351, n_alt = 7
   Insn 384: point = 353, n_alt = 3
   Insn 383: point = 354, n_alt = 3
   Insn 382: point = 356, n_alt = 0
   Insn 381: point = 358, n_alt = 0
   Insn 380: point = 360, n_alt = 0
   Insn 379: point = 361, n_alt = 1
   Insn 378: point = 363, n_alt = 7
   Insn 377: point = 364, n_alt = -1
   Insn 376: point = 366, n_alt = 2
   Insn 375: point = 368, n_alt = 7
   Insn 374: point = 370, n_alt = 3
   Insn 373: point = 371, n_alt = 3
   Insn 372: point = 373, n_alt = 0
   Insn 371: point = 375, n_alt = 0
   Insn 370: point = 377, n_alt = 0
   Insn 369: point = 378, n_alt = 7
   Insn 368: point = 380, n_alt = 3
   Insn 367: point = 381, n_alt = 3
   Insn 366: point = 383, n_alt = 0
   Insn 365: point = 385, n_alt = 0
   Insn 364: point = 386, n_alt = 8
   Insn 363: point = 387, n_alt = 1
   Insn 362: point = 389, n_alt = 7
   Insn 361: point = 390, n_alt = 7
   Insn 360: point = 392, n_alt = 3
   Insn 359: point = 393, n_alt = 3
   Insn 358: point = 395, n_alt = 0
   Insn 357: point = 397, n_alt = 0
   Insn 356: point = 399, n_alt = 0
   Insn 355: point = 400, n_alt = 8
   Insn 354: point = 401, n_alt = 1
   Insn 353: point = 403, n_alt = 1
   Insn 352: point = 405, n_alt = 7
   Insn 351: point = 406, n_alt = 7
   Insn 350: point = 407, n_alt = 1
   Insn 349: point = 409, n_alt = 7
   Insn 348: point = 410, n_alt = 7
   Insn 347: point = 411, n_alt = 8
   Insn 346: point = 412, n_alt = 1
   Insn 345: point = 414, n_alt = 1
   Insn 344: point = 416, n_alt = -1
   Insn 343: point = 418, n_alt = 2
   Insn 342: point = 420, n_alt = 7
   Insn 341: point = 421, n_alt = 1
   Insn 340: point = 423, n_alt = 7
   Insn 339: point = 424, n_alt = 7
   Insn 623: point = 425, n_alt = -1
   Insn 338: point = 427, n_alt = 1
   Insn 622: point = 427, n_alt = -1
   Insn 337: point = 429, n_alt = -1
   Insn 336: point = 431, n_alt = 2
   Insn 335: point = 433, n_alt = 7
   Insn 334: point = 434, n_alt = 1
   Insn 333: point = 436, n_alt = 7
   Insn 332: point = 437, n_alt = 7
   Insn 331: point = 438, n_alt = 8
   Insn 330: point = 439, n_alt = 1
   Insn 329: point = 441, n_alt = 1
   Insn 328: point = 443, n_alt = 1
   Insn 327: point = 445, n_alt = -1
   Insn 326: point = 447, n_alt = 2
   Insn 325: point = 449, n_alt = 7
   Insn 324: point = 450, n_alt = 1
   Insn 323: point = 452, n_alt = 7
   Insn 322: point = 453, n_alt = 7
   Insn 321: point = 454, n_alt = 1
   Insn 320: point = 456, n_alt = 1
   Insn 319: point = 458, n_alt = -1
   Insn 318: point = 460, n_alt = 1
   Insn 317: point = 462, n_alt = 1
   Insn 316: point = 464, n_alt = 1
   Insn 315: point = 466, n_alt = 7
   Insn 314: point = 467, n_alt = 7
   Insn 313: point = 468, n_alt = 2
   Insn 312: point = 470, n_alt = 7
   Insn 311: point = 471, n_alt = 1
   Insn 310: point = 473, n_alt = 7
   Insn 309: point = 474, n_alt = 7
   Insn 621: point = 475, n_alt = -1
   Insn 308: point = 477, n_alt = 2
   Insn 620: point = 478, n_alt = -1
   Insn 307: point = 480, n_alt = 7
   Insn 306: point = 482, n_alt = 3
   Insn 305: point = 483, n_alt = 3
   Insn 304: point = 485, n_alt = 0
   Insn 303: point = 487, n_alt = 0
   Insn 302: point = 489, n_alt = 0
   Insn 301: point = 490, n_alt = 7
   Insn 300: point = 492, n_alt = 3
   Insn 299: point = 493, n_alt = 3
   Insn 298: point = 495, n_alt = 0
   Insn 297: point = 497, n_alt = 0
   Insn 296: point = 498, n_alt = 8
   Insn 295: point = 499, n_alt = 1
   Insn 294: point = 501, n_alt = 7
   Insn 293: point = 503, n_alt = 3
   Insn 292: point = 504, n_alt = 3
   Insn 291: point = 506, n_alt = 0
   Insn 290: point = 508, n_alt = 0
   Insn 289: point = 510, n_alt = 0
   Insn 288: point = 511, n_alt = 2
   Insn 287: point = 513, n_alt = 7
   Insn 286: point = 515, n_alt = 3
   Insn 285: point = 516, n_alt = 3
   Insn 284: point = 518, n_alt = 0
   Insn 283: point = 520, n_alt = 0
   Insn 282: point = 521, n_alt = 1
   Insn 281: point = 523, n_alt = 7
   Insn 280: point = 525, n_alt = 3
   Insn 279: point = 526, n_alt = 3
   Insn 278: point = 528, n_alt = 0
   Insn 277: point = 530, n_alt = 0
   Insn 276: point = 531, n_alt = 8
   Insn 275: point = 532, n_alt = 1
   Insn 274: point = 534, n_alt = 7
   Insn 273: point = 536, n_alt = 3
   Insn 272: point = 537, n_alt = 3
   Insn 271: point = 539, n_alt = 0
   Insn 270: point = 541, n_alt = 0
   Insn 269: point = 543, n_alt = 0
   Insn 268: point = 544, n_alt = 2
   Insn 267: point = 546, n_alt = 7
   Insn 266: point = 548, n_alt = 3
   Insn 265: point = 549, n_alt = 3
   Insn 264: point = 551, n_alt = 0
   Insn 263: point = 553, n_alt = 0
   Insn 262: point = 554, n_alt = 1
   Insn 261: point = 556, n_alt = 7
   Insn 260: point = 558, n_alt = 3
   Insn 259: point = 559, n_alt = 3
   Insn 258: point = 561, n_alt = 0
   Insn 257: point = 563, n_alt = 0
   Insn 256: point = 565, n_alt = 0
   Insn 255: point = 566, n_alt = 8
   Insn 254: point = 567, n_alt = 1
   Insn 253: point = 569, n_alt = 1
   Insn 252: point = 571, n_alt = 7
   Insn 251: point = 572, n_alt = 7
   Insn 250: point = 573, n_alt = 1
   Insn 249: point = 575, n_alt = 7
   Insn 248: point = 576, n_alt = 7
   Insn 247: point = 577, n_alt = 8
   Insn 246: point = 578, n_alt = 1
   Insn 245: point = 580, n_alt = 1
   Insn 244: point = 582, n_alt = -1
   Insn 243: point = 584, n_alt = 2
   Insn 242: point = 586, n_alt = 7
   Insn 241: point = 587, n_alt = 1
   Insn 240: point = 589, n_alt = 7
   Insn 239: point = 590, n_alt = 7
   Insn 619: point = 591, n_alt = -1
   Insn 238: point = 593, n_alt = 1
   Insn 618: point = 593, n_alt = -1
   Insn 237: point = 595, n_alt = -1
   Insn 236: point = 597, n_alt = 2
   Insn 235: point = 599, n_alt = 7
   Insn 234: point = 600, n_alt = 1
   Insn 233: point = 602, n_alt = 7
   Insn 232: point = 603, n_alt = 7
   Insn 231: point = 604, n_alt = 8
   Insn 230: point = 605, n_alt = 1
   Insn 229: point = 607, n_alt = 1
   Insn 228: point = 609, n_alt = 1
   Insn 227: point = 611, n_alt = -1
   Insn 226: point = 613, n_alt = 2
   Insn 225: point = 615, n_alt = 7
   Insn 224: point = 616, n_alt = 1
   Insn 223: point = 618, n_alt = 7
   Insn 222: point = 619, n_alt = 7
   Insn 221: point = 620, n_alt = 1
   Insn 220: point = 622, n_alt = 1
   Insn 219: point = 624, n_alt = -1
   Insn 218: point = 626, n_alt = 1
   Insn 217: point = 628, n_alt = 1
   Insn 216: point = 630, n_alt = 1
   Insn 215: point = 632, n_alt = 7
   Insn 214: point = 633, n_alt = 7
   Insn 213: point = 634, n_alt = 2
   Insn 212: point = 636, n_alt = 7
   Insn 211: point = 637, n_alt = 1
   Insn 210: point = 639, n_alt = 7
   Insn 209: point = 640, n_alt = 7
   Insn 617: point = 641, n_alt = -1
   Insn 208: point = 643, n_alt = 2
   Insn 616: point = 644, n_alt = -1
   Insn 207: point = 646, n_alt = 7
   Insn 206: point = 648, n_alt = 3
   Insn 205: point = 649, n_alt = 3
   Insn 204: point = 651, n_alt = 0
   Insn 203: point = 653, n_alt = 0
   Insn 202: point = 655, n_alt = 0
   Insn 201: point = 656, n_alt = 7
   Insn 200: point = 658, n_alt = 3
   Insn 199: point = 659, n_alt = 3
   Insn 198: point = 661, n_alt = 0
   Insn 197: point = 663, n_alt = 0
   Insn 196: point = 664, n_alt = 8
   Insn 195: point = 665, n_alt = 1
   Insn 194: point = 667, n_alt = 7
   Insn 193: point = 669, n_alt = 3
   Insn 192: point = 670, n_alt = 3
   Insn 191: point = 672, n_alt = 0
   Insn 190: point = 674, n_alt = 0
   Insn 189: point = 676, n_alt = 0
   Insn 188: point = 677, n_alt = 2
   Insn 187: point = 679, n_alt = 7
   Insn 186: point = 681, n_alt = 3
   Insn 185: point = 682, n_alt = 3
   Insn 184: point = 684, n_alt = 0
   Insn 183: point = 686, n_alt = 0
   Insn 182: point = 687, n_alt = 1
   Insn 181: point = 689, n_alt = 7
   Insn 180: point = 691, n_alt = 3
   Insn 179: point = 692, n_alt = 3
   Insn 178: point = 694, n_alt = 0
   Insn 177: point = 696, n_alt = 0
   Insn 176: point = 697, n_alt = 8
   Insn 175: point = 698, n_alt = 1
   Insn 174: point = 700, n_alt = 7
   Insn 173: point = 702, n_alt = 3
   Insn 172: point = 703, n_alt = 3
   Insn 171: point = 705, n_alt = 0
   Insn 170: point = 707, n_alt = 0
   Insn 169: point = 709, n_alt = 0
   Insn 168: point = 710, n_alt = 2
   Insn 167: point = 712, n_alt = 7
   Insn 166: point = 714, n_alt = 3
   Insn 165: point = 715, n_alt = 3
   Insn 164: point = 717, n_alt = 0
   Insn 163: point = 719, n_alt = 0
   Insn 162: point = 720, n_alt = 1
   Insn 161: point = 722, n_alt = 7
   Insn 160: point = 724, n_alt = 3
   Insn 159: point = 725, n_alt = 3
   Insn 158: point = 727, n_alt = 0
   Insn 157: point = 729, n_alt = 0
   Insn 156: point = 731, n_alt = 0
   Insn 155: point = 732, n_alt = 8
   Insn 154: point = 733, n_alt = 2
   Insn 153: point = 735, n_alt = -1
   Insn 152: point = 737, n_alt = 2
   Insn 151: point = 739, n_alt = 7
   Insn 150: point = 741, n_alt = 3
   Insn 149: point = 742, n_alt = 3
   Insn 148: point = 744, n_alt = 0
   Insn 147: point = 746, n_alt = 0
   Insn 146: point = 748, n_alt = 0
   Insn 145: point = 749, n_alt = 7
   Insn 144: point = 751, n_alt = 3
   Insn 143: point = 752, n_alt = 8
   Insn 142: point = 753, n_alt = 2
   Insn 141: point = 755, n_alt = 7
   Insn 140: point = 757, n_alt = 3
   Insn 139: point = 758, n_alt = 3
   Insn 138: point = 760, n_alt = 0
   Insn 137: point = 762, n_alt = 0
   Insn 136: point = 764, n_alt = 0
   Insn 135: point = 765, n_alt = 7
   Insn 134: point = 767, n_alt = 3
   Insn 133: point = 768, n_alt = 3
   Insn 132: point = 770, n_alt = 0
   Insn 131: point = 772, n_alt = 0
  BB 9
   Insn 612: point = 773, n_alt = -1
  BB 3
   Insn 94: point = 773, n_alt = -1
   Insn 93: point = 773, n_alt = 0
   Insn 92: point = 774, n_alt = 1
   Insn 91: point = 776, n_alt = 0
  BB 7
   Insn 608: point = 777, n_alt = -1
  BB 5
   Insn 606: point = 777, n_alt = -1
   Insn 117: point = 777, n_alt = 1
   Insn 116: point = 778, n_alt = 0
  BB 6
   Insn 123: point = 779, n_alt = 1
   Insn 122: point = 780, n_alt = 0
  BB 4
   Insn 111: point = 781, n_alt = -1
   Insn 110: point = 781, n_alt = 1
   Insn 109: point = 782, n_alt = 7
   Insn 108: point = 784, n_alt = 3
   Insn 107: point = 785, n_alt = 3
   Insn 106: point = 787, n_alt = 0
   Insn 105: point = 789, n_alt = 0
   Insn 104: point = 790, n_alt = 7
   Insn 103: point = 792, n_alt = 3
   Insn 102: point = 793, n_alt = 1
   Insn 101: point = 794, n_alt = 0
   Insn 100: point = 796, n_alt = 0
   Insn 615: point = 798, n_alt = -1
   Insn 99: point = 800, n_alt = 0
   Insn 614: point = 800, n_alt = -1
   Insn 98: point = 801, n_alt = 0
   Insn 97: point = 803, n_alt = 0
   Insn 96: point = 804, n_alt = 0
  BB 2
   Insn 89: point = 805, n_alt = 1
   Insn 88: point = 806, n_alt = 0
   Insn 87: point = 808, n_alt = 3
   Insn 86: point = 809, n_alt = 1
   Insn 82: point = 809, n_alt = 2
   Insn 81: point = 810, n_alt = 3
   Insn 80: point = 811, n_alt = -1
   Insn 78: point = 813, n_alt = 1
   Insn 76: point = 815, n_alt = 0
   Insn 77: point = 815, n_alt = 2
   Insn 75: point = 816, n_alt = 3
   Insn 74: point = 817, n_alt = 5
   Insn 73: point = 818, n_alt = 0
   Insn 72: point = 820, n_alt = 0
   Insn 71: point = 822, n_alt = 3
   Insn 67: point = 823, n_alt = 2
   Insn 66: point = 824, n_alt = 3
   Insn 65: point = 825, n_alt = -1
   Insn 63: point = 827, n_alt = 1
   Insn 61: point = 829, n_alt = 0
   Insn 62: point = 829, n_alt = 2
   Insn 60: point = 830, n_alt = 3
   Insn 59: point = 831, n_alt = 5
   Insn 58: point = 832, n_alt = 0
   Insn 57: point = 834, n_alt = 0
   Insn 56: point = 836, n_alt = 3
   Insn 52: point = 837, n_alt = 2
   Insn 51: point = 838, n_alt = 3
   Insn 50: point = 839, n_alt = -1
   Insn 48: point = 841, n_alt = 1
   Insn 46: point = 843, n_alt = 0
   Insn 47: point = 843, n_alt = 2
   Insn 45: point = 844, n_alt = 3
   Insn 44: point = 845, n_alt = 5
   Insn 43: point = 846, n_alt = 0
   Insn 42: point = 848, n_alt = 0
   Insn 41: point = 850, n_alt = 3
   Insn 37: point = 851, n_alt = 5
   Insn 36: point = 851, n_alt = 5
   Insn 35: point = 852, n_alt = -1
   Insn 33: point = 854, n_alt = 1
   Insn 31: point = 856, n_alt = 0
   Insn 32: point = 856, n_alt = 2
   Insn 30: point = 857, n_alt = 3
   Insn 29: point = 858, n_alt = 5
   Insn 28: point = 859, n_alt = 0
   Insn 27: point = 861, n_alt = 0
   Insn 26: point = 863, n_alt = 3
   Insn 22: point = 864, n_alt = 5
   Insn 21: point = 864, n_alt = 5
   Insn 20: point = 865, n_alt = -1
   Insn 18: point = 867, n_alt = 1
   Insn 16: point = 869, n_alt = 0
   Insn 17: point = 869, n_alt = 2
   Insn 15: point = 870, n_alt = 3
   Insn 14: point = 871, n_alt = 5
   Insn 13: point = 872, n_alt = 0
   Insn 12: point = 874, n_alt = 0
   Insn 11: point = 876, n_alt = 3
   Insn 7: point = 877, n_alt = 5
   Insn 6: point = 877, n_alt = 5
   Insn 5: point = 877, n_alt = 5
   Insn 4: point = 877, n_alt = 5
   Insn 3: point = 877, n_alt = 5
   Insn 2: point = 877, n_alt = 5
 r87: [873..874]
 r88: [864..865]
 r91: [860..861]
 r92: [851..852]
 r95: [847..848]
 r96: [838..839]
 r97: [837..877]
 r99: [833..834]
 r100: [824..825]
 r101: [823..877]
 r103: [819..820]
 r104: [810..811]
 r105: [809..877]
 r107: [773..774]
 r108: [797..801]
 r109: [781..790]
 r110: [786..787]
 r111: [783..785]
 r112: [781..782]
 r113: [769..770]
 r114: [766..768]
 r115: [754..765]
 r116: [761..762]
 r117: [759..760]
 r118: [756..758]
 r119: [754..755]
 r120: [738..749]
 r121: [745..746]
 r122: [743..744]
 r123: [740..742]
 r124: [738..739]
 r125: [736..737]
 r126: [734..735]
 r127: [728..729]
 r128: [726..727]
 r129: [723..725]
 r130: [721..722]
 r131: [711..720]
 r132: [716..717]
 r133: [713..715]
 r134: [711..712]
 r135: [699..710]
 r136: [706..707]
 r137: [704..705]
 r138: [701..703]
 r139: [699..700]
 r140: [693..694]
 r141: [690..692]
 r142: [688..689]
 r143: [678..687]
 r144: [683..684]
 r145: [680..682]
 r146: [678..679]
 r147: [666..677]
 r148: [673..674]
 r149: [671..672]
 r150: [668..670]
 r151: [666..667]
 r152: [660..661]
 r153: [657..659]
 r154: [645..656]
 r155: [652..653]
 r156: [650..651]
 r157: [647..649]
 r158: [643..646]
 r159: [621..641]
 r160: [635..637]
 r161: [627..634]
 r162: [629..630]
 r163: [627..628]
 r164: [625..626]
 r165: [623..624]
 r166: [621..622]
 r167: [606..620]
 r168: [614..616]
 r169: [612..613]
 r170: [610..611]
 r171: [608..609]
 r172: [606..607]
 r173: [598..600]
 r174: [596..597]
 r175: [594..595]
 r176: [579..591]
 r177: [585..587]
 r178: [583..584]
 r179: [581..582]
 r180: [579..580]
 r181: [568..573]
 r182: [568..569]
 r183: [562..563]
 r184: [560..561]
 r185: [557..559]
 r186: [555..556]
 r187: [545..554]
 r188: [550..551]
 r189: [547..549]
 r190: [545..546]
 r191: [533..544]
 r192: [540..541]
 r193: [538..539]
 r194: [535..537]
 r195: [533..534]
 r196: [527..528]
 r197: [524..526]
 r198: [522..523]
 r199: [512..521]
 r200: [517..518]
 r201: [514..516]
 r202: [512..513]
 r203: [500..511]
 r204: [507..508]
 r205: [505..506]
 r206: [502..504]
 r207: [500..501]
 r208: [494..495]
 r209: [491..493]
 r210: [479..490]
 r211: [486..487]
 r212: [484..485]
 r213: [481..483]
 r214: [477..480]
 r215: [455..475]
 r216: [469..471]
 r217: [461..468]
 r218: [463..464]
 r219: [461..462]
 r220: [459..460]
 r221: [457..458]
 r222: [455..456]
 r223: [440..454]
 r224: [448..450]
 r225: [446..447]
 r226: [444..445]
 r227: [442..443]
 r228: [440..441]
 r229: [432..434]
 r230: [430..431]
 r231: [428..429]
 r232: [413..425]
 r233: [419..421]
 r234: [417..418]
 r235: [415..416]
 r236: [413..414]
 r237: [402..407]
 r238: [402..403]
 r239: [396..397]
 r240: [394..395]
 r241: [391..393]
 r242: [388..390]
 r243: [382..383]
 r244: [379..381]
 r245: [367..378]
 r246: [374..375]
 r247: [372..373]
 r248: [369..371]
 r249: [367..368]
 r250: [365..366]
 r251: [362..364]
 r252: [334..361]
 r253: [357..358]
 r254: [355..356]
 r255: [352..354]
 r256: [350..351]
 r257: [340..349]
 r258: [345..346]
 r259: [342..344]
 r260: [340..341]
 r261: [338..339]
 r262: [336..337]
 r263: [332..335]
 r264: [325..326]
 r265: [323..324]
 r266: [320..322]
 r267: [310..319]
 r268: [315..316]
 r269: [312..314]
 r270: [310..311]
 r271: [308..309]
 r272: [306..307]
 r273: [280..305]
 r274: [301..302]
 r275: [298..300]
 r276: [286..297]
 r277: [293..294]
 r278: [291..292]
 r279: [288..290]
 r280: [286..287]
 r281: [284..285]
 r282: [282..283]
 r283: [280..281]
 r284: [266..273]
 r285: [268..269]
 r286: [266..267]
 r287: [264..265]
 r288: [262..263]
 r289: [259..261]
 r290: [245..252]
 r291: [247..248]
 r292: [245..246]
 r293: [234..235]
 r294: [232..233]
 r295: [229..231]
 r296: [226..228]
 r297: [220..221]
 r298: [217..219]
 r299: [205..216]
 r300: [212..213]
 r301: [210..211]
 r302: [207..209]
 r303: [205..206]
 r304: [203..204]
 r305: [200..202]
 r306: [172..199]
 r307: [195..196]
 r308: [193..194]
 r309: [190..192]
 r310: [188..189]
 r311: [178..187]
 r312: [183..184]
 r313: [180..182]
 r314: [178..179]
 r315: [176..177]
 r316: [174..175]
 r317: [170..173]
 r318: [163..164]
 r319: [161..162]
 r320: [158..160]
 r321: [148..157]
 r322: [153..154]
 r323: [150..152]
 r324: [148..149]
 r325: [146..147]
 r326: [144..145]
 r327: [118..143]
 r328: [139..140]
 r329: [136..138]
 r330: [124..135]
 r331: [131..132]
 r332: [129..130]
 r333: [126..128]
 r334: [124..125]
 r335: [122..123]
 r336: [120..121]
 r337: [118..119]
 r338: [104..111]
 r339: [106..107]
 r340: [104..105]
 r341: [102..103]
 r342: [100..101]
 r343: [97..99]
 r344: [83..90]
 r345: [85..86]
 r346: [83..84]
 r347: [67..71]
 r348: [67..68]
 r349: [65..66]
 r350: [44..57]
 r351: [48..52]
 r352: [48..49]
 r353: [46..47]
 r354: [44..45]
 r355: [35..39]
 r356: [35..36]
 r357: [26..30]
 r358: [26..27]
 r359: [12..16]
 r360: [12..13]
 r361: [10..11]
 r362: [8..9]
 r363: [6..7]
 r364: [4..5]
 r365: [868..870]
 r366: [866..867]
 r370: [855..857]
 r371: [853..854]
 r375: [842..844]
 r376: [840..841]
 r380: [828..830]
 r381: [826..827]
 r385: [814..816]
 r386: [812..813]
 r390: [61..62]
 r391: [21..23]
 r392: [8..19]
 r393: [2..3]
 r394: [0..1]
 r395: [875..876]
 r396: [871..872]
 r397: [868..869]
 r398: [862..863]
 r399: [858..859]
 r400: [855..856]
 r401: [849..850]
 r402: [845..846]
 r403: [842..843]
 r404: [835..836]
 r405: [831..832]
 r406: [828..829]
 r407: [821..822]
 r408: [817..818]
 r409: [814..815]
 r410: [807..808]
 r411: [805..806]
 r412: [775..776]
 r413: [802..804]
 r414: [802..803]
 r415: [797..798]
 r416: [795..796]
 r417: [793..794]
 r418: [791..792]
 r419: [788..789]
 r420: [783..784]
 r421: [777..778]
 r422: [779..780]
 r423: [771..772]
 r424: [766..767]
 r425: [763..764]
 r426: [756..757]
 r427: [752..753]
 r428: [750..751]
 r429: [747..748]
 r430: [740..741]
 r431: [732..733]
 r432: [730..731]
 r433: [723..724]
 r434: [718..719]
 r435: [713..714]
 r436: [708..709]
 r437: [701..702]
 r438: [697..698]
 r439: [695..696]
 r440: [690..691]
 r441: [685..686]
 r442: [680..681]
 r443: [675..676]
 r444: [668..669]
 r445: [664..665]
 r446: [662..663]
 r447: [657..658]
 r448: [654..655]
 r449: [647..648]
 r450: [638..640]
 r451: [638..639]
 r452: [635..636]
 r453: [631..633]
 r454: [631..632]
 r455: [617..619]
 r456: [617..618]
 r457: [614..615]
 r458: [604..605]
 r459: [601..603]
 r460: [601..602]
 r461: [598..599]
 r462: [588..590]
 r463: [588..589]
 r464: [585..586]
 r465: [577..578]
 r466: [574..576]
 r467: [574..575]
 r468: [570..572]
 r469: [570..571]
 r470: [566..567]
 r471: [564..565]
 r472: [557..558]
 r473: [552..553]
 r474: [547..548]
 r475: [542..543]
 r476: [535..536]
 r477: [531..532]
 r478: [529..530]
 r479: [524..525]
 r480: [519..520]
 r481: [514..515]
 r482: [509..510]
 r483: [502..503]
 r484: [498..499]
 r485: [496..497]
 r486: [491..492]
 r487: [488..489]
 r488: [481..482]
 r489: [472..474]
 r490: [472..473]
 r491: [469..470]
 r492: [465..467]
 r493: [465..466]
 r494: [451..453]
 r495: [451..452]
 r496: [448..449]
 r497: [438..439]
 r498: [435..437]
 r499: [435..436]
 r500: [432..433]
 r501: [422..424]
 r502: [422..423]
 r503: [419..420]
 r504: [411..412]
 r505: [408..410]
 r506: [408..409]
 r507: [404..406]
 r508: [404..405]
 r509: [400..401]
 r510: [398..399]
 r511: [391..392]
 r512: [386..387]
 r513: [388..389]
 r514: [384..385]
 r515: [379..380]
 r516: [376..377]
 r517: [369..370]
 r518: [362..363]
 r519: [359..360]
 r520: [352..353]
 r521: [347..348]
 r522: [342..343]
 r523: [329..330]
 r524: [327..328]
 r525: [320..321]
 r526: [317..318]
 r527: [312..313]
 r528: [303..304]
 r529: [298..299]
 r530: [295..296]
 r531: [288..289]
 r532: [278..279]
 r533: [275..277]
 r534: [270..272]
 r535: [270..271]
 r536: [257..258]
 r537: [259..260]
 r538: [254..256]
 r539: [249..251]
 r540: [249..250]
 r541: [243..244]
 r542: [238..239]
 r543: [240..242]
 r544: [240..241]
 r545: [236..237]
 r546: [229..230]
 r547: [224..225]
 r548: [226..227]
 r549: [222..223]
 r550: [217..218]
 r551: [214..215]
 r552: [207..208]
 r553: [200..201]
 r554: [197..198]
 r555: [190..191]
 r556: [185..186]
 r557: [180..181]
 r558: [167..168]
 r559: [165..166]
 r560: [158..159]
 r561: [155..156]
 r562: [150..151]
 r563: [141..142]
 r564: [136..137]
 r565: [133..134]
 r566: [126..127]
 r567: [116..117]
 r568: [113..115]
 r569: [108..110]
 r570: [108..109]
 r571: [95..96]
 r572: [97..98]
 r573: [92..94]
 r574: [87..89]
 r575: [87..88]
 r576: [81..82]
 r577: [76..77]
 r578: [78..80]
 r579: [78..79]
 r580: [74..75]
 r581: [69..70]
 r582: [63..64]
 r583: [58..60]
 r584: [58..59]
 r585: [55..56]
 r586: [50..51]
 r587: [42..43]
 r588: [40..41]
 r589: [37..38]
 r590: [33..34]
 r591: [31..32]
 r592: [28..29]
 r593: [24..25]
 r594: [17..18]
 r595: [14..15]
 r597: [799..800]
 r598: [642..644]
 r599: [592..593]
 r600: [476..478]
 r601: [426..427]
 r602: [331..333]
 r603: [274..276]
 r604: [253..255]
 r605: [169..171]
 r606: [112..114]
 r607: [91..93]
 r608: [72..73]
 r609: [53..54]
 r610: [20..22]
Compressing live ranges: from 878 to 734 - 83%
Ranges after the compression:
 r87: [730..731]
 r88: [722..723]
 r91: [718..719]
 r92: [710..711]
 r95: [706..707]
 r96: [698..699]
 r97: [698..733]
 r99: [694..695]
 r100: [686..687]
 r101: [686..733]
 r103: [682..683]
 r104: [674..675]
 r105: [674..733]
 r107: [642..643]
 r108: [664..667]
 r109: [650..657]
 r110: [654..655]
 r111: [652..653]
 r112: [650..651]
 r113: [638..639]
 r114: [636..637]
 r115: [626..635]
 r116: [632..633]
 r117: [630..631]
 r118: [628..629]
 r119: [626..627]
 r120: [612..621]
 r121: [618..619]
 r122: [616..617]
 r123: [614..615]
 r124: [612..613]
 r125: [610..611]
 r126: [608..609]
 r127: [602..603]
 r128: [600..601]
 r129: [598..599]
 r130: [596..597]
 r131: [588..595]
 r132: [592..593]
 r133: [590..591]
 r134: [588..589]
 r135: [578..587]
 r136: [584..585]
 r137: [582..583]
 r138: [580..581]
 r139: [578..579]
 r140: [572..573]
 r141: [570..571]
 r142: [568..569]
 r143: [560..567]
 r144: [564..565]
 r145: [562..563]
 r146: [560..561]
 r147: [550..559]
 r148: [556..557]
 r149: [554..555]
 r150: [552..553]
 r151: [550..551]
 r152: [544..545]
 r153: [542..543]
 r154: [532..541]
 r155: [538..539]
 r156: [536..537]
 r157: [534..535]
 r158: [530..533]
 r159: [514..529]
 r160: [526..527]
 r161: [520..525]
 r162: [522..523]
 r163: [520..521]
 r164: [518..519]
 r165: [516..517]
 r166: [514..515]
 r167: [502..513]
 r168: [510..511]
 r169: [508..509]
 r170: [506..507]
 r171: [504..505]
 r172: [502..503]
 r173: [496..497]
 r174: [494..495]
 r175: [492..493]
 r176: [480..489]
 r177: [486..487]
 r178: [484..485]
 r179: [482..483]
 r180: [480..481]
 r181: [472..475]
 r182: [472..473]
 r183: [466..467]
 r184: [464..465]
 r185: [462..463]
 r186: [460..461]
 r187: [452..459]
 r188: [456..457]
 r189: [454..455]
 r190: [452..453]
 r191: [442..451]
 r192: [448..449]
 r193: [446..447]
 r194: [444..445]
 r195: [442..443]
 r196: [436..437]
 r197: [434..435]
 r198: [432..433]
 r199: [424..431]
 r200: [428..429]
 r201: [426..427]
 r202: [424..425]
 r203: [414..423]
 r204: [420..421]
 r205: [418..419]
 r206: [416..417]
 r207: [414..415]
 r208: [408..409]
 r209: [406..407]
 r210: [396..405]
 r211: [402..403]
 r212: [400..401]
 r213: [398..399]
 r214: [394..397]
 r215: [378..393]
 r216: [390..391]
 r217: [384..389]
 r218: [386..387]
 r219: [384..385]
 r220: [382..383]
 r221: [380..381]
 r222: [378..379]
 r223: [366..377]
 r224: [374..375]
 r225: [372..373]
 r226: [370..371]
 r227: [368..369]
 r228: [366..367]
 r229: [360..361]
 r230: [358..359]
 r231: [356..357]
 r232: [344..353]
 r233: [350..351]
 r234: [348..349]
 r235: [346..347]
 r236: [344..345]
 r237: [336..339]
 r238: [336..337]
 r239: [330..331]
 r240: [328..329]
 r241: [326..327]
 r242: [324..325]
 r243: [318..319]
 r244: [316..317]
 r245: [306..315]
 r246: [312..313]
 r247: [310..311]
 r248: [308..309]
 r249: [306..307]
 r250: [304..305]
 r251: [302..303]
 r252: [278..301]
 r253: [298..299]
 r254: [296..297]
 r255: [294..295]
 r256: [292..293]
 r257: [284..291]
 r258: [288..289]
 r259: [286..287]
 r260: [284..285]
 r261: [282..283]
 r262: [280..281]
 r263: [276..279]
 r264: [270..271]
 r265: [268..269]
 r266: [266..267]
 r267: [258..265]
 r268: [262..263]
 r269: [260..261]
 r270: [258..259]
 r271: [256..257]
 r272: [254..255]
 r273: [232..253]
 r274: [250..251]
 r275: [248..249]
 r276: [238..247]
 r277: [244..245]
 r278: [242..243]
 r279: [240..241]
 r280: [238..239]
 r281: [236..237]
 r282: [234..235]
 r283: [232..233]
 r284: [222..227]
 r285: [224..225]
 r286: [222..223]
 r287: [220..221]
 r288: [218..219]
 r289: [216..217]
 r290: [206..211]
 r291: [208..209]
 r292: [206..207]
 r293: [196..197]
 r294: [194..195]
 r295: [192..193]
 r296: [190..191]
 r297: [184..185]
 r298: [182..183]
 r299: [172..181]
 r300: [178..179]
 r301: [176..177]
 r302: [174..175]
 r303: [172..173]
 r304: [170..171]
 r305: [168..169]
 r306: [144..167]
 r307: [164..165]
 r308: [162..163]
 r309: [160..161]
 r310: [158..159]
 r311: [150..157]
 r312: [154..155]
 r313: [152..153]
 r314: [150..151]
 r315: [148..149]
 r316: [146..147]
 r317: [142..145]
 r318: [136..137]
 r319: [134..135]
 r320: [132..133]
 r321: [124..131]
 r322: [128..129]
 r323: [126..127]
 r324: [124..125]
 r325: [122..123]
 r326: [120..121]
 r327: [98..119]
 r328: [116..117]
 r329: [114..115]
 r330: [104..113]
 r331: [110..111]
 r332: [108..109]
 r333: [106..107]
 r334: [104..105]
 r335: [102..103]
 r336: [100..101]
 r337: [98..99]
 r338: [88..93]
 r339: [90..91]
 r340: [88..89]
 r341: [86..87]
 r342: [84..85]
 r343: [82..83]
 r344: [72..77]
 r345: [74..75]
 r346: [72..73]
 r347: [58..61]
 r348: [58..59]
 r349: [56..57]
 r350: [38..49]
 r351: [42..45]
 r352: [42..43]
 r353: [40..41]
 r354: [38..39]
 r355: [30..33]
 r356: [30..31]
 r357: [22..25]
 r358: [22..23]
 r359: [12..15]
 r360: [12..13]
 r361: [10..11]
 r362: [8..9]
 r363: [6..7]
 r364: [4..5]
 r365: [726..727]
 r366: [724..725]
 r370: [714..715]
 r371: [712..713]
 r375: [702..703]
 r376: [700..701]
 r380: [690..691]
 r381: [688..689]
 r385: [678..679]
 r386: [676..677]
 r390: [52..53]
 r391: [18..19]
 r392: [8..17]
 r393: [2..3]
 r394: [0..1]
 r395: [732..733]
 r396: [728..729]
 r397: [726..727]
 r398: [720..721]
 r399: [716..717]
 r400: [714..715]
 r401: [708..709]
 r402: [704..705]
 r403: [702..703]
 r404: [696..697]
 r405: [692..693]
 r406: [690..691]
 r407: [684..685]
 r408: [680..681]
 r409: [678..679]
 r410: [672..673]
 r411: [670..671]
 r412: [644..645]
 r413: [668..669]
 r414: [668..669]
 r415: [664..665]
 r416: [662..663]
 r417: [660..661]
 r418: [658..659]
 r419: [656..657]
 r420: [652..653]
 r421: [646..647]
 r422: [648..649]
 r423: [640..641]
 r424: [636..637]
 r425: [634..635]
 r426: [628..629]
 r427: [624..625]
 r428: [622..623]
 r429: [620..621]
 r430: [614..615]
 r431: [606..607]
 r432: [604..605]
 r433: [598..599]
 r434: [594..595]
 r435: [590..591]
 r436: [586..587]
 r437: [580..581]
 r438: [576..577]
 r439: [574..575]
 r440: [570..571]
 r441: [566..567]
 r442: [562..563]
 r443: [558..559]
 r444: [552..553]
 r445: [548..549]
 r446: [546..547]
 r447: [542..543]
 r448: [540..541]
 r449: [534..535]
 r450: [528..529]
 r451: [528..529]
 r452: [526..527]
 r453: [524..525]
 r454: [524..525]
 r455: [512..513]
 r456: [512..513]
 r457: [510..511]
 r458: [500..501]
 r459: [498..499]
 r460: [498..499]
 r461: [496..497]
 r462: [488..489]
 r463: [488..489]
 r464: [486..487]
 r465: [478..479]
 r466: [476..477]
 r467: [476..477]
 r468: [474..475]
 r469: [474..475]
 r470: [470..471]
 r471: [468..469]
 r472: [462..463]
 r473: [458..459]
 r474: [454..455]
 r475: [450..451]
 r476: [444..445]
 r477: [440..441]
 r478: [438..439]
 r479: [434..435]
 r480: [430..431]
 r481: [426..427]
 r482: [422..423]
 r483: [416..417]
 r484: [412..413]
 r485: [410..411]
 r486: [406..407]
 r487: [404..405]
 r488: [398..399]
 r489: [392..393]
 r490: [392..393]
 r491: [390..391]
 r492: [388..389]
 r493: [388..389]
 r494: [376..377]
 r495: [376..377]
 r496: [374..375]
 r497: [364..365]
 r498: [362..363]
 r499: [362..363]
 r500: [360..361]
 r501: [352..353]
 r502: [352..353]
 r503: [350..351]
 r504: [342..343]
 r505: [340..341]
 r506: [340..341]
 r507: [338..339]
 r508: [338..339]
 r509: [334..335]
 r510: [332..333]
 r511: [326..327]
 r512: [322..323]
 r513: [324..325]
 r514: [320..321]
 r515: [316..317]
 r516: [314..315]
 r517: [308..309]
 r518: [302..303]
 r519: [300..301]
 r520: [294..295]
 r521: [290..291]
 r522: [286..287]
 r523: [274..275]
 r524: [272..273]
 r525: [266..267]
 r526: [264..265]
 r527: [260..261]
 r528: [252..253]
 r529: [248..249]
 r530: [246..247]
 r531: [240..241]
 r532: [230..231]
 r533: [228..229]
 r534: [226..227]
 r535: [226..227]
 r536: [214..215]
 r537: [216..217]
 r538: [212..213]
 r539: [210..211]
 r540: [210..211]
 r541: [204..205]
 r542: [200..201]
 r543: [202..203]
 r544: [202..203]
 r545: [198..199]
 r546: [192..193]
 r547: [188..189]
 r548: [190..191]
 r549: [186..187]
 r550: [182..183]
 r551: [180..181]
 r552: [174..175]
 r553: [168..169]
 r554: [166..167]
 r555: [160..161]
 r556: [156..157]
 r557: [152..153]
 r558: [140..141]
 r559: [138..139]
 r560: [132..133]
 r561: [130..131]
 r562: [126..127]
 r563: [118..119]
 r564: [114..115]
 r565: [112..113]
 r566: [106..107]
 r567: [96..97]
 r568: [94..95]
 r569: [92..93]
 r570: [92..93]
 r571: [80..81]
 r572: [82..83]
 r573: [78..79]
 r574: [76..77]
 r575: [76..77]
 r576: [70..71]
 r577: [66..67]
 r578: [68..69]
 r579: [68..69]
 r580: [64..65]
 r581: [60..61]
 r582: [54..55]
 r583: [50..51]
 r584: [50..51]
 r585: [48..49]
 r586: [44..45]
 r587: [36..37]
 r588: [34..35]
 r589: [32..33]
 r590: [28..29]
 r591: [26..27]
 r592: [24..25]
 r593: [20..21]
 r594: [16..17]
 r595: [14..15]
 r597: [666..667]
 r598: [530..531]
 r599: [490..491]
 r600: [394..395]
 r601: [354..355]
 r602: [276..277]
 r603: [228..229]
 r604: [212..213]
 r605: [142..143]
 r606: [94..95]
 r607: [78..79]
 r608: [62..63]
 r609: [46..47]
 r610: [18..19]

********** Assignment #2: **********


********** Undoing inheritance #2: **********


********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=288, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=240, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 66
changing reg in insn 72
changing reg in insn 73
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 81
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 104
changing reg in insn 110
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 142
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 145
changing reg in insn 152
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 168
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 175
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 188
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 195
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 221
changing reg in insn 211
changing reg in insn 213
changing reg in insn 213
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 224
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 234
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 241
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 250
changing reg in insn 253
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 268
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 275
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 288
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 287
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 295
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 294
changing reg in insn 294
changing reg in insn 295
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 301
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 321
changing reg in insn 311
changing reg in insn 313
changing reg in insn 313
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 321
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 334
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 341
changing reg in insn 343
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 350
changing reg in insn 353
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 361
changing reg in insn 361
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 369
changing reg in insn 369
changing reg in insn 376
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 379
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 385
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 386
changing reg in insn 392
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 402
changing reg in insn 402
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 425
changing reg in insn 412
changing reg in insn 413
changing reg in insn 413
changing reg in insn 415
changing reg in insn 415
changing reg in insn 422
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 421
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 435
changing reg in insn 435
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 456
changing reg in insn 456
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 464
changing reg in insn 464
changing reg in insn 471
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 468
changing reg in insn 470
changing reg in insn 470
changing reg in insn 471
changing reg in insn 471
changing reg in insn 472
changing reg in insn 472
changing reg in insn 474
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 477
changing reg in insn 478
changing reg in insn 478
changing reg in insn 480
changing reg in insn 480
changing reg in insn 481
changing reg in insn 481
changing reg in insn 481
changing reg in insn 487
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 486
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 488
changing reg in insn 489
changing reg in insn 489
changing reg in insn 490
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 495
changing reg in insn 497
changing reg in insn 497
changing reg in insn 499
changing reg in insn 500
changing reg in insn 500
changing reg in insn 502
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 520
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 510
changing reg in insn 510
changing reg in insn 517
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 516
changing reg in insn 516
changing reg in insn 517
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 519
changing reg in insn 520
changing reg in insn 526
changing reg in insn 527
changing reg in insn 527
changing reg in insn 528
changing reg in insn 529
changing reg in insn 529
changing reg in insn 530
changing reg in insn 530
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 549
changing reg in insn 550
changing reg in insn 551
changing reg in insn 560
changing reg in insn 567
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 566
changing reg in insn 567
changing reg in insn 570
changing reg in insn 573
changing reg in insn 572
changing reg in insn 573
changing reg in insn 576
changing reg in insn 579
changing reg in insn 578
changing reg in insn 579
changing reg in insn 584
changing reg in insn 587
changing reg in insn 586
changing reg in insn 587
changing reg in insn 587
changing reg in insn 588
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 590
changing reg in insn 590
changing reg in insn 591
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 60
changing reg in insn 63
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 75
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 80
changing reg in insn 553
changing reg in insn 555
changing reg in insn 581
changing reg in insn 582
changing reg in insn 589
changing reg in insn 592
changing reg in insn 595
changing reg in insn 595
changing reg in insn 599
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 116
changing reg in insn 117
changing reg in insn 122
changing reg in insn 123
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 150
changing reg in insn 151
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 264
changing reg in insn 266
changing reg in insn 267
changing reg in insn 269
changing reg in insn 270
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 306
changing reg in insn 307
changing reg in insn 309
changing reg in insn 310
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 326
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 335
changing reg in insn 336
changing reg in insn 339
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 346
changing reg in insn 347
changing reg in insn 348
changing reg in insn 350
changing reg in insn 349
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 357
changing reg in insn 360
changing reg in insn 361
changing reg in insn 363
changing reg in insn 364
changing reg in insn 362
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 370
changing reg in insn 371
changing reg in insn 374
changing reg in insn 375
changing reg in insn 378
changing reg in insn 379
changing reg in insn 380
changing reg in insn 381
changing reg in insn 384
changing reg in insn 385
changing reg in insn 387
changing reg in insn 388
changing reg in insn 390
changing reg in insn 391
changing reg in insn 396
changing reg in insn 397
changing reg in insn 398
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 407
changing reg in insn 411
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 416
changing reg in insn 417
changing reg in insn 420
changing reg in insn 421
changing reg in insn 425
changing reg in insn 426
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 437
changing reg in insn 438
changing reg in insn 436
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 442
changing reg in insn 445
changing reg in insn 446
changing reg in insn 449
changing reg in insn 450
changing reg in insn 447
changing reg in insn 448
changing reg in insn 451
changing reg in insn 452
changing reg in insn 455
changing reg in insn 456
changing reg in insn 458
changing reg in insn 459
changing reg in insn 457
changing reg in insn 460
changing reg in insn 461
changing reg in insn 463
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 469
changing reg in insn 470
changing reg in insn 473
changing reg in insn 474
changing reg in insn 475
changing reg in insn 476
changing reg in insn 479
changing reg in insn 480
changing reg in insn 482
changing reg in insn 483
changing reg in insn 485
changing reg in insn 486
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 496
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 502
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 510
changing reg in insn 511
changing reg in insn 512
changing reg in insn 515
changing reg in insn 516
changing reg in insn 520
changing reg in insn 521
changing reg in insn 522
changing reg in insn 523
changing reg in insn 524
changing reg in insn 525
changing reg in insn 532
changing reg in insn 533
changing reg in insn 531
changing reg in insn 534
changing reg in insn 535
changing reg in insn 536
changing reg in insn 537
changing reg in insn 540
changing reg in insn 541
changing reg in insn 544
changing reg in insn 545
changing reg in insn 542
changing reg in insn 543
changing reg in insn 546
changing reg in insn 548
changing reg in insn 549
changing reg in insn 551
changing reg in insn 552
changing reg in insn 558
changing reg in insn 559
changing reg in insn 561
changing reg in insn 563
changing reg in insn 564
changing reg in insn 567
changing reg in insn 568
changing reg in insn 569
changing reg in insn 570
changing reg in insn 571
changing reg in insn 572
changing reg in insn 573
changing reg in insn 574
changing reg in insn 575
changing reg in insn 576
changing reg in insn 577
changing reg in insn 578
changing reg in insn 579
changing reg in insn 580
changing reg in insn 583
changing reg in insn 584
changing reg in insn 585
changing reg in insn 586
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 65.
deleting insn with uid = 80.
deleting insn with uid = 615.
deleting insn with uid = 153.
deleting insn with uid = 616.
deleting insn with uid = 219.
deleting insn with uid = 227.
deleting insn with uid = 237.
deleting insn with uid = 619.
deleting insn with uid = 244.
deleting insn with uid = 620.
deleting insn with uid = 319.
deleting insn with uid = 327.
deleting insn with uid = 337.
deleting insn with uid = 623.
deleting insn with uid = 344.
deleting insn with uid = 393.
deleting insn with uid = 624.
deleting insn with uid = 409.
deleting insn with uid = 423.
deleting insn with uid = 627.
deleting insn with uid = 434.
deleting insn with uid = 629.
deleting insn with uid = 488.
deleting insn with uid = 630.
deleting insn with uid = 504.
deleting insn with uid = 518.
deleting insn with uid = 633.
deleting insn with uid = 529.
deleting insn with uid = 635.
deleting insn with uid = 637.
deleting insn with uid = 639.
deleting insn with uid = 566.
deleting insn with uid = 641.
deleting insn with uid = 588.
deleting insn with uid = 595.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 556.


curvs

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={174d,178u} r1={48d,47u} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,234u} r7={1d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={71d,7u} r18={1d} r19={1d} r20={1d,1u,24e} r21={157d,164u} r22={74d,74u} r23={30d,28u} r24={4d,2u} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={2d,1u} r39={2d} r40={2d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 1417{642d,751u,24e} in 546{545 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 97 101 105
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97 101 105
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 103 104 365 366 370 371 375 376 380 381 385 386 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [4 ss+0 S8 A64])
        (reg:DI 5 di [ ss ])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])
        (reg:DI 4 si [ x ])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])
        (reg:DI 1 dx [ xs ])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])
        (reg:DI 2 cx [ y ])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])
        (reg:DI 37 r8 [ ys ])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [5 s+0 S8 A64])
        (reg:DI 38 r9 [ s ])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [395]) [1 *n_284(D)+0 S4 A32])) "../src/spline.f":519 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [396])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":519 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.70+0 S8 A64])
        (reg:DI 0 ax [396])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:365 size.71_286 ] [365])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.70+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [397])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:365 size.71_286 ] [365])
            (const_int 0 [0]))) "../src/spline.f":519 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:366 size.71_287 ] [366])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:365 size.71_286 ] [365])
            (reg:DI 1 dx [397]))) "../src/spline.f":519 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [8 %sfp+-224 S8 A128])
        (reg:DI 0 ax [orig:88 size.222_2 ] [88])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [8 %sfp+-216 S8 A64])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [398])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [398]) [1 *n_284(D)+0 S4 A32])) "../src/spline.f":519 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [399])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":519 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.74+0 S8 A64])
        (reg:DI 0 ax [399])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:370 size.75_292 ] [370])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.74+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [400])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:370 size.75_292 ] [370])
            (const_int 0 [0]))) "../src/spline.f":519 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:371 size.75_293 ] [371])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:370 size.75_292 ] [370])
            (reg:DI 1 dx [400]))) "../src/spline.f":519 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [8 %sfp+-240 S8 A128])
        (reg:DI 0 ax [orig:92 size.224_6 ] [92])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [8 %sfp+-232 S8 A64])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [401]) [1 *n_284(D)+0 S4 A32])) "../src/spline.f":519 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [402])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":519 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.72+0 S8 A64])
        (reg:DI 0 ax [402])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:375 size.73_298 ] [375])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.72+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [403])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:375 size.73_298 ] [375])
            (const_int 0 [0]))) "../src/spline.f":519 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:376 size.73_299 ] [376])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:375 size.73_298 ] [375])
            (reg:DI 1 dx [403]))) "../src/spline.f":519 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 43 r14 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.226_10 ] [96])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 44 r15 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 56 52 57 2 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [404]) [1 *n_284(D)+0 S4 A32])) "../src/spline.f":519 82 {*movsi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:DI 0 ax [405])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "../src/spline.f":519 145 {*extendsidi2_rex64}
     (nil))
(insn 59 58 60 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.78+0 S8 A64])
        (reg:DI 0 ax [405])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 60 59 62 2 (set (reg:DI 0 ax [orig:380 size.79_304 ] [380])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.78+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 62 60 61 2 (set (reg:DI 1 dx [406])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 61 62 63 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:380 size.79_304 ] [380])
            (const_int 0 [0]))) "../src/spline.f":519 4 {*cmpdi_ccno_1}
     (nil))
(insn 63 61 66 2 (set (reg:DI 0 ax [orig:381 size.79_305 ] [381])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:380 size.79_304 ] [380])
            (reg:DI 1 dx [406]))) "../src/spline.f":519 967 {*movdicc_noc}
     (nil))
(insn 66 63 67 2 (set (reg:DI 41 r12 [orig:101 _15 ] [101])
        (reg:DI 0 ax [orig:100 size.228_14 ] [100])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 67 66 71 2 (set (reg:DI 42 r13 [ _15+8 ])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 71 67 72 2 (set (reg/f:DI 0 ax [407])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (reg/f:DI 0 ax [407]) [1 *n_284(D)+0 S4 A32])) "../src/spline.f":519 82 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 0 ax [408])
        (sign_extend:DI (reg:SI 0 ax [orig:103 _17 ] [103]))) "../src/spline.f":519 145 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.76+0 S8 A64])
        (reg:DI 0 ax [408])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 75 74 77 2 (set (reg:DI 0 ax [orig:385 size.77_310 ] [385])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.76+0 S8 A64])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 77 75 76 2 (set (reg:DI 1 dx [409])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 76 77 78 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:385 size.77_310 ] [385])
            (const_int 0 [0]))) "../src/spline.f":519 4 {*cmpdi_ccno_1}
     (nil))
(insn 78 76 81 2 (set (reg:DI 0 ax [orig:386 size.77_311 ] [386])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:385 size.77_310 ] [385])
            (reg:DI 1 dx [409]))) "../src/spline.f":519 967 {*movdicc_noc}
     (nil))
(insn 81 78 82 2 (set (reg:DI 39 r10 [orig:105 _19 ] [105])
        (reg:DI 0 ax [orig:104 size.230_18 ] [104])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 82 81 86 2 (set (reg:DI 40 r11 [ _19+8 ])
        (const_int 0 [0])) "../src/spline.f":519 81 {*movdi_internal}
     (nil))
(insn 86 82 87 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":531 82 {*movsi_internal}
     (nil))
(insn 87 86 88 2 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [6 n+0 S8 A64])) "../src/spline.f":532 81 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:SI 0 ax [411])
        (mem:SI (reg/f:DI 0 ax [410]) [1 *n_284(D)+0 S4 A32])) "../src/spline.f":532 82 {*movsi_internal}
     (nil))
(insn 89 88 126 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [411])) "../src/spline.f":532 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 412
(code_label 126 89 90 3 133 (nil) [1 uses])
(note 90 126 91 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 3 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":534 82 {*movsi_internal}
     (nil))
(insn 92 91 93 3 (parallel [
            (set (reg:SI 0 ax [orig:107 _21 ] [107])
                (minus:SI (reg:SI 0 ax [412])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":534 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 93 92 94 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:107 _21 ] [107])
            (const_int 1 [0x1]))) "../src/spline.f":534 7 {*cmpsi_1}
     (nil))
(jump_insn 94 93 95 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 611)
            (pc))) "../src/spline.f":534 617 {*jcc_1}
     (nil)
 -> 611)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 109 110 111 112 413 414 415 416 417 418 419 420
(note 95 94 96 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 4 (set (reg:SI 1 dx [413])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":536 82 {*movsi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:SI 0 ax [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])) "../src/spline.f":536 82 {*movsi_internal}
     (nil))
(insn 98 97 614 4 (parallel [
            (set (reg:SI 0 ax [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [414])
                    (reg:SI 1 dx [413])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":536 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 ilow+0 S4 A32]))
        (nil)))
(insn 614 98 99 4 (set (reg:SI 1 dx [415])
        (reg:SI 0 ax [orig:108 _22 ] [108])) "../src/spline.f":536 82 {*movsi_internal}
     (nil))
(insn 99 614 100 4 (parallel [
            (set (reg:SI 1 dx [415])
                (lshiftrt:SI (reg:SI 1 dx [415])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":536 544 {*lshrsi3_1}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg:SI 0 ax [416])
                (plus:SI (reg:SI 0 ax [orig:108 _22 ] [108])
                    (reg:SI 1 dx [415])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":536 217 {*addsi_1}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:SI 0 ax [417])
                (ashiftrt:SI (reg:SI 0 ax [416])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":536 545 {*ashrsi3_1}
     (nil))
(insn 102 101 103 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])
        (reg:SI 0 ax [417])) "../src/spline.f":536 82 {*movsi_internal}
     (nil))
(insn 103 102 104 4 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [4 ss+0 S8 A64])) "../src/spline.f":537 81 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:SF 22 xmm1 [orig:109 _23 ] [109])
        (mem:SF (reg/f:DI 0 ax [418]) [3 *ss_318(D)+0 S4 A32])) "../src/spline.f":537 127 {*movsf_internal}
     (nil))
(insn 105 104 106 4 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])) "../src/spline.f":537 82 {*movsi_internal}
     (nil))
(insn 106 105 107 4 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [419]))) "../src/spline.f":537 145 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg:DI 1 dx [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":537 218 {*adddi_1}
     (nil))
(insn 108 107 109 4 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [5 s+0 S8 A64])) "../src/spline.f":537 81 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [420])) [3 *s_319(D) S4 A32])) "../src/spline.f":537 127 {*movsf_internal}
     (nil))
(insn 110 109 111 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:112 _26 ] [112])
            (reg:SF 22 xmm1 [orig:109 _23 ] [109]))) "../src/spline.f":537 51 {*cmpiusf}
     (nil))
(jump_insn 111 110 115 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 605)
            (pc))) "../src/spline.f":537 617 {*jcc_1}
     (nil)
 -> 605)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 421
(note 115 111 116 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 5 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])) "../src/spline.f":538 82 {*movsi_internal}
     (nil))
(insn 117 116 606 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [421])) "../src/spline.f":538 82 {*movsi_internal}
     (nil))
(jump_insn 606 117 607 5 (set (pc)
        (label_ref 124)) 649 {jump}
     (nil)
 -> 124)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 607 606 605)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 422
(code_label 605 607 121 6 136 (nil) [1 uses])
(note 121 605 122 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 6 (set (reg:SI 0 ax [422])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 imid+0 S4 A32])) "../src/spline.f":540 82 {*movsi_internal}
     (nil))
(insn 123 122 124 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 ilow+0 S4 A32])
        (reg:SI 0 ax [422])) "../src/spline.f":540 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 124 123 125 7 132 (nil) [1 uses])
(note 125 124 608 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 608 125 609 7 (set (pc)
        (label_ref 126)) "../src/spline.f":542 649 {jump}
     (nil)
 -> 126)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 609 608 611)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 611 609 610 9 137 (nil) [1 uses])
(note 610 611 612 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 612 610 129 9 (const_int 0 [0]) "../src/spline.f":542 682 {nop}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 390 391 392 393 394 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595
(code_label 129 612 130 8 129 (nil) [0 uses])
(note 130 129 131 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 8 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":544 82 {*movsi_internal}
     (nil))
(insn 132 131 133 8 (set (reg:DI 0 ax [orig:113 _27 ] [113])
        (sign_extend:DI (reg:SI 0 ax [423]))) "../src/spline.f":544 145 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 8 (parallel [
            (set (reg:DI 1 dx [orig:114 _28 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":544 218 {*adddi_1}
     (nil))
(insn 134 133 135 8 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [5 s+0 S8 A64])) "../src/spline.f":544 81 {*movdi_internal}
     (nil))
(insn 135 134 136 8 (set (reg:SF 21 xmm0 [orig:115 _29 ] [115])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:114 _28 ] [114])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [424])) [3 *s_319(D) S4 A32])) "../src/spline.f":544 127 {*movsf_internal}
     (nil))
(insn 136 135 137 8 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":544 82 {*movsi_internal}
     (nil))
(insn 137 136 138 8 (parallel [
            (set (reg:SI 0 ax [orig:116 _30 ] [116])
                (plus:SI (reg:SI 0 ax [425])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":544 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 138 137 139 8 (set (reg:DI 0 ax [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 0 ax [orig:116 _30 ] [116]))) "../src/spline.f":544 145 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 1 dx [orig:118 _32 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":544 218 {*adddi_1}
     (nil))
(insn 140 139 141 8 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [5 s+0 S8 A64])) "../src/spline.f":544 81 {*movdi_internal}
     (nil))
(insn 141 140 142 8 (set (reg:SF 22 xmm1 [orig:119 _33 ] [119])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:118 _32 ] [118])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [426])) [3 *s_319(D) S4 A32])) "../src/spline.f":544 127 {*movsf_internal}
     (nil))
(insn 142 141 143 8 (set (reg:SF 21 xmm0 [427])
        (minus:SF (reg:SF 21 xmm0 [orig:115 _29 ] [115])
            (reg:SF 22 xmm1 [orig:119 _33 ] [119]))) "../src/spline.f":544 805 {*fop_sf_1}
     (nil))
(insn 143 142 144 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [427])) "../src/spline.f":544 127 {*movsf_internal}
     (nil))
(insn 144 143 145 8 (set (reg/f:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [4 ss+0 S8 A64])) "../src/spline.f":545 81 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (mem:SF (reg/f:DI 0 ax [428]) [3 *ss_318(D)+0 S4 A32])) "../src/spline.f":545 127 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SI 0 ax [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":545 82 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (parallel [
            (set (reg:SI 0 ax [orig:121 _35 ] [121])
                (plus:SI (reg:SI 0 ax [429])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":545 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 148 147 149 8 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [orig:121 _35 ] [121]))) "../src/spline.f":545 145 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 8 (parallel [
            (set (reg:DI 1 dx [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":545 218 {*adddi_1}
     (nil))
(insn 150 149 151 8 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -240 [0xffffffffffffff10])) [5 s+0 S8 A64])) "../src/spline.f":545 81 {*movdi_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SF 22 xmm1 [orig:124 _38 ] [124])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:123 _37 ] [123])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [430])) [3 *s_319(D) S4 A32])) "../src/spline.f":545 127 {*movsf_internal}
     (nil))
(insn 152 151 154 8 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (minus:SF (reg:SF 21 xmm0 [orig:120 _34 ] [120])
            (reg:SF 22 xmm1 [orig:124 _38 ] [124]))) "../src/spline.f":545 805 {*fop_sf_1}
     (nil))
(insn 154 152 155 8 (set (reg:SF 21 xmm0 [431])
        (div:SF (reg:SF 21 xmm0 [orig:126 _40 ] [126])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":545 805 {*fop_sf_1}
     (nil))
(insn 155 154 156 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])
        (reg:SF 21 xmm0 [431])) "../src/spline.f":545 127 {*movsf_internal}
     (nil))
(insn 156 155 157 8 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":547 82 {*movsi_internal}
     (nil))
(insn 157 156 158 8 (parallel [
            (set (reg:SI 0 ax [orig:127 _41 ] [127])
                (plus:SI (reg:SI 0 ax [432])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":547 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 158 157 159 8 (set (reg:DI 0 ax [orig:128 _42 ] [128])
        (sign_extend:DI (reg:SI 0 ax [orig:127 _41 ] [127]))) "../src/spline.f":547 145 {*extendsidi2_rex64}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:DI 1 dx [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":547 218 {*adddi_1}
     (nil))
(insn 160 159 161 8 (set (reg/f:DI 0 ax [433])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":547 81 {*movdi_internal}
     (nil))
(insn 161 160 162 8 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [433])) [3 *xs_324(D) S4 A32])) "../src/spline.f":547 127 {*movsf_internal}
     (nil))
(insn 162 161 163 8 (set (reg:SF 21 xmm0 [orig:131 _45 ] [131])
        (mult:SF (reg:SF 21 xmm0 [orig:130 _44 ] [130])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":547 802 {*fop_sf_comm}
     (nil))
(insn 163 162 164 8 (set (reg:SI 0 ax [434])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":547 82 {*movsi_internal}
     (nil))
(insn 164 163 165 8 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [434]))) "../src/spline.f":547 145 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 8 (parallel [
            (set (reg:DI 1 dx [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":547 218 {*adddi_1}
     (nil))
(insn 166 165 167 8 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":547 81 {*movdi_internal}
     (nil))
(insn 167 166 168 8 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [435])) [3 *x_325(D) S4 A32])) "../src/spline.f":547 127 {*movsf_internal}
     (nil))
(insn 168 167 169 8 (set (reg:SF 21 xmm0 [orig:135 _49 ] [135])
        (minus:SF (reg:SF 21 xmm0 [orig:131 _45 ] [131])
            (reg:SF 22 xmm1 [orig:134 _48 ] [134]))) "../src/spline.f":547 805 {*fop_sf_1}
     (nil))
(insn 169 168 170 8 (set (reg:SI 0 ax [436])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":547 82 {*movsi_internal}
     (nil))
(insn 170 169 171 8 (parallel [
            (set (reg:SI 0 ax [orig:136 _50 ] [136])
                (plus:SI (reg:SI 0 ax [436])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":547 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 171 170 172 8 (set (reg:DI 0 ax [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 0 ax [orig:136 _50 ] [136]))) "../src/spline.f":547 145 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 8 (parallel [
            (set (reg:DI 1 dx [orig:138 _52 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 _51 ] [137])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":547 218 {*adddi_1}
     (nil))
(insn 173 172 174 8 (set (reg/f:DI 0 ax [437])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":547 81 {*movdi_internal}
     (nil))
(insn 174 173 175 8 (set (reg:SF 22 xmm1 [orig:139 _53 ] [139])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:138 _52 ] [138])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [437])) [3 *x_325(D) S4 A32])) "../src/spline.f":547 127 {*movsf_internal}
     (nil))
(insn 175 174 176 8 (set (reg:SF 21 xmm0 [438])
        (plus:SF (reg:SF 21 xmm0 [orig:135 _49 ] [135])
            (reg:SF 22 xmm1 [orig:139 _53 ] [139]))) "../src/spline.f":547 802 {*fop_sf_comm}
     (nil))
(insn 176 175 177 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 cx1+0 S4 A32])
        (reg:SF 21 xmm0 [438])) "../src/spline.f":547 127 {*movsf_internal}
     (nil))
(insn 177 176 178 8 (set (reg:SI 0 ax [439])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":548 82 {*movsi_internal}
     (nil))
(insn 178 177 179 8 (set (reg:DI 0 ax [orig:140 _54 ] [140])
        (sign_extend:DI (reg:SI 0 ax [439]))) "../src/spline.f":548 145 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 8 (parallel [
            (set (reg:DI 1 dx [orig:141 _55 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 _54 ] [140])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":548 218 {*adddi_1}
     (nil))
(insn 180 179 181 8 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":548 81 {*movdi_internal}
     (nil))
(insn 181 180 182 8 (set (reg:SF 21 xmm0 [orig:142 _56 ] [142])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:141 _55 ] [141])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [440])) [3 *xs_324(D) S4 A32])) "../src/spline.f":548 127 {*movsf_internal}
     (nil))
(insn 182 181 183 8 (set (reg:SF 21 xmm0 [orig:143 _57 ] [143])
        (mult:SF (reg:SF 21 xmm0 [orig:142 _56 ] [142])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":548 802 {*fop_sf_comm}
     (nil))
(insn 183 182 184 8 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":548 82 {*movsi_internal}
     (nil))
(insn 184 183 185 8 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [441]))) "../src/spline.f":548 145 {*extendsidi2_rex64}
     (nil))
(insn 185 184 186 8 (parallel [
            (set (reg:DI 1 dx [orig:145 _59 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":548 218 {*adddi_1}
     (nil))
(insn 186 185 187 8 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":548 81 {*movdi_internal}
     (nil))
(insn 187 186 188 8 (set (reg:SF 22 xmm1 [orig:146 _60 ] [146])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:145 _59 ] [145])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [442])) [3 *x_325(D) S4 A32])) "../src/spline.f":548 127 {*movsf_internal}
     (nil))
(insn 188 187 189 8 (set (reg:SF 21 xmm0 [orig:147 _61 ] [147])
        (minus:SF (reg:SF 21 xmm0 [orig:143 _57 ] [143])
            (reg:SF 22 xmm1 [orig:146 _60 ] [146]))) "../src/spline.f":548 805 {*fop_sf_1}
     (nil))
(insn 189 188 190 8 (set (reg:SI 0 ax [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":548 82 {*movsi_internal}
     (nil))
(insn 190 189 191 8 (parallel [
            (set (reg:SI 0 ax [orig:148 _62 ] [148])
                (plus:SI (reg:SI 0 ax [443])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":548 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 191 190 192 8 (set (reg:DI 0 ax [orig:149 _63 ] [149])
        (sign_extend:DI (reg:SI 0 ax [orig:148 _62 ] [148]))) "../src/spline.f":548 145 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 8 (parallel [
            (set (reg:DI 1 dx [orig:150 _64 ] [150])
                (plus:DI (reg:DI 0 ax [orig:149 _63 ] [149])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":548 218 {*adddi_1}
     (nil))
(insn 193 192 194 8 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":548 81 {*movdi_internal}
     (nil))
(insn 194 193 195 8 (set (reg:SF 22 xmm1 [orig:151 _65 ] [151])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:150 _64 ] [150])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [444])) [3 *x_325(D) S4 A32])) "../src/spline.f":548 127 {*movsf_internal}
     (nil))
(insn 195 194 196 8 (set (reg:SF 21 xmm0 [445])
        (plus:SF (reg:SF 21 xmm0 [orig:147 _61 ] [147])
            (reg:SF 22 xmm1 [orig:151 _65 ] [151]))) "../src/spline.f":548 802 {*fop_sf_comm}
     (nil))
(insn 196 195 197 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 cx2+0 S4 A32])
        (reg:SF 21 xmm0 [445])) "../src/spline.f":548 127 {*movsf_internal}
     (nil))
(insn 197 196 198 8 (set (reg:SI 0 ax [446])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":549 82 {*movsi_internal}
     (nil))
(insn 198 197 199 8 (set (reg:DI 0 ax [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 0 ax [446]))) "../src/spline.f":549 145 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 8 (parallel [
            (set (reg:DI 1 dx [orig:153 _67 ] [153])
                (plus:DI (reg:DI 0 ax [orig:152 _66 ] [152])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":549 218 {*adddi_1}
     (nil))
(insn 200 199 201 8 (set (reg/f:DI 0 ax [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":549 81 {*movdi_internal}
     (nil))
(insn 201 200 202 8 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:153 _67 ] [153])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [447])) [3 *x_325(D) S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 202 201 203 8 (set (reg:SI 0 ax [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":549 82 {*movsi_internal}
     (nil))
(insn 203 202 204 8 (parallel [
            (set (reg:SI 0 ax [orig:155 _69 ] [155])
                (plus:SI (reg:SI 0 ax [448])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":549 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 204 203 205 8 (set (reg:DI 0 ax [orig:156 _70 ] [156])
        (sign_extend:DI (reg:SI 0 ax [orig:155 _69 ] [155]))) "../src/spline.f":549 145 {*extendsidi2_rex64}
     (nil))
(insn 205 204 206 8 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":549 218 {*adddi_1}
     (nil))
(insn 206 205 207 8 (set (reg/f:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":549 81 {*movdi_internal}
     (nil))
(insn 207 206 208 8 (set (reg:SF 22 xmm1 [orig:158 _72 ] [158])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [449])) [3 *x_325(D) S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 208 207 617 8 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (minus:SF (reg:SF 21 xmm0 [orig:154 _68 ] [154])
            (reg:SF 22 xmm1 [orig:158 _72 ] [158]))) "../src/spline.f":549 805 {*fop_sf_1}
     (nil))
(insn 617 208 209 8 (set (reg:SF 22 xmm1 [orig:159 _73 ] [159])
        (reg:SF 21 xmm0 [orig:154 _68 ] [154])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 209 617 210 8 (set (reg:SF 23 xmm2 [450])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 210 209 211 8 (set (reg:SF 21 xmm0 [451])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 211 210 212 8 (set (reg:SF 21 xmm0 [orig:160 _74 ] [160])
        (mult:SF (reg:SF 21 xmm0 [451])
            (reg:SF 23 xmm2 [450]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 212 211 213 8 (set (reg:SF 23 xmm2 [452])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 213 212 214 8 (set (reg:SF 23 xmm2 [orig:161 _75 ] [161])
        (minus:SF (reg:SF 23 xmm2 [452])
            (reg:SF 21 xmm0 [orig:160 _74 ] [160]))) "../src/spline.f":549 805 {*fop_sf_1}
     (nil))
(insn 214 213 215 8 (set (reg:SF 24 xmm3 [453])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 215 214 216 8 (set (reg:SF 21 xmm0 [454])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 216 215 217 8 (set (reg:SF 21 xmm0 [orig:162 _76 ] [162])
        (mult:SF (reg:SF 21 xmm0 [454])
            (reg:SF 24 xmm3 [453]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 217 216 218 8 (set (reg:SF 21 xmm0 [orig:163 _77 ] [163])
        (mult:SF (reg:SF 21 xmm0 [orig:162 _76 ] [162])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 218 217 220 8 (set (reg:SF 21 xmm0 [orig:164 _78 ] [164])
        (plus:SF (reg:SF 21 xmm0 [orig:163 _77 ] [163])
            (reg:SF 23 xmm2 [orig:161 _75 ] [161]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 220 218 221 8 (set (reg:SF 21 xmm0 [orig:166 _80 ] [166])
        (mult:SF (reg:SF 21 xmm0 [orig:165 _79 ] [165])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [3 cx1+0 S4 A32]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 221 220 222 8 (set (reg:SF 22 xmm1 [orig:167 _81 ] [167])
        (plus:SF (reg:SF 22 xmm1 [orig:159 _73 ] [159])
            (reg:SF 21 xmm0 [orig:166 _80 ] [166]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 222 221 223 8 (set (reg:SF 23 xmm2 [455])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 223 222 224 8 (set (reg:SF 21 xmm0 [456])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 224 223 225 8 (set (reg:SF 21 xmm0 [orig:168 _82 ] [168])
        (mult:SF (reg:SF 21 xmm0 [456])
            (reg:SF 23 xmm2 [455]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 225 224 226 8 (set (reg:SF 23 xmm2 [457])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":549 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 226 225 228 8 (set (reg:SF 21 xmm0 [orig:169 _83 ] [169])
        (minus:SF (reg:SF 21 xmm0 [orig:168 _82 ] [168])
            (reg:SF 23 xmm2 [457]))) "../src/spline.f":549 805 {*fop_sf_1}
     (nil))
(insn 228 226 229 8 (set (reg:SF 21 xmm0 [orig:171 _85 ] [171])
        (mult:SF (reg:SF 21 xmm0 [orig:170 _84 ] [170])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 229 228 230 8 (set (reg:SF 21 xmm0 [orig:172 _86 ] [172])
        (mult:SF (reg:SF 21 xmm0 [orig:171 _85 ] [171])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [3 cx2+0 S4 A32]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 230 229 231 8 (set (reg:SF 21 xmm0 [458])
        (plus:SF (reg:SF 21 xmm0 [orig:172 _86 ] [172])
            (reg:SF 22 xmm1 [orig:167 _81 ] [167]))) "../src/spline.f":549 802 {*fop_sf_comm}
     (nil))
(insn 231 230 232 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32])
        (reg:SF 21 xmm0 [458])) "../src/spline.f":549 127 {*movsf_internal}
     (nil))
(insn 232 231 233 8 (set (reg:SF 22 xmm1 [459])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":550 127 {*movsf_internal}
     (nil))
(insn 233 232 234 8 (set (reg:SF 21 xmm0 [460])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":550 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 234 233 235 8 (set (reg:SF 21 xmm0 [orig:173 _87 ] [173])
        (mult:SF (reg:SF 21 xmm0 [460])
            (reg:SF 22 xmm1 [459]))) "../src/spline.f":550 802 {*fop_sf_comm}
     (nil))
(insn 235 234 236 8 (set (reg:SF 22 xmm1 [461])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":550 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 236 235 618 8 (set (reg:SF 21 xmm0 [orig:174 _88 ] [174])
        (minus:SF (reg:SF 21 xmm0 [orig:173 _87 ] [173])
            (reg:SF 22 xmm1 [461]))) "../src/spline.f":550 805 {*fop_sf_1}
     (nil))
(insn 618 236 238 8 (set (reg:SF 22 xmm1 [orig:175 _89 ] [175])
        (reg:SF 21 xmm0 [orig:175 _89 ] [175])) "../src/spline.f":550 127 {*movsf_internal}
     (nil))
(insn 238 618 239 8 (set (reg:SF 22 xmm1 [orig:175 _89 ] [175])
        (mult:SF (reg:SF 22 xmm1 [orig:175 _89 ] [175])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [3 cx1+0 S4 A32]))) "../src/spline.f":550 802 {*fop_sf_comm}
     (nil))
(insn 239 238 240 8 (set (reg:SF 23 xmm2 [462])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":550 127 {*movsf_internal}
     (nil))
(insn 240 239 241 8 (set (reg:SF 21 xmm0 [463])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":550 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 241 240 242 8 (set (reg:SF 21 xmm0 [orig:177 _91 ] [177])
        (mult:SF (reg:SF 21 xmm0 [463])
            (reg:SF 23 xmm2 [462]))) "../src/spline.f":550 802 {*fop_sf_comm}
     (nil))
(insn 242 241 243 8 (set (reg:SF 23 xmm2 [464])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":550 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 243 242 245 8 (set (reg:SF 21 xmm0 [orig:178 _92 ] [178])
        (minus:SF (reg:SF 21 xmm0 [orig:177 _91 ] [177])
            (reg:SF 23 xmm2 [464]))) "../src/spline.f":550 805 {*fop_sf_1}
     (nil))
(insn 245 243 246 8 (set (reg:SF 21 xmm0 [orig:180 _94 ] [180])
        (mult:SF (reg:SF 21 xmm0 [orig:179 _93 ] [179])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [3 cx2+0 S4 A32]))) "../src/spline.f":550 802 {*fop_sf_comm}
     (nil))
(insn 246 245 247 8 (set (reg:SF 21 xmm0 [465])
        (plus:SF (reg:SF 21 xmm0 [orig:180 _94 ] [180])
            (reg:SF 22 xmm1 [orig:176 _90 ] [176]))) "../src/spline.f":550 802 {*fop_sf_comm}
     (nil))
(insn 247 246 248 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xdd+0 S4 A32])
        (reg:SF 21 xmm0 [465])) "../src/spline.f":550 127 {*movsf_internal}
     (nil))
(insn 248 247 249 8 (set (reg:SF 22 xmm1 [466])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 cx1+0 S4 A32])) "../src/spline.f":551 127 {*movsf_internal}
     (nil))
(insn 249 248 250 8 (set (reg:SF 21 xmm0 [467])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":551 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 250 249 251 8 (set (reg:SF 22 xmm1 [orig:181 _95 ] [181])
        (mult:SF (reg:SF 22 xmm1 [466])
            (reg:SF 21 xmm0 [467]))) "../src/spline.f":551 802 {*fop_sf_comm}
     (nil))
(insn 251 250 252 8 (set (reg:SF 23 xmm2 [468])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 cx2+0 S4 A32])) "../src/spline.f":551 127 {*movsf_internal}
     (nil))
(insn 252 251 253 8 (set (reg:SF 21 xmm0 [469])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":551 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 253 252 254 8 (set (reg:SF 21 xmm0 [orig:182 _96 ] [182])
        (mult:SF (reg:SF 21 xmm0 [469])
            (reg:SF 23 xmm2 [468]))) "../src/spline.f":551 802 {*fop_sf_comm}
     (nil))
(insn 254 253 255 8 (set (reg:SF 21 xmm0 [470])
        (plus:SF (reg:SF 21 xmm0 [orig:182 _96 ] [182])
            (reg:SF 22 xmm1 [orig:181 _95 ] [181]))) "../src/spline.f":551 802 {*fop_sf_comm}
     (nil))
(insn 255 254 256 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 xddd+0 S4 A32])
        (reg:SF 21 xmm0 [470])) "../src/spline.f":551 127 {*movsf_internal}
     (nil))
(insn 256 255 257 8 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":553 82 {*movsi_internal}
     (nil))
(insn 257 256 258 8 (parallel [
            (set (reg:SI 0 ax [orig:183 _97 ] [183])
                (plus:SI (reg:SI 0 ax [471])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":553 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 258 257 259 8 (set (reg:DI 0 ax [orig:184 _98 ] [184])
        (sign_extend:DI (reg:SI 0 ax [orig:183 _97 ] [183]))) "../src/spline.f":553 145 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 8 (parallel [
            (set (reg:DI 1 dx [orig:185 _99 ] [185])
                (plus:DI (reg:DI 0 ax [orig:184 _98 ] [184])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":553 218 {*adddi_1}
     (nil))
(insn 260 259 261 8 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":553 81 {*movdi_internal}
     (nil))
(insn 261 260 262 8 (set (reg:SF 21 xmm0 [orig:186 _100 ] [186])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:185 _99 ] [185])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [472])) [3 *ys_331(D) S4 A32])) "../src/spline.f":553 127 {*movsf_internal}
     (nil))
(insn 262 261 263 8 (set (reg:SF 21 xmm0 [orig:187 _101 ] [187])
        (mult:SF (reg:SF 21 xmm0 [orig:186 _100 ] [186])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":553 802 {*fop_sf_comm}
     (nil))
(insn 263 262 264 8 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":553 82 {*movsi_internal}
     (nil))
(insn 264 263 265 8 (set (reg:DI 0 ax [orig:188 _102 ] [188])
        (sign_extend:DI (reg:SI 0 ax [473]))) "../src/spline.f":553 145 {*extendsidi2_rex64}
     (nil))
(insn 265 264 266 8 (parallel [
            (set (reg:DI 1 dx [orig:189 _103 ] [189])
                (plus:DI (reg:DI 0 ax [orig:188 _102 ] [188])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":553 218 {*adddi_1}
     (nil))
(insn 266 265 267 8 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":553 81 {*movdi_internal}
     (nil))
(insn 267 266 268 8 (set (reg:SF 22 xmm1 [orig:190 _104 ] [190])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:189 _103 ] [189])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [474])) [3 *y_332(D) S4 A32])) "../src/spline.f":553 127 {*movsf_internal}
     (nil))
(insn 268 267 269 8 (set (reg:SF 21 xmm0 [orig:191 _105 ] [191])
        (minus:SF (reg:SF 21 xmm0 [orig:187 _101 ] [187])
            (reg:SF 22 xmm1 [orig:190 _104 ] [190]))) "../src/spline.f":553 805 {*fop_sf_1}
     (nil))
(insn 269 268 270 8 (set (reg:SI 0 ax [475])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":553 82 {*movsi_internal}
     (nil))
(insn 270 269 271 8 (parallel [
            (set (reg:SI 0 ax [orig:192 _106 ] [192])
                (plus:SI (reg:SI 0 ax [475])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":553 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 271 270 272 8 (set (reg:DI 0 ax [orig:193 _107 ] [193])
        (sign_extend:DI (reg:SI 0 ax [orig:192 _106 ] [192]))) "../src/spline.f":553 145 {*extendsidi2_rex64}
     (nil))
(insn 272 271 273 8 (parallel [
            (set (reg:DI 1 dx [orig:194 _108 ] [194])
                (plus:DI (reg:DI 0 ax [orig:193 _107 ] [193])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":553 218 {*adddi_1}
     (nil))
(insn 273 272 274 8 (set (reg/f:DI 0 ax [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":553 81 {*movdi_internal}
     (nil))
(insn 274 273 275 8 (set (reg:SF 22 xmm1 [orig:195 _109 ] [195])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:194 _108 ] [194])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [476])) [3 *y_332(D) S4 A32])) "../src/spline.f":553 127 {*movsf_internal}
     (nil))
(insn 275 274 276 8 (set (reg:SF 21 xmm0 [477])
        (plus:SF (reg:SF 21 xmm0 [orig:191 _105 ] [191])
            (reg:SF 22 xmm1 [orig:195 _109 ] [195]))) "../src/spline.f":553 802 {*fop_sf_comm}
     (nil))
(insn 276 275 277 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 cy1+0 S4 A32])
        (reg:SF 21 xmm0 [477])) "../src/spline.f":553 127 {*movsf_internal}
     (nil))
(insn 277 276 278 8 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":554 82 {*movsi_internal}
     (nil))
(insn 278 277 279 8 (set (reg:DI 0 ax [orig:196 _110 ] [196])
        (sign_extend:DI (reg:SI 0 ax [478]))) "../src/spline.f":554 145 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 8 (parallel [
            (set (reg:DI 1 dx [orig:197 _111 ] [197])
                (plus:DI (reg:DI 0 ax [orig:196 _110 ] [196])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":554 218 {*adddi_1}
     (nil))
(insn 280 279 281 8 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":554 81 {*movdi_internal}
     (nil))
(insn 281 280 282 8 (set (reg:SF 21 xmm0 [orig:198 _112 ] [198])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:197 _111 ] [197])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [479])) [3 *ys_331(D) S4 A32])) "../src/spline.f":554 127 {*movsf_internal}
     (nil))
(insn 282 281 283 8 (set (reg:SF 21 xmm0 [orig:199 _113 ] [199])
        (mult:SF (reg:SF 21 xmm0 [orig:198 _112 ] [198])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":554 802 {*fop_sf_comm}
     (nil))
(insn 283 282 284 8 (set (reg:SI 0 ax [480])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":554 82 {*movsi_internal}
     (nil))
(insn 284 283 285 8 (set (reg:DI 0 ax [orig:200 _114 ] [200])
        (sign_extend:DI (reg:SI 0 ax [480]))) "../src/spline.f":554 145 {*extendsidi2_rex64}
     (nil))
(insn 285 284 286 8 (parallel [
            (set (reg:DI 1 dx [orig:201 _115 ] [201])
                (plus:DI (reg:DI 0 ax [orig:200 _114 ] [200])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":554 218 {*adddi_1}
     (nil))
(insn 286 285 287 8 (set (reg/f:DI 0 ax [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":554 81 {*movdi_internal}
     (nil))
(insn 287 286 288 8 (set (reg:SF 22 xmm1 [orig:202 _116 ] [202])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:201 _115 ] [201])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [481])) [3 *y_332(D) S4 A32])) "../src/spline.f":554 127 {*movsf_internal}
     (nil))
(insn 288 287 289 8 (set (reg:SF 21 xmm0 [orig:203 _117 ] [203])
        (minus:SF (reg:SF 21 xmm0 [orig:199 _113 ] [199])
            (reg:SF 22 xmm1 [orig:202 _116 ] [202]))) "../src/spline.f":554 805 {*fop_sf_1}
     (nil))
(insn 289 288 290 8 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":554 82 {*movsi_internal}
     (nil))
(insn 290 289 291 8 (parallel [
            (set (reg:SI 0 ax [orig:204 _118 ] [204])
                (plus:SI (reg:SI 0 ax [482])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":554 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 291 290 292 8 (set (reg:DI 0 ax [orig:205 _119 ] [205])
        (sign_extend:DI (reg:SI 0 ax [orig:204 _118 ] [204]))) "../src/spline.f":554 145 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 8 (parallel [
            (set (reg:DI 1 dx [orig:206 _120 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 _119 ] [205])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":554 218 {*adddi_1}
     (nil))
(insn 293 292 294 8 (set (reg/f:DI 0 ax [483])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":554 81 {*movdi_internal}
     (nil))
(insn 294 293 295 8 (set (reg:SF 22 xmm1 [orig:207 _121 ] [207])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:206 _120 ] [206])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [483])) [3 *y_332(D) S4 A32])) "../src/spline.f":554 127 {*movsf_internal}
     (nil))
(insn 295 294 296 8 (set (reg:SF 21 xmm0 [484])
        (plus:SF (reg:SF 21 xmm0 [orig:203 _117 ] [203])
            (reg:SF 22 xmm1 [orig:207 _121 ] [207]))) "../src/spline.f":554 802 {*fop_sf_comm}
     (nil))
(insn 296 295 297 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 cy2+0 S4 A32])
        (reg:SF 21 xmm0 [484])) "../src/spline.f":554 127 {*movsf_internal}
     (nil))
(insn 297 296 298 8 (set (reg:SI 0 ax [485])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":555 82 {*movsi_internal}
     (nil))
(insn 298 297 299 8 (set (reg:DI 0 ax [orig:208 _122 ] [208])
        (sign_extend:DI (reg:SI 0 ax [485]))) "../src/spline.f":555 145 {*extendsidi2_rex64}
     (nil))
(insn 299 298 300 8 (parallel [
            (set (reg:DI 1 dx [orig:209 _123 ] [209])
                (plus:DI (reg:DI 0 ax [orig:208 _122 ] [208])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":555 218 {*adddi_1}
     (nil))
(insn 300 299 301 8 (set (reg/f:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":555 81 {*movdi_internal}
     (nil))
(insn 301 300 302 8 (set (reg:SF 21 xmm0 [orig:210 _124 ] [210])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:209 _123 ] [209])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [486])) [3 *y_332(D) S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 302 301 303 8 (set (reg:SI 0 ax [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":555 82 {*movsi_internal}
     (nil))
(insn 303 302 304 8 (parallel [
            (set (reg:SI 0 ax [orig:211 _125 ] [211])
                (plus:SI (reg:SI 0 ax [487])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":555 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 304 303 305 8 (set (reg:DI 0 ax [orig:212 _126 ] [212])
        (sign_extend:DI (reg:SI 0 ax [orig:211 _125 ] [211]))) "../src/spline.f":555 145 {*extendsidi2_rex64}
     (nil))
(insn 305 304 306 8 (parallel [
            (set (reg:DI 1 dx [orig:213 _127 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 _126 ] [212])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":555 218 {*adddi_1}
     (nil))
(insn 306 305 307 8 (set (reg/f:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":555 81 {*movdi_internal}
     (nil))
(insn 307 306 308 8 (set (reg:SF 22 xmm1 [orig:214 _128 ] [214])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:213 _127 ] [213])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [488])) [3 *y_332(D) S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 308 307 621 8 (set (reg:SF 21 xmm0 [orig:210 _124 ] [210])
        (minus:SF (reg:SF 21 xmm0 [orig:210 _124 ] [210])
            (reg:SF 22 xmm1 [orig:214 _128 ] [214]))) "../src/spline.f":555 805 {*fop_sf_1}
     (nil))
(insn 621 308 309 8 (set (reg:SF 22 xmm1 [orig:215 _129 ] [215])
        (reg:SF 21 xmm0 [orig:210 _124 ] [210])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 309 621 310 8 (set (reg:SF 23 xmm2 [489])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 310 309 311 8 (set (reg:SF 21 xmm0 [490])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 311 310 312 8 (set (reg:SF 21 xmm0 [orig:216 _130 ] [216])
        (mult:SF (reg:SF 21 xmm0 [490])
            (reg:SF 23 xmm2 [489]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 312 311 313 8 (set (reg:SF 23 xmm2 [491])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 313 312 314 8 (set (reg:SF 23 xmm2 [orig:217 _131 ] [217])
        (minus:SF (reg:SF 23 xmm2 [491])
            (reg:SF 21 xmm0 [orig:216 _130 ] [216]))) "../src/spline.f":555 805 {*fop_sf_1}
     (nil))
(insn 314 313 315 8 (set (reg:SF 24 xmm3 [492])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 315 314 316 8 (set (reg:SF 21 xmm0 [493])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 316 315 317 8 (set (reg:SF 21 xmm0 [orig:218 _132 ] [218])
        (mult:SF (reg:SF 21 xmm0 [493])
            (reg:SF 24 xmm3 [492]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 317 316 318 8 (set (reg:SF 21 xmm0 [orig:219 _133 ] [219])
        (mult:SF (reg:SF 21 xmm0 [orig:218 _132 ] [218])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 318 317 320 8 (set (reg:SF 21 xmm0 [orig:220 _134 ] [220])
        (plus:SF (reg:SF 21 xmm0 [orig:219 _133 ] [219])
            (reg:SF 23 xmm2 [orig:217 _131 ] [217]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 320 318 321 8 (set (reg:SF 21 xmm0 [orig:222 _136 ] [222])
        (mult:SF (reg:SF 21 xmm0 [orig:221 _135 ] [221])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [3 cy1+0 S4 A32]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 321 320 322 8 (set (reg:SF 22 xmm1 [orig:223 _137 ] [223])
        (plus:SF (reg:SF 22 xmm1 [orig:215 _129 ] [215])
            (reg:SF 21 xmm0 [orig:222 _136 ] [222]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 322 321 323 8 (set (reg:SF 23 xmm2 [494])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 323 322 324 8 (set (reg:SF 21 xmm0 [495])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 324 323 325 8 (set (reg:SF 21 xmm0 [orig:224 _138 ] [224])
        (mult:SF (reg:SF 21 xmm0 [495])
            (reg:SF 23 xmm2 [494]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 325 324 326 8 (set (reg:SF 23 xmm2 [496])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":555 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 326 325 328 8 (set (reg:SF 21 xmm0 [orig:225 _139 ] [225])
        (minus:SF (reg:SF 21 xmm0 [orig:224 _138 ] [224])
            (reg:SF 23 xmm2 [496]))) "../src/spline.f":555 805 {*fop_sf_1}
     (nil))
(insn 328 326 329 8 (set (reg:SF 21 xmm0 [orig:227 _141 ] [227])
        (mult:SF (reg:SF 21 xmm0 [orig:226 _140 ] [226])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 329 328 330 8 (set (reg:SF 21 xmm0 [orig:228 _142 ] [228])
        (mult:SF (reg:SF 21 xmm0 [orig:227 _141 ] [227])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [3 cy2+0 S4 A32]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 330 329 331 8 (set (reg:SF 21 xmm0 [497])
        (plus:SF (reg:SF 21 xmm0 [orig:228 _142 ] [228])
            (reg:SF 22 xmm1 [orig:223 _137 ] [223]))) "../src/spline.f":555 802 {*fop_sf_comm}
     (nil))
(insn 331 330 332 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32])
        (reg:SF 21 xmm0 [497])) "../src/spline.f":555 127 {*movsf_internal}
     (nil))
(insn 332 331 333 8 (set (reg:SF 22 xmm1 [498])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":556 127 {*movsf_internal}
     (nil))
(insn 333 332 334 8 (set (reg:SF 21 xmm0 [499])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":556 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 334 333 335 8 (set (reg:SF 21 xmm0 [orig:229 _143 ] [229])
        (mult:SF (reg:SF 21 xmm0 [499])
            (reg:SF 22 xmm1 [498]))) "../src/spline.f":556 802 {*fop_sf_comm}
     (nil))
(insn 335 334 336 8 (set (reg:SF 22 xmm1 [500])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC2") [flags 0x2]) [3  S4 A32])) "../src/spline.f":556 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 336 335 622 8 (set (reg:SF 21 xmm0 [orig:230 _144 ] [230])
        (minus:SF (reg:SF 21 xmm0 [orig:229 _143 ] [229])
            (reg:SF 22 xmm1 [500]))) "../src/spline.f":556 805 {*fop_sf_1}
     (nil))
(insn 622 336 338 8 (set (reg:SF 22 xmm1 [orig:231 _145 ] [231])
        (reg:SF 21 xmm0 [orig:231 _145 ] [231])) "../src/spline.f":556 127 {*movsf_internal}
     (nil))
(insn 338 622 339 8 (set (reg:SF 22 xmm1 [orig:231 _145 ] [231])
        (mult:SF (reg:SF 22 xmm1 [orig:231 _145 ] [231])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [3 cy1+0 S4 A32]))) "../src/spline.f":556 802 {*fop_sf_comm}
     (nil))
(insn 339 338 340 8 (set (reg:SF 23 xmm2 [501])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":556 127 {*movsf_internal}
     (nil))
(insn 340 339 341 8 (set (reg:SF 21 xmm0 [502])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":556 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 341 340 342 8 (set (reg:SF 21 xmm0 [orig:233 _147 ] [233])
        (mult:SF (reg:SF 21 xmm0 [502])
            (reg:SF 23 xmm2 [501]))) "../src/spline.f":556 802 {*fop_sf_comm}
     (nil))
(insn 342 341 343 8 (set (reg:SF 23 xmm2 [503])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC4") [flags 0x2]) [3  S4 A32])) "../src/spline.f":556 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 343 342 345 8 (set (reg:SF 21 xmm0 [orig:234 _148 ] [234])
        (minus:SF (reg:SF 21 xmm0 [orig:233 _147 ] [233])
            (reg:SF 23 xmm2 [503]))) "../src/spline.f":556 805 {*fop_sf_1}
     (nil))
(insn 345 343 346 8 (set (reg:SF 21 xmm0 [orig:236 _150 ] [236])
        (mult:SF (reg:SF 21 xmm0 [orig:235 _149 ] [235])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [3 cy2+0 S4 A32]))) "../src/spline.f":556 802 {*fop_sf_comm}
     (nil))
(insn 346 345 347 8 (set (reg:SF 21 xmm0 [504])
        (plus:SF (reg:SF 21 xmm0 [orig:236 _150 ] [236])
            (reg:SF 22 xmm1 [orig:232 _146 ] [232]))) "../src/spline.f":556 802 {*fop_sf_comm}
     (nil))
(insn 347 346 348 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 ydd+0 S4 A32])
        (reg:SF 21 xmm0 [504])) "../src/spline.f":556 127 {*movsf_internal}
     (nil))
(insn 348 347 349 8 (set (reg:SF 22 xmm1 [505])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 cy1+0 S4 A32])) "../src/spline.f":557 127 {*movsf_internal}
     (nil))
(insn 349 348 350 8 (set (reg:SF 21 xmm0 [506])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":557 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 350 349 351 8 (set (reg:SF 22 xmm1 [orig:237 _151 ] [237])
        (mult:SF (reg:SF 22 xmm1 [505])
            (reg:SF 21 xmm0 [506]))) "../src/spline.f":557 802 {*fop_sf_comm}
     (nil))
(insn 351 350 352 8 (set (reg:SF 23 xmm2 [507])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 cy2+0 S4 A32])) "../src/spline.f":557 127 {*movsf_internal}
     (nil))
(insn 352 351 353 8 (set (reg:SF 21 xmm0 [508])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":557 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 353 352 354 8 (set (reg:SF 21 xmm0 [orig:238 _152 ] [238])
        (mult:SF (reg:SF 21 xmm0 [508])
            (reg:SF 23 xmm2 [507]))) "../src/spline.f":557 802 {*fop_sf_comm}
     (nil))
(insn 354 353 355 8 (set (reg:SF 21 xmm0 [509])
        (plus:SF (reg:SF 21 xmm0 [orig:238 _152 ] [238])
            (reg:SF 22 xmm1 [orig:237 _151 ] [237]))) "../src/spline.f":557 802 {*fop_sf_comm}
     (nil))
(insn 355 354 356 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -132 [0xffffffffffffff7c])) [3 yddd+0 S4 A32])
        (reg:SF 21 xmm0 [509])) "../src/spline.f":557 127 {*movsf_internal}
     (nil))
(insn 356 355 357 8 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":561 82 {*movsi_internal}
     (nil))
(insn 357 356 358 8 (parallel [
            (set (reg:SI 0 ax [orig:239 _153 ] [239])
                (plus:SI (reg:SI 0 ax [510])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":561 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 358 357 359 8 (set (reg:DI 0 ax [orig:240 _154 ] [240])
        (sign_extend:DI (reg:SI 0 ax [orig:239 _153 ] [239]))) "../src/spline.f":561 145 {*extendsidi2_rex64}
     (nil))
(insn 359 358 360 8 (parallel [
            (set (reg:DI 1 dx [orig:241 _155 ] [241])
                (plus:DI (reg:DI 0 ax [orig:240 _154 ] [240])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":561 218 {*adddi_1}
     (nil))
(insn 360 359 361 8 (set (reg/f:DI 0 ax [511])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":561 81 {*movdi_internal}
     (nil))
(insn 361 360 362 8 (set (reg:SF 21 xmm0 [orig:242 _156 ] [242])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:241 _155 ] [241])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [511])) [3 *xs_324(D) S4 A32])) "../src/spline.f":561 127 {*movsf_internal}
     (nil))
(insn 362 361 363 8 (set (reg:SF 22 xmm1 [513])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32])) "../src/spline.f":561 127 {*movsf_internal}
     (nil))
(insn 363 362 364 8 (set (reg:SF 21 xmm0 [512])
        (mult:SF (reg:SF 21 xmm0 [orig:242 _156 ] [242])
            (reg:SF 22 xmm1 [513]))) "../src/spline.f":561 802 {*fop_sf_comm}
     (nil))
(insn 364 363 365 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 f1+0 S4 A32])
        (reg:SF 21 xmm0 [512])) "../src/spline.f":561 127 {*movsf_internal}
     (nil))
(insn 365 364 366 8 (set (reg:SI 0 ax [514])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":562 82 {*movsi_internal}
     (nil))
(insn 366 365 367 8 (set (reg:DI 0 ax [orig:243 _157 ] [243])
        (sign_extend:DI (reg:SI 0 ax [514]))) "../src/spline.f":562 145 {*extendsidi2_rex64}
     (nil))
(insn 367 366 368 8 (parallel [
            (set (reg:DI 1 dx [orig:244 _158 ] [244])
                (plus:DI (reg:DI 0 ax [orig:243 _157 ] [243])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":562 218 {*adddi_1}
     (nil))
(insn 368 367 369 8 (set (reg/f:DI 0 ax [515])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":562 81 {*movdi_internal}
     (nil))
(insn 369 368 370 8 (set (reg:SF 21 xmm0 [orig:245 _159 ] [245])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:244 _158 ] [244])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [515])) [3 *x_325(D) S4 A32])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 370 369 371 8 (set (reg:SI 0 ax [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":562 82 {*movsi_internal}
     (nil))
(insn 371 370 372 8 (parallel [
            (set (reg:SI 0 ax [orig:246 _160 ] [246])
                (plus:SI (reg:SI 0 ax [516])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":562 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 372 371 373 8 (set (reg:DI 0 ax [orig:247 _161 ] [247])
        (sign_extend:DI (reg:SI 0 ax [orig:246 _160 ] [246]))) "../src/spline.f":562 145 {*extendsidi2_rex64}
     (nil))
(insn 373 372 374 8 (parallel [
            (set (reg:DI 1 dx [orig:248 _162 ] [248])
                (plus:DI (reg:DI 0 ax [orig:247 _161 ] [247])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":562 218 {*adddi_1}
     (nil))
(insn 374 373 375 8 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":562 81 {*movdi_internal}
     (nil))
(insn 375 374 376 8 (set (reg:SF 22 xmm1 [orig:249 _163 ] [249])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:248 _162 ] [248])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [517])) [3 *x_325(D) S4 A32])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 376 375 377 8 (set (reg:SF 21 xmm0 [orig:250 _164 ] [250])
        (minus:SF (reg:SF 21 xmm0 [orig:245 _159 ] [245])
            (reg:SF 22 xmm1 [orig:249 _163 ] [249]))) "../src/spline.f":562 805 {*fop_sf_1}
     (nil))
(insn 377 376 378 8 (set (reg:SF 22 xmm1 [orig:251 _165 ] [251])
        (reg:SF 21 xmm0 [orig:250 _164 ] [250])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 378 377 379 8 (set (reg:SF 21 xmm0 [518])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":562 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 379 378 380 8 (set (reg:SF 22 xmm1 [orig:252 _166 ] [252])
        (mult:SF (reg:SF 22 xmm1 [orig:251 _165 ] [251])
            (reg:SF 21 xmm0 [518]))) "../src/spline.f":562 802 {*fop_sf_comm}
     (nil))
(insn 380 379 381 8 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":562 82 {*movsi_internal}
     (nil))
(insn 381 380 382 8 (parallel [
            (set (reg:SI 0 ax [orig:253 _167 ] [253])
                (plus:SI (reg:SI 0 ax [519])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":562 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 382 381 383 8 (set (reg:DI 0 ax [orig:254 _168 ] [254])
        (sign_extend:DI (reg:SI 0 ax [orig:253 _167 ] [253]))) "../src/spline.f":562 145 {*extendsidi2_rex64}
     (nil))
(insn 383 382 384 8 (parallel [
            (set (reg:DI 1 dx [orig:255 _169 ] [255])
                (plus:DI (reg:DI 0 ax [orig:254 _168 ] [254])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":562 218 {*adddi_1}
     (nil))
(insn 384 383 385 8 (set (reg/f:DI 0 ax [520])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":562 81 {*movdi_internal}
     (nil))
(insn 385 384 386 8 (set (reg:SF 21 xmm0 [orig:256 _170 ] [256])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:255 _169 ] [255])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [520])) [3 *xs_324(D) S4 A32])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 386 385 387 8 (set (reg:SF 21 xmm0 [orig:257 _171 ] [257])
        (plus:SF (reg:SF 21 xmm0 [orig:256 _170 ] [256])
            (reg:SF 21 xmm0 [orig:256 _170 ] [256]))) "../src/spline.f":562 802 {*fop_sf_comm}
     (nil))
(insn 387 386 388 8 (set (reg:SI 0 ax [521])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":562 82 {*movsi_internal}
     (nil))
(insn 388 387 389 8 (set (reg:DI 0 ax [orig:258 _172 ] [258])
        (sign_extend:DI (reg:SI 0 ax [521]))) "../src/spline.f":562 145 {*extendsidi2_rex64}
     (nil))
(insn 389 388 390 8 (parallel [
            (set (reg:DI 1 dx [orig:259 _173 ] [259])
                (plus:DI (reg:DI 0 ax [orig:258 _172 ] [258])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":562 218 {*adddi_1}
     (nil))
(insn 390 389 391 8 (set (reg/f:DI 0 ax [522])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":562 81 {*movdi_internal}
     (nil))
(insn 391 390 392 8 (set (reg:SF 23 xmm2 [orig:260 _174 ] [260])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:259 _173 ] [259])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [522])) [3 *xs_324(D) S4 A32])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 392 391 394 8 (set (reg:SF 21 xmm0 [orig:261 _175 ] [261])
        (plus:SF (reg:SF 21 xmm0 [orig:257 _171 ] [257])
            (reg:SF 23 xmm2 [orig:260 _174 ] [260]))) "../src/spline.f":562 802 {*fop_sf_comm}
     (nil))
(insn 394 392 395 8 (set (reg:SF 21 xmm0 [orig:263 _177 ] [263])
        (mult:SF (reg:SF 21 xmm0 [orig:262 _176 ] [262])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":562 802 {*fop_sf_comm}
     (nil))
(insn 395 394 625 8 (set (reg:SF 22 xmm1 [orig:252 _166 ] [252])
        (minus:SF (reg:SF 22 xmm1 [orig:252 _166 ] [252])
            (reg:SF 21 xmm0 [orig:263 _177 ] [263]))) "../src/spline.f":562 805 {*fop_sf_1}
     (nil))
(insn 625 395 396 8 (set (reg:SF 21 xmm0 [523])
        (reg:SF 22 xmm1 [orig:252 _166 ] [252])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 396 625 397 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -140 [0xffffffffffffff74])) [3 f2+0 S4 A32])
        (reg:SF 21 xmm0 [523])) "../src/spline.f":562 127 {*movsf_internal}
     (nil))
(insn 397 396 398 8 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":563 82 {*movsi_internal}
     (nil))
(insn 398 397 399 8 (parallel [
            (set (reg:SI 0 ax [orig:264 _178 ] [264])
                (plus:SI (reg:SI 0 ax [524])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":563 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 399 398 400 8 (set (reg:DI 0 ax [orig:265 _179 ] [265])
        (sign_extend:DI (reg:SI 0 ax [orig:264 _178 ] [264]))) "../src/spline.f":563 145 {*extendsidi2_rex64}
     (nil))
(insn 400 399 401 8 (parallel [
            (set (reg:DI 1 dx [orig:266 _180 ] [266])
                (plus:DI (reg:DI 0 ax [orig:265 _179 ] [265])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":563 218 {*adddi_1}
     (nil))
(insn 401 400 402 8 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":563 81 {*movdi_internal}
     (nil))
(insn 402 401 403 8 (set (reg:SF 22 xmm1 [orig:267 _181 ] [267])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:266 _180 ] [266])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [525])) [3 *xs_324(D) S4 A32])) "../src/spline.f":563 127 {*movsf_internal}
     (nil))
(insn 403 402 404 8 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":563 82 {*movsi_internal}
     (nil))
(insn 404 403 405 8 (set (reg:DI 0 ax [orig:268 _182 ] [268])
        (sign_extend:DI (reg:SI 0 ax [526]))) "../src/spline.f":563 145 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 8 (parallel [
            (set (reg:DI 1 dx [orig:269 _183 ] [269])
                (plus:DI (reg:DI 0 ax [orig:268 _182 ] [268])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":563 218 {*adddi_1}
     (nil))
(insn 406 405 407 8 (set (reg/f:DI 0 ax [527])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -216 [0xffffffffffffff28])) [5 xs+0 S8 A64])) "../src/spline.f":563 81 {*movdi_internal}
     (nil))
(insn 407 406 408 8 (set (reg:SF 21 xmm0 [orig:270 _184 ] [270])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:269 _183 ] [269])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [527])) [3 *xs_324(D) S4 A32])) "../src/spline.f":563 127 {*movsf_internal}
     (nil))
(insn 408 407 410 8 (set (reg:SF 21 xmm0 [orig:271 _185 ] [271])
        (plus:SF (reg:SF 21 xmm0 [orig:270 _184 ] [270])
            (reg:SF 22 xmm1 [orig:267 _181 ] [267]))) "../src/spline.f":563 802 {*fop_sf_comm}
     (nil))
(insn 410 408 411 8 (set (reg:SF 21 xmm0 [orig:273 _187 ] [273])
        (mult:SF (reg:SF 21 xmm0 [orig:272 _186 ] [272])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":563 802 {*fop_sf_comm}
     (nil))
(insn 411 410 412 8 (set (reg:SI 0 ax [528])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":563 82 {*movsi_internal}
     (nil))
(insn 412 411 413 8 (set (reg:DI 0 ax [orig:274 _188 ] [274])
        (sign_extend:DI (reg:SI 0 ax [528]))) "../src/spline.f":563 145 {*extendsidi2_rex64}
     (nil))
(insn 413 412 414 8 (parallel [
            (set (reg:DI 1 dx [orig:275 _189 ] [275])
                (plus:DI (reg:DI 0 ax [orig:274 _188 ] [274])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":563 218 {*adddi_1}
     (nil))
(insn 414 413 415 8 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":563 81 {*movdi_internal}
     (nil))
(insn 415 414 416 8 (set (reg:SF 22 xmm1 [orig:276 _190 ] [276])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:275 _189 ] [275])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [529])) [3 *x_325(D) S4 A32])) "../src/spline.f":563 127 {*movsf_internal}
     (nil))
(insn 416 415 417 8 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":563 82 {*movsi_internal}
     (nil))
(insn 417 416 418 8 (parallel [
            (set (reg:SI 0 ax [orig:277 _191 ] [277])
                (plus:SI (reg:SI 0 ax [530])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":563 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 418 417 419 8 (set (reg:DI 0 ax [orig:278 _192 ] [278])
        (sign_extend:DI (reg:SI 0 ax [orig:277 _191 ] [277]))) "../src/spline.f":563 145 {*extendsidi2_rex64}
     (nil))
(insn 419 418 420 8 (parallel [
            (set (reg:DI 1 dx [orig:279 _193 ] [279])
                (plus:DI (reg:DI 0 ax [orig:278 _192 ] [278])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":563 218 {*adddi_1}
     (nil))
(insn 420 419 421 8 (set (reg/f:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 x+0 S8 A64])) "../src/spline.f":563 81 {*movdi_internal}
     (nil))
(insn 421 420 422 8 (set (reg:SF 23 xmm2 [orig:280 _194 ] [280])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:279 _193 ] [279])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [531])) [3 *x_325(D) S4 A32])) "../src/spline.f":563 127 {*movsf_internal}
     (nil))
(insn 422 421 424 8 (set (reg:SF 22 xmm1 [orig:281 _195 ] [281])
        (minus:SF (reg:SF 22 xmm1 [orig:276 _190 ] [276])
            (reg:SF 23 xmm2 [orig:280 _194 ] [280]))) "../src/spline.f":563 805 {*fop_sf_1}
     (nil))
(insn 424 422 425 8 (set (reg:SF 22 xmm1 [orig:283 _197 ] [283])
        (plus:SF (reg:SF 22 xmm1 [orig:282 _196 ] [282])
            (reg:SF 22 xmm1 [orig:282 _196 ] [282]))) "../src/spline.f":563 802 {*fop_sf_comm}
     (nil))
(insn 425 424 426 8 (set (reg:SF 21 xmm0 [532])
        (minus:SF (reg:SF 21 xmm0 [orig:273 _187 ] [273])
            (reg:SF 22 xmm1 [orig:283 _197 ] [283]))) "../src/spline.f":563 805 {*fop_sf_1}
     (nil))
(insn 426 425 427 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 f3+0 S4 A32])
        (reg:SF 21 xmm0 [532])) "../src/spline.f":563 127 {*movsf_internal}
     (nil))
(insn 427 426 626 8 (set (reg:SF 21 xmm0 [533])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -140 [0xffffffffffffff74])) [3 f2+0 S4 A32])) "../src/spline.f":565 127 {*movsf_internal}
     (nil))
(insn 626 427 428 8 (set (reg:SF 22 xmm1 [533])
        (reg:SF 21 xmm0 [533])) "../src/spline.f":565 127 {*movsf_internal}
     (nil))
(insn 428 626 429 8 (set (reg:SF 22 xmm1 [533])
        (plus:SF (reg:SF 22 xmm1 [533])
            (reg:SF 21 xmm0 [533]))) "../src/spline.f":565 802 {*fop_sf_comm}
     (nil))
(insn 429 428 430 8 (set (reg:SF 23 xmm2 [534])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":565 127 {*movsf_internal}
     (nil))
(insn 430 429 431 8 (set (reg:SF 21 xmm0 [535])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":565 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 431 430 432 8 (set (reg:SF 21 xmm0 [orig:285 _199 ] [285])
        (mult:SF (reg:SF 21 xmm0 [535])
            (reg:SF 23 xmm2 [534]))) "../src/spline.f":565 802 {*fop_sf_comm}
     (nil))
(insn 432 431 433 8 (set (reg:SF 21 xmm0 [orig:286 _200 ] [286])
        (mult:SF (reg:SF 21 xmm0 [orig:285 _199 ] [285])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])) [3 f3+0 S4 A32]))) "../src/spline.f":565 802 {*fop_sf_comm}
     (nil))
(insn 433 432 435 8 (set (reg:SF 21 xmm0 [orig:287 _201 ] [287])
        (plus:SF (reg:SF 21 xmm0 [orig:286 _200 ] [286])
            (reg:SF 22 xmm1 [orig:284 _198 ] [284]))) "../src/spline.f":565 802 {*fop_sf_comm}
     (nil))
(insn 435 433 436 8 (set (reg:SF 21 xmm0 [orig:289 _203 ] [289])
        (mult:SF (reg:SF 21 xmm0 [orig:288 _202 ] [288])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":565 802 {*fop_sf_comm}
     (nil))
(insn 436 435 437 8 (set (reg:SF 22 xmm1 [537])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [3 f1+0 S4 A32])) "../src/spline.f":565 127 {*movsf_internal}
     (nil))
(insn 437 436 438 8 (set (reg:SF 21 xmm0 [536])
        (plus:SF (reg:SF 21 xmm0 [orig:289 _203 ] [289])
            (reg:SF 22 xmm1 [537]))) "../src/spline.f":565 802 {*fop_sf_comm}
     (nil))
(insn 438 437 439 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32])
        (reg:SF 21 xmm0 [536])) "../src/spline.f":565 127 {*movsf_internal}
     (nil))
(insn 439 438 628 8 (set (reg:SF 21 xmm0 [538])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -140 [0xffffffffffffff74])) [3 f2+0 S4 A32])) "../src/spline.f":566 127 {*movsf_internal}
     (nil))
(insn 628 439 440 8 (set (reg:SF 22 xmm1 [538])
        (reg:SF 21 xmm0 [538])) "../src/spline.f":566 127 {*movsf_internal}
     (nil))
(insn 440 628 441 8 (set (reg:SF 22 xmm1 [538])
        (plus:SF (reg:SF 22 xmm1 [538])
            (reg:SF 21 xmm0 [538]))) "../src/spline.f":566 802 {*fop_sf_comm}
     (nil))
(insn 441 440 442 8 (set (reg:SF 23 xmm2 [539])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":566 127 {*movsf_internal}
     (nil))
(insn 442 441 443 8 (set (reg:SF 21 xmm0 [540])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":566 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 443 442 444 8 (set (reg:SF 21 xmm0 [orig:291 _205 ] [291])
        (mult:SF (reg:SF 21 xmm0 [540])
            (reg:SF 23 xmm2 [539]))) "../src/spline.f":566 802 {*fop_sf_comm}
     (nil))
(insn 444 443 445 8 (set (reg:SF 21 xmm0 [orig:292 _206 ] [292])
        (mult:SF (reg:SF 21 xmm0 [orig:291 _205 ] [291])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])) [3 f3+0 S4 A32]))) "../src/spline.f":566 802 {*fop_sf_comm}
     (nil))
(insn 445 444 446 8 (set (reg:SF 21 xmm0 [541])
        (plus:SF (reg:SF 21 xmm0 [orig:292 _206 ] [292])
            (reg:SF 22 xmm1 [orig:290 _204 ] [290]))) "../src/spline.f":566 802 {*fop_sf_comm}
     (nil))
(insn 446 445 447 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xdd+0 S4 A32])
        (reg:SF 21 xmm0 [541])) "../src/spline.f":566 127 {*movsf_internal}
     (nil))
(insn 447 446 448 8 (set (reg:SF 22 xmm1 [543])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 f3+0 S4 A32])) "../src/spline.f":567 127 {*movsf_internal}
     (nil))
(insn 448 447 449 8 (set (reg:SF 21 xmm0 [544])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":567 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 449 448 450 8 (set (reg:SF 21 xmm0 [542])
        (mult:SF (reg:SF 21 xmm0 [544])
            (reg:SF 22 xmm1 [543]))) "../src/spline.f":567 802 {*fop_sf_comm}
     (nil))
(insn 450 449 451 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 xddd+0 S4 A32])
        (reg:SF 21 xmm0 [542])) "../src/spline.f":567 127 {*movsf_internal}
     (nil))
(insn 451 450 452 8 (set (reg:SI 0 ax [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":570 82 {*movsi_internal}
     (nil))
(insn 452 451 453 8 (parallel [
            (set (reg:SI 0 ax [orig:293 _207 ] [293])
                (plus:SI (reg:SI 0 ax [545])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":570 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 453 452 454 8 (set (reg:DI 0 ax [orig:294 _208 ] [294])
        (sign_extend:DI (reg:SI 0 ax [orig:293 _207 ] [293]))) "../src/spline.f":570 145 {*extendsidi2_rex64}
     (nil))
(insn 454 453 455 8 (parallel [
            (set (reg:DI 1 dx [orig:295 _209 ] [295])
                (plus:DI (reg:DI 0 ax [orig:294 _208 ] [294])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":570 218 {*adddi_1}
     (nil))
(insn 455 454 456 8 (set (reg/f:DI 0 ax [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":570 81 {*movdi_internal}
     (nil))
(insn 456 455 457 8 (set (reg:SF 21 xmm0 [orig:296 _210 ] [296])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:295 _209 ] [295])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [546])) [3 *ys_331(D) S4 A32])) "../src/spline.f":570 127 {*movsf_internal}
     (nil))
(insn 457 456 458 8 (set (reg:SF 22 xmm1 [548])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32])) "../src/spline.f":570 127 {*movsf_internal}
     (nil))
(insn 458 457 459 8 (set (reg:SF 21 xmm0 [547])
        (mult:SF (reg:SF 21 xmm0 [orig:296 _210 ] [296])
            (reg:SF 22 xmm1 [548]))) "../src/spline.f":570 802 {*fop_sf_comm}
     (nil))
(insn 459 458 460 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [3 g1+0 S4 A32])
        (reg:SF 21 xmm0 [547])) "../src/spline.f":570 127 {*movsf_internal}
     (nil))
(insn 460 459 461 8 (set (reg:SI 0 ax [549])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":571 82 {*movsi_internal}
     (nil))
(insn 461 460 462 8 (set (reg:DI 0 ax [orig:297 _211 ] [297])
        (sign_extend:DI (reg:SI 0 ax [549]))) "../src/spline.f":571 145 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 8 (parallel [
            (set (reg:DI 1 dx [orig:298 _212 ] [298])
                (plus:DI (reg:DI 0 ax [orig:297 _211 ] [297])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":571 218 {*adddi_1}
     (nil))
(insn 463 462 464 8 (set (reg/f:DI 0 ax [550])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":571 81 {*movdi_internal}
     (nil))
(insn 464 463 465 8 (set (reg:SF 21 xmm0 [orig:299 _213 ] [299])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:298 _212 ] [298])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [550])) [3 *y_332(D) S4 A32])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 465 464 466 8 (set (reg:SI 0 ax [551])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":571 82 {*movsi_internal}
     (nil))
(insn 466 465 467 8 (parallel [
            (set (reg:SI 0 ax [orig:300 _214 ] [300])
                (plus:SI (reg:SI 0 ax [551])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":571 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 467 466 468 8 (set (reg:DI 0 ax [orig:301 _215 ] [301])
        (sign_extend:DI (reg:SI 0 ax [orig:300 _214 ] [300]))) "../src/spline.f":571 145 {*extendsidi2_rex64}
     (nil))
(insn 468 467 469 8 (parallel [
            (set (reg:DI 1 dx [orig:302 _216 ] [302])
                (plus:DI (reg:DI 0 ax [orig:301 _215 ] [301])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":571 218 {*adddi_1}
     (nil))
(insn 469 468 470 8 (set (reg/f:DI 0 ax [552])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":571 81 {*movdi_internal}
     (nil))
(insn 470 469 471 8 (set (reg:SF 22 xmm1 [orig:303 _217 ] [303])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:302 _216 ] [302])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [552])) [3 *y_332(D) S4 A32])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 471 470 472 8 (set (reg:SF 21 xmm0 [orig:304 _218 ] [304])
        (minus:SF (reg:SF 21 xmm0 [orig:299 _213 ] [299])
            (reg:SF 22 xmm1 [orig:303 _217 ] [303]))) "../src/spline.f":571 805 {*fop_sf_1}
     (nil))
(insn 472 471 473 8 (set (reg:SF 22 xmm1 [orig:305 _219 ] [305])
        (reg:SF 21 xmm0 [orig:304 _218 ] [304])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 473 472 474 8 (set (reg:SF 21 xmm0 [553])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":571 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 474 473 475 8 (set (reg:SF 22 xmm1 [orig:306 _220 ] [306])
        (mult:SF (reg:SF 22 xmm1 [orig:305 _219 ] [305])
            (reg:SF 21 xmm0 [553]))) "../src/spline.f":571 802 {*fop_sf_comm}
     (nil))
(insn 475 474 476 8 (set (reg:SI 0 ax [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":571 82 {*movsi_internal}
     (nil))
(insn 476 475 477 8 (parallel [
            (set (reg:SI 0 ax [orig:307 _221 ] [307])
                (plus:SI (reg:SI 0 ax [554])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":571 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 477 476 478 8 (set (reg:DI 0 ax [orig:308 _222 ] [308])
        (sign_extend:DI (reg:SI 0 ax [orig:307 _221 ] [307]))) "../src/spline.f":571 145 {*extendsidi2_rex64}
     (nil))
(insn 478 477 479 8 (parallel [
            (set (reg:DI 1 dx [orig:309 _223 ] [309])
                (plus:DI (reg:DI 0 ax [orig:308 _222 ] [308])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":571 218 {*adddi_1}
     (nil))
(insn 479 478 480 8 (set (reg/f:DI 0 ax [555])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":571 81 {*movdi_internal}
     (nil))
(insn 480 479 481 8 (set (reg:SF 21 xmm0 [orig:310 _224 ] [310])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:309 _223 ] [309])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [555])) [3 *ys_331(D) S4 A32])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 481 480 482 8 (set (reg:SF 21 xmm0 [orig:311 _225 ] [311])
        (plus:SF (reg:SF 21 xmm0 [orig:310 _224 ] [310])
            (reg:SF 21 xmm0 [orig:310 _224 ] [310]))) "../src/spline.f":571 802 {*fop_sf_comm}
     (nil))
(insn 482 481 483 8 (set (reg:SI 0 ax [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":571 82 {*movsi_internal}
     (nil))
(insn 483 482 484 8 (set (reg:DI 0 ax [orig:312 _226 ] [312])
        (sign_extend:DI (reg:SI 0 ax [556]))) "../src/spline.f":571 145 {*extendsidi2_rex64}
     (nil))
(insn 484 483 485 8 (parallel [
            (set (reg:DI 1 dx [orig:313 _227 ] [313])
                (plus:DI (reg:DI 0 ax [orig:312 _226 ] [312])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":571 218 {*adddi_1}
     (nil))
(insn 485 484 486 8 (set (reg/f:DI 0 ax [557])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":571 81 {*movdi_internal}
     (nil))
(insn 486 485 487 8 (set (reg:SF 23 xmm2 [orig:314 _228 ] [314])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:313 _227 ] [313])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [557])) [3 *ys_331(D) S4 A32])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 487 486 489 8 (set (reg:SF 21 xmm0 [orig:315 _229 ] [315])
        (plus:SF (reg:SF 21 xmm0 [orig:311 _225 ] [311])
            (reg:SF 23 xmm2 [orig:314 _228 ] [314]))) "../src/spline.f":571 802 {*fop_sf_comm}
     (nil))
(insn 489 487 490 8 (set (reg:SF 21 xmm0 [orig:317 _231 ] [317])
        (mult:SF (reg:SF 21 xmm0 [orig:316 _230 ] [316])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":571 802 {*fop_sf_comm}
     (nil))
(insn 490 489 631 8 (set (reg:SF 22 xmm1 [orig:306 _220 ] [306])
        (minus:SF (reg:SF 22 xmm1 [orig:306 _220 ] [306])
            (reg:SF 21 xmm0 [orig:317 _231 ] [317]))) "../src/spline.f":571 805 {*fop_sf_1}
     (nil))
(insn 631 490 491 8 (set (reg:SF 21 xmm0 [558])
        (reg:SF 22 xmm1 [orig:306 _220 ] [306])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 491 631 492 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [3 g2+0 S4 A32])
        (reg:SF 21 xmm0 [558])) "../src/spline.f":571 127 {*movsf_internal}
     (nil))
(insn 492 491 493 8 (set (reg:SI 0 ax [559])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":572 82 {*movsi_internal}
     (nil))
(insn 493 492 494 8 (parallel [
            (set (reg:SI 0 ax [orig:318 _232 ] [318])
                (plus:SI (reg:SI 0 ax [559])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":572 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 494 493 495 8 (set (reg:DI 0 ax [orig:319 _233 ] [319])
        (sign_extend:DI (reg:SI 0 ax [orig:318 _232 ] [318]))) "../src/spline.f":572 145 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 8 (parallel [
            (set (reg:DI 1 dx [orig:320 _234 ] [320])
                (plus:DI (reg:DI 0 ax [orig:319 _233 ] [319])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":572 218 {*adddi_1}
     (nil))
(insn 496 495 497 8 (set (reg/f:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":572 81 {*movdi_internal}
     (nil))
(insn 497 496 498 8 (set (reg:SF 22 xmm1 [orig:321 _235 ] [321])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:320 _234 ] [320])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [560])) [3 *ys_331(D) S4 A32])) "../src/spline.f":572 127 {*movsf_internal}
     (nil))
(insn 498 497 499 8 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":572 82 {*movsi_internal}
     (nil))
(insn 499 498 500 8 (set (reg:DI 0 ax [orig:322 _236 ] [322])
        (sign_extend:DI (reg:SI 0 ax [561]))) "../src/spline.f":572 145 {*extendsidi2_rex64}
     (nil))
(insn 500 499 501 8 (parallel [
            (set (reg:DI 1 dx [orig:323 _237 ] [323])
                (plus:DI (reg:DI 0 ax [orig:322 _236 ] [322])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":572 218 {*adddi_1}
     (nil))
(insn 501 500 502 8 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [5 ys+0 S8 A64])) "../src/spline.f":572 81 {*movdi_internal}
     (nil))
(insn 502 501 503 8 (set (reg:SF 21 xmm0 [orig:324 _238 ] [324])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:323 _237 ] [323])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [562])) [3 *ys_331(D) S4 A32])) "../src/spline.f":572 127 {*movsf_internal}
     (nil))
(insn 503 502 505 8 (set (reg:SF 21 xmm0 [orig:325 _239 ] [325])
        (plus:SF (reg:SF 21 xmm0 [orig:324 _238 ] [324])
            (reg:SF 22 xmm1 [orig:321 _235 ] [321]))) "../src/spline.f":572 802 {*fop_sf_comm}
     (nil))
(insn 505 503 506 8 (set (reg:SF 21 xmm0 [orig:327 _241 ] [327])
        (mult:SF (reg:SF 21 xmm0 [orig:326 _240 ] [326])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":572 802 {*fop_sf_comm}
     (nil))
(insn 506 505 507 8 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":572 82 {*movsi_internal}
     (nil))
(insn 507 506 508 8 (set (reg:DI 0 ax [orig:328 _242 ] [328])
        (sign_extend:DI (reg:SI 0 ax [563]))) "../src/spline.f":572 145 {*extendsidi2_rex64}
     (nil))
(insn 508 507 509 8 (parallel [
            (set (reg:DI 1 dx [orig:329 _243 ] [329])
                (plus:DI (reg:DI 0 ax [orig:328 _242 ] [328])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":572 218 {*adddi_1}
     (nil))
(insn 509 508 510 8 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":572 81 {*movdi_internal}
     (nil))
(insn 510 509 511 8 (set (reg:SF 22 xmm1 [orig:330 _244 ] [330])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:329 _243 ] [329])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [564])) [3 *y_332(D) S4 A32])) "../src/spline.f":572 127 {*movsf_internal}
     (nil))
(insn 511 510 512 8 (set (reg:SI 0 ax [565])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 i+0 S4 A32])) "../src/spline.f":572 82 {*movsi_internal}
     (nil))
(insn 512 511 513 8 (parallel [
            (set (reg:SI 0 ax [orig:331 _245 ] [331])
                (plus:SI (reg:SI 0 ax [565])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":572 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 513 512 514 8 (set (reg:DI 0 ax [orig:332 _246 ] [332])
        (sign_extend:DI (reg:SI 0 ax [orig:331 _245 ] [331]))) "../src/spline.f":572 145 {*extendsidi2_rex64}
     (nil))
(insn 514 513 515 8 (parallel [
            (set (reg:DI 1 dx [orig:333 _247 ] [333])
                (plus:DI (reg:DI 0 ax [orig:332 _246 ] [332])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":572 218 {*adddi_1}
     (nil))
(insn 515 514 516 8 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -224 [0xffffffffffffff20])) [5 y+0 S8 A64])) "../src/spline.f":572 81 {*movdi_internal}
     (nil))
(insn 516 515 517 8 (set (reg:SF 23 xmm2 [orig:334 _248 ] [334])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:333 _247 ] [333])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [566])) [3 *y_332(D) S4 A32])) "../src/spline.f":572 127 {*movsf_internal}
     (nil))
(insn 517 516 519 8 (set (reg:SF 22 xmm1 [orig:335 _249 ] [335])
        (minus:SF (reg:SF 22 xmm1 [orig:330 _244 ] [330])
            (reg:SF 23 xmm2 [orig:334 _248 ] [334]))) "../src/spline.f":572 805 {*fop_sf_1}
     (nil))
(insn 519 517 520 8 (set (reg:SF 22 xmm1 [orig:337 _251 ] [337])
        (plus:SF (reg:SF 22 xmm1 [orig:336 _250 ] [336])
            (reg:SF 22 xmm1 [orig:336 _250 ] [336]))) "../src/spline.f":572 802 {*fop_sf_comm}
     (nil))
(insn 520 519 521 8 (set (reg:SF 21 xmm0 [567])
        (minus:SF (reg:SF 21 xmm0 [orig:327 _241 ] [327])
            (reg:SF 22 xmm1 [orig:337 _251 ] [337]))) "../src/spline.f":572 805 {*fop_sf_1}
     (nil))
(insn 521 520 522 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [3 g3+0 S4 A32])
        (reg:SF 21 xmm0 [567])) "../src/spline.f":572 127 {*movsf_internal}
     (nil))
(insn 522 521 632 8 (set (reg:SF 21 xmm0 [568])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [3 g2+0 S4 A32])) "../src/spline.f":574 127 {*movsf_internal}
     (nil))
(insn 632 522 523 8 (set (reg:SF 22 xmm1 [568])
        (reg:SF 21 xmm0 [568])) "../src/spline.f":574 127 {*movsf_internal}
     (nil))
(insn 523 632 524 8 (set (reg:SF 22 xmm1 [568])
        (plus:SF (reg:SF 22 xmm1 [568])
            (reg:SF 21 xmm0 [568]))) "../src/spline.f":574 802 {*fop_sf_comm}
     (nil))
(insn 524 523 525 8 (set (reg:SF 23 xmm2 [569])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":574 127 {*movsf_internal}
     (nil))
(insn 525 524 526 8 (set (reg:SF 21 xmm0 [570])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":574 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 526 525 527 8 (set (reg:SF 21 xmm0 [orig:339 _253 ] [339])
        (mult:SF (reg:SF 21 xmm0 [570])
            (reg:SF 23 xmm2 [569]))) "../src/spline.f":574 802 {*fop_sf_comm}
     (nil))
(insn 527 526 528 8 (set (reg:SF 21 xmm0 [orig:340 _254 ] [340])
        (mult:SF (reg:SF 21 xmm0 [orig:339 _253 ] [339])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [3 g3+0 S4 A32]))) "../src/spline.f":574 802 {*fop_sf_comm}
     (nil))
(insn 528 527 530 8 (set (reg:SF 21 xmm0 [orig:341 _255 ] [341])
        (plus:SF (reg:SF 21 xmm0 [orig:340 _254 ] [340])
            (reg:SF 22 xmm1 [orig:338 _252 ] [338]))) "../src/spline.f":574 802 {*fop_sf_comm}
     (nil))
(insn 530 528 531 8 (set (reg:SF 21 xmm0 [orig:343 _257 ] [343])
        (mult:SF (reg:SF 21 xmm0 [orig:342 _256 ] [342])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32]))) "../src/spline.f":574 802 {*fop_sf_comm}
     (nil))
(insn 531 530 532 8 (set (reg:SF 22 xmm1 [572])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [3 g1+0 S4 A32])) "../src/spline.f":574 127 {*movsf_internal}
     (nil))
(insn 532 531 533 8 (set (reg:SF 21 xmm0 [571])
        (plus:SF (reg:SF 21 xmm0 [orig:343 _257 ] [343])
            (reg:SF 22 xmm1 [572]))) "../src/spline.f":574 802 {*fop_sf_comm}
     (nil))
(insn 533 532 534 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32])
        (reg:SF 21 xmm0 [571])) "../src/spline.f":574 127 {*movsf_internal}
     (nil))
(insn 534 533 634 8 (set (reg:SF 21 xmm0 [573])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [3 g2+0 S4 A32])) "../src/spline.f":575 127 {*movsf_internal}
     (nil))
(insn 634 534 535 8 (set (reg:SF 22 xmm1 [573])
        (reg:SF 21 xmm0 [573])) "../src/spline.f":575 127 {*movsf_internal}
     (nil))
(insn 535 634 536 8 (set (reg:SF 22 xmm1 [573])
        (plus:SF (reg:SF 22 xmm1 [573])
            (reg:SF 21 xmm0 [573]))) "../src/spline.f":575 802 {*fop_sf_comm}
     (nil))
(insn 536 535 537 8 (set (reg:SF 23 xmm2 [574])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 t+0 S4 A32])) "../src/spline.f":575 127 {*movsf_internal}
     (nil))
(insn 537 536 538 8 (set (reg:SF 21 xmm0 [575])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":575 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 538 537 539 8 (set (reg:SF 21 xmm0 [orig:345 _259 ] [345])
        (mult:SF (reg:SF 21 xmm0 [575])
            (reg:SF 23 xmm2 [574]))) "../src/spline.f":575 802 {*fop_sf_comm}
     (nil))
(insn 539 538 540 8 (set (reg:SF 21 xmm0 [orig:346 _260 ] [346])
        (mult:SF (reg:SF 21 xmm0 [orig:345 _259 ] [345])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [3 g3+0 S4 A32]))) "../src/spline.f":575 802 {*fop_sf_comm}
     (nil))
(insn 540 539 541 8 (set (reg:SF 21 xmm0 [576])
        (plus:SF (reg:SF 21 xmm0 [orig:346 _260 ] [346])
            (reg:SF 22 xmm1 [orig:344 _258 ] [344]))) "../src/spline.f":575 802 {*fop_sf_comm}
     (nil))
(insn 541 540 542 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [3 ydd+0 S4 A32])
        (reg:SF 21 xmm0 [576])) "../src/spline.f":575 127 {*movsf_internal}
     (nil))
(insn 542 541 543 8 (set (reg:SF 22 xmm1 [578])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [3 g3+0 S4 A32])) "../src/spline.f":576 127 {*movsf_internal}
     (nil))
(insn 543 542 544 8 (set (reg:SF 21 xmm0 [579])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC1") [flags 0x2]) [3  S4 A32])) "../src/spline.f":576 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 6.0e+0 [0x0.cp+3])
        (nil)))
(insn 544 543 545 8 (set (reg:SF 21 xmm0 [577])
        (mult:SF (reg:SF 21 xmm0 [579])
            (reg:SF 22 xmm1 [578]))) "../src/spline.f":576 802 {*fop_sf_comm}
     (nil))
(insn 545 544 546 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -132 [0xffffffffffffff7c])) [3 yddd+0 S4 A32])
        (reg:SF 21 xmm0 [577])) "../src/spline.f":576 127 {*movsf_internal}
     (nil))
(insn 546 545 636 8 (set (reg:SF 21 xmm0 [580])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32])) "../src/spline.f":578 127 {*movsf_internal}
     (nil))
(insn 636 546 547 8 (set (reg:SF 22 xmm1 [580])
        (reg:SF 21 xmm0 [580])) "../src/spline.f":578 127 {*movsf_internal}
     (nil))
(insn 547 636 548 8 (set (reg:SF 22 xmm1 [580])
        (mult:SF (reg:SF 22 xmm1 [580])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32]))) "../src/spline.f":578 802 {*fop_sf_comm}
     (nil))
(insn 548 547 549 8 (set (reg:SF 21 xmm0 [581])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32])) "../src/spline.f":578 127 {*movsf_internal}
     (nil))
(insn 549 548 550 8 (set (reg:SF 21 xmm0 [orig:348 _262 ] [348])
        (mult:SF (reg:SF 21 xmm0 [581])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32]))) "../src/spline.f":578 802 {*fop_sf_comm}
     (nil))
(insn 550 549 551 8 (set (reg:SF 21 xmm0 [orig:349 _263 ] [349])
        (plus:SF (reg:SF 21 xmm0 [orig:348 _262 ] [348])
            (reg:SF 22 xmm1 [orig:347 _261 ] [347]))) "../src/spline.f":578 802 {*fop_sf_comm}
     (nil))
(insn 551 550 552 8 (set (reg:SF 21 xmm0 [582])
        (sqrt:SF (reg:SF 21 xmm0 [orig:349 _263 ] [349]))) "../src/spline.f":578 836 {*sqrtsf2_sse}
     (nil))
(insn 552 551 553 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [3 sqrtb+0 S4 A32])
        (reg:SF 21 xmm0 [582])) "../src/spline.f":578 127 {*movsf_internal}
     (nil))
(insn 553 552 554 8 (set (reg:SF 0 ax [orig:390 _351 ] [390])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [3 sqrtb+0 S4 A32])) "../src/spline.f":579 127 {*movsf_internal}
     (nil))
(insn 554 553 555 8 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "../src/spline.f":579 82 {*movsi_internal}
     (nil))
(insn 555 554 556 8 (set (reg:SF 21 xmm0)
        (reg:SF 0 ax [orig:390 _351 ] [390])) "../src/spline.f":579 127 {*movsf_internal}
     (nil))
(call_insn/u 556 555 557 8 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("__powisf2") [flags 0x41]) [0  S1 A8])
            (const_int 0 [0]))) "../src/spline.f":579 665 {*call_value}
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (expr_list (use (reg:SI 5 di))
        (expr_list (use (reg:SF 21 xmm0))
            (nil))))
(insn 557 556 558 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [3 bot+0 S4 A32])
        (reg:SF 21 xmm0)) "../src/spline.f":579 127 {*movsf_internal}
     (nil))
(insn 558 557 559 8 (set (reg:SF 22 xmm1 [583])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [3 sqrtb+0 S4 A32])) "../src/spline.f":580 127 {*movsf_internal}
     (nil))
(insn 559 558 560 8 (set (reg:SF 21 xmm0 [584])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC0") [flags 0x2]) [3  S4 A32])) "../src/spline.f":580 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 3.0e+0 [0x0.cp+2])
        (nil)))
(insn 560 559 561 8 (set (reg:SF 21 xmm0 [orig:350 _264 ] [350])
        (mult:SF (reg:SF 21 xmm0 [584])
            (reg:SF 22 xmm1 [583]))) "../src/spline.f":580 802 {*fop_sf_comm}
     (nil))
(insn 561 560 638 8 (set (reg:SF 22 xmm1 [585])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32])) "../src/spline.f":580 127 {*movsf_internal}
     (nil))
(insn 638 561 562 8 (set (reg:SF 23 xmm2 [585])
        (reg:SF 22 xmm1 [585])) "../src/spline.f":580 127 {*movsf_internal}
     (nil))
(insn 562 638 563 8 (set (reg:SF 23 xmm2 [585])
        (mult:SF (reg:SF 23 xmm2 [585])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])) [3 xdd+0 S4 A32]))) "../src/spline.f":580 802 {*fop_sf_comm}
     (nil))
(insn 563 562 564 8 (set (reg:SF 22 xmm1 [586])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32])) "../src/spline.f":580 127 {*movsf_internal}
     (nil))
(insn 564 563 565 8 (set (reg:SF 22 xmm1 [orig:352 _266 ] [352])
        (mult:SF (reg:SF 22 xmm1 [586])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [3 ydd+0 S4 A32]))) "../src/spline.f":580 802 {*fop_sf_comm}
     (nil))
(insn 565 564 567 8 (set (reg:SF 22 xmm1 [orig:353 _267 ] [353])
        (plus:SF (reg:SF 22 xmm1 [orig:352 _266 ] [352])
            (reg:SF 23 xmm2 [orig:351 _265 ] [351]))) "../src/spline.f":580 802 {*fop_sf_comm}
     (nil))
(insn 567 565 568 8 (set (reg:SF 21 xmm0 [587])
        (mult:SF (reg:SF 21 xmm0 [orig:350 _264 ] [350])
            (reg:SF 22 xmm1 [orig:354 _268 ] [354]))) "../src/spline.f":580 802 {*fop_sf_comm}
     (nil))
(insn 568 567 569 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [3 dbotdt+0 S4 A32])
        (reg:SF 21 xmm0 [587])) "../src/spline.f":580 127 {*movsf_internal}
     (nil))
(insn 569 568 570 8 (set (reg:SF 21 xmm0 [588])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32])) "../src/spline.f":582 127 {*movsf_internal}
     (nil))
(insn 570 569 571 8 (set (reg:SF 21 xmm0 [orig:355 _269 ] [355])
        (mult:SF (reg:SF 21 xmm0 [588])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [3 ydd+0 S4 A32]))) "../src/spline.f":582 802 {*fop_sf_comm}
     (nil))
(insn 571 570 572 8 (set (reg:SF 22 xmm1 [589])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32])) "../src/spline.f":582 127 {*movsf_internal}
     (nil))
(insn 572 571 573 8 (set (reg:SF 22 xmm1 [orig:356 _270 ] [356])
        (mult:SF (reg:SF 22 xmm1 [589])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])) [3 xdd+0 S4 A32]))) "../src/spline.f":582 802 {*fop_sf_comm}
     (nil))
(insn 573 572 574 8 (set (reg:SF 21 xmm0 [590])
        (minus:SF (reg:SF 21 xmm0 [orig:355 _269 ] [355])
            (reg:SF 22 xmm1 [orig:356 _270 ] [356]))) "../src/spline.f":582 805 {*fop_sf_1}
     (nil))
(insn 574 573 575 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [3 top+0 S4 A32])
        (reg:SF 21 xmm0 [590])) "../src/spline.f":582 127 {*movsf_internal}
     (nil))
(insn 575 574 576 8 (set (reg:SF 21 xmm0 [591])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xd+0 S4 A32])) "../src/spline.f":583 127 {*movsf_internal}
     (nil))
(insn 576 575 577 8 (set (reg:SF 21 xmm0 [orig:357 _271 ] [357])
        (mult:SF (reg:SF 21 xmm0 [591])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -132 [0xffffffffffffff7c])) [3 yddd+0 S4 A32]))) "../src/spline.f":583 802 {*fop_sf_comm}
     (nil))
(insn 577 576 578 8 (set (reg:SF 22 xmm1 [592])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [3 yd+0 S4 A32])) "../src/spline.f":583 127 {*movsf_internal}
     (nil))
(insn 578 577 579 8 (set (reg:SF 22 xmm1 [orig:358 _272 ] [358])
        (mult:SF (reg:SF 22 xmm1 [592])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [3 xddd+0 S4 A32]))) "../src/spline.f":583 802 {*fop_sf_comm}
     (nil))
(insn 579 578 580 8 (set (reg:SF 21 xmm0 [593])
        (minus:SF (reg:SF 21 xmm0 [orig:357 _271 ] [357])
            (reg:SF 22 xmm1 [orig:358 _272 ] [358]))) "../src/spline.f":583 805 {*fop_sf_1}
     (nil))
(insn 580 579 581 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [3 dtopdt+0 S4 A32])
        (reg:SF 21 xmm0 [593])) "../src/spline.f":583 127 {*movsf_internal}
     (nil))
(insn 581 580 640 8 (set (reg:SF 21 xmm0 [orig:391 _356 ] [391])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [3 bot+0 S4 A32])) "../src/spline.f":585 127 {*movsf_internal}
     (nil))
(insn 640 581 582 8 (set (reg:SF 22 xmm1 [orig:391 _356 ] [391])
        (reg:SF 21 xmm0 [orig:391 _356 ] [391])) "../src/spline.f":585 127 {*movsf_internal}
     (nil))
(insn 582 640 583 8 (set (reg:SF 22 xmm1 [orig:391 _356 ] [391])
        (mult:SF (reg:SF 22 xmm1 [orig:391 _356 ] [391])
            (reg:SF 21 xmm0 [orig:391 _356 ] [391]))) "../src/spline.f":585 802 {*fop_sf_comm}
     (nil))
(insn 583 582 584 8 (set (reg:SF 21 xmm0 [594])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [3 dtopdt+0 S4 A32])) "../src/spline.f":585 127 {*movsf_internal}
     (nil))
(insn 584 583 585 8 (set (reg:SF 21 xmm0 [orig:359 _273 ] [359])
        (mult:SF (reg:SF 21 xmm0 [594])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -164 [0xffffffffffffff5c])) [3 bot+0 S4 A32]))) "../src/spline.f":585 802 {*fop_sf_comm}
     (nil))
(insn 585 584 586 8 (set (reg:SF 23 xmm2 [595])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [3 dbotdt+0 S4 A32])) "../src/spline.f":585 127 {*movsf_internal}
     (nil))
(insn 586 585 587 8 (set (reg:SF 23 xmm2 [orig:360 _274 ] [360])
        (mult:SF (reg:SF 23 xmm2 [595])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [3 top+0 S4 A32]))) "../src/spline.f":585 802 {*fop_sf_comm}
     (nil))
(insn 587 586 589 8 (set (reg:SF 21 xmm0 [orig:361 _275 ] [361])
        (minus:SF (reg:SF 21 xmm0 [orig:359 _273 ] [359])
            (reg:SF 23 xmm2 [orig:360 _274 ] [360]))) "../src/spline.f":585 805 {*fop_sf_1}
     (nil))
(insn 589 587 590 8 (set (reg:SF 21 xmm0 [orig:363 _277 ] [363])
        (div:SF (reg:SF 21 xmm0 [orig:362 _276 ] [362])
            (reg:SF 22 xmm1 [orig:392 _357 ] [392]))) "../src/spline.f":585 805 {*fop_sf_1}
     (nil))
(insn 590 589 591 8 (set (reg:SF 21 xmm0 [orig:364 _278 ] [364])
        (div:SF (reg:SF 21 xmm0 [orig:363 _277 ] [363])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [3 ds+0 S4 A32]))) "../src/spline.f":585 805 {*fop_sf_1}
     (nil))
(insn 591 590 592 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [3 __result_curvs+0 S4 A32])
        (reg:SF 21 xmm0 [orig:364 _278 ] [364])) "../src/spline.f":585 127 {*movsf_internal}
     (nil))
(insn 592 591 599 8 (set (reg:SF 21 xmm0 [orig:393 _359 ] [393])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [3 __result_curvs+0 S4 A32])) "../src/spline.f":587 127 {*movsf_internal}
     (nil))
(insn 599 592 600 8 (set (reg/i:SF 21 xmm0)
        (reg:SF 21 xmm0 [orig:394 <retval> ] [394])) "../src/spline.f":588 127 {*movsf_internal}
     (nil))
(insn 600 599 613 8 (use (reg/i:SF 21 xmm0)) "../src/spline.f":588 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]

(note 613 600 0 NOTE_INSN_DELETED)

;; Function sinvrt (sinvrt_, funcdef_no=12, decl_uid=4109, cgraph_uid=12, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=624, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=576, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 63:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 71:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 82:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 83:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 86:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 87:  (0) x  (1) 0  (2) xm {*fop_sf_1}
      Creating newreg=162 from oldreg=102, assigning class SSE_REGS to r162
   87: r162:SF=r162:SF/r103:SF
      REG_DEAD r103:SF
      REG_DEAD r102:SF
    Inserting insn reload before:
  156: r162:SF=r102:SF
    Inserting insn reload after:
  157: r149:SF=r162:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 88:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 90:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 91:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 93:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 99:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 102:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 106:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) v  (1) vm {*cmpiusf}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 119:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 125:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 126:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 130:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 135:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 8
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 6
   Insn 149: point = 0, n_alt = -1
   Insn 140: point = 0, n_alt = 0
   Insn 139: point = 0, n_alt = -1
   Insn 138: point = 1, n_alt = 3
   Insn 137: point = 2, n_alt = 0
   Insn 136: point = 2, n_alt = -1
   Insn 135: point = 3, n_alt = 4
   Insn 134: point = 3, n_alt = 0
   Insn 133: point = 3, n_alt = 3
   Insn 132: point = 4, n_alt = 0
   Insn 131: point = 4, n_alt = -1
   Insn 130: point = 5, n_alt = 3
   Insn 129: point = 6, n_alt = 1
   Insn 128: point = 6, n_alt = 1
   Insn 127: point = 6, n_alt = 1
   Insn 126: point = 6, n_alt = 5
   Insn 125: point = 7, n_alt = 4
  BB 8
   Insn 154: point = 8, n_alt = -1
  BB 3
   Insn 61: point = 8, n_alt = -1
   Insn 60: point = 8, n_alt = 0
   Insn 59: point = 9, n_alt = 0
   Insn 58: point = 10, n_alt = 0
  BB 5
   Insn 150: point = 10, n_alt = -1
   Insn 119: point = 10, n_alt = 1
  BB 4
   Insn 110: point = 10, n_alt = -1
   Insn 109: point = 10, n_alt = 1
   Insn 108: point = 11, n_alt = 7
   Insn 107: point = 12, n_alt = 0
   Insn 106: point = 14, n_alt = 2
   Insn 105: point = 15, n_alt = 2
   Insn 104: point = 17, n_alt = 7
   Insn 103: point = 18, n_alt = -1
   Insn 102: point = 20, n_alt = 2
   Insn 101: point = 22, n_alt = 7
   Insn 100: point = 24, n_alt = 3
   Insn 99: point = 25, n_alt = 7
   Insn 98: point = 27, n_alt = 3
   Insn 97: point = 28, n_alt = 3
   Insn 96: point = 30, n_alt = 0
   Insn 95: point = 32, n_alt = 0
   Insn 94: point = 34, n_alt = 3
   Insn 93: point = 35, n_alt = 8
   Insn 92: point = 36, n_alt = 3
   Insn 91: point = 37, n_alt = 1
   Insn 90: point = 39, n_alt = 7
   Insn 89: point = 41, n_alt = 3
   Insn 88: point = 42, n_alt = 8
   Insn 157: point = 43, n_alt = -1
	Hard reg 21 is preferable by r162 with profit 1
   Insn 87: point = 45, n_alt = 2
   Insn 156: point = 46, n_alt = -1
	Hard reg 21 is preferable by r162 with profit 1
	Hard reg 22 is preferable by r162 with profit 1
   Insn 86: point = 48, n_alt = 7
   Insn 85: point = 49, n_alt = -1
   Insn 84: point = 51, n_alt = 2
   Insn 83: point = 53, n_alt = 7
   Insn 82: point = 54, n_alt = 7
   Insn 81: point = 56, n_alt = 3
   Insn 80: point = 57, n_alt = 0
   Insn 79: point = 57, n_alt = 0
   Insn 78: point = 57, n_alt = -1
   Insn 77: point = 58, n_alt = -1
   Insn 76: point = 59, n_alt = -1
   Insn 75: point = 60, n_alt = -1
   Insn 74: point = 61, n_alt = -1
   Insn 73: point = 62, n_alt = -1
   Insn 72: point = 63, n_alt = 0
   Insn 71: point = 64, n_alt = 3
   Insn 70: point = 65, n_alt = 0
   Insn 69: point = 66, n_alt = 3
   Insn 68: point = 67, n_alt = 3
   Insn 67: point = 68, n_alt = 3
   Insn 66: point = 69, n_alt = 3
   Insn 65: point = 70, n_alt = 3
   Insn 64: point = 71, n_alt = 3
   Insn 63: point = 72, n_alt = 3
  BB 2
   Insn 56: point = 73, n_alt = 1
   Insn 52: point = 73, n_alt = 2
   Insn 51: point = 74, n_alt = 3
   Insn 50: point = 75, n_alt = -1
   Insn 48: point = 77, n_alt = 1
   Insn 46: point = 79, n_alt = 0
   Insn 47: point = 79, n_alt = 2
   Insn 45: point = 80, n_alt = 3
   Insn 44: point = 81, n_alt = 5
   Insn 43: point = 82, n_alt = 0
   Insn 42: point = 84, n_alt = 0
   Insn 41: point = 86, n_alt = 3
   Insn 37: point = 87, n_alt = 2
   Insn 36: point = 88, n_alt = 3
   Insn 35: point = 89, n_alt = -1
   Insn 33: point = 91, n_alt = 1
   Insn 31: point = 93, n_alt = 0
   Insn 32: point = 93, n_alt = 2
   Insn 30: point = 94, n_alt = 3
   Insn 29: point = 95, n_alt = 5
   Insn 28: point = 96, n_alt = 0
   Insn 27: point = 98, n_alt = 0
   Insn 26: point = 100, n_alt = 3
   Insn 22: point = 101, n_alt = 2
   Insn 21: point = 102, n_alt = 3
   Insn 20: point = 103, n_alt = -1
   Insn 18: point = 105, n_alt = 1
   Insn 16: point = 107, n_alt = 0
   Insn 17: point = 107, n_alt = 2
   Insn 15: point = 108, n_alt = 3
   Insn 14: point = 109, n_alt = 5
   Insn 13: point = 110, n_alt = 0
   Insn 12: point = 112, n_alt = 0
   Insn 11: point = 114, n_alt = 3
   Insn 7: point = 115, n_alt = 5
   Insn 6: point = 115, n_alt = 5
   Insn 5: point = 115, n_alt = 5
   Insn 4: point = 115, n_alt = 5
   Insn 3: point = 115, n_alt = 5
   Insn 2: point = 115, n_alt = 5
 r87: [111..112]
 r88: [102..103]
 r89: [101..115]
 r91: [97..98]
 r92: [88..89]
 r93: [87..115]
 r95: [83..84]
 r96: [74..75]
 r97: [73..115]
 r99: [52..54]
 r100: [52..53]
 r101: [50..51]
 r102: [47..49]
 r103: [45..48]
 r104: [38..39]
 r105: [35..37]
 r106: [31..32]
 r107: [29..30]
 r108: [26..28]
 r109: [21..25]
 r110: [21..22]
 r111: [19..20]
 r112: [16..18]
 r113: [13..15]
 r114: [10..12]
 r115: [106..108]
 r116: [104..105]
 r120: [92..94]
 r121: [90..91]
 r125: [78..80]
 r126: [76..77]
 r130: [8..9]
 r131: [113..114]
 r132: [109..110]
 r133: [106..107]
 r134: [99..100]
 r135: [95..96]
 r136: [92..93]
 r137: [85..86]
 r138: [81..82]
 r139: [78..79]
 r140: [62..72]
 r141: [61..71]
 r142: [60..70]
 r143: [59..69]
 r144: [58..68]
 r145: [57..67]
 r146: [65..66]
 r147: [63..64]
 r148: [55..56]
 r149: [42..43]
 r150: [40..41]
 r151: [35..36]
 r152: [33..34]
 r153: [26..27]
 r154: [23..24]
 r155: [16..17]
 r156: [13..14]
 r157: [10..11]
 r158: [6..7]
 r159: [4..5]
 r160: [2..3]
 r161: [0..1]
 r162: [44..46]
Compressing live ranges: from 116 to 88 - 75%
Ranges after the compression:
 r87: [84..85]
 r88: [76..77]
 r89: [76..87]
 r91: [72..73]
 r92: [64..65]
 r93: [64..87]
 r95: [60..61]
 r96: [52..53]
 r97: [52..87]
 r99: [44..45]
 r100: [44..45]
 r101: [42..43]
 r102: [40..41]
 r103: [38..41]
 r104: [32..33]
 r105: [30..31]
 r106: [26..27]
 r107: [24..25]
 r108: [22..23]
 r109: [18..21]
 r110: [18..19]
 r111: [16..17]
 r112: [14..15]
 r113: [12..13]
 r114: [10..11]
 r115: [80..81]
 r116: [78..79]
 r120: [68..69]
 r121: [66..67]
 r125: [56..57]
 r126: [54..55]
 r130: [8..9]
 r131: [86..87]
 r132: [82..83]
 r133: [80..81]
 r134: [74..75]
 r135: [70..71]
 r136: [68..69]
 r137: [62..63]
 r138: [58..59]
 r139: [56..57]
 r140: [48..51]
 r141: [48..51]
 r142: [48..51]
 r143: [48..51]
 r144: [48..51]
 r145: [48..51]
 r146: [50..51]
 r147: [48..49]
 r148: [46..47]
 r149: [36..37]
 r150: [34..35]
 r151: [30..31]
 r152: [28..29]
 r153: [22..23]
 r154: [20..21]
 r155: [14..15]
 r156: [12..13]
 r157: [10..11]
 r158: [6..7]
 r159: [4..5]
 r160: [2..3]
 r161: [0..1]
 r162: [38..39]

********** Assignment #1: **********

	 Assigning to 162 (cl=SSE_REGS, orig=102, freq=3, tfirst=162, tfreq=3)...
	   Assign 22 to reload r162 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=624, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=576, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 82
changing reg in insn 84
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 99
changing reg in insn 102
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 59
changing reg in insn 60
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 63
changing reg in insn 73
changing reg in insn 64
changing reg in insn 74
changing reg in insn 65
changing reg in insn 75
changing reg in insn 66
changing reg in insn 76
changing reg in insn 67
changing reg in insn 77
changing reg in insn 68
changing reg in insn 78
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 81
changing reg in insn 82
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 73.
deleting insn with uid = 74.
deleting insn with uid = 75.
deleting insn with uid = 76.
deleting insn with uid = 77.
deleting insn with uid = 156.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 132.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 140.


sinvrt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={34d,32u} r1={11d,7u} r2={6d,2u} r4={7d,3u} r5={11d,7u} r6={1d,53u} r7={4d,16u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={20d,6u} r18={4d} r19={4d} r20={1d,1u} r21={16d,11u,1e} r22={12d,7u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={6d,2u} r38={6d,2u} r39={5d} r40={5d} r41={1d} r42={1d} r43={1d} r44={1d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 545{395d,149u,1e} in 105{101 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 115 116 120 121 125 126 131 132 133 134 135 136 137 138 139
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [4 si+0 S8 A64])
        (reg:DI 5 di [ si ])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [4 xi+0 S8 A64])
        (reg:DI 4 si [ xi ])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [5 x+0 S8 A64])
        (reg:DI 1 dx [ x ])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [5 xs+0 S8 A64])
        (reg:DI 2 cx [ xs ])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [5 s+0 S8 A64])
        (reg:DI 37 r8 [ s ])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [6 n+0 S8 A64])
        (reg:DI 38 r9 [ n ])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [6 n+0 S8 A64])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [131]) [1 *n_33(D)+0 S4 A32])) "../src/spline.f":591 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [132])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":591 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.82+0 S8 A64])
        (reg:DI 0 ax [132])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:115 size.83_35 ] [115])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.82+0 S8 A64])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [133])
        (const_int 0 [0])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:115 size.83_35 ] [115])
            (const_int 0 [0]))) "../src/spline.f":591 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:116 size.83_36 ] [116])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:115 size.83_35 ] [115])
            (reg:DI 1 dx [133]))) "../src/spline.f":591 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (reg:DI 43 r14 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.232_2 ] [88])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (reg:DI 44 r15 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [6 n+0 S8 A64])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [134]) [1 *n_33(D)+0 S4 A32])) "../src/spline.f":591 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [135])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":591 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.84+0 S8 A64])
        (reg:DI 0 ax [135])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:120 size.85_41 ] [120])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.84+0 S8 A64])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [136])
        (const_int 0 [0])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:120 size.85_41 ] [120])
            (const_int 0 [0]))) "../src/spline.f":591 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:121 size.85_42 ] [121])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:120 size.85_41 ] [120])
            (reg:DI 1 dx [136]))) "../src/spline.f":591 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (reg:DI 41 r12 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.234_6 ] [92])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (reg:DI 42 r13 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [6 n+0 S8 A64])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [137]) [1 *n_33(D)+0 S4 A32])) "../src/spline.f":591 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [138])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":591 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.80+0 S8 A64])
        (reg:DI 0 ax [138])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:125 size.81_47 ] [125])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.80+0 S8 A64])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [139])
        (const_int 0 [0])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:125 size.81_47 ] [125])
            (const_int 0 [0]))) "../src/spline.f":591 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:126 size.81_48 ] [126])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:125 size.81_47 ] [125])
            (reg:DI 1 dx [139]))) "../src/spline.f":591 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 39 r10 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.236_10 ] [96])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 40 r11 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":591 81 {*movdi_internal}
     (nil))
(insn 56 52 120 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 iter+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":606 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              5 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130
(code_label 120 56 57 3 143 (nil) [1 uses])
(note 57 120 58 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 iter+0 S4 A32])
            (const_int 10 [0xa]))) "../src/spline.f":606 7 {*cmpsi_1}
     (nil))
(insn 59 58 60 3 (set (reg:QI 0 ax [orig:130 _53 ] [130])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":606 613 {*setcc_qi}
     (nil))
(insn 60 59 61 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:130 _53 ] [130])
            (const_int 0 [0]))) "../src/spline.f":606 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 61 60 62 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 153)
            (pc))) "../src/spline.f":606 617 {*jcc_1}
     (nil)
 -> 153)
;;  succ:       8
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157
(note 62 61 63 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 4 (parallel [
            (set (reg:DI 38 r9 [140])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":607 218 {*adddi_1}
     (nil))
(insn 64 63 65 4 (set (reg:DI 37 r8 [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [6 n+0 S8 A64])) "../src/spline.f":607 81 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DI 2 cx [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [5 s+0 S8 A64])) "../src/spline.f":607 81 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:DI 1 dx [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [5 xs+0 S8 A64])) "../src/spline.f":607 81 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DI 4 si [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -584 [0xfffffffffffffdb8])) [5 x+0 S8 A64])) "../src/spline.f":607 81 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [4 si+0 S8 A64])) "../src/spline.f":607 81 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 5 di [146])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":607 218 {*adddi_1}
     (nil))
(insn 70 69 71 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 5 di [146])) "../src/spline.f":607 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 71 70 72 4 (parallel [
            (set (reg:DI 5 di [147])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":607 218 {*adddi_1}
     (nil))
(insn 72 71 78 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 5 di [147])) "../src/spline.f":607 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 78 72 79 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [145])) "../src/spline.f":607 81 {*movdi_internal}
     (nil))
(call_insn 79 78 80 4 (call (mem:QI (symbol_ref:DI ("sevall_") [flags 0x403]  <function_decl 0x1427e4800 sevall>) [0 sevall S1 A8])
        (const_int 16 [0x10])) "../src/spline.f":607 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 80 79 81 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":607 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [4 xi+0 S8 A64])) "../src/spline.f":608 81 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:SF 21 xmm0 [orig:99 _13 ] [99])
        (mem:SF (reg/f:DI 0 ax [148]) [3 *xi_59(D)+0 S4 A32])) "../src/spline.f":608 127 {*movsf_internal}
     (nil))
(insn 83 82 84 4 (set (reg:SF 22 xmm1 [orig:100 xx.238_14 ] [100])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 xx+0 S4 A64])) "../src/spline.f":608 127 {*movsf_internal}
     (nil))
(insn 84 83 85 4 (set (reg:SF 21 xmm0 [orig:101 _15 ] [101])
        (minus:SF (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 22 xmm1 [orig:100 xx.238_14 ] [100]))) "../src/spline.f":608 805 {*fop_sf_1}
     (nil))
(insn 85 84 86 4 (set (reg:SF 22 xmm1 [orig:102 _16 ] [102])
        (reg:SF 21 xmm0 [orig:101 _15 ] [101])) "../src/spline.f":608 127 {*movsf_internal}
     (nil))
(insn 86 85 87 4 (set (reg:SF 21 xmm0 [orig:103 xxs.239_17 ] [103])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 xxs+0 S4 A32])) "../src/spline.f":608 127 {*movsf_internal}
     (nil))
(insn 87 86 157 4 (set (reg:SF 22 xmm1 [orig:102 _16 ] [102])
        (div:SF (reg:SF 22 xmm1 [orig:102 _16 ] [102])
            (reg:SF 21 xmm0 [orig:103 xxs.239_17 ] [103]))) "../src/spline.f":608 805 {*fop_sf_1}
     (nil))
(insn 157 87 88 4 (set (reg:SF 21 xmm0 [149])
        (reg:SF 22 xmm1 [orig:102 _16 ] [102])) "../src/spline.f":608 127 {*movsf_internal}
     (nil))
(insn 88 157 89 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [3 ds+0 S4 A32])
        (reg:SF 21 xmm0 [149])) "../src/spline.f":608 127 {*movsf_internal}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [4 si+0 S8 A64])) "../src/spline.f":609 81 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (reg/f:DI 0 ax [150]) [3 *si_54(D)+0 S4 A32])) "../src/spline.f":609 127 {*movsf_internal}
     (nil))
(insn 91 90 92 4 (set (reg:SF 21 xmm0 [orig:105 _19 ] [105])
        (plus:SF (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [3 ds+0 S4 A32]))) "../src/spline.f":609 802 {*fop_sf_comm}
     (nil))
(insn 92 91 93 4 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [4 si+0 S8 A64])) "../src/spline.f":609 81 {*movdi_internal}
     (nil))
(insn 93 92 94 4 (set (mem:SF (reg/f:DI 0 ax [151]) [3 *si_54(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:105 _19 ] [105])) "../src/spline.f":609 127 {*movsf_internal}
     (nil))
(insn 94 93 95 4 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [6 n+0 S8 A64])) "../src/spline.f":610 81 {*movdi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:SI 0 ax [orig:106 _20 ] [106])
        (mem:SI (reg/f:DI 0 ax [152]) [1 *n_33(D)+0 S4 A32])) "../src/spline.f":610 82 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [orig:106 _20 ] [106]))) "../src/spline.f":610 145 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":610 218 {*adddi_1}
     (nil))
(insn 98 97 99 4 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [5 s+0 S8 A64])) "../src/spline.f":610 81 {*movdi_internal}
     (nil))
(insn 99 98 100 4 (set (reg:SF 21 xmm0 [orig:109 _23 ] [109])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [153])) [3 *s_57(D) S4 A32])) "../src/spline.f":610 127 {*movsf_internal}
     (nil))
(insn 100 99 101 4 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [5 s+0 S8 A64])) "../src/spline.f":610 81 {*movdi_internal}
     (nil))
(insn 101 100 102 4 (set (reg:SF 22 xmm1 [orig:110 _24 ] [110])
        (mem:SF (reg/f:DI 0 ax [154]) [3 *s_57(D)+0 S4 A32])) "../src/spline.f":610 127 {*movsf_internal}
     (nil))
(insn 102 101 103 4 (set (reg:SF 21 xmm0 [orig:111 _25 ] [111])
        (minus:SF (reg:SF 21 xmm0 [orig:109 _23 ] [109])
            (reg:SF 22 xmm1 [orig:110 _24 ] [110]))) "../src/spline.f":610 805 {*fop_sf_1}
     (nil))
(insn 103 102 104 4 (set (reg:SF 22 xmm1 [orig:112 _26 ] [112])
        (reg:SF 21 xmm0 [orig:111 _25 ] [111])) "../src/spline.f":610 127 {*movsf_internal}
     (nil))
(insn 104 103 105 4 (set (reg:SF 21 xmm0 [155])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [3 ds+0 S4 A32])) "../src/spline.f":610 127 {*movsf_internal}
     (nil))
(insn 105 104 106 4 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (div:SF (reg:SF 21 xmm0 [155])
            (reg:SF 22 xmm1 [orig:112 _26 ] [112]))) "../src/spline.f":610 805 {*fop_sf_1}
     (nil))
(insn 106 105 107 4 (set (reg:V4SF 22 xmm1 [156])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":610 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 107 106 108 4 (parallel [
            (set (reg:SF 21 xmm0 [orig:114 _28 ] [114])
                (abs:SF (reg:SF 21 xmm0 [orig:113 _27 ] [113])))
            (use (reg:V4SF 22 xmm1 [156]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":610 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 21 xmm0 [orig:113 _27 ] [113]))
        (nil)))
(insn 108 107 109 4 (set (reg:SF 22 xmm1 [157])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC14") [flags 0x2]) [3  S4 A32])) "../src/spline.f":610 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.99999974737875163555145263671875e-6 [0x0.a7c5acp-16])
        (nil)))
(insn 109 108 110 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [157])
            (reg:SF 21 xmm0 [orig:114 _28 ] [114]))) "../src/spline.f":610 51 {*cmpiusf}
     (nil))
(jump_insn 110 109 118 4 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) "../src/spline.f":610 617 {*jcc_1}
     (nil)
 -> 145)
;;  succ:       7
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 8, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 118 110 119 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 150 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 iter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 iter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":606 217 {*addsi_1}
     (nil))
(jump_insn 150 119 151 5 (set (pc)
        (label_ref 120)) "../src/spline.f":606 649 {jump}
     (nil)
 -> 120)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 151 150 153)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 153 151 152 8 145 (nil) [1 uses])
(note 152 153 154 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 154 152 123 8 (const_int 0 [0]) "../src/spline.f":611 682 {nop}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 7, flags: (RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 159 160 161
(code_label 123 154 124 6 139 (nil) [0 uses])
(note 124 123 125 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 6 (set (reg/f:DI 0 ax [158])
        (symbol_ref/f:DI ("*lC15") [flags 0x2]  <var_decl 0x143540c60 *lC15>)) "../src/spline.f":612 81 {*movdi_internal}
     (nil))
(insn 126 125 127 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -552 [0xfffffffffffffdd8])) [12 dt_parm.86.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [158])) "../src/spline.f":612 81 {*movdi_internal}
     (nil))
(insn 127 126 128 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -544 [0xfffffffffffffde0])) [1 dt_parm.86.common.line+0 S4 A128])
        (const_int 612 [0x264])) "../src/spline.f":612 82 {*movsi_internal}
     (nil))
(insn 128 127 129 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -560 [0xfffffffffffffdd0])) [1 dt_parm.86.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "../src/spline.f":612 82 {*movsi_internal}
     (nil))
(insn 129 128 130 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -556 [0xfffffffffffffdd4])) [1 dt_parm.86.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/spline.f":612 82 {*movsi_internal}
     (nil))
(insn 130 129 131 6 (parallel [
            (set (reg:DI 0 ax [159])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":612 218 {*adddi_1}
     (nil))
(insn 131 130 132 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [159])) "../src/spline.f":612 81 {*movdi_internal}
     (nil))
(call_insn 132 131 133 6 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":612 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 133 132 134 6 (parallel [
            (set (reg:DI 0 ax [160])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":612 218 {*adddi_1}
     (nil))
(insn 134 133 135 6 (set (reg:SI 1 dx)
        (const_int 47 [0x2f])) "../src/spline.f":612 82 {*movsi_internal}
     (nil))
(insn 135 134 136 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC16") [flags 0x2]  <var_decl 0x143540cf0 *lC16>)) "../src/spline.f":612 81 {*movdi_internal}
     (nil))
(insn 136 135 137 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) "../src/spline.f":612 81 {*movdi_internal}
     (nil))
(call_insn 137 136 138 6 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":612 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 138 137 139 6 (parallel [
            (set (reg:DI 0 ax [161])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":612 218 {*adddi_1}
     (nil))
(insn 139 138 140 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [161])) "../src/spline.f":612 81 {*movdi_internal}
     (nil))
(call_insn 140 139 149 6 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/spline.f":612 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 149 140 145 6 (const_int 0 [0]) "../src/spline.f":613 682 {nop}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              4
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 149 146 7 138 (nil) [1 uses])
(note 146 145 155 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 155 146 0 NOTE_INSN_DELETED)

;; Function scalc (scalc_, funcdef_no=13, decl_uid=4152, cgraph_uid=13, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 68:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 70:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 79:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
      Creating newreg=169 from oldreg=141, assigning class SSE_REGS to r169
   79: r169:SF=r169:SF*r141:SF
      REG_DEAD r141:SF
    Inserting insn reload before:
  125: r169:SF=r141:SF
    Inserting insn reload after:
  126: r142:SF=r169:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 84:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 90:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 91:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 99:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 1 in insn 100:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =v  (1) vm {*sqrtsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 1 in insn 105:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 107:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 108:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 118: point = 0, n_alt = -1
  BB 6
   Insn 123: point = 0, n_alt = -1
  BB 3
   Insn 64: point = 0, n_alt = -1
   Insn 63: point = 0, n_alt = 0
   Insn 62: point = 1, n_alt = 0
   Insn 61: point = 2, n_alt = 0
  BB 4
   Insn 119: point = 3, n_alt = -1
   Insn 108: point = 3, n_alt = 1
   Insn 107: point = 3, n_alt = 8
   Insn 106: point = 4, n_alt = 3
   Insn 105: point = 5, n_alt = 1
   Insn 104: point = 7, n_alt = 3
   Insn 103: point = 9, n_alt = 0
   Insn 102: point = 11, n_alt = 0
   Insn 101: point = 12, n_alt = 0
   Insn 100: point = 14, n_alt = 1
   Insn 99: point = 16, n_alt = 7
   Insn 98: point = 18, n_alt = 3
   Insn 97: point = 19, n_alt = 3
   Insn 96: point = 21, n_alt = 0
   Insn 95: point = 23, n_alt = 0
   Insn 94: point = 25, n_alt = 0
   Insn 93: point = 26, n_alt = 1
   Insn 92: point = 28, n_alt = -1
   Insn 91: point = 30, n_alt = 2
   Insn 90: point = 32, n_alt = 7
   Insn 89: point = 34, n_alt = 3
   Insn 88: point = 35, n_alt = 3
   Insn 87: point = 37, n_alt = 0
   Insn 86: point = 39, n_alt = 0
   Insn 85: point = 41, n_alt = 0
   Insn 84: point = 42, n_alt = 7
   Insn 83: point = 44, n_alt = 3
   Insn 82: point = 45, n_alt = 3
   Insn 81: point = 47, n_alt = 0
   Insn 80: point = 49, n_alt = 0
   Insn 126: point = 50, n_alt = -1
	Hard reg 22 is preferable by r169 with profit 1
   Insn 79: point = 52, n_alt = 1
   Insn 125: point = 53, n_alt = -1
	Hard reg 22 is preferable by r169 with profit 1
	Hard reg 21 is preferable by r169 with profit 1
   Insn 78: point = 54, n_alt = -1
   Insn 77: point = 56, n_alt = 2
   Insn 76: point = 58, n_alt = 7
   Insn 75: point = 60, n_alt = 3
   Insn 74: point = 61, n_alt = 3
   Insn 73: point = 63, n_alt = 0
   Insn 72: point = 65, n_alt = 0
   Insn 71: point = 67, n_alt = 0
   Insn 70: point = 68, n_alt = 7
   Insn 69: point = 70, n_alt = 3
   Insn 68: point = 71, n_alt = 3
   Insn 67: point = 73, n_alt = 0
   Insn 66: point = 75, n_alt = 0
  BB 2
   Insn 59: point = 77, n_alt = 1
   Insn 58: point = 77, n_alt = 0
   Insn 57: point = 79, n_alt = 3
   Insn 56: point = 80, n_alt = 8
   Insn 55: point = 81, n_alt = 7
   Insn 54: point = 82, n_alt = 3
   Insn 50: point = 83, n_alt = 2
   Insn 49: point = 84, n_alt = 3
   Insn 48: point = 85, n_alt = -1
   Insn 46: point = 87, n_alt = 1
   Insn 44: point = 89, n_alt = 0
   Insn 45: point = 89, n_alt = 2
   Insn 43: point = 90, n_alt = 3
   Insn 42: point = 91, n_alt = 5
   Insn 41: point = 92, n_alt = 0
   Insn 40: point = 94, n_alt = 0
   Insn 39: point = 96, n_alt = 3
   Insn 35: point = 97, n_alt = 2
   Insn 34: point = 98, n_alt = 3
   Insn 33: point = 99, n_alt = -1
   Insn 31: point = 101, n_alt = 1
   Insn 29: point = 103, n_alt = 0
   Insn 30: point = 103, n_alt = 2
   Insn 28: point = 104, n_alt = 3
   Insn 27: point = 105, n_alt = 5
   Insn 26: point = 106, n_alt = 0
   Insn 25: point = 108, n_alt = 0
   Insn 24: point = 110, n_alt = 3
   Insn 20: point = 111, n_alt = 2
   Insn 19: point = 112, n_alt = 3
   Insn 18: point = 113, n_alt = -1
   Insn 16: point = 115, n_alt = 1
   Insn 14: point = 117, n_alt = 0
   Insn 15: point = 117, n_alt = 2
   Insn 13: point = 118, n_alt = 3
   Insn 12: point = 119, n_alt = 5
   Insn 11: point = 120, n_alt = 0
   Insn 10: point = 122, n_alt = 0
   Insn 9: point = 124, n_alt = 3
   Insn 5: point = 125, n_alt = 5
   Insn 4: point = 125, n_alt = 5
   Insn 3: point = 125, n_alt = 5
   Insn 2: point = 125, n_alt = 5
 r87: [121..122]
 r88: [112..113]
 r89: [111..125]
 r91: [107..108]
 r92: [98..99]
 r93: [97..125]
 r95: [93..94]
 r96: [84..85]
 r97: [83..125]
 r99: [72..73]
 r100: [69..71]
 r101: [57..68]
 r102: [64..65]
 r103: [62..63]
 r104: [59..61]
 r105: [57..58]
 r106: [55..56]
 r107: [46..47]
 r108: [43..45]
 r109: [31..42]
 r110: [38..39]
 r111: [36..37]
 r112: [33..35]
 r113: [31..32]
 r114: [29..30]
 r115: [22..23]
 r116: [20..21]
 r117: [17..19]
 r118: [6..16]
 r119: [13..14]
 r120: [6..12]
 r121: [8..9]
 r122: [3..7]
 r123: [3..5]
 r124: [116..118]
 r125: [114..115]
 r129: [102..104]
 r130: [100..101]
 r134: [88..90]
 r135: [86..87]
 r139: [0..77]
 r140: [0..1]
 r141: [52..54]
 r142: [15..50]
 r143: [27..28]
 r144: [15..26]
 r145: [123..124]
 r146: [119..120]
 r147: [116..117]
 r148: [109..110]
 r149: [105..106]
 r150: [102..103]
 r151: [95..96]
 r152: [91..92]
 r153: [88..89]
 r154: [80..82]
 r155: [80..81]
 r156: [78..79]
 r157: [74..75]
 r158: [69..70]
 r159: [66..67]
 r160: [59..60]
 r161: [48..49]
 r162: [43..44]
 r163: [40..41]
 r164: [33..34]
 r165: [24..25]
 r166: [17..18]
 r167: [10..11]
 r168: [3..4]
 r169: [51..53]
Compressing live ranges: from 126 to 102 - 80%
Ranges after the compression:
 r87: [98..99]
 r88: [90..91]
 r89: [90..101]
 r91: [86..87]
 r92: [78..79]
 r93: [78..101]
 r95: [74..75]
 r96: [66..67]
 r97: [66..101]
 r99: [58..59]
 r100: [56..57]
 r101: [46..55]
 r102: [52..53]
 r103: [50..51]
 r104: [48..49]
 r105: [46..47]
 r106: [44..45]
 r107: [38..39]
 r108: [36..37]
 r109: [26..35]
 r110: [32..33]
 r111: [30..31]
 r112: [28..29]
 r113: [26..27]
 r114: [24..25]
 r115: [18..19]
 r116: [16..17]
 r117: [14..15]
 r118: [4..13]
 r119: [10..11]
 r120: [4..9]
 r121: [6..7]
 r122: [2..5]
 r123: [2..3]
 r124: [94..95]
 r125: [92..93]
 r129: [82..83]
 r130: [80..81]
 r134: [70..71]
 r135: [68..69]
 r139: [0..61]
 r140: [0..1]
 r141: [42..43]
 r142: [12..41]
 r143: [22..23]
 r144: [12..21]
 r145: [100..101]
 r146: [96..97]
 r147: [94..95]
 r148: [88..89]
 r149: [84..85]
 r150: [82..83]
 r151: [76..77]
 r152: [72..73]
 r153: [70..71]
 r154: [64..65]
 r155: [64..65]
 r156: [62..63]
 r157: [60..61]
 r158: [56..57]
 r159: [54..55]
 r160: [48..49]
 r161: [40..41]
 r162: [36..37]
 r163: [34..35]
 r164: [28..29]
 r165: [20..21]
 r166: [14..15]
 r167: [8..9]
 r168: [2..3]
 r169: [42..43]

********** Assignment #1: **********

	 Assigning to 169 (cl=SSE_REGS, orig=141, freq=3, tfirst=169, tfreq=3)...
	   Assign 22 to reload r169 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 49
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 77
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 91
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 107
changing reg in insn 105
changing reg in insn 107
changing reg in insn 13
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 46
changing reg in insn 48
changing reg in insn 58
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 78
changing reg in insn 79
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 93
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
deleting insn with uid = 18.
deleting insn with uid = 33.
deleting insn with uid = 48.
deleting insn with uid = 78.
deleting insn with uid = 126.
deleting insn with uid = 92.
starting the processing of deferred insns
ending the processing of deferred insns


scalc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;;  ref usage 	r0={40d,42u} r1={5d,5u} r2={7d,7u} r4={1d,1u} r5={1d,1u} r6={1d,37u} r7={1d,6u} r17={15d,5u} r20={1d,1u,3e} r21={10d,11u} r22={4d,3u} r23={3d,2u} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={1d} r42={1d} 
;;    total ref usage 226{102d,121u,3e} in 89{89 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 124 125 129 130 134 135 139 145 146 147 148 149 150 151 152 153 154 155 156
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])
        (reg:DI 5 di [ x ])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 y+0 S8 A64])
        (reg:DI 4 si [ y ])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [6 n+0 S8 A64])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [145]) [1 *n_41(D)+0 S4 A32])) "../src/spline.f":618 82 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [146])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":618 145 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ubound.87+0 S8 A64])
        (reg:DI 0 ax [146])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg:DI 0 ax [orig:124 size.88_43 ] [124])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 ubound.87+0 S8 A64])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 15 13 14 2 (set (reg:DI 1 dx [147])
        (const_int 0 [0])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 14 15 16 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:124 size.88_43 ] [124])
            (const_int 0 [0]))) "../src/spline.f":618 4 {*cmpdi_ccno_1}
     (nil))
(insn 16 14 19 2 (set (reg:DI 0 ax [orig:125 size.88_44 ] [125])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:124 size.88_43 ] [124])
            (reg:DI 1 dx [147]))) "../src/spline.f":618 967 {*movdicc_noc}
     (nil))
(insn 19 16 20 2 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.240_2 ] [88])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 20 19 24 2 (set (reg:DI 42 r13 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 24 20 25 2 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [6 n+0 S8 A64])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [148]) [1 *n_41(D)+0 S4 A32])) "../src/spline.f":618 82 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [149])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":618 145 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.89+0 S8 A64])
        (reg:DI 0 ax [149])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 28 27 30 2 (set (reg:DI 0 ax [orig:129 size.90_49 ] [129])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 ubound.89+0 S8 A64])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 30 28 29 2 (set (reg:DI 1 dx [150])
        (const_int 0 [0])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 29 30 31 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:129 size.90_49 ] [129])
            (const_int 0 [0]))) "../src/spline.f":618 4 {*cmpdi_ccno_1}
     (nil))
(insn 31 29 34 2 (set (reg:DI 0 ax [orig:130 size.90_50 ] [130])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:129 size.90_49 ] [129])
            (reg:DI 1 dx [150]))) "../src/spline.f":618 967 {*movdicc_noc}
     (nil))
(insn 34 31 35 2 (set (reg:DI 39 r10 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.242_6 ] [92])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 35 34 39 2 (set (reg:DI 40 r11 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 39 35 40 2 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [6 n+0 S8 A64])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [151]) [1 *n_41(D)+0 S4 A32])) "../src/spline.f":618 82 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 0 ax [152])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":618 145 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.91+0 S8 A64])
        (reg:DI 0 ax [152])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 43 42 45 2 (set (reg:DI 0 ax [orig:134 size.92_55 ] [134])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.91+0 S8 A64])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 45 43 44 2 (set (reg:DI 1 dx [153])
        (const_int 0 [0])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 44 45 46 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:134 size.92_55 ] [134])
            (const_int 0 [0]))) "../src/spline.f":618 4 {*cmpdi_ccno_1}
     (nil))
(insn 46 44 49 2 (set (reg:DI 0 ax [orig:135 size.92_56 ] [135])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:134 size.92_55 ] [134])
            (reg:DI 1 dx [153]))) "../src/spline.f":618 967 {*movdicc_noc}
     (nil))
(insn 49 46 50 2 (set (reg:DI 37 r8 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.244_10 ] [96])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 50 49 54 2 (set (reg:DI 38 r9 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":618 81 {*movdi_internal}
     (nil))
(insn 54 50 55 2 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])) "../src/spline.f":625 81 {*movdi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:SF 21 xmm0 [155])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":625 127 {*movsf_internal}
     (nil))
(insn 56 55 57 2 (set (mem:SF (reg/f:DI 0 ax [154]) [3 *s_60(D)+0 S4 A32])
        (reg:SF 21 xmm0 [155])) "../src/spline.f":625 127 {*movsf_internal}
     (nil))
(insn 57 56 58 2 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [6 n+0 S8 A64])) "../src/spline.f":626 81 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:SI 1 dx [orig:139 _62 ] [139])
        (mem:SI (reg/f:DI 0 ax [156]) [1 *n_41(D)+0 S4 A32])) "../src/spline.f":626 82 {*movsi_internal}
     (nil))
(insn 59 58 109 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":626 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  def 	 17 [flags] 140
(code_label 109 59 60 3 148 (nil) [1 uses])
(note 60 109 61 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
            (reg:SI 1 dx [orig:139 _62 ] [139]))) "../src/spline.f":626 7 {*cmpsi_1}
     (nil))
(insn 62 61 63 3 (set (reg:QI 0 ax [orig:140 _64 ] [140])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":626 613 {*setcc_qi}
     (nil))
(insn 63 62 64 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:140 _64 ] [140])
            (const_int 0 [0]))) "../src/spline.f":626 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 64 63 65 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 122)
            (pc))) "../src/spline.f":626 617 {*jcc_1}
     (nil)
 -> 122)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 141 142 143 144 157 158 159 160 161 162 163 164 165 166 167 168
(note 65 64 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 4 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":627 82 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DI 0 ax [orig:99 _13 ] [99])
        (sign_extend:DI (reg:SI 0 ax [157]))) "../src/spline.f":627 145 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:DI 2 cx [orig:100 _14 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 _13 ] [99])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 218 {*adddi_1}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])) "../src/spline.f":627 81 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:SF 21 xmm0 [orig:101 _15 ] [101])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:100 _14 ] [100])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [158])) [3 *x_65(D) S4 A32])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 71 70 72 4 (set (reg:SI 0 ax [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":627 82 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg:SI 0 ax [orig:102 _16 ] [102])
                (plus:SI (reg:SI 0 ax [159])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 73 72 74 4 (set (reg:DI 0 ax [orig:103 _17 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _16 ] [102]))) "../src/spline.f":627 145 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 4 (parallel [
            (set (reg:DI 2 cx [orig:104 _18 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 _17 ] [103])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 218 {*adddi_1}
     (nil))
(insn 75 74 76 4 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])) "../src/spline.f":627 81 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:SF 22 xmm1 [orig:105 _19 ] [105])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:104 _18 ] [104])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [160])) [3 *x_65(D) S4 A32])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 77 76 125 4 (set (reg:SF 21 xmm0 [orig:106 _20 ] [106])
        (minus:SF (reg:SF 21 xmm0 [orig:101 _15 ] [101])
            (reg:SF 22 xmm1 [orig:105 _19 ] [105]))) "../src/spline.f":627 805 {*fop_sf_1}
     (nil))
(insn 125 77 79 4 (set (reg:SF 22 xmm1 [orig:141 _66 ] [141])
        (reg:SF 21 xmm0 [orig:141 _66 ] [141])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 79 125 80 4 (set (reg:SF 22 xmm1 [orig:141 _66 ] [141])
        (mult:SF (reg:SF 22 xmm1 [orig:141 _66 ] [141])
            (reg:SF 21 xmm0 [orig:141 _66 ] [141]))) "../src/spline.f":627 802 {*fop_sf_comm}
     (nil))
(insn 80 79 81 4 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":627 82 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [161]))) "../src/spline.f":627 145 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg:DI 2 cx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 218 {*adddi_1}
     (nil))
(insn 83 82 84 4 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 y+0 S8 A64])) "../src/spline.f":627 81 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:SF 21 xmm0 [orig:109 _23 ] [109])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:108 _22 ] [108])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [162])) [3 *y_68(D) S4 A32])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 85 84 86 4 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":627 82 {*movsi_internal}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg:SI 0 ax [orig:110 _24 ] [110])
                (plus:SI (reg:SI 0 ax [163])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 87 86 88 4 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [orig:110 _24 ] [110]))) "../src/spline.f":627 145 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 2 cx [orig:112 _26 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 218 {*adddi_1}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [5 y+0 S8 A64])) "../src/spline.f":627 81 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:SF 23 xmm2 [orig:113 _27 ] [113])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:112 _26 ] [112])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [164])) [3 *y_68(D) S4 A32])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 91 90 93 4 (set (reg:SF 21 xmm0 [orig:114 _28 ] [114])
        (minus:SF (reg:SF 21 xmm0 [orig:109 _23 ] [109])
            (reg:SF 23 xmm2 [orig:113 _27 ] [113]))) "../src/spline.f":627 805 {*fop_sf_1}
     (nil))
(insn 93 91 94 4 (set (reg:SF 21 xmm0 [orig:144 _70 ] [144])
        (mult:SF (reg:SF 21 xmm0 [orig:143 _69 ] [143])
            (reg:SF 21 xmm0 [orig:143 _69 ] [143]))) "../src/spline.f":627 802 {*fop_sf_comm}
     (nil))
(insn 94 93 95 4 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":627 82 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (parallel [
            (set (reg:SI 0 ax [orig:115 _29 ] [115])
                (plus:SI (reg:SI 0 ax [165])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 96 95 97 4 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [orig:115 _29 ] [115]))) "../src/spline.f":627 145 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg:DI 2 cx [orig:117 _31 ] [117])
                (plus:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 218 {*adddi_1}
     (nil))
(insn 98 97 99 4 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])) "../src/spline.f":627 81 {*movdi_internal}
     (nil))
(insn 99 98 100 4 (set (reg:SF 23 xmm2 [orig:118 _32 ] [118])
        (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:117 _31 ] [117])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [166])) [3 *s_60(D) S4 A32])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 100 99 101 4 (set (reg:SF 21 xmm0 [orig:119 _33 ] [119])
        (plus:SF (reg:SF 21 xmm0 [orig:144 _70 ] [144])
            (reg:SF 22 xmm1 [orig:142 _67 ] [142]))) "../src/spline.f":627 802 {*fop_sf_comm}
     (nil))
(insn 101 100 102 4 (set (reg:SF 21 xmm0 [orig:120 _34 ] [120])
        (sqrt:SF (reg:SF 21 xmm0 [orig:119 _33 ] [119]))) "../src/spline.f":627 836 {*sqrtsf2_sse}
     (nil))
(insn 102 101 103 4 (set (reg:SI 0 ax [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])) "../src/spline.f":627 82 {*movsi_internal}
     (nil))
(insn 103 102 104 4 (set (reg:DI 0 ax [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 0 ax [167]))) "../src/spline.f":627 145 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg:DI 2 cx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":627 218 {*adddi_1}
     (nil))
(insn 105 104 106 4 (set (reg:SF 21 xmm0 [orig:123 _37 ] [123])
        (plus:SF (reg:SF 21 xmm0 [orig:120 _34 ] [120])
            (reg:SF 23 xmm2 [orig:118 _32 ] [118]))) "../src/spline.f":627 802 {*fop_sf_comm}
     (nil))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])) "../src/spline.f":627 81 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (set (mem:SF (plus:DI (mult:DI (reg:DI 2 cx [orig:122 _36 ] [122])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [168])) [3 *s_60(D) S4 A32])
        (reg:SF 21 xmm0 [orig:123 _37 ] [123])) "../src/spline.f":627 127 {*movsf_internal}
     (nil))
(insn 108 107 119 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":626 217 {*addsi_1}
     (nil))
(jump_insn 119 108 120 4 (set (pc)
        (label_ref 109)) "../src/spline.f":626 649 {jump}
     (nil)
 -> 109)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139

(barrier 120 119 122)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 122 120 121 6 150 (nil) [1 uses])
(note 121 122 123 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 123 121 112 6 (const_int 0 [0]) "../src/spline.f":628 682 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 112 123 113 5 147 (nil) [0 uses])
(note 113 112 118 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 118 113 124 5 (const_int 0 [0]) "../src/spline.f":630 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 124 118 0 NOTE_INSN_DELETED)

;; Function segspl (segspl_, funcdef_no=14, decl_uid=4192, cgraph_uid=14, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 57:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 77:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 84:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 102:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 112:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 151:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 165:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 194:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 15
EBB 14

********** Pseudo live ranges #1: **********

  BB 4
   Insn 68: point = 0, n_alt = 0
   Insn 67: point = 0, n_alt = 4
   Insn 66: point = 0, n_alt = 0
  BB 7
   Insn 95: point = 0, n_alt = 0
   Insn 94: point = 0, n_alt = 4
   Insn 93: point = 0, n_alt = 0
  BB 14
   Insn 217: point = 0, n_alt = -1
   Insn 199: point = 0, n_alt = 0
   Insn 198: point = 0, n_alt = -1
   Insn 197: point = 1, n_alt = -1
   Insn 196: point = 2, n_alt = -1
   Insn 195: point = 3, n_alt = -1
   Insn 194: point = 4, n_alt = 3
   Insn 193: point = 5, n_alt = 3
   Insn 192: point = 7, n_alt = 3
   Insn 191: point = 8, n_alt = 1
   Insn 190: point = 10, n_alt = 0
   Insn 189: point = 12, n_alt = 0
   Insn 188: point = 14, n_alt = 0
   Insn 187: point = 15, n_alt = 3
   Insn 186: point = 17, n_alt = 3
   Insn 185: point = 18, n_alt = 1
   Insn 184: point = 20, n_alt = 0
   Insn 183: point = 22, n_alt = 0
   Insn 182: point = 24, n_alt = 0
   Insn 181: point = 25, n_alt = 0
   Insn 180: point = 27, n_alt = 3
   Insn 179: point = 28, n_alt = 1
   Insn 178: point = 30, n_alt = 0
   Insn 177: point = 32, n_alt = 0
   Insn 176: point = 34, n_alt = 0
   Insn 175: point = 35, n_alt = 1
   Insn 174: point = 36, n_alt = 0
   Insn 173: point = 38, n_alt = 1
   Insn 172: point = 40, n_alt = 0
   Insn 171: point = 42, n_alt = 3
  BB 15
   Insn 222: point = 43, n_alt = -1
  BB 9
   Insn 108: point = 43, n_alt = -1
   Insn 107: point = 43, n_alt = 0
   Insn 106: point = 44, n_alt = 0
   Insn 105: point = 45, n_alt = 0
  BB 13
   Insn 218: point = 46, n_alt = -1
   Insn 165: point = 46, n_alt = 1
  BB 12
   Insn 162: point = 47, n_alt = 1
   Insn 161: point = 48, n_alt = 0
   Insn 160: point = 50, n_alt = 0
   Insn 156: point = 51, n_alt = 0
   Insn 155: point = 51, n_alt = -1
   Insn 154: point = 52, n_alt = -1
   Insn 153: point = 53, n_alt = -1
   Insn 152: point = 54, n_alt = -1
   Insn 151: point = 55, n_alt = 3
   Insn 150: point = 56, n_alt = 3
   Insn 149: point = 58, n_alt = 3
   Insn 148: point = 59, n_alt = 1
   Insn 147: point = 61, n_alt = 0
   Insn 146: point = 63, n_alt = 0
   Insn 145: point = 65, n_alt = 0
   Insn 144: point = 66, n_alt = 3
   Insn 143: point = 68, n_alt = 3
   Insn 142: point = 69, n_alt = 1
   Insn 141: point = 71, n_alt = 0
   Insn 140: point = 73, n_alt = 0
   Insn 139: point = 75, n_alt = 0
   Insn 138: point = 76, n_alt = 0
   Insn 137: point = 78, n_alt = 3
   Insn 136: point = 79, n_alt = 1
   Insn 135: point = 81, n_alt = 0
   Insn 134: point = 83, n_alt = 0
   Insn 133: point = 85, n_alt = 0
   Insn 132: point = 86, n_alt = 1
   Insn 131: point = 87, n_alt = 0
   Insn 130: point = 89, n_alt = 1
   Insn 129: point = 91, n_alt = 0
  BB 11
   Insn 124: point = 93, n_alt = -1
   Insn 123: point = 93, n_alt = 1
  BB 10
   Insn 122: point = 95, n_alt = -1
   Insn 121: point = 95, n_alt = 1
   Insn 120: point = 95, n_alt = 7
   Insn 119: point = 97, n_alt = 3
   Insn 118: point = 98, n_alt = 3
   Insn 117: point = 100, n_alt = 0
   Insn 116: point = 102, n_alt = 0
   Insn 115: point = 104, n_alt = 0
   Insn 114: point = 105, n_alt = 7
   Insn 113: point = 107, n_alt = 3
   Insn 112: point = 108, n_alt = 3
   Insn 111: point = 110, n_alt = 0
   Insn 110: point = 112, n_alt = 0
  BB 8
   Insn 103: point = 114, n_alt = 1
   Insn 102: point = 114, n_alt = 3
   Insn 101: point = 116, n_alt = 0
   Insn 100: point = 118, n_alt = 3
   Insn 99: point = 119, n_alt = 1
  BB 6
   Insn 88: point = 119, n_alt = -1
   Insn 87: point = 119, n_alt = 1
  BB 5
   Insn 86: point = 121, n_alt = -1
   Insn 85: point = 121, n_alt = 1
   Insn 84: point = 121, n_alt = 7
   Insn 83: point = 123, n_alt = 3
   Insn 82: point = 124, n_alt = 3
   Insn 81: point = 126, n_alt = 0
   Insn 80: point = 128, n_alt = 0
   Insn 79: point = 130, n_alt = 0
   Insn 78: point = 132, n_alt = 3
   Insn 77: point = 133, n_alt = 7
   Insn 76: point = 135, n_alt = 3
   Insn 75: point = 136, n_alt = 3
   Insn 74: point = 138, n_alt = 0
   Insn 73: point = 140, n_alt = 0
   Insn 72: point = 142, n_alt = 3
  BB 3
   Insn 61: point = 143, n_alt = -1
   Insn 60: point = 143, n_alt = 1
  BB 2
   Insn 59: point = 145, n_alt = -1
   Insn 58: point = 145, n_alt = 1
   Insn 57: point = 145, n_alt = 7
   Insn 56: point = 147, n_alt = 3
   Insn 55: point = 148, n_alt = 7
   Insn 54: point = 150, n_alt = 3
   Insn 50: point = 151, n_alt = 2
   Insn 49: point = 152, n_alt = 3
   Insn 48: point = 153, n_alt = -1
   Insn 46: point = 155, n_alt = 1
   Insn 44: point = 157, n_alt = 0
   Insn 45: point = 157, n_alt = 2
   Insn 43: point = 158, n_alt = 3
   Insn 42: point = 159, n_alt = 5
   Insn 41: point = 160, n_alt = 0
   Insn 40: point = 162, n_alt = 0
   Insn 39: point = 164, n_alt = 3
   Insn 35: point = 165, n_alt = 2
   Insn 34: point = 166, n_alt = 3
   Insn 33: point = 167, n_alt = -1
   Insn 31: point = 169, n_alt = 1
   Insn 29: point = 171, n_alt = 0
   Insn 30: point = 171, n_alt = 2
   Insn 28: point = 172, n_alt = 3
   Insn 27: point = 173, n_alt = 5
   Insn 26: point = 174, n_alt = 0
   Insn 25: point = 176, n_alt = 0
   Insn 24: point = 178, n_alt = 3
   Insn 20: point = 179, n_alt = 2
   Insn 19: point = 180, n_alt = 3
   Insn 18: point = 181, n_alt = -1
   Insn 16: point = 183, n_alt = 1
   Insn 14: point = 185, n_alt = 0
   Insn 15: point = 185, n_alt = 2
   Insn 13: point = 186, n_alt = 3
   Insn 12: point = 187, n_alt = 5
   Insn 11: point = 188, n_alt = 0
   Insn 10: point = 190, n_alt = 0
   Insn 9: point = 192, n_alt = 3
   Insn 5: point = 193, n_alt = 5
   Insn 4: point = 193, n_alt = 5
   Insn 3: point = 193, n_alt = 5
   Insn 2: point = 193, n_alt = 5
 r87: [189..190]
 r88: [180..181]
 r89: [179..193]
 r91: [175..176]
 r92: [166..167]
 r93: [165..193]
 r95: [161..162]
 r96: [152..153]
 r97: [151..193]
 r99: [143..148]
 r100: [143..145]
 r101: [139..140]
 r102: [137..138]
 r103: [134..136]
 r104: [119..133]
 r105: [129..130]
 r106: [127..128]
 r107: [125..126]
 r108: [122..124]
 r109: [119..121]
 r110: [115..116]
 r111: [109..110]
 r112: [106..108]
 r113: [93..105]
 r114: [101..102]
 r115: [99..100]
 r116: [96..98]
 r117: [93..95]
 r118: [88..89]
 r119: [86..87]
 r120: [82..83]
 r121: [80..81]
 r122: [53..76]
 r123: [72..73]
 r124: [70..71]
 r125: [52..66]
 r126: [62..63]
 r127: [60..61]
 r128: [51..56]
 r129: [39..40]
 r130: [37..38]
 r131: [35..36]
 r132: [31..32]
 r133: [29..30]
 r134: [2..25]
 r135: [21..22]
 r136: [19..20]
 r137: [1..15]
 r138: [11..12]
 r139: [9..10]
 r140: [0..5]
 r141: [184..186]
 r142: [182..183]
 r146: [170..172]
 r147: [168..169]
 r151: [156..158]
 r152: [154..155]
 r156: [43..114]
 r157: [43..44]
 r158: [191..192]
 r159: [187..188]
 r160: [184..185]
 r161: [177..178]
 r162: [173..174]
 r163: [170..171]
 r164: [163..164]
 r165: [159..160]
 r166: [156..157]
 r167: [149..150]
 r168: [146..147]
 r169: [141..142]
 r170: [134..135]
 r171: [131..132]
 r172: [122..123]
 r173: [117..118]
 r174: [111..112]
 r175: [106..107]
 r176: [103..104]
 r177: [96..97]
 r178: [90..91]
 r179: [84..85]
 r180: [77..79]
 r181: [77..78]
 r182: [74..75]
 r183: [67..69]
 r184: [67..68]
 r185: [64..65]
 r186: [57..59]
 r187: [57..58]
 r188: [54..55]
 r191: [47..48]
 r192: [49..50]
 r193: [41..42]
 r194: [33..34]
 r195: [26..28]
 r196: [26..27]
 r197: [23..24]
 r198: [16..18]
 r199: [16..17]
 r200: [13..14]
 r201: [6..8]
 r202: [6..7]
 r203: [3..4]
Compressing live ranges: from 194 to 154 - 79%
Ranges after the compression:
 r87: [150..151]
 r88: [142..143]
 r89: [142..153]
 r91: [138..139]
 r92: [130..131]
 r93: [130..153]
 r95: [126..127]
 r96: [118..119]
 r97: [118..153]
 r99: [112..115]
 r100: [112..113]
 r101: [108..109]
 r102: [106..107]
 r103: [104..105]
 r104: [92..103]
 r105: [100..101]
 r106: [98..99]
 r107: [96..97]
 r108: [94..95]
 r109: [92..93]
 r110: [88..89]
 r111: [84..85]
 r112: [82..83]
 r113: [72..81]
 r114: [78..79]
 r115: [76..77]
 r116: [74..75]
 r117: [72..73]
 r118: [68..69]
 r119: [66..67]
 r120: [62..63]
 r121: [60..61]
 r122: [40..57]
 r123: [54..55]
 r124: [52..53]
 r125: [40..49]
 r126: [46..47]
 r127: [44..45]
 r128: [40..41]
 r129: [30..31]
 r130: [28..29]
 r131: [26..27]
 r132: [22..23]
 r133: [20..21]
 r134: [0..17]
 r135: [14..15]
 r136: [12..13]
 r137: [0..9]
 r138: [6..7]
 r139: [4..5]
 r140: [0..1]
 r141: [146..147]
 r142: [144..145]
 r146: [134..135]
 r147: [132..133]
 r151: [122..123]
 r152: [120..121]
 r156: [34..87]
 r157: [34..35]
 r158: [152..153]
 r159: [148..149]
 r160: [146..147]
 r161: [140..141]
 r162: [136..137]
 r163: [134..135]
 r164: [128..129]
 r165: [124..125]
 r166: [122..123]
 r167: [116..117]
 r168: [114..115]
 r169: [110..111]
 r170: [104..105]
 r171: [102..103]
 r172: [94..95]
 r173: [90..91]
 r174: [86..87]
 r175: [82..83]
 r176: [80..81]
 r177: [74..75]
 r178: [70..71]
 r179: [64..65]
 r180: [58..59]
 r181: [58..59]
 r182: [56..57]
 r183: [50..51]
 r184: [50..51]
 r185: [48..49]
 r186: [42..43]
 r187: [42..43]
 r188: [40..41]
 r191: [36..37]
 r192: [38..39]
 r193: [32..33]
 r194: [24..25]
 r195: [18..19]
 r196: [18..19]
 r197: [16..17]
 r198: [10..11]
 r199: [10..11]
 r200: [8..9]
 r201: [2..3]
 r202: [2..3]
 r203: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 49
changing reg in insn 55
changing reg in insn 60
changing reg in insn 58
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 87
changing reg in insn 85
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 87
changing reg in insn 85
changing reg in insn 101
changing reg in insn 102
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 114
changing reg in insn 123
changing reg in insn 121
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 123
changing reg in insn 121
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 153
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 154
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 155
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 181
changing reg in insn 196
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 197
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 198
changing reg in insn 13
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 46
changing reg in insn 48
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 100
changing reg in insn 101
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 161
changing reg in insn 162
changing reg in insn 160
changing reg in insn 161
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
deleting insn with uid = 18.
deleting insn with uid = 33.
deleting insn with uid = 48.
deleting insn with uid = 153.
deleting insn with uid = 154.
deleting insn with uid = 155.
deleting insn with uid = 196.
deleting insn with uid = 197.
deleting insn with uid = 198.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 199.


segspl

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;;  ref usage 	r0={76d,74u} r1={16d,12u,2e} r2={11d,7u,4e} r3={1d,1u} r4={9d,5u} r5={9d,5u} r6={1d,66u} r7={1d,19u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={48d,11u} r18={4d} r19={4d} r20={1d,1u,10e} r21={8d,6u} r22={8d,6u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={6d} r38={6d} r39={5d} r40={5d} r41={1d} r42={1d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 688{459d,213u,16e} in 147{143 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 141 142 146 147 151 152 158 159 160 161 162 163 164 165 166 167 168
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 x+0 S8 A64])
        (reg:DI 5 di [ x ])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [5 xs+0 S8 A64])
        (reg:DI 4 si [ xs ])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [158]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":634 82 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [159])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":634 145 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.93+0 S8 A64])
        (reg:DI 0 ax [159])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg:DI 0 ax [orig:141 size.94_63 ] [141])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.93+0 S8 A64])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 15 13 14 2 (set (reg:DI 1 dx [160])
        (const_int 0 [0])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 14 15 16 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:141 size.94_63 ] [141])
            (const_int 0 [0]))) "../src/spline.f":634 4 {*cmpdi_ccno_1}
     (nil))
(insn 16 14 19 2 (set (reg:DI 0 ax [orig:142 size.94_64 ] [142])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:141 size.94_63 ] [141])
            (reg:DI 1 dx [160]))) "../src/spline.f":634 967 {*movdicc_noc}
     (nil))
(insn 19 16 20 2 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.246_2 ] [88])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 20 19 24 2 (set (reg:DI 42 r13 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 24 20 25 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [161]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":634 82 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [162])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":634 145 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.95+0 S8 A64])
        (reg:DI 0 ax [162])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 28 27 30 2 (set (reg:DI 0 ax [orig:146 size.96_69 ] [146])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.95+0 S8 A64])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 30 28 29 2 (set (reg:DI 1 dx [163])
        (const_int 0 [0])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 29 30 31 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:146 size.96_69 ] [146])
            (const_int 0 [0]))) "../src/spline.f":634 4 {*cmpdi_ccno_1}
     (nil))
(insn 31 29 34 2 (set (reg:DI 0 ax [orig:147 size.96_70 ] [147])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:146 size.96_69 ] [146])
            (reg:DI 1 dx [163]))) "../src/spline.f":634 967 {*movdicc_noc}
     (nil))
(insn 34 31 35 2 (set (reg:DI 39 r10 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.248_6 ] [92])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 35 34 39 2 (set (reg:DI 40 r11 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 39 35 40 2 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [164]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":634 82 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 0 ax [165])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":634 145 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.97+0 S8 A64])
        (reg:DI 0 ax [165])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 43 42 45 2 (set (reg:DI 0 ax [orig:151 size.98_75 ] [151])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.97+0 S8 A64])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 45 43 44 2 (set (reg:DI 1 dx [166])
        (const_int 0 [0])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 44 45 46 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:151 size.98_75 ] [151])
            (const_int 0 [0]))) "../src/spline.f":634 4 {*cmpdi_ccno_1}
     (nil))
(insn 46 44 49 2 (set (reg:DI 0 ax [orig:152 size.98_76 ] [152])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:151 size.98_75 ] [151])
            (reg:DI 1 dx [166]))) "../src/spline.f":634 967 {*movdicc_noc}
     (nil))
(insn 49 46 50 2 (set (reg:DI 37 r8 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.250_10 ] [96])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 50 49 54 2 (set (reg:DI 38 r9 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":634 81 {*movdi_internal}
     (nil))
(insn 54 50 55 2 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":643 81 {*movdi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:SF 21 xmm0 [orig:99 _13 ] [99])
        (mem:SF (reg/f:DI 0 ax [167]) [3 *s_80(D)+0 S4 A32])) "../src/spline.f":643 127 {*movsf_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":643 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SF 22 xmm1 [orig:100 _14 ] [100])
        (mem:SF (plus:DI (reg/f:DI 0 ax [168])
                (const_int 4 [0x4])) [3 *s_80(D)+4 S4 A32])) "../src/spline.f":643 127 {*movsf_internal}
     (nil))
(insn 58 57 59 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 22 xmm1 [orig:100 _14 ] [100]))) "../src/spline.f":643 51 {*cmpiusf}
     (nil))
(jump_insn 59 58 205 2 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) "../src/spline.f":643 617 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100
;; lr  def 	 17 [flags]
(note 205 59 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 205 61 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 22 xmm1 [orig:100 _14 ] [100]))) "../src/spline.f":643 51 {*cmpiusf}
     (nil))
(jump_insn 61 60 65 3 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) "../src/spline.f":643 617 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 65 61 66 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 4 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "../src/spline.f":643 82 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*lC17") [flags 0x2]  <var_decl 0x143579a20 *lC17>)) "../src/spline.f":643 81 {*movdi_internal}
     (nil))
(call_insn 68 67 69 4 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/spline.f":643 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 70)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 169 170 171 172
(code_label 70 69 71 5 152 (nil) [2 uses])
(note 71 70 72 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 5 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":644 81 {*movdi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:SI 0 ax [orig:101 _15 ] [101])
        (mem:SI (reg/f:DI 0 ax [169]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":644 82 {*movsi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [orig:101 _15 ] [101]))) "../src/spline.f":644 145 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 5 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":644 218 {*adddi_1}
     (nil))
(insn 76 75 77 5 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":644 81 {*movdi_internal}
     (nil))
(insn 77 76 78 5 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [170])) [3 *s_80(D) S4 A32])) "../src/spline.f":644 127 {*movsf_internal}
     (nil))
(insn 78 77 79 5 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":644 81 {*movdi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:SI 0 ax [orig:105 _19 ] [105])
        (mem:SI (reg/f:DI 0 ax [171]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":644 82 {*movsi_internal}
     (nil))
(insn 80 79 81 5 (parallel [
            (set (reg:SI 0 ax [orig:106 _20 ] [106])
                (plus:SI (reg:SI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":644 217 {*addsi_1}
     (nil))
(insn 81 80 82 5 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [orig:106 _20 ] [106]))) "../src/spline.f":644 145 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 5 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":644 218 {*adddi_1}
     (nil))
(insn 83 82 84 5 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":644 81 {*movdi_internal}
     (nil))
(insn 84 83 85 5 (set (reg:SF 22 xmm1 [orig:109 _23 ] [109])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [172])) [3 *s_80(D) S4 A32])) "../src/spline.f":644 127 {*movsf_internal}
     (nil))
(insn 85 84 86 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:109 _23 ] [109]))) "../src/spline.f":644 51 {*cmpiusf}
     (nil))
(jump_insn 86 85 208 5 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) "../src/spline.f":644 617 {*jcc_1}
     (nil)
 -> 97)
;;  succ:       8
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 109

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 109
;; lr  def 	 17 [flags]
(note 208 86 87 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 87 208 88 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:109 _23 ] [109]))) "../src/spline.f":644 51 {*cmpiusf}
     (nil))
(jump_insn 88 87 92 6 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 97)
            (pc))) "../src/spline.f":644 617 {*jcc_1}
     (nil)
 -> 97)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 92 88 93 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 7 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "../src/spline.f":644 82 {*movsi_internal}
     (nil))
(insn 94 93 95 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*lC18") [flags 0x2]  <var_decl 0x143579ab0 *lC18>)) "../src/spline.f":644 81 {*movdi_internal}
     (nil))
(call_insn 95 94 96 7 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/spline.f":644 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 96 95 97)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 156 173
(code_label 97 96 98 8 154 (nil) [2 uses])
(note 98 97 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":646 82 {*movsi_internal}
     (nil))
(insn 100 99 101 8 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":647 81 {*movdi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:SI 0 ax [orig:110 _24 ] [110])
        (mem:SI (reg/f:DI 0 ax [173]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":647 82 {*movsi_internal}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:SI 3 bx [orig:156 _82 ] [156])
                (plus:SI (reg:SI 0 ax [orig:110 _24 ] [110])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":647 217 {*addsi_1}
     (nil))
(insn 103 102 166 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":647 82 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              13 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  def 	 17 [flags] 157
(code_label 166 103 104 9 159 (nil) [1 uses])
(note 104 166 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])
            (reg:SI 3 bx [orig:156 _82 ] [156]))) "../src/spline.f":647 7 {*cmpsi_1}
     (nil))
(insn 106 105 107 9 (set (reg:QI 0 ax [orig:157 _84 ] [157])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":647 613 {*setcc_qi}
     (nil))
(insn 107 106 108 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:157 _84 ] [157])
            (const_int 0 [0]))) "../src/spline.f":647 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 108 107 109 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 221)
            (pc))) "../src/spline.f":647 617 {*jcc_1}
     (nil)
 -> 221)
;;  succ:       15
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 115 116 117 174 175 176 177
(note 109 108 110 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 10 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])) "../src/spline.f":648 82 {*movsi_internal}
     (nil))
(insn 111 110 112 10 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [174]))) "../src/spline.f":648 145 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 10 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":648 218 {*adddi_1}
     (nil))
(insn 113 112 114 10 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":648 81 {*movdi_internal}
     (nil))
(insn 114 113 115 10 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:112 _26 ] [112])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [175])) [3 *s_80(D) S4 A32])) "../src/spline.f":648 127 {*movsf_internal}
     (nil))
(insn 115 114 116 10 (set (reg:SI 0 ax [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])) "../src/spline.f":648 82 {*movsi_internal}
     (nil))
(insn 116 115 117 10 (parallel [
            (set (reg:SI 0 ax [orig:114 _28 ] [114])
                (plus:SI (reg:SI 0 ax [176])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":648 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iseg+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 117 116 118 10 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [orig:114 _28 ] [114]))) "../src/spline.f":648 145 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 10 (parallel [
            (set (reg:DI 1 dx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":648 218 {*adddi_1}
     (nil))
(insn 119 118 120 10 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":648 81 {*movdi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [177])) [3 *s_80(D) S4 A32])) "../src/spline.f":648 127 {*movsf_internal}
     (nil))
(insn 121 120 122 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:113 _27 ] [113])
            (reg:SF 22 xmm1 [orig:117 _31 ] [117]))) "../src/spline.f":648 51 {*cmpiusf}
     (nil))
(jump_insn 122 121 211 10 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 163)
            (pc))) "../src/spline.f":648 617 {*jcc_1}
     (nil)
 -> 163)
;;  succ:       13
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 117 156

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 117 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 117
;; lr  def 	 17 [flags]
(note 211 122 123 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 123 211 124 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:113 _27 ] [113])
            (reg:SF 22 xmm1 [orig:117 _31 ] [117]))) "../src/spline.f":648 51 {*cmpiusf}
     (nil))
(jump_insn 124 123 128 11 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 163)
            (pc))) "../src/spline.f":648 617 {*jcc_1}
     (nil)
 -> 163)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118 119 120 121 122 123 124 125 126 127 128 178 179 180 181 182 183 184 185 186 187 188 191 192
(note 128 124 129 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 12 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])) "../src/spline.f":649 82 {*movsi_internal}
     (nil))
(insn 130 129 131 12 (parallel [
            (set (reg:SI 0 ax [orig:118 _32 ] [118])
                (minus:SI (reg:SI 0 ax [178])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":649 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iseg+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 iseg0+0 S4 A32]))
        (nil)))
(insn 131 130 132 12 (parallel [
            (set (reg:SI 0 ax [orig:119 _33 ] [119])
                (plus:SI (reg:SI 0 ax [orig:118 _32 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":649 217 {*addsi_1}
     (nil))
(insn 132 131 133 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 nseg+0 S4 A32])
        (reg:SI 0 ax [orig:119 _33 ] [119])) "../src/spline.f":649 82 {*movsi_internal}
     (nil))
(insn 133 132 134 12 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])) "../src/spline.f":650 82 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [179]))) "../src/spline.f":650 145 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 12 (parallel [
            (set (reg:DI 0 ax [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (nil))
(insn 136 135 137 12 (parallel [
            (set (reg:DI 1 dx [180])
                (ashift:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 512 {*ashldi3_1}
     (nil))
(insn 137 136 138 12 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":650 81 {*movdi_internal}
     (nil))
(insn 138 137 139 12 (parallel [
            (set (reg/f:DI 1 dx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 1 dx [180])
                    (reg/f:DI 0 ax [181])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])
            (reg:DI 1 dx [180]))
        (nil)))
(insn 139 138 140 12 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])) "../src/spline.f":650 82 {*movsi_internal}
     (nil))
(insn 140 139 141 12 (set (reg:DI 0 ax [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 0 ax [182]))) "../src/spline.f":650 145 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 12 (parallel [
            (set (reg:DI 0 ax [orig:124 _38 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (nil))
(insn 142 141 143 12 (parallel [
            (set (reg:DI 2 cx [183])
                (ashift:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 512 {*ashldi3_1}
     (nil))
(insn 143 142 144 12 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [5 xs+0 S8 A64])) "../src/spline.f":650 81 {*movdi_internal}
     (nil))
(insn 144 143 145 12 (parallel [
            (set (reg/f:DI 4 si [orig:125 _39 ] [125])
                (plus:DI (reg:DI 2 cx [183])
                    (reg/f:DI 0 ax [184])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [5 xs+0 S8 A64])
            (reg:DI 2 cx [183]))
        (nil)))
(insn 145 144 146 12 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])) "../src/spline.f":650 82 {*movsi_internal}
     (nil))
(insn 146 145 147 12 (set (reg:DI 0 ax [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 0 ax [185]))) "../src/spline.f":650 145 {*extendsidi2_rex64}
     (nil))
(insn 147 146 148 12 (parallel [
            (set (reg:DI 0 ax [orig:127 _41 ] [127])
                (plus:DI (reg:DI 0 ax [orig:126 _40 ] [126])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (nil))
(insn 148 147 149 12 (parallel [
            (set (reg:DI 2 cx [186])
                (ashift:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 512 {*ashldi3_1}
     (nil))
(insn 149 148 150 12 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 x+0 S8 A64])) "../src/spline.f":650 81 {*movdi_internal}
     (nil))
(insn 150 149 151 12 (parallel [
            (set (reg/f:DI 5 di [orig:128 _42 ] [128])
                (plus:DI (reg:DI 2 cx [186])
                    (reg/f:DI 0 ax [187])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])
            (reg:DI 2 cx [186]))
        (nil)))
(insn 151 150 152 12 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":650 218 {*adddi_1}
     (nil))
(insn 152 151 156 12 (set (reg:DI 2 cx)
        (reg:DI 0 ax [188])) "../src/spline.f":650 81 {*movdi_internal}
     (nil))
(call_insn 156 152 160 12 (call (mem:QI (symbol_ref:DI ("spline_") [flags 0x403]  <function_decl 0x1427e4d00 spline>) [0 spline S1 A8])
        (const_int 0 [0])) "../src/spline.f":650 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 160 156 161 12 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])) "../src/spline.f":651 82 {*movsi_internal}
     (nil))
(insn 161 160 162 12 (parallel [
            (set (reg:SI 0 ax [191])
                (plus:SI (reg:SI 0 ax [192])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":651 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iseg+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 162 161 163 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])
        (reg:SI 0 ax [191])) "../src/spline.f":651 82 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 163 162 164 13 157 (nil) [2 uses])
(note 164 163 165 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 218 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 iseg+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":647 217 {*addsi_1}
     (nil))
(jump_insn 218 165 219 13 (set (pc)
        (label_ref 166)) "../src/spline.f":647 649 {jump}
     (nil)
 -> 166)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

(barrier 219 218 221)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 221 219 220 15 164 (nil) [1 uses])
(note 220 221 222 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 222 220 169 15 (const_int 0 [0]) "../src/spline.f":653 682 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 129 130 131 132 133 134 135 136 137 138 139 140 193 194 195 196 197 198 199 200 201 202 203
(code_label 169 222 170 14 156 (nil) [0 uses])
(note 170 169 171 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 14 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [6 n+0 S8 A64])) "../src/spline.f":655 81 {*movdi_internal}
     (nil))
(insn 172 171 173 14 (set (reg:SI 0 ax [orig:129 _43 ] [129])
        (mem:SI (reg/f:DI 0 ax [193]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":655 82 {*movsi_internal}
     (nil))
(insn 173 172 174 14 (parallel [
            (set (reg:SI 0 ax [orig:130 _44 ] [130])
                (minus:SI (reg:SI 0 ax [orig:129 _43 ] [129])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":655 273 {*subsi_1}
     (nil))
(insn 174 173 175 14 (parallel [
            (set (reg:SI 0 ax [orig:131 _45 ] [131])
                (plus:SI (reg:SI 0 ax [orig:130 _44 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":655 217 {*addsi_1}
     (nil))
(insn 175 174 176 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [1 nseg+0 S4 A32])
        (reg:SI 0 ax [orig:131 _45 ] [131])) "../src/spline.f":655 82 {*movsi_internal}
     (nil))
(insn 176 175 177 14 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])) "../src/spline.f":656 82 {*movsi_internal}
     (nil))
(insn 177 176 178 14 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [194]))) "../src/spline.f":656 145 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 14 (parallel [
            (set (reg:DI 0 ax [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (nil))
(insn 179 178 180 14 (parallel [
            (set (reg:DI 1 dx [195])
                (ashift:DI (reg:DI 0 ax [orig:133 _47 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 512 {*ashldi3_1}
     (nil))
(insn 180 179 181 14 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 s+0 S8 A64])) "../src/spline.f":656 81 {*movdi_internal}
     (nil))
(insn 181 180 182 14 (parallel [
            (set (reg/f:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg:DI 1 dx [195])
                    (reg/f:DI 0 ax [196])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])
            (reg:DI 1 dx [195]))
        (nil)))
(insn 182 181 183 14 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])) "../src/spline.f":656 82 {*movsi_internal}
     (nil))
(insn 183 182 184 14 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [197]))) "../src/spline.f":656 145 {*extendsidi2_rex64}
     (nil))
(insn 184 183 185 14 (parallel [
            (set (reg:DI 0 ax [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (nil))
(insn 185 184 186 14 (parallel [
            (set (reg:DI 2 cx [198])
                (ashift:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 512 {*ashldi3_1}
     (nil))
(insn 186 185 187 14 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [5 xs+0 S8 A64])) "../src/spline.f":656 81 {*movdi_internal}
     (nil))
(insn 187 186 188 14 (parallel [
            (set (reg/f:DI 4 si [orig:137 _51 ] [137])
                (plus:DI (reg:DI 2 cx [198])
                    (reg/f:DI 0 ax [199])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [5 xs+0 S8 A64])
            (reg:DI 2 cx [198]))
        (nil)))
(insn 188 187 189 14 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 iseg0+0 S4 A32])) "../src/spline.f":656 82 {*movsi_internal}
     (nil))
(insn 189 188 190 14 (set (reg:DI 0 ax [orig:138 _52 ] [138])
        (sign_extend:DI (reg:SI 0 ax [200]))) "../src/spline.f":656 145 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 14 (parallel [
            (set (reg:DI 0 ax [orig:139 _53 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 _52 ] [138])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (nil))
(insn 191 190 192 14 (parallel [
            (set (reg:DI 2 cx [201])
                (ashift:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 512 {*ashldi3_1}
     (nil))
(insn 192 191 193 14 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [5 x+0 S8 A64])) "../src/spline.f":656 81 {*movdi_internal}
     (nil))
(insn 193 192 194 14 (parallel [
            (set (reg/f:DI 5 di [orig:140 _54 ] [140])
                (plus:DI (reg:DI 2 cx [201])
                    (reg/f:DI 0 ax [202])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])
            (reg:DI 2 cx [201]))
        (nil)))
(insn 194 193 195 14 (parallel [
            (set (reg:DI 0 ax [203])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":656 218 {*adddi_1}
     (nil))
(insn 195 194 199 14 (set (reg:DI 2 cx)
        (reg:DI 0 ax [203])) "../src/spline.f":656 81 {*movdi_internal}
     (nil))
(call_insn 199 195 217 14 (call (mem:QI (symbol_ref:DI ("spline_") [flags 0x403]  <function_decl 0x1427e4d00 spline>) [0 spline S1 A8])
        (const_int 0 [0])) "../src/spline.f":656 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 217 199 223 14 (const_int 0 [0]) "../src/spline.f":658 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 223 217 0 NOTE_INSN_DELETED)

;; Function segspd (segspd_, funcdef_no=15, decl_uid=4233, cgraph_uid=15, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-48, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 57:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 59:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 79:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 84:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 86:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 122:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) v  (1) vm {*cmpiusf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 143:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 155:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 171:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 202:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 15
EBB 14

********** Pseudo live ranges #1: **********

  BB 4
   Insn 70: point = 0, n_alt = 0
   Insn 69: point = 0, n_alt = 4
   Insn 68: point = 0, n_alt = 0
  BB 7
   Insn 97: point = 0, n_alt = 0
   Insn 96: point = 0, n_alt = 4
   Insn 95: point = 0, n_alt = 0
  BB 14
   Insn 227: point = 0, n_alt = -1
   Insn 209: point = 0, n_alt = 0
   Insn 208: point = 0, n_alt = -1
   Insn 207: point = 1, n_alt = -1
   Insn 206: point = 2, n_alt = -1
   Insn 205: point = 3, n_alt = -1
   Insn 204: point = 4, n_alt = -1
   Insn 203: point = 5, n_alt = -1
   Insn 202: point = 6, n_alt = 3
   Insn 201: point = 7, n_alt = 3
   Insn 200: point = 8, n_alt = 3
   Insn 199: point = 9, n_alt = 3
   Insn 198: point = 11, n_alt = 3
   Insn 197: point = 12, n_alt = 1
   Insn 196: point = 14, n_alt = 0
   Insn 195: point = 16, n_alt = 0
   Insn 194: point = 18, n_alt = 0
   Insn 193: point = 19, n_alt = 3
   Insn 192: point = 21, n_alt = 3
   Insn 191: point = 22, n_alt = 1
   Insn 190: point = 24, n_alt = 0
   Insn 189: point = 26, n_alt = 0
   Insn 188: point = 28, n_alt = 0
   Insn 187: point = 29, n_alt = 0
   Insn 186: point = 31, n_alt = 3
   Insn 185: point = 32, n_alt = 1
   Insn 184: point = 34, n_alt = 0
   Insn 183: point = 36, n_alt = 0
   Insn 182: point = 38, n_alt = 0
   Insn 181: point = 39, n_alt = 1
   Insn 180: point = 40, n_alt = 0
   Insn 179: point = 42, n_alt = 1
   Insn 178: point = 44, n_alt = 0
   Insn 177: point = 46, n_alt = 3
  BB 15
   Insn 232: point = 47, n_alt = -1
  BB 9
   Insn 110: point = 47, n_alt = -1
   Insn 109: point = 47, n_alt = 0
   Insn 108: point = 48, n_alt = 0
   Insn 107: point = 49, n_alt = 0
  BB 13
   Insn 228: point = 50, n_alt = -1
   Insn 171: point = 50, n_alt = 1
  BB 12
   Insn 168: point = 51, n_alt = 1
   Insn 167: point = 52, n_alt = 0
   Insn 166: point = 54, n_alt = 0
   Insn 162: point = 55, n_alt = 0
   Insn 161: point = 55, n_alt = -1
   Insn 160: point = 56, n_alt = -1
   Insn 159: point = 57, n_alt = -1
   Insn 158: point = 58, n_alt = -1
   Insn 157: point = 59, n_alt = -1
   Insn 156: point = 60, n_alt = -1
   Insn 155: point = 61, n_alt = 3
   Insn 154: point = 62, n_alt = 3
   Insn 153: point = 63, n_alt = 3
   Insn 152: point = 64, n_alt = 3
   Insn 151: point = 66, n_alt = 3
   Insn 150: point = 67, n_alt = 1
   Insn 149: point = 69, n_alt = 0
   Insn 148: point = 71, n_alt = 0
   Insn 147: point = 73, n_alt = 0
   Insn 146: point = 74, n_alt = 3
   Insn 145: point = 76, n_alt = 3
   Insn 144: point = 77, n_alt = 1
   Insn 143: point = 79, n_alt = 0
   Insn 142: point = 81, n_alt = 0
   Insn 141: point = 83, n_alt = 0
   Insn 140: point = 84, n_alt = 0
   Insn 139: point = 86, n_alt = 3
   Insn 138: point = 87, n_alt = 1
   Insn 137: point = 89, n_alt = 0
   Insn 136: point = 91, n_alt = 0
   Insn 135: point = 93, n_alt = 0
   Insn 134: point = 94, n_alt = 1
   Insn 133: point = 95, n_alt = 0
   Insn 132: point = 97, n_alt = 1
   Insn 131: point = 99, n_alt = 0
  BB 11
   Insn 126: point = 101, n_alt = -1
   Insn 125: point = 101, n_alt = 1
  BB 10
   Insn 124: point = 103, n_alt = -1
   Insn 123: point = 103, n_alt = 1
   Insn 122: point = 103, n_alt = 7
   Insn 121: point = 105, n_alt = 3
   Insn 120: point = 106, n_alt = 3
   Insn 119: point = 108, n_alt = 0
   Insn 118: point = 110, n_alt = 0
   Insn 117: point = 112, n_alt = 0
   Insn 116: point = 113, n_alt = 7
   Insn 115: point = 115, n_alt = 3
   Insn 114: point = 116, n_alt = 3
   Insn 113: point = 118, n_alt = 0
   Insn 112: point = 120, n_alt = 0
  BB 8
   Insn 105: point = 122, n_alt = 1
   Insn 104: point = 122, n_alt = 3
   Insn 103: point = 124, n_alt = 0
   Insn 102: point = 126, n_alt = 3
   Insn 101: point = 127, n_alt = 1
  BB 6
   Insn 90: point = 127, n_alt = -1
   Insn 89: point = 127, n_alt = 1
  BB 5
   Insn 88: point = 129, n_alt = -1
   Insn 87: point = 129, n_alt = 1
   Insn 86: point = 129, n_alt = 7
   Insn 85: point = 131, n_alt = 3
   Insn 84: point = 132, n_alt = 3
   Insn 83: point = 134, n_alt = 0
   Insn 82: point = 136, n_alt = 0
   Insn 81: point = 138, n_alt = 0
   Insn 80: point = 140, n_alt = 3
   Insn 79: point = 141, n_alt = 7
   Insn 78: point = 143, n_alt = 3
   Insn 77: point = 144, n_alt = 3
   Insn 76: point = 146, n_alt = 0
   Insn 75: point = 148, n_alt = 0
   Insn 74: point = 150, n_alt = 3
  BB 3
   Insn 63: point = 151, n_alt = -1
   Insn 62: point = 151, n_alt = 1
  BB 2
   Insn 61: point = 153, n_alt = -1
   Insn 60: point = 153, n_alt = 1
   Insn 59: point = 153, n_alt = 7
   Insn 58: point = 155, n_alt = 3
   Insn 57: point = 156, n_alt = 7
   Insn 56: point = 158, n_alt = 3
   Insn 52: point = 159, n_alt = 2
   Insn 51: point = 160, n_alt = 3
   Insn 50: point = 161, n_alt = -1
   Insn 48: point = 163, n_alt = 1
   Insn 46: point = 165, n_alt = 0
   Insn 47: point = 165, n_alt = 2
   Insn 45: point = 166, n_alt = 3
   Insn 44: point = 167, n_alt = 5
   Insn 43: point = 168, n_alt = 0
   Insn 42: point = 170, n_alt = 0
   Insn 41: point = 172, n_alt = 3
   Insn 37: point = 173, n_alt = 2
   Insn 36: point = 174, n_alt = 3
   Insn 35: point = 175, n_alt = -1
   Insn 33: point = 177, n_alt = 1
   Insn 31: point = 179, n_alt = 0
   Insn 32: point = 179, n_alt = 2
   Insn 30: point = 180, n_alt = 3
   Insn 29: point = 181, n_alt = 5
   Insn 28: point = 182, n_alt = 0
   Insn 27: point = 184, n_alt = 0
   Insn 26: point = 186, n_alt = 3
   Insn 22: point = 187, n_alt = 2
   Insn 21: point = 188, n_alt = 3
   Insn 20: point = 189, n_alt = -1
   Insn 18: point = 191, n_alt = 1
   Insn 16: point = 193, n_alt = 0
   Insn 17: point = 193, n_alt = 2
   Insn 15: point = 194, n_alt = 3
   Insn 14: point = 195, n_alt = 5
   Insn 13: point = 196, n_alt = 0
   Insn 12: point = 198, n_alt = 0
   Insn 11: point = 200, n_alt = 3
   Insn 7: point = 201, n_alt = 5
   Insn 6: point = 201, n_alt = 5
   Insn 5: point = 201, n_alt = 5
   Insn 4: point = 201, n_alt = 5
   Insn 3: point = 201, n_alt = 5
   Insn 2: point = 201, n_alt = 5
 r87: [197..198]
 r88: [188..189]
 r89: [187..201]
 r91: [183..184]
 r92: [174..175]
 r93: [173..201]
 r95: [169..170]
 r96: [160..161]
 r97: [159..201]
 r99: [151..156]
 r100: [151..153]
 r101: [147..148]
 r102: [145..146]
 r103: [142..144]
 r104: [127..141]
 r105: [137..138]
 r106: [135..136]
 r107: [133..134]
 r108: [130..132]
 r109: [127..129]
 r110: [123..124]
 r111: [117..118]
 r112: [114..116]
 r113: [101..113]
 r114: [109..110]
 r115: [107..108]
 r116: [104..106]
 r117: [101..103]
 r118: [96..97]
 r119: [94..95]
 r120: [90..91]
 r121: [88..89]
 r122: [57..84]
 r123: [80..81]
 r124: [78..79]
 r125: [56..74]
 r126: [70..71]
 r127: [68..69]
 r128: [55..64]
 r129: [43..44]
 r130: [41..42]
 r131: [39..40]
 r132: [35..36]
 r133: [33..34]
 r134: [2..29]
 r135: [25..26]
 r136: [23..24]
 r137: [1..19]
 r138: [15..16]
 r139: [13..14]
 r140: [0..9]
 r141: [192..194]
 r142: [190..191]
 r146: [178..180]
 r147: [176..177]
 r151: [164..166]
 r152: [162..163]
 r156: [47..122]
 r157: [47..48]
 r158: [199..200]
 r159: [195..196]
 r160: [192..193]
 r161: [185..186]
 r162: [181..182]
 r163: [178..179]
 r164: [171..172]
 r165: [167..168]
 r166: [164..165]
 r167: [157..158]
 r168: [154..155]
 r169: [149..150]
 r170: [142..143]
 r171: [139..140]
 r172: [130..131]
 r173: [125..126]
 r174: [119..120]
 r175: [114..115]
 r176: [111..112]
 r177: [104..105]
 r178: [98..99]
 r179: [92..93]
 r180: [85..87]
 r181: [85..86]
 r182: [82..83]
 r183: [75..77]
 r184: [75..76]
 r185: [72..73]
 r186: [65..67]
 r187: [65..66]
 r188: [60..63]
 r189: [59..62]
 r190: [58..61]
 r193: [51..52]
 r194: [53..54]
 r195: [45..46]
 r196: [37..38]
 r197: [30..32]
 r198: [30..31]
 r199: [27..28]
 r200: [20..22]
 r201: [20..21]
 r202: [17..18]
 r203: [10..12]
 r204: [10..11]
 r205: [5..8]
 r206: [4..7]
 r207: [3..6]
Compressing live ranges: from 202 to 154 - 76%
Ranges after the compression:
 r87: [150..151]
 r88: [142..143]
 r89: [142..153]
 r91: [138..139]
 r92: [130..131]
 r93: [130..153]
 r95: [126..127]
 r96: [118..119]
 r97: [118..153]
 r99: [112..115]
 r100: [112..113]
 r101: [108..109]
 r102: [106..107]
 r103: [104..105]
 r104: [92..103]
 r105: [100..101]
 r106: [98..99]
 r107: [96..97]
 r108: [94..95]
 r109: [92..93]
 r110: [88..89]
 r111: [84..85]
 r112: [82..83]
 r113: [72..81]
 r114: [78..79]
 r115: [76..77]
 r116: [74..75]
 r117: [72..73]
 r118: [68..69]
 r119: [66..67]
 r120: [62..63]
 r121: [60..61]
 r122: [40..57]
 r123: [54..55]
 r124: [52..53]
 r125: [40..49]
 r126: [46..47]
 r127: [44..45]
 r128: [40..41]
 r129: [30..31]
 r130: [28..29]
 r131: [26..27]
 r132: [22..23]
 r133: [20..21]
 r134: [0..17]
 r135: [14..15]
 r136: [12..13]
 r137: [0..9]
 r138: [6..7]
 r139: [4..5]
 r140: [0..1]
 r141: [146..147]
 r142: [144..145]
 r146: [134..135]
 r147: [132..133]
 r151: [122..123]
 r152: [120..121]
 r156: [34..87]
 r157: [34..35]
 r158: [152..153]
 r159: [148..149]
 r160: [146..147]
 r161: [140..141]
 r162: [136..137]
 r163: [134..135]
 r164: [128..129]
 r165: [124..125]
 r166: [122..123]
 r167: [116..117]
 r168: [114..115]
 r169: [110..111]
 r170: [104..105]
 r171: [102..103]
 r172: [94..95]
 r173: [90..91]
 r174: [86..87]
 r175: [82..83]
 r176: [80..81]
 r177: [74..75]
 r178: [70..71]
 r179: [64..65]
 r180: [58..59]
 r181: [58..59]
 r182: [56..57]
 r183: [50..51]
 r184: [50..51]
 r185: [48..49]
 r186: [42..43]
 r187: [42..43]
 r188: [40..41]
 r189: [40..41]
 r190: [40..41]
 r193: [36..37]
 r194: [38..39]
 r195: [32..33]
 r196: [24..25]
 r197: [18..19]
 r198: [18..19]
 r199: [16..17]
 r200: [10..11]
 r201: [10..11]
 r202: [8..9]
 r203: [2..3]
 r204: [2..3]
 r205: [0..1]
 r206: [0..1]
 r207: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-48, prev_offset=-48)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 57
changing reg in insn 62
changing reg in insn 60
changing reg in insn 59
changing reg in insn 62
changing reg in insn 60
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 89
changing reg in insn 87
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 86
changing reg in insn 86
changing reg in insn 89
changing reg in insn 87
changing reg in insn 103
changing reg in insn 104
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 125
changing reg in insn 123
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 122
changing reg in insn 122
changing reg in insn 125
changing reg in insn 123
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 159
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 160
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 161
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 206
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 207
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 208
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 102
changing reg in insn 103
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 140
changing reg in insn 140
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 152
changing reg in insn 152
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 156
changing reg in insn 154
changing reg in insn 157
changing reg in insn 155
changing reg in insn 158
changing reg in insn 167
changing reg in insn 168
changing reg in insn 166
changing reg in insn 167
changing reg in insn 177
changing reg in insn 178
changing reg in insn 182
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 199
changing reg in insn 199
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 203
changing reg in insn 201
changing reg in insn 204
changing reg in insn 202
changing reg in insn 205
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 159.
deleting insn with uid = 160.
deleting insn with uid = 161.
deleting insn with uid = 206.
deleting insn with uid = 207.
deleting insn with uid = 208.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 162.
verify found no changes in insn with uid = 209.


segspd

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={76d,74u} r1={16d,12u,2e} r2={13d,9u,4e} r3={1d,1u} r4={9d,5u} r5={9d,5u} r6={1d,72u} r7={1d,19u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={48d,11u} r18={4d} r19={4d} r20={1d,1u,10e} r21={8d,6u} r22={8d,6u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,5u} r38={7d,3u} r39={5d} r40={5d} r41={1d} r42={1d} r43={1d} r44={1d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 712{467d,229u,16e} in 157{153 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 141 142 146 147 151 152 158 159 160 161 162 163 164 165 166 167 168
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 x+0 S8 A64])
        (reg:DI 5 di [ x ])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 xs+0 S8 A64])
        (reg:DI 4 si [ xs ])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])
        (reg:DI 1 dx [ s ])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])
        (reg:DI 2 cx [ n ])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [4 xs1+0 S8 A64])
        (reg:DI 37 r8 [ xs1 ])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [4 xs2+0 S8 A64])
        (reg:DI 38 r9 [ xs2 ])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [158]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":662 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [159])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":662 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.99+0 S8 A64])
        (reg:DI 0 ax [159])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:141 size.100_63 ] [141])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.99+0 S8 A64])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [160])
        (const_int 0 [0])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:141 size.100_63 ] [141])
            (const_int 0 [0]))) "../src/spline.f":662 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:142 size.100_64 ] [142])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:141 size.100_63 ] [141])
            (reg:DI 1 dx [160]))) "../src/spline.f":662 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (reg:DI 43 r14 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.252_2 ] [88])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (reg:DI 44 r15 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [161]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":662 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [162])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":662 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.101+0 S8 A64])
        (reg:DI 0 ax [162])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:146 size.102_69 ] [146])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.101+0 S8 A64])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [163])
        (const_int 0 [0])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:146 size.102_69 ] [146])
            (const_int 0 [0]))) "../src/spline.f":662 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:147 size.102_70 ] [147])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:146 size.102_69 ] [146])
            (reg:DI 1 dx [163]))) "../src/spline.f":662 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (reg:DI 41 r12 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.254_6 ] [92])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (reg:DI 42 r13 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [164]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":662 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [165])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":662 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.103+0 S8 A64])
        (reg:DI 0 ax [165])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:151 size.104_75 ] [151])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.103+0 S8 A64])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [166])
        (const_int 0 [0])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:151 size.104_75 ] [151])
            (const_int 0 [0]))) "../src/spline.f":662 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:152 size.104_76 ] [152])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:151 size.104_75 ] [151])
            (reg:DI 1 dx [166]))) "../src/spline.f":662 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 39 r10 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.256_10 ] [96])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 40 r11 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":662 81 {*movdi_internal}
     (nil))
(insn 56 52 57 2 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":671 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SF 21 xmm0 [orig:99 _13 ] [99])
        (mem:SF (reg/f:DI 0 ax [167]) [3 *s_80(D)+0 S4 A32])) "../src/spline.f":671 127 {*movsf_internal}
     (nil))
(insn 58 57 59 2 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":671 81 {*movdi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:SF 22 xmm1 [orig:100 _14 ] [100])
        (mem:SF (plus:DI (reg/f:DI 0 ax [168])
                (const_int 4 [0x4])) [3 *s_80(D)+4 S4 A32])) "../src/spline.f":671 127 {*movsf_internal}
     (nil))
(insn 60 59 61 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 22 xmm1 [orig:100 _14 ] [100]))) "../src/spline.f":671 51 {*cmpiusf}
     (nil))
(jump_insn 61 60 215 2 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) "../src/spline.f":671 617 {*jcc_1}
     (nil)
 -> 72)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100
;; lr  def 	 17 [flags]
(note 215 61 62 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 62 215 63 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:99 _13 ] [99])
            (reg:SF 22 xmm1 [orig:100 _14 ] [100]))) "../src/spline.f":671 51 {*cmpiusf}
     (nil))
(jump_insn 63 62 67 3 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 72)
            (pc))) "../src/spline.f":671 617 {*jcc_1}
     (nil)
 -> 72)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 67 63 68 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 4 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "../src/spline.f":671 82 {*movsi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*lC19") [flags 0x2]  <var_decl 0x1433d3cf0 *lC19>)) "../src/spline.f":671 81 {*movdi_internal}
     (nil))
(call_insn 70 69 71 4 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/spline.f":671 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 72)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 107 108 109 169 170 171 172
(code_label 72 71 73 5 166 (nil) [2 uses])
(note 73 72 74 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 5 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":672 81 {*movdi_internal}
     (nil))
(insn 75 74 76 5 (set (reg:SI 0 ax [orig:101 _15 ] [101])
        (mem:SI (reg/f:DI 0 ax [169]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":672 82 {*movsi_internal}
     (nil))
(insn 76 75 77 5 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [orig:101 _15 ] [101]))) "../src/spline.f":672 145 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 5 (parallel [
            (set (reg:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":672 218 {*adddi_1}
     (nil))
(insn 78 77 79 5 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":672 81 {*movdi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:SF 21 xmm0 [orig:104 _18 ] [104])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [170])) [3 *s_80(D) S4 A32])) "../src/spline.f":672 127 {*movsf_internal}
     (nil))
(insn 80 79 81 5 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":672 81 {*movdi_internal}
     (nil))
(insn 81 80 82 5 (set (reg:SI 0 ax [orig:105 _19 ] [105])
        (mem:SI (reg/f:DI 0 ax [171]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":672 82 {*movsi_internal}
     (nil))
(insn 82 81 83 5 (parallel [
            (set (reg:SI 0 ax [orig:106 _20 ] [106])
                (plus:SI (reg:SI 0 ax [orig:105 _19 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":672 217 {*addsi_1}
     (nil))
(insn 83 82 84 5 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [orig:106 _20 ] [106]))) "../src/spline.f":672 145 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 5 (parallel [
            (set (reg:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":672 218 {*adddi_1}
     (nil))
(insn 85 84 86 5 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":672 81 {*movdi_internal}
     (nil))
(insn 86 85 87 5 (set (reg:SF 22 xmm1 [orig:109 _23 ] [109])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:108 _22 ] [108])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [172])) [3 *s_80(D) S4 A32])) "../src/spline.f":672 127 {*movsf_internal}
     (nil))
(insn 87 86 88 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:109 _23 ] [109]))) "../src/spline.f":672 51 {*cmpiusf}
     (nil))
(jump_insn 88 87 218 5 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "../src/spline.f":672 617 {*jcc_1}
     (nil)
 -> 99)
;;  succ:       8
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 109

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 109
;; lr  def 	 17 [flags]
(note 218 88 89 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 89 218 90 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:104 _18 ] [104])
            (reg:SF 22 xmm1 [orig:109 _23 ] [109]))) "../src/spline.f":672 51 {*cmpiusf}
     (nil))
(jump_insn 90 89 94 6 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 99)
            (pc))) "../src/spline.f":672 617 {*jcc_1}
     (nil)
 -> 99)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 94 90 95 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 7 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "../src/spline.f":672 82 {*movsi_internal}
     (nil))
(insn 96 95 97 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*lC20") [flags 0x2]  <var_decl 0x143594480 *lC20>)) "../src/spline.f":672 81 {*movdi_internal}
     (nil))
(call_insn 97 96 98 7 (call (mem:QI (symbol_ref:DI ("_gfortran_stop_string") [flags 0x41]  <function_decl 0x1427c2200 _gfortran_stop_string>) [0 _gfortran_stop_string S1 A8])
        (const_int 0 [0])) "../src/spline.f":672 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 98 97 99)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 156 173
(code_label 99 98 100 8 168 (nil) [2 uses])
(note 100 99 101 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":674 82 {*movsi_internal}
     (nil))
(insn 102 101 103 8 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":675 81 {*movdi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:SI 0 ax [orig:110 _24 ] [110])
        (mem:SI (reg/f:DI 0 ax [173]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":675 82 {*movsi_internal}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg:SI 3 bx [orig:156 _82 ] [156])
                (plus:SI (reg:SI 0 ax [orig:110 _24 ] [110])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":675 217 {*addsi_1}
     (nil))
(insn 105 104 172 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])
        (const_int 2 [0x2])) "../src/spline.f":675 82 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              13 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  def 	 17 [flags] 157
(code_label 172 105 106 9 173 (nil) [1 uses])
(note 106 172 107 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])
            (reg:SI 3 bx [orig:156 _82 ] [156]))) "../src/spline.f":675 7 {*cmpsi_1}
     (nil))
(insn 108 107 109 9 (set (reg:QI 0 ax [orig:157 _84 ] [157])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":675 613 {*setcc_qi}
     (nil))
(insn 109 108 110 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:157 _84 ] [157])
            (const_int 0 [0]))) "../src/spline.f":675 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 110 109 111 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 231)
            (pc))) "../src/spline.f":675 617 {*jcc_1}
     (nil)
 -> 231)
;;  succ:       15
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 115 116 117 174 175 176 177
(note 111 110 112 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 10 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])) "../src/spline.f":676 82 {*movsi_internal}
     (nil))
(insn 113 112 114 10 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [174]))) "../src/spline.f":676 145 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 10 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":676 218 {*adddi_1}
     (nil))
(insn 115 114 116 10 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":676 81 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (reg:SF 21 xmm0 [orig:113 _27 ] [113])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:112 _26 ] [112])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [175])) [3 *s_80(D) S4 A32])) "../src/spline.f":676 127 {*movsf_internal}
     (nil))
(insn 117 116 118 10 (set (reg:SI 0 ax [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])) "../src/spline.f":676 82 {*movsi_internal}
     (nil))
(insn 118 117 119 10 (parallel [
            (set (reg:SI 0 ax [orig:114 _28 ] [114])
                (plus:SI (reg:SI 0 ax [176])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":676 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iseg+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 119 118 120 10 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [orig:114 _28 ] [114]))) "../src/spline.f":676 145 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 1 dx [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":676 218 {*adddi_1}
     (nil))
(insn 121 120 122 10 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":676 81 {*movdi_internal}
     (nil))
(insn 122 121 123 10 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:116 _30 ] [116])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [177])) [3 *s_80(D) S4 A32])) "../src/spline.f":676 127 {*movsf_internal}
     (nil))
(insn 123 122 124 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:113 _27 ] [113])
            (reg:SF 22 xmm1 [orig:117 _31 ] [117]))) "../src/spline.f":676 51 {*cmpiusf}
     (nil))
(jump_insn 124 123 221 10 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) "../src/spline.f":676 617 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       13
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 117 156

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 117 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 113 117
;; lr  def 	 17 [flags]
(note 221 124 125 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 125 221 126 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:113 _27 ] [113])
            (reg:SF 22 xmm1 [orig:117 _31 ] [117]))) "../src/spline.f":676 51 {*cmpiusf}
     (nil))
(jump_insn 126 125 130 11 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 169)
            (pc))) "../src/spline.f":676 617 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118 119 120 121 122 123 124 125 126 127 128 178 179 180 181 182 183 184 185 186 187 188 189 190 193 194
(note 130 126 131 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 12 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])) "../src/spline.f":677 82 {*movsi_internal}
     (nil))
(insn 132 131 133 12 (parallel [
            (set (reg:SI 0 ax [orig:118 _32 ] [118])
                (minus:SI (reg:SI 0 ax [178])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":677 273 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iseg+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 iseg0+0 S4 A32]))
        (nil)))
(insn 133 132 134 12 (parallel [
            (set (reg:SI 0 ax [orig:119 _33 ] [119])
                (plus:SI (reg:SI 0 ax [orig:118 _32 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":677 217 {*addsi_1}
     (nil))
(insn 134 133 135 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 nseg+0 S4 A32])
        (reg:SI 0 ax [orig:119 _33 ] [119])) "../src/spline.f":677 82 {*movsi_internal}
     (nil))
(insn 135 134 136 12 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])) "../src/spline.f":678 82 {*movsi_internal}
     (nil))
(insn 136 135 137 12 (set (reg:DI 0 ax [orig:120 _34 ] [120])
        (sign_extend:DI (reg:SI 0 ax [179]))) "../src/spline.f":678 145 {*extendsidi2_rex64}
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg:DI 0 ax [orig:121 _35 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _34 ] [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (nil))
(insn 138 137 139 12 (parallel [
            (set (reg:DI 1 dx [180])
                (ashift:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 512 {*ashldi3_1}
     (nil))
(insn 139 138 140 12 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 140 139 141 12 (parallel [
            (set (reg/f:DI 1 dx [orig:122 _36 ] [122])
                (plus:DI (reg:DI 1 dx [180])
                    (reg/f:DI 0 ax [181])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])
            (reg:DI 1 dx [180]))
        (nil)))
(insn 141 140 142 12 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])) "../src/spline.f":678 82 {*movsi_internal}
     (nil))
(insn 142 141 143 12 (set (reg:DI 0 ax [orig:123 _37 ] [123])
        (sign_extend:DI (reg:SI 0 ax [182]))) "../src/spline.f":678 145 {*extendsidi2_rex64}
     (nil))
(insn 143 142 144 12 (parallel [
            (set (reg:DI 0 ax [orig:124 _38 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 _37 ] [123])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (nil))
(insn 144 143 145 12 (parallel [
            (set (reg:DI 2 cx [183])
                (ashift:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 12 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 xs+0 S8 A64])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 146 145 147 12 (parallel [
            (set (reg/f:DI 4 si [orig:125 _39 ] [125])
                (plus:DI (reg:DI 2 cx [183])
                    (reg/f:DI 0 ax [184])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [5 xs+0 S8 A64])
            (reg:DI 2 cx [183]))
        (nil)))
(insn 147 146 148 12 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])) "../src/spline.f":678 82 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:DI 0 ax [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 0 ax [185]))) "../src/spline.f":678 145 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 12 (parallel [
            (set (reg:DI 0 ax [orig:127 _41 ] [127])
                (plus:DI (reg:DI 0 ax [orig:126 _40 ] [126])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (nil))
(insn 150 149 151 12 (parallel [
            (set (reg:DI 2 cx [186])
                (ashift:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 512 {*ashldi3_1}
     (nil))
(insn 151 150 152 12 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 x+0 S8 A64])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 152 151 153 12 (parallel [
            (set (reg/f:DI 5 di [orig:128 _42 ] [128])
                (plus:DI (reg:DI 2 cx [186])
                    (reg/f:DI 0 ax [187])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])
            (reg:DI 2 cx [186]))
        (nil)))
(insn 153 152 154 12 (set (reg:DI 37 r8 [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [4 xs2+0 S8 A64])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 154 153 155 12 (set (reg:DI 2 cx [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [4 xs1+0 S8 A64])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 155 154 156 12 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":678 218 {*adddi_1}
     (nil))
(insn 156 155 157 12 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [188])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 157 156 158 12 (set (reg:DI 37 r8)
        (reg:DI 2 cx [189])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(insn 158 157 162 12 (set (reg:DI 2 cx)
        (reg:DI 0 ax [190])) "../src/spline.f":678 81 {*movdi_internal}
     (nil))
(call_insn 162 158 166 12 (call (mem:QI (symbol_ref:DI ("splind_") [flags 0x403]  <function_decl 0x1427e4b00 splind>) [0 splind S1 A8])
        (const_int 0 [0])) "../src/spline.f":678 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 166 162 167 12 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])) "../src/spline.f":679 82 {*movsi_internal}
     (nil))
(insn 167 166 168 12 (parallel [
            (set (reg:SI 0 ax [193])
                (plus:SI (reg:SI 0 ax [194])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":679 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 iseg+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 168 167 169 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])
        (reg:SI 0 ax [193])) "../src/spline.f":679 82 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 169 168 170 13 171 (nil) [2 uses])
(note 170 169 171 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 228 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [1 iseg+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":675 217 {*addsi_1}
     (nil))
(jump_insn 228 171 229 13 (set (pc)
        (label_ref 172)) "../src/spline.f":675 649 {jump}
     (nil)
 -> 172)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 156

(barrier 229 228 231)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 231 229 230 15 178 (nil) [1 uses])
(note 230 231 232 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 232 230 175 15 (const_int 0 [0]) "../src/spline.f":681 682 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 129 130 131 132 133 134 135 136 137 138 139 140 195 196 197 198 199 200 201 202 203 204 205 206 207
(code_label 175 232 176 14 170 (nil) [0 uses])
(note 176 175 177 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 14 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [6 n+0 S8 A64])) "../src/spline.f":683 81 {*movdi_internal}
     (nil))
(insn 178 177 179 14 (set (reg:SI 0 ax [orig:129 _43 ] [129])
        (mem:SI (reg/f:DI 0 ax [195]) [1 *n_61(D)+0 S4 A32])) "../src/spline.f":683 82 {*movsi_internal}
     (nil))
(insn 179 178 180 14 (parallel [
            (set (reg:SI 0 ax [orig:130 _44 ] [130])
                (minus:SI (reg:SI 0 ax [orig:129 _43 ] [129])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":683 273 {*subsi_1}
     (nil))
(insn 180 179 181 14 (parallel [
            (set (reg:SI 0 ax [orig:131 _45 ] [131])
                (plus:SI (reg:SI 0 ax [orig:130 _44 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":683 217 {*addsi_1}
     (nil))
(insn 181 180 182 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [1 nseg+0 S4 A32])
        (reg:SI 0 ax [orig:131 _45 ] [131])) "../src/spline.f":683 82 {*movsi_internal}
     (nil))
(insn 182 181 183 14 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])) "../src/spline.f":684 82 {*movsi_internal}
     (nil))
(insn 183 182 184 14 (set (reg:DI 0 ax [orig:132 _46 ] [132])
        (sign_extend:DI (reg:SI 0 ax [196]))) "../src/spline.f":684 145 {*extendsidi2_rex64}
     (nil))
(insn 184 183 185 14 (parallel [
            (set (reg:DI 0 ax [orig:133 _47 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _46 ] [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (nil))
(insn 185 184 186 14 (parallel [
            (set (reg:DI 1 dx [197])
                (ashift:DI (reg:DI 0 ax [orig:133 _47 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 512 {*ashldi3_1}
     (nil))
(insn 186 185 187 14 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [5 s+0 S8 A64])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 187 186 188 14 (parallel [
            (set (reg/f:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg:DI 1 dx [197])
                    (reg/f:DI 0 ax [198])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [5 s+0 S8 A64])
            (reg:DI 1 dx [197]))
        (nil)))
(insn 188 187 189 14 (set (reg:SI 0 ax [199])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])) "../src/spline.f":684 82 {*movsi_internal}
     (nil))
(insn 189 188 190 14 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [199]))) "../src/spline.f":684 145 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 14 (parallel [
            (set (reg:DI 0 ax [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (nil))
(insn 191 190 192 14 (parallel [
            (set (reg:DI 2 cx [200])
                (ashift:DI (reg:DI 0 ax [orig:136 _50 ] [136])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 512 {*ashldi3_1}
     (nil))
(insn 192 191 193 14 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [5 xs+0 S8 A64])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 193 192 194 14 (parallel [
            (set (reg/f:DI 4 si [orig:137 _51 ] [137])
                (plus:DI (reg:DI 2 cx [200])
                    (reg/f:DI 0 ax [201])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [5 xs+0 S8 A64])
            (reg:DI 2 cx [200]))
        (nil)))
(insn 194 193 195 14 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 iseg0+0 S4 A32])) "../src/spline.f":684 82 {*movsi_internal}
     (nil))
(insn 195 194 196 14 (set (reg:DI 0 ax [orig:138 _52 ] [138])
        (sign_extend:DI (reg:SI 0 ax [202]))) "../src/spline.f":684 145 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 14 (parallel [
            (set (reg:DI 0 ax [orig:139 _53 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 _52 ] [138])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (nil))
(insn 197 196 198 14 (parallel [
            (set (reg:DI 2 cx [203])
                (ashift:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 512 {*ashldi3_1}
     (nil))
(insn 198 197 199 14 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 x+0 S8 A64])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 199 198 200 14 (parallel [
            (set (reg/f:DI 5 di [orig:140 _54 ] [140])
                (plus:DI (reg:DI 2 cx [203])
                    (reg/f:DI 0 ax [204])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [5 x+0 S8 A64])
            (reg:DI 2 cx [203]))
        (nil)))
(insn 200 199 201 14 (set (reg:DI 37 r8 [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [4 xs2+0 S8 A64])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 201 200 202 14 (set (reg:DI 2 cx [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [4 xs1+0 S8 A64])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 202 201 203 14 (parallel [
            (set (reg:DI 0 ax [207])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":684 218 {*adddi_1}
     (nil))
(insn 203 202 204 14 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [205])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 204 203 205 14 (set (reg:DI 37 r8)
        (reg:DI 2 cx [206])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(insn 205 204 209 14 (set (reg:DI 2 cx)
        (reg:DI 0 ax [207])) "../src/spline.f":684 81 {*movdi_internal}
     (nil))
(call_insn 209 205 227 14 (call (mem:QI (symbol_ref:DI ("splind_") [flags 0x403]  <function_decl 0x1427e4b00 splind>) [0 splind S1 A8])
        (const_int 0 [0])) "../src/spline.f":684 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 227 209 233 14 (const_int 0 [0]) "../src/spline.f":686 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 233 227 0 NOTE_INSN_DELETED)

;; Function inters (inters_, funcdef_no=16, decl_uid=4283, cgraph_uid=16, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=752, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=704, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 63:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 66:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 85:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 86:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 101:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 115:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 123:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 130:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 131:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 138:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 145:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 146:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 153:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 156:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 160:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 161:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 168:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 170:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 172:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 173:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 174:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) q {*cmpqi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 183:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 186:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 188:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 189:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 190:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 191:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 193:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 197:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 207:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 208:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 209:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 211:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 212:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 213:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 214:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 216:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 218:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 220:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) v  (1) vm {*cmpiusf}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 225:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 231:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) v  (1) vm {*cmpiusf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 244:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 248:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 254:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 256:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 257:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =qm {*setcc_qi}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 268:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 270:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 271:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 274:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 276:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =qm {*setcc_qi}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 281
	 Choosing alt 0 in insn 281:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 288:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 292:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 294:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) v  (1) vm {*cmpiusf}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 298:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 299:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 303:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 305:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) v  (1) vm {*cmpiusf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 318:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 322:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 328:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 330:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =qm {*setcc_qi}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 333:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 335
	 Choosing alt 0 in insn 335:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 342:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 344:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 348:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 350:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 351:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =qm {*setcc_qi}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) v  (1) vm {*cmpiusf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =qm {*setcc_qi}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 355
	 Choosing alt 0 in insn 355:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 362:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 376:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 377:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 381:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 389:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 390:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 401:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 402:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 403:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 404:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 405:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 414:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 415:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 416:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 417:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 418:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 419:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 420:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 421:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 422:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 423:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 425:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 432:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 433:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 435:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 436:  (0) v  (1) vm {*cmpiusf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 442:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 451:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 459:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 460:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 461
	 Choosing alt 1 in insn 461:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 462:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 463:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 469:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 470:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 471:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 474:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 477:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 479:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 482:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 487:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 488:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 498:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 499:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 500:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 502:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (1) rBwBz {*call_value}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 512:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 513:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 514:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 517:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 518:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 521:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=1227,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=8,overall=13,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 525:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 526:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 527:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 528:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 529:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 531:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (1) rBwBz {*call_value}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 539:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 540:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 541:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 542:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 543:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 544:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 545:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 546:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 547:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 548:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 549:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 550:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 551:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 552:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 554:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 555:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 557:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 558:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 559:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 560:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 561:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 562:  (0) x  (1) 0  (2) xm {*fop_sf_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 564:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 565:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 567:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 568:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 569:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 571:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 574:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 575:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 576:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 578:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 579:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 581:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 582
	 Choosing alt 1 in insn 582:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 583:  (0) v  (1) vm {*cmpiusf}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 589:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 590:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 595:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 597:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 598:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 599:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 600:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 602:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 603
	 Choosing alt 1 in insn 603:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 604:  (0) v  (1) vm {*cmpiusf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 610:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 619:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 627:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 633:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 634:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 635:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 636:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 637:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 638:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 641:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 643:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 646:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 647:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 652:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 653:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 658:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 661:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 664:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 665:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 669:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 672:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 674:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 676:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 677:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 678:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 686:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 688:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 690:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 696:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 701:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 702:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 707:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 709:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 712:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 715:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 716:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 717:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 718:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 720:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 723:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 725:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 728:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 729:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 734:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 736:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 737:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 738:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 739:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 740:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 741:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 746:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 747:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 752:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 753:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 758:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 763:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 764:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 46
EBB 32
EBB 47
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 45
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 48
EBB 44

********** Pseudo live ranges #1: **********

  BB 44
  BB 43
   Insn 813: point = 0, n_alt = -1
   Insn 787: point = 0, n_alt = -1
   Insn 764: point = 0, n_alt = 1
   Insn 763: point = 1, n_alt = 3
  BB 42
   Insn 760: point = 2, n_alt = 0
   Insn 759: point = 2, n_alt = -1
   Insn 758: point = 3, n_alt = 3
   Insn 757: point = 4, n_alt = 0
   Insn 756: point = 4, n_alt = -1
   Insn 755: point = 5, n_alt = -1
   Insn 754: point = 6, n_alt = 0
   Insn 753: point = 6, n_alt = 3
   Insn 752: point = 7, n_alt = 3
   Insn 751: point = 8, n_alt = 0
   Insn 750: point = 8, n_alt = -1
   Insn 749: point = 9, n_alt = -1
   Insn 748: point = 10, n_alt = 0
   Insn 747: point = 10, n_alt = 3
   Insn 746: point = 11, n_alt = 3
   Insn 745: point = 12, n_alt = 0
   Insn 744: point = 12, n_alt = -1
   Insn 743: point = 13, n_alt = -1
   Insn 742: point = 14, n_alt = 0
   Insn 741: point = 14, n_alt = 3
   Insn 740: point = 15, n_alt = 3
   Insn 739: point = 17, n_alt = 3
   Insn 738: point = 18, n_alt = 1
   Insn 737: point = 20, n_alt = 0
   Insn 736: point = 22, n_alt = 0
   Insn 735: point = 24, n_alt = 0
   Insn 734: point = 26, n_alt = 3
   Insn 733: point = 27, n_alt = 0
   Insn 732: point = 27, n_alt = -1
   Insn 731: point = 28, n_alt = -1
   Insn 730: point = 29, n_alt = 0
   Insn 729: point = 29, n_alt = 3
   Insn 728: point = 30, n_alt = 3
   Insn 727: point = 31, n_alt = 0
   Insn 726: point = 31, n_alt = -1
   Insn 725: point = 32, n_alt = 4
   Insn 724: point = 32, n_alt = 0
   Insn 723: point = 32, n_alt = 3
   Insn 722: point = 33, n_alt = 0
   Insn 721: point = 33, n_alt = -1
   Insn 720: point = 34, n_alt = 3
   Insn 719: point = 35, n_alt = 1
   Insn 718: point = 35, n_alt = 1
   Insn 717: point = 35, n_alt = 1
   Insn 716: point = 35, n_alt = 5
   Insn 715: point = 36, n_alt = 4
  BB 41
   Insn 713: point = 37, n_alt = -1
   Insn 712: point = 37, n_alt = 1
  BB 40
   Insn 709: point = 37, n_alt = 0
   Insn 708: point = 37, n_alt = -1
   Insn 707: point = 38, n_alt = 3
   Insn 706: point = 39, n_alt = 0
   Insn 705: point = 39, n_alt = -1
   Insn 704: point = 40, n_alt = -1
   Insn 703: point = 41, n_alt = 0
   Insn 702: point = 41, n_alt = 3
   Insn 701: point = 42, n_alt = 3
   Insn 700: point = 43, n_alt = 0
   Insn 699: point = 43, n_alt = -1
   Insn 698: point = 44, n_alt = -1
   Insn 697: point = 45, n_alt = 0
   Insn 696: point = 45, n_alt = 3
   Insn 695: point = 46, n_alt = 3
   Insn 694: point = 47, n_alt = 0
   Insn 693: point = 47, n_alt = -1
   Insn 692: point = 48, n_alt = -1
   Insn 691: point = 49, n_alt = 0
   Insn 690: point = 49, n_alt = 3
   Insn 689: point = 50, n_alt = 3
   Insn 688: point = 52, n_alt = 3
   Insn 687: point = 53, n_alt = 1
   Insn 686: point = 55, n_alt = 0
   Insn 685: point = 57, n_alt = 0
   Insn 684: point = 59, n_alt = 0
   Insn 683: point = 61, n_alt = 3
   Insn 682: point = 62, n_alt = 0
   Insn 681: point = 62, n_alt = -1
   Insn 680: point = 63, n_alt = -1
   Insn 679: point = 64, n_alt = 0
   Insn 678: point = 64, n_alt = 3
   Insn 677: point = 65, n_alt = 3
   Insn 676: point = 66, n_alt = 0
   Insn 675: point = 66, n_alt = -1
   Insn 674: point = 67, n_alt = 4
   Insn 673: point = 67, n_alt = 0
   Insn 672: point = 67, n_alt = 3
   Insn 671: point = 68, n_alt = 0
   Insn 670: point = 68, n_alt = -1
   Insn 669: point = 69, n_alt = 3
   Insn 668: point = 70, n_alt = 1
   Insn 667: point = 70, n_alt = 1
   Insn 666: point = 70, n_alt = 1
   Insn 665: point = 70, n_alt = 5
   Insn 664: point = 71, n_alt = 4
  BB 39
   Insn 662: point = 72, n_alt = -1
   Insn 661: point = 72, n_alt = 1
   Insn 660: point = 72, n_alt = 0
   Insn 659: point = 72, n_alt = -1
   Insn 658: point = 73, n_alt = 3
   Insn 657: point = 74, n_alt = 0
   Insn 656: point = 74, n_alt = -1
   Insn 655: point = 75, n_alt = -1
   Insn 654: point = 76, n_alt = 0
   Insn 653: point = 76, n_alt = 3
   Insn 652: point = 77, n_alt = 3
   Insn 651: point = 78, n_alt = 0
   Insn 650: point = 78, n_alt = -1
   Insn 649: point = 79, n_alt = -1
   Insn 648: point = 80, n_alt = 0
   Insn 647: point = 80, n_alt = 3
   Insn 646: point = 81, n_alt = 3
   Insn 645: point = 82, n_alt = 0
   Insn 644: point = 82, n_alt = -1
   Insn 643: point = 83, n_alt = 4
   Insn 642: point = 83, n_alt = 0
   Insn 641: point = 83, n_alt = 3
   Insn 640: point = 84, n_alt = 0
   Insn 639: point = 84, n_alt = -1
   Insn 638: point = 85, n_alt = 3
   Insn 637: point = 86, n_alt = 1
   Insn 636: point = 86, n_alt = 1
   Insn 635: point = 86, n_alt = 1
   Insn 634: point = 86, n_alt = 5
   Insn 633: point = 87, n_alt = 4
  BB 45
   Insn 804: point = 88, n_alt = -1
  BB 48
   Insn 817: point = 88, n_alt = -1
  BB 37
   Insn 621: point = 88, n_alt = -1
   Insn 620: point = 88, n_alt = 0
   Insn 619: point = 89, n_alt = 0
   Insn 618: point = 89, n_alt = 0
  BB 35
   Insn 798: point = 92, n_alt = -1
   Insn 610: point = 92, n_alt = 1
  BB 36
   Insn 615: point = 93, n_alt = 1
  BB 34
   Insn 605: point = 94, n_alt = -1
   Insn 604: point = 94, n_alt = 1
   Insn 603: point = 95, n_alt = 1
   Insn 602: point = 97, n_alt = 7
   Insn 601: point = 98, n_alt = -1
   Insn 600: point = 100, n_alt = 2
   Insn 599: point = 102, n_alt = 7
   Insn 598: point = 104, n_alt = 3
   Insn 597: point = 105, n_alt = 7
   Insn 596: point = 107, n_alt = 3
   Insn 595: point = 108, n_alt = 3
   Insn 594: point = 110, n_alt = 0
   Insn 593: point = 112, n_alt = 0
   Insn 592: point = 114, n_alt = 3
   Insn 591: point = 115, n_alt = 0
   Insn 590: point = 117, n_alt = 2
   Insn 589: point = 118, n_alt = 7
  BB 33
   Insn 584: point = 119, n_alt = -1
   Insn 583: point = 119, n_alt = 1
   Insn 582: point = 120, n_alt = 1
   Insn 581: point = 122, n_alt = 7
   Insn 580: point = 123, n_alt = -1
   Insn 579: point = 125, n_alt = 2
   Insn 578: point = 127, n_alt = 7
   Insn 577: point = 129, n_alt = 3
   Insn 576: point = 130, n_alt = 7
   Insn 575: point = 132, n_alt = 3
   Insn 574: point = 133, n_alt = 3
   Insn 573: point = 135, n_alt = 0
   Insn 572: point = 137, n_alt = 0
   Insn 571: point = 139, n_alt = 3
   Insn 570: point = 140, n_alt = 0
   Insn 569: point = 142, n_alt = 2
   Insn 568: point = 143, n_alt = 7
   Insn 567: point = 144, n_alt = 8
   Insn 566: point = 145, n_alt = 0
   Insn 565: point = 147, n_alt = 2
   Insn 564: point = 148, n_alt = 2
   Insn 563: point = 150, n_alt = -1
   Insn 562: point = 152, n_alt = 2
   Insn 561: point = 154, n_alt = 1
   Insn 560: point = 156, n_alt = 7
   Insn 559: point = 157, n_alt = 1
   Insn 558: point = 159, n_alt = 7
   Insn 557: point = 160, n_alt = 8
   Insn 556: point = 161, n_alt = 0
   Insn 555: point = 163, n_alt = 2
   Insn 554: point = 164, n_alt = 2
   Insn 553: point = 166, n_alt = -1
   Insn 552: point = 168, n_alt = 2
   Insn 551: point = 170, n_alt = 1
   Insn 550: point = 172, n_alt = 7
   Insn 549: point = 173, n_alt = 1
   Insn 548: point = 175, n_alt = 7
   Insn 547: point = 176, n_alt = 8
   Insn 546: point = 177, n_alt = 2
   Insn 545: point = 179, n_alt = 1
   Insn 544: point = 181, n_alt = 7
   Insn 543: point = 182, n_alt = 1
   Insn 542: point = 184, n_alt = 7
   Insn 541: point = 185, n_alt = 8
   Insn 540: point = 186, n_alt = 1
   Insn 539: point = 188, n_alt = 2
   Insn 538: point = 189, n_alt = -1
   Insn 537: point = 190, n_alt = 0
   Insn 536: point = 190, n_alt = -1
   Insn 535: point = 191, n_alt = -1
   Insn 534: point = 192, n_alt = -1
   Insn 533: point = 193, n_alt = -1
   Insn 532: point = 194, n_alt = -1
   Insn 531: point = 195, n_alt = 3
   Insn 530: point = 196, n_alt = 3
   Insn 529: point = 197, n_alt = 3
   Insn 528: point = 198, n_alt = 3
   Insn 527: point = 199, n_alt = 3
   Insn 526: point = 200, n_alt = 4
   Insn 525: point = 201, n_alt = 9
   Insn 524: point = 202, n_alt = 0
   Insn 523: point = 202, n_alt = -1
   Insn 522: point = 203, n_alt = -1
   Insn 521: point = 204, n_alt = 3
   Insn 520: point = 204, n_alt = -1
   Insn 519: point = 205, n_alt = -1
   Insn 518: point = 206, n_alt = 3
   Insn 517: point = 207, n_alt = 3
   Insn 516: point = 208, n_alt = 3
   Insn 515: point = 209, n_alt = 3
   Insn 514: point = 210, n_alt = 8
   Insn 513: point = 211, n_alt = 1
   Insn 512: point = 213, n_alt = 2
   Insn 511: point = 214, n_alt = -1
   Insn 510: point = 215, n_alt = 0
   Insn 509: point = 215, n_alt = -1
   Insn 508: point = 216, n_alt = -1
   Insn 507: point = 217, n_alt = -1
   Insn 506: point = 218, n_alt = -1
   Insn 505: point = 219, n_alt = -1
   Insn 504: point = 220, n_alt = 3
   Insn 503: point = 221, n_alt = 3
   Insn 502: point = 222, n_alt = 3
   Insn 501: point = 223, n_alt = 3
   Insn 500: point = 224, n_alt = 3
   Insn 499: point = 225, n_alt = 4
   Insn 498: point = 226, n_alt = 9
   Insn 497: point = 227, n_alt = 0
   Insn 496: point = 227, n_alt = -1
   Insn 495: point = 228, n_alt = -1
   Insn 494: point = 229, n_alt = -1
   Insn 493: point = 230, n_alt = -1
   Insn 492: point = 231, n_alt = -1
   Insn 491: point = 232, n_alt = 3
   Insn 490: point = 233, n_alt = 3
   Insn 489: point = 234, n_alt = 3
   Insn 488: point = 235, n_alt = 3
   Insn 487: point = 236, n_alt = 3
  BB 32
   Insn 808: point = 237, n_alt = -1
   Insn 484: point = 237, n_alt = 0
   Insn 483: point = 237, n_alt = -1
   Insn 482: point = 238, n_alt = 3
   Insn 481: point = 239, n_alt = 0
   Insn 480: point = 239, n_alt = -1
   Insn 479: point = 240, n_alt = 4
   Insn 478: point = 240, n_alt = 0
   Insn 477: point = 240, n_alt = 3
   Insn 476: point = 241, n_alt = 0
   Insn 475: point = 241, n_alt = -1
   Insn 474: point = 242, n_alt = 3
   Insn 473: point = 243, n_alt = 1
   Insn 472: point = 243, n_alt = 1
   Insn 471: point = 243, n_alt = 1
   Insn 470: point = 243, n_alt = 5
   Insn 469: point = 244, n_alt = 4
  BB 46
   Insn 807: point = 245, n_alt = -1
  BB 47
   Insn 812: point = 245, n_alt = -1
  BB 30
   Insn 453: point = 245, n_alt = -1
   Insn 452: point = 245, n_alt = 0
   Insn 451: point = 246, n_alt = 0
   Insn 450: point = 246, n_alt = 0
  BB 28
   Insn 794: point = 249, n_alt = -1
   Insn 442: point = 249, n_alt = 1
  BB 29
   Insn 447: point = 250, n_alt = 1
  BB 27
   Insn 437: point = 251, n_alt = -1
   Insn 436: point = 251, n_alt = 1
   Insn 435: point = 252, n_alt = 7
   Insn 434: point = 253, n_alt = 1
   Insn 433: point = 255, n_alt = 2
   Insn 432: point = 256, n_alt = 7
  BB 26
   Insn 427: point = 257, n_alt = -1
   Insn 426: point = 257, n_alt = 1
   Insn 425: point = 258, n_alt = 7
   Insn 424: point = 259, n_alt = 1
   Insn 423: point = 261, n_alt = 2
   Insn 422: point = 262, n_alt = 7
   Insn 421: point = 263, n_alt = 8
   Insn 420: point = 264, n_alt = 2
   Insn 419: point = 266, n_alt = 7
   Insn 418: point = 267, n_alt = 8
   Insn 417: point = 268, n_alt = 2
   Insn 416: point = 270, n_alt = 7
   Insn 415: point = 271, n_alt = 4
   Insn 414: point = 272, n_alt = 9
   Insn 413: point = 273, n_alt = 0
   Insn 412: point = 273, n_alt = -1
   Insn 411: point = 274, n_alt = -1
   Insn 410: point = 275, n_alt = -1
   Insn 409: point = 276, n_alt = -1
   Insn 408: point = 277, n_alt = -1
   Insn 407: point = 278, n_alt = 3
   Insn 406: point = 279, n_alt = 3
   Insn 405: point = 280, n_alt = 3
   Insn 404: point = 281, n_alt = 3
   Insn 403: point = 282, n_alt = 3
   Insn 402: point = 283, n_alt = 4
   Insn 401: point = 284, n_alt = 9
   Insn 400: point = 285, n_alt = 0
   Insn 399: point = 285, n_alt = -1
   Insn 398: point = 286, n_alt = -1
   Insn 397: point = 287, n_alt = 3
   Insn 396: point = 287, n_alt = -1
   Insn 395: point = 288, n_alt = -1
   Insn 394: point = 289, n_alt = 3
   Insn 393: point = 290, n_alt = 3
   Insn 392: point = 291, n_alt = 3
   Insn 391: point = 292, n_alt = 3
   Insn 390: point = 293, n_alt = 4
   Insn 389: point = 294, n_alt = 9
   Insn 388: point = 295, n_alt = 0
   Insn 387: point = 295, n_alt = -1
   Insn 386: point = 296, n_alt = -1
   Insn 385: point = 297, n_alt = -1
   Insn 384: point = 298, n_alt = -1
   Insn 383: point = 299, n_alt = -1
   Insn 382: point = 300, n_alt = 3
   Insn 381: point = 301, n_alt = 3
   Insn 380: point = 302, n_alt = 3
   Insn 379: point = 303, n_alt = 3
   Insn 378: point = 304, n_alt = 3
   Insn 377: point = 305, n_alt = 4
   Insn 376: point = 306, n_alt = 9
   Insn 375: point = 307, n_alt = 0
   Insn 374: point = 307, n_alt = -1
   Insn 373: point = 308, n_alt = -1
   Insn 372: point = 309, n_alt = -1
   Insn 371: point = 310, n_alt = -1
   Insn 370: point = 311, n_alt = -1
   Insn 369: point = 312, n_alt = 3
   Insn 368: point = 313, n_alt = 3
   Insn 367: point = 314, n_alt = 3
   Insn 366: point = 315, n_alt = 3
   Insn 365: point = 316, n_alt = 3
  BB 25
   Insn 362: point = 317, n_alt = 8
   Insn 361: point = 318, n_alt = 3
  BB 24
   Insn 12: point = 320, n_alt = -1
  BB 23
   Insn 357: point = 323, n_alt = -1
   Insn 356: point = 323, n_alt = 0
   Insn 355: point = 324, n_alt = 0
   Insn 354: point = 326, n_alt = 0
   Insn 353: point = 327, n_alt = 1
   Insn 352: point = 327, n_alt = 0
   Insn 351: point = 328, n_alt = 1
   Insn 350: point = 328, n_alt = 7
   Insn 349: point = 330, n_alt = 3
   Insn 348: point = 331, n_alt = 3
   Insn 347: point = 333, n_alt = 0
   Insn 346: point = 335, n_alt = 0
   Insn 345: point = 337, n_alt = 3
   Insn 344: point = 338, n_alt = 7
   Insn 343: point = 340, n_alt = 3
   Insn 342: point = 341, n_alt = 8
   Insn 341: point = 342, n_alt = 3
  BB 22
   Insn 11: point = 344, n_alt = -1
  BB 21
   Insn 337: point = 347, n_alt = -1
   Insn 336: point = 347, n_alt = 0
   Insn 335: point = 348, n_alt = 0
   Insn 334: point = 350, n_alt = 0
   Insn 333: point = 351, n_alt = 1
   Insn 332: point = 351, n_alt = 0
   Insn 331: point = 352, n_alt = 1
   Insn 330: point = 352, n_alt = 7
   Insn 329: point = 354, n_alt = 3
   Insn 328: point = 355, n_alt = 7
   Insn 327: point = 357, n_alt = 3
   Insn 326: point = 358, n_alt = 1
  BB 20
   Insn 324: point = 358, n_alt = -1
   Insn 323: point = 358, n_alt = 0
   Insn 322: point = 359, n_alt = 0
   Insn 321: point = 359, n_alt = 0
  BB 18
   Insn 792: point = 362, n_alt = -1
   Insn 313: point = 362, n_alt = 1
  BB 19
   Insn 318: point = 363, n_alt = 1
  BB 17
   Insn 307: point = 364, n_alt = -1
   Insn 306: point = 364, n_alt = 1
   Insn 305: point = 365, n_alt = 7
   Insn 304: point = 367, n_alt = 3
   Insn 303: point = 368, n_alt = 3
   Insn 302: point = 370, n_alt = 0
   Insn 301: point = 372, n_alt = 0
   Insn 300: point = 374, n_alt = 3
   Insn 299: point = 375, n_alt = 7
   Insn 298: point = 377, n_alt = 3
  BB 16
   Insn 296: point = 378, n_alt = -1
   Insn 295: point = 378, n_alt = 1
   Insn 294: point = 379, n_alt = 7
   Insn 293: point = 381, n_alt = 3
   Insn 292: point = 382, n_alt = 7
   Insn 291: point = 384, n_alt = 3
  BB 15
   Insn 288: point = 385, n_alt = 8
   Insn 287: point = 386, n_alt = 3
  BB 14
   Insn 10: point = 388, n_alt = -1
  BB 13
   Insn 283: point = 391, n_alt = -1
   Insn 282: point = 391, n_alt = 0
   Insn 281: point = 392, n_alt = 0
   Insn 280: point = 394, n_alt = 0
   Insn 279: point = 395, n_alt = 1
   Insn 278: point = 395, n_alt = 0
   Insn 277: point = 396, n_alt = 1
   Insn 276: point = 396, n_alt = 7
   Insn 275: point = 398, n_alt = 3
   Insn 274: point = 399, n_alt = 3
   Insn 273: point = 401, n_alt = 0
   Insn 272: point = 403, n_alt = 0
   Insn 271: point = 405, n_alt = 3
   Insn 270: point = 406, n_alt = 7
   Insn 269: point = 408, n_alt = 3
   Insn 268: point = 409, n_alt = 8
   Insn 267: point = 410, n_alt = 3
  BB 12
   Insn 9: point = 412, n_alt = -1
  BB 11
   Insn 263: point = 415, n_alt = -1
   Insn 262: point = 415, n_alt = 0
   Insn 261: point = 416, n_alt = 0
   Insn 260: point = 418, n_alt = 0
   Insn 259: point = 419, n_alt = 1
   Insn 258: point = 419, n_alt = 0
   Insn 257: point = 420, n_alt = 1
   Insn 256: point = 420, n_alt = 7
   Insn 255: point = 422, n_alt = 3
   Insn 254: point = 423, n_alt = 7
   Insn 253: point = 425, n_alt = 3
   Insn 252: point = 426, n_alt = 1
  BB 10
   Insn 250: point = 426, n_alt = -1
   Insn 249: point = 426, n_alt = 0
   Insn 248: point = 427, n_alt = 0
   Insn 247: point = 427, n_alt = 0
  BB 8
   Insn 789: point = 430, n_alt = -1
   Insn 239: point = 430, n_alt = 1
  BB 9
   Insn 244: point = 431, n_alt = 1
  BB 7
   Insn 233: point = 432, n_alt = -1
   Insn 232: point = 432, n_alt = 1
   Insn 231: point = 433, n_alt = 7
   Insn 230: point = 435, n_alt = 3
   Insn 229: point = 436, n_alt = 3
   Insn 228: point = 438, n_alt = 0
   Insn 227: point = 440, n_alt = 0
   Insn 226: point = 442, n_alt = 3
   Insn 225: point = 443, n_alt = 7
   Insn 224: point = 445, n_alt = 3
  BB 6
   Insn 222: point = 446, n_alt = -1
   Insn 221: point = 446, n_alt = 1
   Insn 220: point = 447, n_alt = 7
   Insn 219: point = 449, n_alt = 3
   Insn 218: point = 450, n_alt = 7
   Insn 217: point = 452, n_alt = 3
   Insn 216: point = 453, n_alt = 8
   Insn 215: point = 454, n_alt = 3
   Insn 214: point = 455, n_alt = 1
   Insn 213: point = 457, n_alt = 1
   Insn 212: point = 459, n_alt = 7
   Insn 211: point = 460, n_alt = 8
   Insn 210: point = 461, n_alt = 3
   Insn 209: point = 462, n_alt = 1
   Insn 208: point = 464, n_alt = 1
   Insn 207: point = 466, n_alt = 7
   Insn 206: point = 467, n_alt = 1
   Insn 205: point = 467, n_alt = 1
  BB 5
   Insn 203: point = 467, n_alt = -1
   Insn 202: point = 467, n_alt = 0
   Insn 201: point = 468, n_alt = 0
   Insn 200: point = 469, n_alt = 0
  BB 31
   Insn 796: point = 469, n_alt = -1
   Insn 463: point = 469, n_alt = 1
   Insn 462: point = 469, n_alt = 8
   Insn 461: point = 470, n_alt = 1
   Insn 460: point = 472, n_alt = 7
   Insn 459: point = 473, n_alt = 7
  BB 4
   Insn 198: point = 474, n_alt = 1
   Insn 197: point = 474, n_alt = 8
   Insn 196: point = 475, n_alt = 1
   Insn 195: point = 477, n_alt = 2
   Insn 194: point = 478, n_alt = 7
   Insn 193: point = 479, n_alt = 8
   Insn 192: point = 480, n_alt = 1
   Insn 191: point = 482, n_alt = 2
   Insn 190: point = 483, n_alt = 7
   Insn 189: point = 484, n_alt = 8
   Insn 188: point = 485, n_alt = 7
   Insn 187: point = 487, n_alt = 3
   Insn 186: point = 488, n_alt = 8
   Insn 185: point = 489, n_alt = 7
   Insn 184: point = 491, n_alt = 3
   Insn 183: point = 492, n_alt = 8
   Insn 182: point = 493, n_alt = 7
  BB 3
   Insn 180: point = 494, n_alt = -1
   Insn 179: point = 494, n_alt = 0
   Insn 178: point = 495, n_alt = 0
   Insn 177: point = 496, n_alt = 0
  BB 38
   Insn 800: point = 496, n_alt = -1
   Insn 627: point = 496, n_alt = 1
  BB 2
   Insn 175: point = 496, n_alt = 1
   Insn 174: point = 496, n_alt = 8
   Insn 173: point = 497, n_alt = 7
   Insn 172: point = 498, n_alt = 8
   Insn 171: point = 499, n_alt = 7
   Insn 170: point = 500, n_alt = 8
   Insn 169: point = 501, n_alt = 7
   Insn 168: point = 502, n_alt = 8
   Insn 167: point = 503, n_alt = 7
   Insn 166: point = 504, n_alt = 1
   Insn 165: point = 505, n_alt = 3
   Insn 161: point = 506, n_alt = 5
   Insn 160: point = 507, n_alt = 5
   Insn 159: point = 508, n_alt = -1
   Insn 157: point = 510, n_alt = 1
   Insn 155: point = 512, n_alt = 0
   Insn 156: point = 512, n_alt = 2
   Insn 154: point = 513, n_alt = 3
   Insn 153: point = 514, n_alt = 5
   Insn 152: point = 515, n_alt = 0
   Insn 151: point = 517, n_alt = 0
   Insn 150: point = 519, n_alt = 3
   Insn 146: point = 520, n_alt = 5
   Insn 145: point = 521, n_alt = 5
   Insn 144: point = 522, n_alt = -1
   Insn 142: point = 524, n_alt = 1
   Insn 140: point = 526, n_alt = 0
   Insn 141: point = 526, n_alt = 2
   Insn 139: point = 527, n_alt = 3
   Insn 138: point = 528, n_alt = 5
   Insn 137: point = 529, n_alt = 0
   Insn 136: point = 531, n_alt = 0
   Insn 135: point = 533, n_alt = 3
   Insn 131: point = 534, n_alt = 5
   Insn 130: point = 535, n_alt = 5
   Insn 129: point = 536, n_alt = -1
   Insn 127: point = 538, n_alt = 1
   Insn 125: point = 540, n_alt = 0
   Insn 126: point = 540, n_alt = 2
   Insn 124: point = 541, n_alt = 3
   Insn 123: point = 542, n_alt = 5
   Insn 122: point = 543, n_alt = 0
   Insn 121: point = 545, n_alt = 0
   Insn 120: point = 547, n_alt = 3
   Insn 116: point = 548, n_alt = 5
   Insn 115: point = 549, n_alt = 5
   Insn 114: point = 550, n_alt = -1
   Insn 112: point = 552, n_alt = 1
   Insn 110: point = 554, n_alt = 0
   Insn 111: point = 554, n_alt = 2
   Insn 109: point = 555, n_alt = 3
   Insn 108: point = 556, n_alt = 5
   Insn 107: point = 557, n_alt = 0
   Insn 106: point = 559, n_alt = 0
   Insn 105: point = 561, n_alt = 3
   Insn 101: point = 562, n_alt = 5
   Insn 100: point = 563, n_alt = 5
   Insn 99: point = 564, n_alt = -1
   Insn 97: point = 566, n_alt = 1
   Insn 95: point = 568, n_alt = 0
   Insn 96: point = 568, n_alt = 2
   Insn 94: point = 569, n_alt = 3
   Insn 93: point = 570, n_alt = 5
   Insn 92: point = 571, n_alt = 0
   Insn 91: point = 573, n_alt = 0
   Insn 90: point = 575, n_alt = 3
   Insn 86: point = 576, n_alt = 5
   Insn 85: point = 577, n_alt = 5
   Insn 84: point = 578, n_alt = -1
   Insn 82: point = 580, n_alt = 1
   Insn 80: point = 582, n_alt = 0
   Insn 81: point = 582, n_alt = 2
   Insn 79: point = 583, n_alt = 3
   Insn 78: point = 584, n_alt = 5
   Insn 77: point = 585, n_alt = 0
   Insn 76: point = 587, n_alt = 0
   Insn 75: point = 589, n_alt = 3
   Insn 71: point = 590, n_alt = 5
   Insn 70: point = 591, n_alt = 5
   Insn 69: point = 592, n_alt = -1
   Insn 67: point = 594, n_alt = 1
   Insn 65: point = 596, n_alt = 0
   Insn 66: point = 596, n_alt = 2
   Insn 64: point = 597, n_alt = 3
   Insn 63: point = 598, n_alt = 5
   Insn 62: point = 599, n_alt = 0
   Insn 61: point = 601, n_alt = 0
   Insn 60: point = 603, n_alt = 3
   Insn 56: point = 604, n_alt = 2
   Insn 55: point = 605, n_alt = 3
   Insn 54: point = 606, n_alt = -1
   Insn 52: point = 608, n_alt = 1
   Insn 50: point = 610, n_alt = 0
   Insn 51: point = 610, n_alt = 2
   Insn 49: point = 611, n_alt = 3
   Insn 48: point = 612, n_alt = 5
   Insn 47: point = 613, n_alt = 0
   Insn 46: point = 615, n_alt = 0
   Insn 45: point = 617, n_alt = 3
   Insn 41: point = 618, n_alt = 2
   Insn 40: point = 619, n_alt = 3
   Insn 39: point = 620, n_alt = -1
   Insn 37: point = 622, n_alt = 1
   Insn 35: point = 624, n_alt = 0
   Insn 36: point = 624, n_alt = 2
   Insn 34: point = 625, n_alt = 3
   Insn 33: point = 626, n_alt = 5
   Insn 32: point = 627, n_alt = 0
   Insn 31: point = 629, n_alt = 0
   Insn 30: point = 631, n_alt = 3
   Insn 26: point = 632, n_alt = 2
   Insn 25: point = 633, n_alt = 3
   Insn 24: point = 634, n_alt = -1
   Insn 22: point = 636, n_alt = 1
   Insn 20: point = 638, n_alt = 0
   Insn 21: point = 638, n_alt = 2
   Insn 19: point = 639, n_alt = 3
   Insn 18: point = 640, n_alt = 5
   Insn 17: point = 641, n_alt = 0
   Insn 16: point = 643, n_alt = 0
   Insn 15: point = 645, n_alt = 3
   Insn 7: point = 646, n_alt = 5
   Insn 6: point = 646, n_alt = 5
   Insn 5: point = 646, n_alt = 5
   Insn 4: point = 646, n_alt = 5
   Insn 3: point = 646, n_alt = 5
   Insn 2: point = 646, n_alt = 5
 r87: [642..643]
 r88: [633..634]
 r89: [632..646]
 r91: [628..629]
 r92: [619..620]
 r93: [618..646]
 r95: [614..615]
 r96: [605..606]
 r97: [604..646]
 r99: [600..601]
 r100: [591..592]
 r101: [590..646]
 r103: [586..587]
 r104: [577..578]
 r105: [576..646]
 r107: [572..573]
 r108: [563..564]
 r109: [562..646]
 r111: [558..559]
 r112: [549..550]
 r113: [548..646]
 r115: [544..545]
 r116: [535..536]
 r117: [534..646]
 r119: [530..531]
 r120: [521..522]
 r121: [520..646]
 r123: [516..517]
 r124: [507..508]
 r125: [506..646]
 r127: [481..483]
 r128: [476..478]
 r129: [465..466]
 r130: [463..464]
 r131: [460..462]
 r132: [458..459]
 r133: [456..457]
 r134: [453..455]
 r135: [446..450]
 r136: [446..447]
 r137: [432..443]
 r138: [439..440]
 r139: [437..438]
 r140: [434..436]
 r141: [432..433]
 r142: [426..427]
 r143: [417..419]
 r144: [417..418]
 r145: [415..416]
 r146: [402..403]
 r147: [400..401]
 r148: [397..399]
 r149: [393..395]
 r150: [393..394]
 r151: [391..392]
 r152: [378..382]
 r153: [378..379]
 r154: [364..375]
 r155: [371..372]
 r156: [369..370]
 r157: [366..368]
 r158: [364..365]
 r159: [358..359]
 r160: [349..351]
 r161: [349..350]
 r162: [347..348]
 r163: [334..335]
 r164: [332..333]
 r165: [329..331]
 r166: [325..327]
 r167: [325..326]
 r168: [323..324]
 r169: [267..268]
 r170: [263..264]
 r171: [260..262]
 r172: [257..259]
 r173: [254..256]
 r174: [251..253]
 r175: [245..246]
 r176: [212..214]
 r177: [187..189]
 r178: [178..182]
 r179: [178..179]
 r180: [174..175]
 r181: [169..173]
 r182: [171..172]
 r183: [169..170]
 r184: [167..168]
 r185: [165..166]
 r186: [162..164]
 r187: [160..161]
 r188: [158..159]
 r189: [153..157]
 r190: [155..156]
 r191: [153..154]
 r192: [151..152]
 r193: [149..150]
 r194: [146..148]
 r195: [144..145]
 r196: [141..143]
 r197: [119..140]
 r198: [136..137]
 r199: [134..135]
 r200: [131..133]
 r201: [126..130]
 r202: [126..127]
 r203: [124..125]
 r204: [121..123]
 r205: [121..122]
 r206: [119..120]
 r207: [116..118]
 r208: [94..115]
 r209: [111..112]
 r210: [109..110]
 r211: [106..108]
 r212: [101..105]
 r213: [101..102]
 r214: [99..100]
 r215: [96..98]
 r216: [96..97]
 r217: [94..95]
 r218: [88..89]
 r219: [63..65]
 r220: [58..59]
 r221: [56..57]
 r222: [54..55]
 r223: [48..50]
 r224: [28..30]
 r225: [23..24]
 r226: [21..22]
 r227: [19..20]
 r228: [13..15]
 r229: [415..423] [409..412]
 r230: [391..406] [385..388]
 r231: [347..355] [341..344]
 r232: [323..338] [317..320]
 r233: [428..431]
 r234: [360..363]
 r235: [247..250]
 r236: [90..93]
 r237: [637..639]
 r238: [635..636]
 r242: [623..625]
 r243: [621..622]
 r247: [609..611]
 r248: [607..608]
 r252: [595..597]
 r253: [593..594]
 r257: [581..583]
 r258: [579..580]
 r262: [567..569]
 r263: [565..566]
 r267: [553..555]
 r268: [551..552]
 r272: [539..541]
 r273: [537..538]
 r277: [525..527]
 r278: [523..524]
 r282: [511..513]
 r283: [509..510]
 r287: [494..495]
 r288: [467..468]
 r289: [413..420]
 r290: [389..396]
 r291: [345..352]
 r292: [321..328]
 r293: [644..645]
 r294: [640..641]
 r295: [637..638]
 r296: [630..631]
 r297: [626..627]
 r298: [623..624]
 r299: [616..617]
 r300: [612..613]
 r301: [609..610]
 r302: [602..603]
 r303: [598..599]
 r304: [595..596]
 r305: [588..589]
 r306: [584..585]
 r307: [581..582]
 r308: [574..575]
 r309: [570..571]
 r310: [567..568]
 r311: [560..561]
 r312: [556..557]
 r313: [553..554]
 r314: [546..547]
 r315: [542..543]
 r316: [539..540]
 r317: [532..533]
 r318: [528..529]
 r319: [525..526]
 r320: [518..519]
 r321: [514..515]
 r322: [511..512]
 r323: [504..505]
 r324: [502..503]
 r325: [500..501]
 r326: [498..499]
 r327: [496..497]
 r328: [492..493]
 r329: [490..491]
 r330: [488..489]
 r331: [486..487]
 r332: [484..485]
 r333: [479..480]
 r334: [481..482]
 r335: [474..475]
 r336: [476..477]
 r337: [460..461]
 r338: [453..454]
 r339: [451..452]
 r340: [448..449]
 r341: [444..445]
 r342: [441..442]
 r343: [434..435]
 r344: [424..425]
 r345: [421..422]
 r346: [409..410]
 r347: [407..408]
 r348: [404..405]
 r349: [397..398]
 r350: [385..386]
 r351: [383..384]
 r352: [380..381]
 r353: [376..377]
 r354: [373..374]
 r355: [366..367]
 r356: [356..357]
 r357: [353..354]
 r358: [341..342]
 r359: [339..340]
 r360: [336..337]
 r361: [329..330]
 r362: [317..318]
 r363: [311..316]
 r364: [310..315]
 r365: [309..314]
 r366: [308..313]
 r367: [307..312]
 r368: [305..306]
 r369: [299..304]
 r370: [298..303]
 r371: [297..302]
 r372: [296..301]
 r373: [295..300]
 r374: [293..294]
 r375: [288..292]
 r376: [287..291]
 r377: [286..290]
 r378: [285..289]
 r379: [283..284]
 r380: [277..282]
 r381: [276..281]
 r382: [275..280]
 r383: [274..279]
 r384: [273..278]
 r385: [271..272]
 r386: [269..270]
 r387: [265..266]
 r388: [260..261]
 r389: [257..258]
 r390: [254..255]
 r391: [251..252]
 r392: [469..470]
 r393: [471..473]
 r394: [471..472]
 r395: [243..244]
 r396: [241..242]
 r397: [239..240]
 r398: [237..238]
 r399: [231..236]
 r400: [230..235]
 r401: [229..234]
 r402: [228..233]
 r403: [227..232]
 r404: [225..226]
 r405: [219..224]
 r406: [218..223]
 r407: [217..222]
 r408: [216..221]
 r409: [215..220]
 r410: [210..211]
 r411: [212..213]
 r412: [205..209]
 r413: [204..208]
 r414: [203..207]
 r415: [202..206]
 r416: [200..201]
 r417: [194..199]
 r418: [193..198]
 r419: [192..197]
 r420: [191..196]
 r421: [190..195]
 r422: [185..186]
 r423: [187..188]
 r424: [183..184]
 r425: [180..181]
 r426: [176..177]
 r427: [162..163]
 r428: [146..147]
 r429: [141..142]
 r430: [138..139]
 r431: [131..132]
 r432: [128..129]
 r433: [116..117]
 r434: [113..114]
 r435: [106..107]
 r436: [103..104]
 r437: [86..87]
 r438: [84..85]
 r439: [82..83]
 r440: [79..81]
 r441: [78..80]
 r442: [75..77]
 r443: [74..76]
 r444: [72..73]
 r445: [70..71]
 r446: [68..69]
 r447: [66..67]
 r448: [62..64]
 r449: [60..61]
 r450: [51..53]
 r451: [51..52]
 r452: [47..49]
 r453: [44..46]
 r454: [43..45]
 r455: [40..42]
 r456: [39..41]
 r457: [37..38]
 r458: [35..36]
 r459: [33..34]
 r460: [31..32]
 r461: [27..29]
 r462: [25..26]
 r463: [16..18]
 r464: [16..17]
 r465: [12..14]
 r466: [9..11]
 r467: [8..10]
 r468: [5..7]
 r469: [4..6]
 r470: [2..3]
 r471: [0..1]
Compressing live ranges: from 647 to 474 - 73%
Ranges after the compression:
 r87: [470..471]
 r88: [462..463]
 r89: [462..473]
 r91: [458..459]
 r92: [450..451]
 r93: [450..473]
 r95: [446..447]
 r96: [438..439]
 r97: [438..473]
 r99: [434..435]
 r100: [426..427]
 r101: [426..473]
 r103: [422..423]
 r104: [414..415]
 r105: [414..473]
 r107: [410..411]
 r108: [402..403]
 r109: [402..473]
 r111: [398..399]
 r112: [390..391]
 r113: [390..473]
 r115: [386..387]
 r116: [378..379]
 r117: [378..473]
 r119: [374..375]
 r120: [366..367]
 r121: [366..473]
 r123: [362..363]
 r124: [354..355]
 r125: [354..473]
 r127: [330..331]
 r128: [326..327]
 r129: [316..317]
 r130: [314..315]
 r131: [312..313]
 r132: [310..311]
 r133: [308..309]
 r134: [306..307]
 r135: [300..303]
 r136: [300..301]
 r137: [288..297]
 r138: [294..295]
 r139: [292..293]
 r140: [290..291]
 r141: [288..289]
 r142: [284..285]
 r143: [278..279]
 r144: [278..279]
 r145: [276..277]
 r146: [268..269]
 r147: [266..267]
 r148: [264..265]
 r149: [262..263]
 r150: [262..263]
 r151: [260..261]
 r152: [252..255]
 r153: [252..253]
 r154: [240..249]
 r155: [246..247]
 r156: [244..245]
 r157: [242..243]
 r158: [240..241]
 r159: [236..237]
 r160: [230..231]
 r161: [230..231]
 r162: [228..229]
 r163: [220..221]
 r164: [218..219]
 r165: [216..217]
 r166: [214..215]
 r167: [214..215]
 r168: [212..213]
 r169: [190..191]
 r170: [186..187]
 r171: [184..185]
 r172: [182..183]
 r173: [180..181]
 r174: [178..179]
 r175: [174..175]
 r176: [158..159]
 r177: [148..149]
 r178: [140..143]
 r179: [140..141]
 r180: [136..137]
 r181: [132..135]
 r182: [134..135]
 r183: [132..133]
 r184: [130..131]
 r185: [128..129]
 r186: [126..127]
 r187: [124..125]
 r188: [122..123]
 r189: [118..121]
 r190: [120..121]
 r191: [118..119]
 r192: [116..117]
 r193: [114..115]
 r194: [112..113]
 r195: [110..111]
 r196: [108..109]
 r197: [90..107]
 r198: [104..105]
 r199: [102..103]
 r200: [100..101]
 r201: [96..99]
 r202: [96..97]
 r203: [94..95]
 r204: [92..93]
 r205: [92..93]
 r206: [90..91]
 r207: [88..89]
 r208: [70..87]
 r209: [84..85]
 r210: [82..83]
 r211: [80..81]
 r212: [76..79]
 r213: [76..77]
 r214: [74..75]
 r215: [72..73]
 r216: [72..73]
 r217: [70..71]
 r218: [66..67]
 r219: [46..47]
 r220: [42..43]
 r221: [40..41]
 r222: [38..39]
 r223: [34..35]
 r224: [20..21]
 r225: [16..17]
 r226: [14..15]
 r227: [12..13]
 r228: [8..9]
 r229: [274..281]
 r230: [258..271]
 r231: [226..233]
 r232: [210..223]
 r233: [286..287]
 r234: [238..239]
 r235: [176..177]
 r236: [68..69]
 r237: [466..467]
 r238: [464..465]
 r242: [454..455]
 r243: [452..453]
 r247: [442..443]
 r248: [440..441]
 r252: [430..431]
 r253: [428..429]
 r257: [418..419]
 r258: [416..417]
 r262: [406..407]
 r263: [404..405]
 r267: [394..395]
 r268: [392..393]
 r272: [382..383]
 r273: [380..381]
 r277: [370..371]
 r278: [368..369]
 r282: [358..359]
 r283: [356..357]
 r287: [342..343]
 r288: [318..319]
 r289: [276..279]
 r290: [260..263]
 r291: [228..231]
 r292: [212..215]
 r293: [472..473]
 r294: [468..469]
 r295: [466..467]
 r296: [460..461]
 r297: [456..457]
 r298: [454..455]
 r299: [448..449]
 r300: [444..445]
 r301: [442..443]
 r302: [436..437]
 r303: [432..433]
 r304: [430..431]
 r305: [424..425]
 r306: [420..421]
 r307: [418..419]
 r308: [412..413]
 r309: [408..409]
 r310: [406..407]
 r311: [400..401]
 r312: [396..397]
 r313: [394..395]
 r314: [388..389]
 r315: [384..385]
 r316: [382..383]
 r317: [376..377]
 r318: [372..373]
 r319: [370..371]
 r320: [364..365]
 r321: [360..361]
 r322: [358..359]
 r323: [352..353]
 r324: [350..351]
 r325: [348..349]
 r326: [346..347]
 r327: [344..345]
 r328: [340..341]
 r329: [338..339]
 r330: [336..337]
 r331: [334..335]
 r332: [332..333]
 r333: [328..329]
 r334: [330..331]
 r335: [324..325]
 r336: [326..327]
 r337: [312..313]
 r338: [306..307]
 r339: [304..305]
 r340: [302..303]
 r341: [298..299]
 r342: [296..297]
 r343: [290..291]
 r344: [282..283]
 r345: [280..281]
 r346: [274..275]
 r347: [272..273]
 r348: [270..271]
 r349: [264..265]
 r350: [258..259]
 r351: [256..257]
 r352: [254..255]
 r353: [250..251]
 r354: [248..249]
 r355: [242..243]
 r356: [234..235]
 r357: [232..233]
 r358: [226..227]
 r359: [224..225]
 r360: [222..223]
 r361: [216..217]
 r362: [210..211]
 r363: [208..209]
 r364: [208..209]
 r365: [208..209]
 r366: [208..209]
 r367: [208..209]
 r368: [206..207]
 r369: [204..205]
 r370: [204..205]
 r371: [204..205]
 r372: [204..205]
 r373: [204..205]
 r374: [202..203]
 r375: [200..201]
 r376: [200..201]
 r377: [200..201]
 r378: [200..201]
 r379: [198..199]
 r380: [196..197]
 r381: [196..197]
 r382: [196..197]
 r383: [196..197]
 r384: [196..197]
 r385: [194..195]
 r386: [192..193]
 r387: [188..189]
 r388: [184..185]
 r389: [182..183]
 r390: [180..181]
 r391: [178..179]
 r392: [320..321]
 r393: [322..323]
 r394: [322..323]
 r395: [172..173]
 r396: [170..171]
 r397: [168..169]
 r398: [166..167]
 r399: [164..165]
 r400: [164..165]
 r401: [164..165]
 r402: [164..165]
 r403: [164..165]
 r404: [162..163]
 r405: [160..161]
 r406: [160..161]
 r407: [160..161]
 r408: [160..161]
 r409: [160..161]
 r410: [156..157]
 r411: [158..159]
 r412: [154..155]
 r413: [154..155]
 r414: [154..155]
 r415: [154..155]
 r416: [152..153]
 r417: [150..151]
 r418: [150..151]
 r419: [150..151]
 r420: [150..151]
 r421: [150..151]
 r422: [146..147]
 r423: [148..149]
 r424: [144..145]
 r425: [142..143]
 r426: [138..139]
 r427: [126..127]
 r428: [112..113]
 r429: [108..109]
 r430: [106..107]
 r431: [100..101]
 r432: [98..99]
 r433: [88..89]
 r434: [86..87]
 r435: [80..81]
 r436: [78..79]
 r437: [64..65]
 r438: [62..63]
 r439: [60..61]
 r440: [58..59]
 r441: [58..59]
 r442: [56..57]
 r443: [56..57]
 r444: [54..55]
 r445: [52..53]
 r446: [50..51]
 r447: [48..49]
 r448: [46..47]
 r449: [44..45]
 r450: [36..37]
 r451: [36..37]
 r452: [34..35]
 r453: [32..33]
 r454: [32..33]
 r455: [30..31]
 r456: [30..31]
 r457: [28..29]
 r458: [26..27]
 r459: [24..25]
 r460: [22..23]
 r461: [20..21]
 r462: [18..19]
 r463: [10..11]
 r464: [10..11]
 r465: [8..9]
 r466: [6..7]
 r467: [6..7]
 r468: [4..5]
 r469: [4..5]
 r470: [2..3]
 r471: [0..1]

********** Assignment #1: **********

  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 101
  Slot 1 regnos (width = 0):	 105
  Slot 2 regnos (width = 0):	 109
  Slot 3 regnos (width = 0):	 113
  Slot 4 regnos (width = 0):	 117
  Slot 5 regnos (width = 0):	 121
  Slot 6 regnos (width = 0):	 125
Changing spilled pseudos to memory in insn #70
Changing spilled pseudos to memory in insn #71
Changing spilled pseudos to memory in insn #85
Changing spilled pseudos to memory in insn #86
Changing spilled pseudos to memory in insn #100
Changing spilled pseudos to memory in insn #101
Changing spilled pseudos to memory in insn #115
Changing spilled pseudos to memory in insn #116
Changing spilled pseudos to memory in insn #130
Changing spilled pseudos to memory in insn #131
Changing spilled pseudos to memory in insn #145
Changing spilled pseudos to memory in insn #146
Changing spilled pseudos to memory in insn #160
Changing spilled pseudos to memory in insn #161
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 161:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 160:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 146:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 145:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 131:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 130:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 115:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 101:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 86:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 85:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 46
EBB 32
EBB 47
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 45
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 48
EBB 44

********** Pseudo live ranges #2: **********

  BB 44
  BB 43
   Insn 813: point = 0, n_alt = -1
   Insn 787: point = 0, n_alt = -1
   Insn 764: point = 0, n_alt = 1
   Insn 763: point = 1, n_alt = 3
  BB 42
   Insn 760: point = 2, n_alt = 0
   Insn 759: point = 2, n_alt = -1
   Insn 758: point = 3, n_alt = 3
   Insn 757: point = 4, n_alt = 0
   Insn 756: point = 4, n_alt = -1
   Insn 755: point = 5, n_alt = -1
   Insn 754: point = 6, n_alt = 0
   Insn 753: point = 6, n_alt = 3
   Insn 752: point = 7, n_alt = 3
   Insn 751: point = 8, n_alt = 0
   Insn 750: point = 8, n_alt = -1
   Insn 749: point = 9, n_alt = -1
   Insn 748: point = 10, n_alt = 0
   Insn 747: point = 10, n_alt = 3
   Insn 746: point = 11, n_alt = 3
   Insn 745: point = 12, n_alt = 0
   Insn 744: point = 12, n_alt = -1
   Insn 743: point = 13, n_alt = -1
   Insn 742: point = 14, n_alt = 0
   Insn 741: point = 14, n_alt = 3
   Insn 740: point = 15, n_alt = 3
   Insn 739: point = 17, n_alt = 3
   Insn 738: point = 18, n_alt = 1
   Insn 737: point = 20, n_alt = 0
   Insn 736: point = 22, n_alt = 0
   Insn 735: point = 24, n_alt = 0
   Insn 734: point = 26, n_alt = 3
   Insn 733: point = 27, n_alt = 0
   Insn 732: point = 27, n_alt = -1
   Insn 731: point = 28, n_alt = -1
   Insn 730: point = 29, n_alt = 0
   Insn 729: point = 29, n_alt = 3
   Insn 728: point = 30, n_alt = 3
   Insn 727: point = 31, n_alt = 0
   Insn 726: point = 31, n_alt = -1
   Insn 725: point = 32, n_alt = 4
   Insn 724: point = 32, n_alt = 0
   Insn 723: point = 32, n_alt = 3
   Insn 722: point = 33, n_alt = 0
   Insn 721: point = 33, n_alt = -1
   Insn 720: point = 34, n_alt = 3
   Insn 719: point = 35, n_alt = 1
   Insn 718: point = 35, n_alt = 1
   Insn 717: point = 35, n_alt = 1
   Insn 716: point = 35, n_alt = 5
   Insn 715: point = 36, n_alt = 4
  BB 41
   Insn 713: point = 37, n_alt = -1
   Insn 712: point = 37, n_alt = 1
  BB 40
   Insn 709: point = 37, n_alt = 0
   Insn 708: point = 37, n_alt = -1
   Insn 707: point = 38, n_alt = 3
   Insn 706: point = 39, n_alt = 0
   Insn 705: point = 39, n_alt = -1
   Insn 704: point = 40, n_alt = -1
   Insn 703: point = 41, n_alt = 0
   Insn 702: point = 41, n_alt = 3
   Insn 701: point = 42, n_alt = 3
   Insn 700: point = 43, n_alt = 0
   Insn 699: point = 43, n_alt = -1
   Insn 698: point = 44, n_alt = -1
   Insn 697: point = 45, n_alt = 0
   Insn 696: point = 45, n_alt = 3
   Insn 695: point = 46, n_alt = 3
   Insn 694: point = 47, n_alt = 0
   Insn 693: point = 47, n_alt = -1
   Insn 692: point = 48, n_alt = -1
   Insn 691: point = 49, n_alt = 0
   Insn 690: point = 49, n_alt = 3
   Insn 689: point = 50, n_alt = 3
   Insn 688: point = 52, n_alt = 3
   Insn 687: point = 53, n_alt = 1
   Insn 686: point = 55, n_alt = 0
   Insn 685: point = 57, n_alt = 0
   Insn 684: point = 59, n_alt = 0
   Insn 683: point = 61, n_alt = 3
   Insn 682: point = 62, n_alt = 0
   Insn 681: point = 62, n_alt = -1
   Insn 680: point = 63, n_alt = -1
   Insn 679: point = 64, n_alt = 0
   Insn 678: point = 64, n_alt = 3
   Insn 677: point = 65, n_alt = 3
   Insn 676: point = 66, n_alt = 0
   Insn 675: point = 66, n_alt = -1
   Insn 674: point = 67, n_alt = 4
   Insn 673: point = 67, n_alt = 0
   Insn 672: point = 67, n_alt = 3
   Insn 671: point = 68, n_alt = 0
   Insn 670: point = 68, n_alt = -1
   Insn 669: point = 69, n_alt = 3
   Insn 668: point = 70, n_alt = 1
   Insn 667: point = 70, n_alt = 1
   Insn 666: point = 70, n_alt = 1
   Insn 665: point = 70, n_alt = 5
   Insn 664: point = 71, n_alt = 4
  BB 39
   Insn 662: point = 72, n_alt = -1
   Insn 661: point = 72, n_alt = 1
   Insn 660: point = 72, n_alt = 0
   Insn 659: point = 72, n_alt = -1
   Insn 658: point = 73, n_alt = 3
   Insn 657: point = 74, n_alt = 0
   Insn 656: point = 74, n_alt = -1
   Insn 655: point = 75, n_alt = -1
   Insn 654: point = 76, n_alt = 0
   Insn 653: point = 76, n_alt = 3
   Insn 652: point = 77, n_alt = 3
   Insn 651: point = 78, n_alt = 0
   Insn 650: point = 78, n_alt = -1
   Insn 649: point = 79, n_alt = -1
   Insn 648: point = 80, n_alt = 0
   Insn 647: point = 80, n_alt = 3
   Insn 646: point = 81, n_alt = 3
   Insn 645: point = 82, n_alt = 0
   Insn 644: point = 82, n_alt = -1
   Insn 643: point = 83, n_alt = 4
   Insn 642: point = 83, n_alt = 0
   Insn 641: point = 83, n_alt = 3
   Insn 640: point = 84, n_alt = 0
   Insn 639: point = 84, n_alt = -1
   Insn 638: point = 85, n_alt = 3
   Insn 637: point = 86, n_alt = 1
   Insn 636: point = 86, n_alt = 1
   Insn 635: point = 86, n_alt = 1
   Insn 634: point = 86, n_alt = 5
   Insn 633: point = 87, n_alt = 4
  BB 45
   Insn 804: point = 88, n_alt = -1
  BB 48
   Insn 817: point = 88, n_alt = -1
  BB 37
   Insn 621: point = 88, n_alt = -1
   Insn 620: point = 88, n_alt = 0
   Insn 619: point = 89, n_alt = 0
   Insn 618: point = 89, n_alt = 0
  BB 35
   Insn 798: point = 92, n_alt = -1
   Insn 610: point = 92, n_alt = 1
  BB 36
   Insn 615: point = 93, n_alt = 1
  BB 34
   Insn 605: point = 94, n_alt = -1
   Insn 604: point = 94, n_alt = 1
   Insn 603: point = 95, n_alt = 1
   Insn 602: point = 97, n_alt = 7
   Insn 601: point = 98, n_alt = -1
   Insn 600: point = 100, n_alt = 2
   Insn 599: point = 102, n_alt = 7
   Insn 598: point = 104, n_alt = 3
   Insn 597: point = 105, n_alt = 7
   Insn 596: point = 107, n_alt = 3
   Insn 595: point = 108, n_alt = 3
   Insn 594: point = 110, n_alt = 0
   Insn 593: point = 112, n_alt = 0
   Insn 592: point = 114, n_alt = 3
   Insn 591: point = 115, n_alt = 0
   Insn 590: point = 117, n_alt = 2
   Insn 589: point = 118, n_alt = 7
  BB 33
   Insn 584: point = 119, n_alt = -1
   Insn 583: point = 119, n_alt = 1
   Insn 582: point = 120, n_alt = 1
   Insn 581: point = 122, n_alt = 7
   Insn 580: point = 123, n_alt = -1
   Insn 579: point = 125, n_alt = 2
   Insn 578: point = 127, n_alt = 7
   Insn 577: point = 129, n_alt = 3
   Insn 576: point = 130, n_alt = 7
   Insn 575: point = 132, n_alt = 3
   Insn 574: point = 133, n_alt = 3
   Insn 573: point = 135, n_alt = 0
   Insn 572: point = 137, n_alt = 0
   Insn 571: point = 139, n_alt = 3
   Insn 570: point = 140, n_alt = 0
   Insn 569: point = 142, n_alt = 2
   Insn 568: point = 143, n_alt = 7
   Insn 567: point = 144, n_alt = 8
   Insn 566: point = 145, n_alt = 0
   Insn 565: point = 147, n_alt = 2
   Insn 564: point = 148, n_alt = 2
   Insn 563: point = 150, n_alt = -1
   Insn 562: point = 152, n_alt = 2
   Insn 561: point = 154, n_alt = 1
   Insn 560: point = 156, n_alt = 7
   Insn 559: point = 157, n_alt = 1
   Insn 558: point = 159, n_alt = 7
   Insn 557: point = 160, n_alt = 8
   Insn 556: point = 161, n_alt = 0
   Insn 555: point = 163, n_alt = 2
   Insn 554: point = 164, n_alt = 2
   Insn 553: point = 166, n_alt = -1
   Insn 552: point = 168, n_alt = 2
   Insn 551: point = 170, n_alt = 1
   Insn 550: point = 172, n_alt = 7
   Insn 549: point = 173, n_alt = 1
   Insn 548: point = 175, n_alt = 7
   Insn 547: point = 176, n_alt = 8
   Insn 546: point = 177, n_alt = 2
   Insn 545: point = 179, n_alt = 1
   Insn 544: point = 181, n_alt = 7
   Insn 543: point = 182, n_alt = 1
   Insn 542: point = 184, n_alt = 7
   Insn 541: point = 185, n_alt = 8
   Insn 540: point = 186, n_alt = 1
   Insn 539: point = 188, n_alt = 2
   Insn 538: point = 189, n_alt = -1
   Insn 537: point = 190, n_alt = 0
   Insn 536: point = 190, n_alt = -1
   Insn 535: point = 191, n_alt = -1
   Insn 534: point = 192, n_alt = -1
   Insn 533: point = 193, n_alt = -1
   Insn 532: point = 194, n_alt = -1
   Insn 531: point = 195, n_alt = 3
   Insn 530: point = 196, n_alt = 3
   Insn 529: point = 197, n_alt = 3
   Insn 528: point = 198, n_alt = 3
   Insn 527: point = 199, n_alt = 3
   Insn 526: point = 200, n_alt = 4
   Insn 525: point = 201, n_alt = 9
   Insn 524: point = 202, n_alt = 0
   Insn 523: point = 202, n_alt = -1
   Insn 522: point = 203, n_alt = -1
   Insn 521: point = 204, n_alt = 3
   Insn 520: point = 204, n_alt = -1
   Insn 519: point = 205, n_alt = -1
   Insn 518: point = 206, n_alt = 3
   Insn 517: point = 207, n_alt = 3
   Insn 516: point = 208, n_alt = 3
   Insn 515: point = 209, n_alt = 3
   Insn 514: point = 210, n_alt = 8
   Insn 513: point = 211, n_alt = 1
   Insn 512: point = 213, n_alt = 2
   Insn 511: point = 214, n_alt = -1
   Insn 510: point = 215, n_alt = 0
   Insn 509: point = 215, n_alt = -1
   Insn 508: point = 216, n_alt = -1
   Insn 507: point = 217, n_alt = -1
   Insn 506: point = 218, n_alt = -1
   Insn 505: point = 219, n_alt = -1
   Insn 504: point = 220, n_alt = 3
   Insn 503: point = 221, n_alt = 3
   Insn 502: point = 222, n_alt = 3
   Insn 501: point = 223, n_alt = 3
   Insn 500: point = 224, n_alt = 3
   Insn 499: point = 225, n_alt = 4
   Insn 498: point = 226, n_alt = 9
   Insn 497: point = 227, n_alt = 0
   Insn 496: point = 227, n_alt = -1
   Insn 495: point = 228, n_alt = -1
   Insn 494: point = 229, n_alt = -1
   Insn 493: point = 230, n_alt = -1
   Insn 492: point = 231, n_alt = -1
   Insn 491: point = 232, n_alt = 3
   Insn 490: point = 233, n_alt = 3
   Insn 489: point = 234, n_alt = 3
   Insn 488: point = 235, n_alt = 3
   Insn 487: point = 236, n_alt = 3
  BB 32
   Insn 808: point = 237, n_alt = -1
   Insn 484: point = 237, n_alt = 0
   Insn 483: point = 237, n_alt = -1
   Insn 482: point = 238, n_alt = 3
   Insn 481: point = 239, n_alt = 0
   Insn 480: point = 239, n_alt = -1
   Insn 479: point = 240, n_alt = 4
   Insn 478: point = 240, n_alt = 0
   Insn 477: point = 240, n_alt = 3
   Insn 476: point = 241, n_alt = 0
   Insn 475: point = 241, n_alt = -1
   Insn 474: point = 242, n_alt = 3
   Insn 473: point = 243, n_alt = 1
   Insn 472: point = 243, n_alt = 1
   Insn 471: point = 243, n_alt = 1
   Insn 470: point = 243, n_alt = 5
   Insn 469: point = 244, n_alt = 4
  BB 46
   Insn 807: point = 245, n_alt = -1
  BB 47
   Insn 812: point = 245, n_alt = -1
  BB 30
   Insn 453: point = 245, n_alt = -1
   Insn 452: point = 245, n_alt = 0
   Insn 451: point = 246, n_alt = 0
   Insn 450: point = 246, n_alt = 0
  BB 28
   Insn 794: point = 249, n_alt = -1
   Insn 442: point = 249, n_alt = 1
  BB 29
   Insn 447: point = 250, n_alt = 1
  BB 27
   Insn 437: point = 251, n_alt = -1
   Insn 436: point = 251, n_alt = 1
   Insn 435: point = 252, n_alt = 7
   Insn 434: point = 253, n_alt = 1
   Insn 433: point = 255, n_alt = 2
   Insn 432: point = 256, n_alt = 7
  BB 26
   Insn 427: point = 257, n_alt = -1
   Insn 426: point = 257, n_alt = 1
   Insn 425: point = 258, n_alt = 7
   Insn 424: point = 259, n_alt = 1
   Insn 423: point = 261, n_alt = 2
   Insn 422: point = 262, n_alt = 7
   Insn 421: point = 263, n_alt = 8
   Insn 420: point = 264, n_alt = 2
   Insn 419: point = 266, n_alt = 7
   Insn 418: point = 267, n_alt = 8
   Insn 417: point = 268, n_alt = 2
   Insn 416: point = 270, n_alt = 7
   Insn 415: point = 271, n_alt = 4
   Insn 414: point = 272, n_alt = 9
   Insn 413: point = 273, n_alt = 0
   Insn 412: point = 273, n_alt = -1
   Insn 411: point = 274, n_alt = -1
   Insn 410: point = 275, n_alt = -1
   Insn 409: point = 276, n_alt = -1
   Insn 408: point = 277, n_alt = -1
   Insn 407: point = 278, n_alt = 3
   Insn 406: point = 279, n_alt = 3
   Insn 405: point = 280, n_alt = 3
   Insn 404: point = 281, n_alt = 3
   Insn 403: point = 282, n_alt = 3
   Insn 402: point = 283, n_alt = 4
   Insn 401: point = 284, n_alt = 9
   Insn 400: point = 285, n_alt = 0
   Insn 399: point = 285, n_alt = -1
   Insn 398: point = 286, n_alt = -1
   Insn 397: point = 287, n_alt = 3
   Insn 396: point = 287, n_alt = -1
   Insn 395: point = 288, n_alt = -1
   Insn 394: point = 289, n_alt = 3
   Insn 393: point = 290, n_alt = 3
   Insn 392: point = 291, n_alt = 3
   Insn 391: point = 292, n_alt = 3
   Insn 390: point = 293, n_alt = 4
   Insn 389: point = 294, n_alt = 9
   Insn 388: point = 295, n_alt = 0
   Insn 387: point = 295, n_alt = -1
   Insn 386: point = 296, n_alt = -1
   Insn 385: point = 297, n_alt = -1
   Insn 384: point = 298, n_alt = -1
   Insn 383: point = 299, n_alt = -1
   Insn 382: point = 300, n_alt = 3
   Insn 381: point = 301, n_alt = 3
   Insn 380: point = 302, n_alt = 3
   Insn 379: point = 303, n_alt = 3
   Insn 378: point = 304, n_alt = 3
   Insn 377: point = 305, n_alt = 4
   Insn 376: point = 306, n_alt = 9
   Insn 375: point = 307, n_alt = 0
   Insn 374: point = 307, n_alt = -1
   Insn 373: point = 308, n_alt = -1
   Insn 372: point = 309, n_alt = -1
   Insn 371: point = 310, n_alt = -1
   Insn 370: point = 311, n_alt = -1
   Insn 369: point = 312, n_alt = 3
   Insn 368: point = 313, n_alt = 3
   Insn 367: point = 314, n_alt = 3
   Insn 366: point = 315, n_alt = 3
   Insn 365: point = 316, n_alt = 3
  BB 25
   Insn 362: point = 317, n_alt = 8
   Insn 361: point = 318, n_alt = 3
  BB 24
   Insn 12: point = 320, n_alt = -1
  BB 23
   Insn 357: point = 323, n_alt = -1
   Insn 356: point = 323, n_alt = 0
   Insn 355: point = 324, n_alt = 0
   Insn 354: point = 326, n_alt = 0
   Insn 353: point = 327, n_alt = 1
   Insn 352: point = 327, n_alt = 0
   Insn 351: point = 328, n_alt = 1
   Insn 350: point = 328, n_alt = 7
   Insn 349: point = 330, n_alt = 3
   Insn 348: point = 331, n_alt = 3
   Insn 347: point = 333, n_alt = 0
   Insn 346: point = 335, n_alt = 0
   Insn 345: point = 337, n_alt = 3
   Insn 344: point = 338, n_alt = 7
   Insn 343: point = 340, n_alt = 3
   Insn 342: point = 341, n_alt = 8
   Insn 341: point = 342, n_alt = 3
  BB 22
   Insn 11: point = 344, n_alt = -1
  BB 21
   Insn 337: point = 347, n_alt = -1
   Insn 336: point = 347, n_alt = 0
   Insn 335: point = 348, n_alt = 0
   Insn 334: point = 350, n_alt = 0
   Insn 333: point = 351, n_alt = 1
   Insn 332: point = 351, n_alt = 0
   Insn 331: point = 352, n_alt = 1
   Insn 330: point = 352, n_alt = 7
   Insn 329: point = 354, n_alt = 3
   Insn 328: point = 355, n_alt = 7
   Insn 327: point = 357, n_alt = 3
   Insn 326: point = 358, n_alt = 1
  BB 20
   Insn 324: point = 358, n_alt = -1
   Insn 323: point = 358, n_alt = 0
   Insn 322: point = 359, n_alt = 0
   Insn 321: point = 359, n_alt = 0
  BB 18
   Insn 792: point = 362, n_alt = -1
   Insn 313: point = 362, n_alt = 1
  BB 19
   Insn 318: point = 363, n_alt = 1
  BB 17
   Insn 307: point = 364, n_alt = -1
   Insn 306: point = 364, n_alt = 1
   Insn 305: point = 365, n_alt = 7
   Insn 304: point = 367, n_alt = 3
   Insn 303: point = 368, n_alt = 3
   Insn 302: point = 370, n_alt = 0
   Insn 301: point = 372, n_alt = 0
   Insn 300: point = 374, n_alt = 3
   Insn 299: point = 375, n_alt = 7
   Insn 298: point = 377, n_alt = 3
  BB 16
   Insn 296: point = 378, n_alt = -1
   Insn 295: point = 378, n_alt = 1
   Insn 294: point = 379, n_alt = 7
   Insn 293: point = 381, n_alt = 3
   Insn 292: point = 382, n_alt = 7
   Insn 291: point = 384, n_alt = 3
  BB 15
   Insn 288: point = 385, n_alt = 8
   Insn 287: point = 386, n_alt = 3
  BB 14
   Insn 10: point = 388, n_alt = -1
  BB 13
   Insn 283: point = 391, n_alt = -1
   Insn 282: point = 391, n_alt = 0
   Insn 281: point = 392, n_alt = 0
   Insn 280: point = 394, n_alt = 0
   Insn 279: point = 395, n_alt = 1
   Insn 278: point = 395, n_alt = 0
   Insn 277: point = 396, n_alt = 1
   Insn 276: point = 396, n_alt = 7
   Insn 275: point = 398, n_alt = 3
   Insn 274: point = 399, n_alt = 3
   Insn 273: point = 401, n_alt = 0
   Insn 272: point = 403, n_alt = 0
   Insn 271: point = 405, n_alt = 3
   Insn 270: point = 406, n_alt = 7
   Insn 269: point = 408, n_alt = 3
   Insn 268: point = 409, n_alt = 8
   Insn 267: point = 410, n_alt = 3
  BB 12
   Insn 9: point = 412, n_alt = -1
  BB 11
   Insn 263: point = 415, n_alt = -1
   Insn 262: point = 415, n_alt = 0
   Insn 261: point = 416, n_alt = 0
   Insn 260: point = 418, n_alt = 0
   Insn 259: point = 419, n_alt = 1
   Insn 258: point = 419, n_alt = 0
   Insn 257: point = 420, n_alt = 1
   Insn 256: point = 420, n_alt = 7
   Insn 255: point = 422, n_alt = 3
   Insn 254: point = 423, n_alt = 7
   Insn 253: point = 425, n_alt = 3
   Insn 252: point = 426, n_alt = 1
  BB 10
   Insn 250: point = 426, n_alt = -1
   Insn 249: point = 426, n_alt = 0
   Insn 248: point = 427, n_alt = 0
   Insn 247: point = 427, n_alt = 0
  BB 8
   Insn 789: point = 430, n_alt = -1
   Insn 239: point = 430, n_alt = 1
  BB 9
   Insn 244: point = 431, n_alt = 1
  BB 7
   Insn 233: point = 432, n_alt = -1
   Insn 232: point = 432, n_alt = 1
   Insn 231: point = 433, n_alt = 7
   Insn 230: point = 435, n_alt = 3
   Insn 229: point = 436, n_alt = 3
   Insn 228: point = 438, n_alt = 0
   Insn 227: point = 440, n_alt = 0
   Insn 226: point = 442, n_alt = 3
   Insn 225: point = 443, n_alt = 7
   Insn 224: point = 445, n_alt = 3
  BB 6
   Insn 222: point = 446, n_alt = -1
   Insn 221: point = 446, n_alt = 1
   Insn 220: point = 447, n_alt = 7
   Insn 219: point = 449, n_alt = 3
   Insn 218: point = 450, n_alt = 7
   Insn 217: point = 452, n_alt = 3
   Insn 216: point = 453, n_alt = 8
   Insn 215: point = 454, n_alt = 3
   Insn 214: point = 455, n_alt = 1
   Insn 213: point = 457, n_alt = 1
   Insn 212: point = 459, n_alt = 7
   Insn 211: point = 460, n_alt = 8
   Insn 210: point = 461, n_alt = 3
   Insn 209: point = 462, n_alt = 1
   Insn 208: point = 464, n_alt = 1
   Insn 207: point = 466, n_alt = 7
   Insn 206: point = 467, n_alt = 1
   Insn 205: point = 467, n_alt = 1
  BB 5
   Insn 203: point = 467, n_alt = -1
   Insn 202: point = 467, n_alt = 0
   Insn 201: point = 468, n_alt = 0
   Insn 200: point = 469, n_alt = 0
  BB 31
   Insn 796: point = 469, n_alt = -1
   Insn 463: point = 469, n_alt = 1
   Insn 462: point = 469, n_alt = 8
   Insn 461: point = 470, n_alt = 1
   Insn 460: point = 472, n_alt = 7
   Insn 459: point = 473, n_alt = 7
  BB 4
   Insn 198: point = 474, n_alt = 1
   Insn 197: point = 474, n_alt = 8
   Insn 196: point = 475, n_alt = 1
   Insn 195: point = 477, n_alt = 2
   Insn 194: point = 478, n_alt = 7
   Insn 193: point = 479, n_alt = 8
   Insn 192: point = 480, n_alt = 1
   Insn 191: point = 482, n_alt = 2
   Insn 190: point = 483, n_alt = 7
   Insn 189: point = 484, n_alt = 8
   Insn 188: point = 485, n_alt = 7
   Insn 187: point = 487, n_alt = 3
   Insn 186: point = 488, n_alt = 8
   Insn 185: point = 489, n_alt = 7
   Insn 184: point = 491, n_alt = 3
   Insn 183: point = 492, n_alt = 8
   Insn 182: point = 493, n_alt = 7
  BB 3
   Insn 180: point = 494, n_alt = -1
   Insn 179: point = 494, n_alt = 0
   Insn 178: point = 495, n_alt = 0
   Insn 177: point = 496, n_alt = 0
  BB 38
   Insn 800: point = 496, n_alt = -1
   Insn 627: point = 496, n_alt = 1
  BB 2
   Insn 175: point = 496, n_alt = 1
   Insn 174: point = 496, n_alt = 8
   Insn 173: point = 497, n_alt = 7
   Insn 172: point = 498, n_alt = 8
   Insn 171: point = 499, n_alt = 7
   Insn 170: point = 500, n_alt = 8
   Insn 169: point = 501, n_alt = 7
   Insn 168: point = 502, n_alt = 8
   Insn 167: point = 503, n_alt = 7
   Insn 166: point = 504, n_alt = 1
   Insn 165: point = 505, n_alt = 3
   Insn 161: point = 506, n_alt = 5
   Insn 160: point = 506, n_alt = 5
   Insn 159: point = 507, n_alt = -1
   Insn 157: point = 509, n_alt = 1
   Insn 155: point = 511, n_alt = 0
   Insn 156: point = 511, n_alt = 2
   Insn 154: point = 512, n_alt = 3
   Insn 153: point = 513, n_alt = 5
   Insn 152: point = 514, n_alt = 0
   Insn 151: point = 516, n_alt = 0
   Insn 150: point = 518, n_alt = 3
   Insn 146: point = 519, n_alt = 5
   Insn 145: point = 519, n_alt = 5
   Insn 144: point = 520, n_alt = -1
   Insn 142: point = 522, n_alt = 1
   Insn 140: point = 524, n_alt = 0
   Insn 141: point = 524, n_alt = 2
   Insn 139: point = 525, n_alt = 3
   Insn 138: point = 526, n_alt = 5
   Insn 137: point = 527, n_alt = 0
   Insn 136: point = 529, n_alt = 0
   Insn 135: point = 531, n_alt = 3
   Insn 131: point = 532, n_alt = 5
   Insn 130: point = 532, n_alt = 5
   Insn 129: point = 533, n_alt = -1
   Insn 127: point = 535, n_alt = 1
   Insn 125: point = 537, n_alt = 0
   Insn 126: point = 537, n_alt = 2
   Insn 124: point = 538, n_alt = 3
   Insn 123: point = 539, n_alt = 5
   Insn 122: point = 540, n_alt = 0
   Insn 121: point = 542, n_alt = 0
   Insn 120: point = 544, n_alt = 3
   Insn 116: point = 545, n_alt = 5
   Insn 115: point = 545, n_alt = 5
   Insn 114: point = 546, n_alt = -1
   Insn 112: point = 548, n_alt = 1
   Insn 110: point = 550, n_alt = 0
   Insn 111: point = 550, n_alt = 2
   Insn 109: point = 551, n_alt = 3
   Insn 108: point = 552, n_alt = 5
   Insn 107: point = 553, n_alt = 0
   Insn 106: point = 555, n_alt = 0
   Insn 105: point = 557, n_alt = 3
   Insn 101: point = 558, n_alt = 5
   Insn 100: point = 558, n_alt = 5
   Insn 99: point = 559, n_alt = -1
   Insn 97: point = 561, n_alt = 1
   Insn 95: point = 563, n_alt = 0
   Insn 96: point = 563, n_alt = 2
   Insn 94: point = 564, n_alt = 3
   Insn 93: point = 565, n_alt = 5
   Insn 92: point = 566, n_alt = 0
   Insn 91: point = 568, n_alt = 0
   Insn 90: point = 570, n_alt = 3
   Insn 86: point = 571, n_alt = 5
   Insn 85: point = 571, n_alt = 5
   Insn 84: point = 572, n_alt = -1
   Insn 82: point = 574, n_alt = 1
   Insn 80: point = 576, n_alt = 0
   Insn 81: point = 576, n_alt = 2
   Insn 79: point = 577, n_alt = 3
   Insn 78: point = 578, n_alt = 5
   Insn 77: point = 579, n_alt = 0
   Insn 76: point = 581, n_alt = 0
   Insn 75: point = 583, n_alt = 3
   Insn 71: point = 584, n_alt = 5
   Insn 70: point = 584, n_alt = 5
   Insn 69: point = 585, n_alt = -1
   Insn 67: point = 587, n_alt = 1
   Insn 65: point = 589, n_alt = 0
   Insn 66: point = 589, n_alt = 2
   Insn 64: point = 590, n_alt = 3
   Insn 63: point = 591, n_alt = 5
   Insn 62: point = 592, n_alt = 0
   Insn 61: point = 594, n_alt = 0
   Insn 60: point = 596, n_alt = 3
   Insn 56: point = 597, n_alt = 2
   Insn 55: point = 598, n_alt = 3
   Insn 54: point = 599, n_alt = -1
   Insn 52: point = 601, n_alt = 1
   Insn 50: point = 603, n_alt = 0
   Insn 51: point = 603, n_alt = 2
   Insn 49: point = 604, n_alt = 3
   Insn 48: point = 605, n_alt = 5
   Insn 47: point = 606, n_alt = 0
   Insn 46: point = 608, n_alt = 0
   Insn 45: point = 610, n_alt = 3
   Insn 41: point = 611, n_alt = 2
   Insn 40: point = 612, n_alt = 3
   Insn 39: point = 613, n_alt = -1
   Insn 37: point = 615, n_alt = 1
   Insn 35: point = 617, n_alt = 0
   Insn 36: point = 617, n_alt = 2
   Insn 34: point = 618, n_alt = 3
   Insn 33: point = 619, n_alt = 5
   Insn 32: point = 620, n_alt = 0
   Insn 31: point = 622, n_alt = 0
   Insn 30: point = 624, n_alt = 3
   Insn 26: point = 625, n_alt = 2
   Insn 25: point = 626, n_alt = 3
   Insn 24: point = 627, n_alt = -1
   Insn 22: point = 629, n_alt = 1
   Insn 20: point = 631, n_alt = 0
   Insn 21: point = 631, n_alt = 2
   Insn 19: point = 632, n_alt = 3
   Insn 18: point = 633, n_alt = 5
   Insn 17: point = 634, n_alt = 0
   Insn 16: point = 636, n_alt = 0
   Insn 15: point = 638, n_alt = 3
   Insn 7: point = 639, n_alt = 5
   Insn 6: point = 639, n_alt = 5
   Insn 5: point = 639, n_alt = 5
   Insn 4: point = 639, n_alt = 5
   Insn 3: point = 639, n_alt = 5
   Insn 2: point = 639, n_alt = 5
 r87: [635..636]
 r88: [626..627]
 r89: [625..639]
 r91: [621..622]
 r92: [612..613]
 r93: [611..639]
 r95: [607..608]
 r96: [598..599]
 r97: [597..639]
 r99: [593..594]
 r100: [584..585]
 r103: [580..581]
 r104: [571..572]
 r107: [567..568]
 r108: [558..559]
 r111: [554..555]
 r112: [545..546]
 r115: [541..542]
 r116: [532..533]
 r119: [528..529]
 r120: [519..520]
 r123: [515..516]
 r124: [506..507]
 r127: [481..483]
 r128: [476..478]
 r129: [465..466]
 r130: [463..464]
 r131: [460..462]
 r132: [458..459]
 r133: [456..457]
 r134: [453..455]
 r135: [446..450]
 r136: [446..447]
 r137: [432..443]
 r138: [439..440]
 r139: [437..438]
 r140: [434..436]
 r141: [432..433]
 r142: [426..427]
 r143: [417..419]
 r144: [417..418]
 r145: [415..416]
 r146: [402..403]
 r147: [400..401]
 r148: [397..399]
 r149: [393..395]
 r150: [393..394]
 r151: [391..392]
 r152: [378..382]
 r153: [378..379]
 r154: [364..375]
 r155: [371..372]
 r156: [369..370]
 r157: [366..368]
 r158: [364..365]
 r159: [358..359]
 r160: [349..351]
 r161: [349..350]
 r162: [347..348]
 r163: [334..335]
 r164: [332..333]
 r165: [329..331]
 r166: [325..327]
 r167: [325..326]
 r168: [323..324]
 r169: [267..268]
 r170: [263..264]
 r171: [260..262]
 r172: [257..259]
 r173: [254..256]
 r174: [251..253]
 r175: [245..246]
 r176: [212..214]
 r177: [187..189]
 r178: [178..182]
 r179: [178..179]
 r180: [174..175]
 r181: [169..173]
 r182: [171..172]
 r183: [169..170]
 r184: [167..168]
 r185: [165..166]
 r186: [162..164]
 r187: [160..161]
 r188: [158..159]
 r189: [153..157]
 r190: [155..156]
 r191: [153..154]
 r192: [151..152]
 r193: [149..150]
 r194: [146..148]
 r195: [144..145]
 r196: [141..143]
 r197: [119..140]
 r198: [136..137]
 r199: [134..135]
 r200: [131..133]
 r201: [126..130]
 r202: [126..127]
 r203: [124..125]
 r204: [121..123]
 r205: [121..122]
 r206: [119..120]
 r207: [116..118]
 r208: [94..115]
 r209: [111..112]
 r210: [109..110]
 r211: [106..108]
 r212: [101..105]
 r213: [101..102]
 r214: [99..100]
 r215: [96..98]
 r216: [96..97]
 r217: [94..95]
 r218: [88..89]
 r219: [63..65]
 r220: [58..59]
 r221: [56..57]
 r222: [54..55]
 r223: [48..50]
 r224: [28..30]
 r225: [23..24]
 r226: [21..22]
 r227: [19..20]
 r228: [13..15]
 r229: [415..423] [409..412]
 r230: [391..406] [385..388]
 r231: [347..355] [341..344]
 r232: [323..338] [317..320]
 r233: [428..431]
 r234: [360..363]
 r235: [247..250]
 r236: [90..93]
 r237: [630..632]
 r238: [628..629]
 r242: [616..618]
 r243: [614..615]
 r247: [602..604]
 r248: [600..601]
 r252: [588..590]
 r253: [586..587]
 r257: [575..577]
 r258: [573..574]
 r262: [562..564]
 r263: [560..561]
 r267: [549..551]
 r268: [547..548]
 r272: [536..538]
 r273: [534..535]
 r277: [523..525]
 r278: [521..522]
 r282: [510..512]
 r283: [508..509]
 r287: [494..495]
 r288: [467..468]
 r289: [413..420]
 r290: [389..396]
 r291: [345..352]
 r292: [321..328]
 r293: [637..638]
 r294: [633..634]
 r295: [630..631]
 r296: [623..624]
 r297: [619..620]
 r298: [616..617]
 r299: [609..610]
 r300: [605..606]
 r301: [602..603]
 r302: [595..596]
 r303: [591..592]
 r304: [588..589]
 r305: [582..583]
 r306: [578..579]
 r307: [575..576]
 r308: [569..570]
 r309: [565..566]
 r310: [562..563]
 r311: [556..557]
 r312: [552..553]
 r313: [549..550]
 r314: [543..544]
 r315: [539..540]
 r316: [536..537]
 r317: [530..531]
 r318: [526..527]
 r319: [523..524]
 r320: [517..518]
 r321: [513..514]
 r322: [510..511]
 r323: [504..505]
 r324: [502..503]
 r325: [500..501]
 r326: [498..499]
 r327: [496..497]
 r328: [492..493]
 r329: [490..491]
 r330: [488..489]
 r331: [486..487]
 r332: [484..485]
 r333: [479..480]
 r334: [481..482]
 r335: [474..475]
 r336: [476..477]
 r337: [460..461]
 r338: [453..454]
 r339: [451..452]
 r340: [448..449]
 r341: [444..445]
 r342: [441..442]
 r343: [434..435]
 r344: [424..425]
 r345: [421..422]
 r346: [409..410]
 r347: [407..408]
 r348: [404..405]
 r349: [397..398]
 r350: [385..386]
 r351: [383..384]
 r352: [380..381]
 r353: [376..377]
 r354: [373..374]
 r355: [366..367]
 r356: [356..357]
 r357: [353..354]
 r358: [341..342]
 r359: [339..340]
 r360: [336..337]
 r361: [329..330]
 r362: [317..318]
 r363: [311..316]
 r364: [310..315]
 r365: [309..314]
 r366: [308..313]
 r367: [307..312]
 r368: [305..306]
 r369: [299..304]
 r370: [298..303]
 r371: [297..302]
 r372: [296..301]
 r373: [295..300]
 r374: [293..294]
 r375: [288..292]
 r376: [287..291]
 r377: [286..290]
 r378: [285..289]
 r379: [283..284]
 r380: [277..282]
 r381: [276..281]
 r382: [275..280]
 r383: [274..279]
 r384: [273..278]
 r385: [271..272]
 r386: [269..270]
 r387: [265..266]
 r388: [260..261]
 r389: [257..258]
 r390: [254..255]
 r391: [251..252]
 r392: [469..470]
 r393: [471..473]
 r394: [471..472]
 r395: [243..244]
 r396: [241..242]
 r397: [239..240]
 r398: [237..238]
 r399: [231..236]
 r400: [230..235]
 r401: [229..234]
 r402: [228..233]
 r403: [227..232]
 r404: [225..226]
 r405: [219..224]
 r406: [218..223]
 r407: [217..222]
 r408: [216..221]
 r409: [215..220]
 r410: [210..211]
 r411: [212..213]
 r412: [205..209]
 r413: [204..208]
 r414: [203..207]
 r415: [202..206]
 r416: [200..201]
 r417: [194..199]
 r418: [193..198]
 r419: [192..197]
 r420: [191..196]
 r421: [190..195]
 r422: [185..186]
 r423: [187..188]
 r424: [183..184]
 r425: [180..181]
 r426: [176..177]
 r427: [162..163]
 r428: [146..147]
 r429: [141..142]
 r430: [138..139]
 r431: [131..132]
 r432: [128..129]
 r433: [116..117]
 r434: [113..114]
 r435: [106..107]
 r436: [103..104]
 r437: [86..87]
 r438: [84..85]
 r439: [82..83]
 r440: [79..81]
 r441: [78..80]
 r442: [75..77]
 r443: [74..76]
 r444: [72..73]
 r445: [70..71]
 r446: [68..69]
 r447: [66..67]
 r448: [62..64]
 r449: [60..61]
 r450: [51..53]
 r451: [51..52]
 r452: [47..49]
 r453: [44..46]
 r454: [43..45]
 r455: [40..42]
 r456: [39..41]
 r457: [37..38]
 r458: [35..36]
 r459: [33..34]
 r460: [31..32]
 r461: [27..29]
 r462: [25..26]
 r463: [16..18]
 r464: [16..17]
 r465: [12..14]
 r466: [9..11]
 r467: [8..10]
 r468: [5..7]
 r469: [4..6]
 r470: [2..3]
 r471: [0..1]
Compressing live ranges: from 640 to 474 - 74%
Ranges after the compression:
 r87: [470..471]
 r88: [462..463]
 r89: [462..473]
 r91: [458..459]
 r92: [450..451]
 r93: [450..473]
 r95: [446..447]
 r96: [438..439]
 r97: [438..473]
 r99: [434..435]
 r100: [426..427]
 r103: [422..423]
 r104: [414..415]
 r107: [410..411]
 r108: [402..403]
 r111: [398..399]
 r112: [390..391]
 r115: [386..387]
 r116: [378..379]
 r119: [374..375]
 r120: [366..367]
 r123: [362..363]
 r124: [354..355]
 r127: [330..331]
 r128: [326..327]
 r129: [316..317]
 r130: [314..315]
 r131: [312..313]
 r132: [310..311]
 r133: [308..309]
 r134: [306..307]
 r135: [300..303]
 r136: [300..301]
 r137: [288..297]
 r138: [294..295]
 r139: [292..293]
 r140: [290..291]
 r141: [288..289]
 r142: [284..285]
 r143: [278..279]
 r144: [278..279]
 r145: [276..277]
 r146: [268..269]
 r147: [266..267]
 r148: [264..265]
 r149: [262..263]
 r150: [262..263]
 r151: [260..261]
 r152: [252..255]
 r153: [252..253]
 r154: [240..249]
 r155: [246..247]
 r156: [244..245]
 r157: [242..243]
 r158: [240..241]
 r159: [236..237]
 r160: [230..231]
 r161: [230..231]
 r162: [228..229]
 r163: [220..221]
 r164: [218..219]
 r165: [216..217]
 r166: [214..215]
 r167: [214..215]
 r168: [212..213]
 r169: [190..191]
 r170: [186..187]
 r171: [184..185]
 r172: [182..183]
 r173: [180..181]
 r174: [178..179]
 r175: [174..175]
 r176: [158..159]
 r177: [148..149]
 r178: [140..143]
 r179: [140..141]
 r180: [136..137]
 r181: [132..135]
 r182: [134..135]
 r183: [132..133]
 r184: [130..131]
 r185: [128..129]
 r186: [126..127]
 r187: [124..125]
 r188: [122..123]
 r189: [118..121]
 r190: [120..121]
 r191: [118..119]
 r192: [116..117]
 r193: [114..115]
 r194: [112..113]
 r195: [110..111]
 r196: [108..109]
 r197: [90..107]
 r198: [104..105]
 r199: [102..103]
 r200: [100..101]
 r201: [96..99]
 r202: [96..97]
 r203: [94..95]
 r204: [92..93]
 r205: [92..93]
 r206: [90..91]
 r207: [88..89]
 r208: [70..87]
 r209: [84..85]
 r210: [82..83]
 r211: [80..81]
 r212: [76..79]
 r213: [76..77]
 r214: [74..75]
 r215: [72..73]
 r216: [72..73]
 r217: [70..71]
 r218: [66..67]
 r219: [46..47]
 r220: [42..43]
 r221: [40..41]
 r222: [38..39]
 r223: [34..35]
 r224: [20..21]
 r225: [16..17]
 r226: [14..15]
 r227: [12..13]
 r228: [8..9]
 r229: [274..281]
 r230: [258..271]
 r231: [226..233]
 r232: [210..223]
 r233: [286..287]
 r234: [238..239]
 r235: [176..177]
 r236: [68..69]
 r237: [466..467]
 r238: [464..465]
 r242: [454..455]
 r243: [452..453]
 r247: [442..443]
 r248: [440..441]
 r252: [430..431]
 r253: [428..429]
 r257: [418..419]
 r258: [416..417]
 r262: [406..407]
 r263: [404..405]
 r267: [394..395]
 r268: [392..393]
 r272: [382..383]
 r273: [380..381]
 r277: [370..371]
 r278: [368..369]
 r282: [358..359]
 r283: [356..357]
 r287: [342..343]
 r288: [318..319]
 r289: [276..279]
 r290: [260..263]
 r291: [228..231]
 r292: [212..215]
 r293: [472..473]
 r294: [468..469]
 r295: [466..467]
 r296: [460..461]
 r297: [456..457]
 r298: [454..455]
 r299: [448..449]
 r300: [444..445]
 r301: [442..443]
 r302: [436..437]
 r303: [432..433]
 r304: [430..431]
 r305: [424..425]
 r306: [420..421]
 r307: [418..419]
 r308: [412..413]
 r309: [408..409]
 r310: [406..407]
 r311: [400..401]
 r312: [396..397]
 r313: [394..395]
 r314: [388..389]
 r315: [384..385]
 r316: [382..383]
 r317: [376..377]
 r318: [372..373]
 r319: [370..371]
 r320: [364..365]
 r321: [360..361]
 r322: [358..359]
 r323: [352..353]
 r324: [350..351]
 r325: [348..349]
 r326: [346..347]
 r327: [344..345]
 r328: [340..341]
 r329: [338..339]
 r330: [336..337]
 r331: [334..335]
 r332: [332..333]
 r333: [328..329]
 r334: [330..331]
 r335: [324..325]
 r336: [326..327]
 r337: [312..313]
 r338: [306..307]
 r339: [304..305]
 r340: [302..303]
 r341: [298..299]
 r342: [296..297]
 r343: [290..291]
 r344: [282..283]
 r345: [280..281]
 r346: [274..275]
 r347: [272..273]
 r348: [270..271]
 r349: [264..265]
 r350: [258..259]
 r351: [256..257]
 r352: [254..255]
 r353: [250..251]
 r354: [248..249]
 r355: [242..243]
 r356: [234..235]
 r357: [232..233]
 r358: [226..227]
 r359: [224..225]
 r360: [222..223]
 r361: [216..217]
 r362: [210..211]
 r363: [208..209]
 r364: [208..209]
 r365: [208..209]
 r366: [208..209]
 r367: [208..209]
 r368: [206..207]
 r369: [204..205]
 r370: [204..205]
 r371: [204..205]
 r372: [204..205]
 r373: [204..205]
 r374: [202..203]
 r375: [200..201]
 r376: [200..201]
 r377: [200..201]
 r378: [200..201]
 r379: [198..199]
 r380: [196..197]
 r381: [196..197]
 r382: [196..197]
 r383: [196..197]
 r384: [196..197]
 r385: [194..195]
 r386: [192..193]
 r387: [188..189]
 r388: [184..185]
 r389: [182..183]
 r390: [180..181]
 r391: [178..179]
 r392: [320..321]
 r393: [322..323]
 r394: [322..323]
 r395: [172..173]
 r396: [170..171]
 r397: [168..169]
 r398: [166..167]
 r399: [164..165]
 r400: [164..165]
 r401: [164..165]
 r402: [164..165]
 r403: [164..165]
 r404: [162..163]
 r405: [160..161]
 r406: [160..161]
 r407: [160..161]
 r408: [160..161]
 r409: [160..161]
 r410: [156..157]
 r411: [158..159]
 r412: [154..155]
 r413: [154..155]
 r414: [154..155]
 r415: [154..155]
 r416: [152..153]
 r417: [150..151]
 r418: [150..151]
 r419: [150..151]
 r420: [150..151]
 r421: [150..151]
 r422: [146..147]
 r423: [148..149]
 r424: [144..145]
 r425: [142..143]
 r426: [138..139]
 r427: [126..127]
 r428: [112..113]
 r429: [108..109]
 r430: [106..107]
 r431: [100..101]
 r432: [98..99]
 r433: [88..89]
 r434: [86..87]
 r435: [80..81]
 r436: [78..79]
 r437: [64..65]
 r438: [62..63]
 r439: [60..61]
 r440: [58..59]
 r441: [58..59]
 r442: [56..57]
 r443: [56..57]
 r444: [54..55]
 r445: [52..53]
 r446: [50..51]
 r447: [48..49]
 r448: [46..47]
 r449: [44..45]
 r450: [36..37]
 r451: [36..37]
 r452: [34..35]
 r453: [32..33]
 r454: [32..33]
 r455: [30..31]
 r456: [30..31]
 r457: [28..29]
 r458: [26..27]
 r459: [24..25]
 r460: [22..23]
 r461: [20..21]
 r462: [18..19]
 r463: [10..11]
 r464: [10..11]
 r465: [8..9]
 r466: [6..7]
 r467: [6..7]
 r468: [4..5]
 r469: [4..5]
 r470: [2..3]
 r471: [0..1]

********** Assignment #2: **********


********** Undoing inheritance #2: **********


********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=864, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=816, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 25
changing reg in insn 31
changing reg in insn 32
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 40
changing reg in insn 46
changing reg in insn 47
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 55
changing reg in insn 61
changing reg in insn 62
changing reg in insn 69
changing reg in insn 70
changing reg in insn 76
changing reg in insn 77
changing reg in insn 84
changing reg in insn 85
changing reg in insn 91
changing reg in insn 92
changing reg in insn 99
changing reg in insn 100
changing reg in insn 106
changing reg in insn 107
changing reg in insn 114
changing reg in insn 115
changing reg in insn 121
changing reg in insn 122
changing reg in insn 129
changing reg in insn 130
changing reg in insn 136
changing reg in insn 137
changing reg in insn 144
changing reg in insn 145
changing reg in insn 151
changing reg in insn 152
changing reg in insn 159
changing reg in insn 160
changing reg in insn 190
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 196
changing reg in insn 196
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 218
changing reg in insn 221
changing reg in insn 220
changing reg in insn 221
changing reg in insn 225
changing reg in insn 232
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 248
changing reg in insn 247
changing reg in insn 249
changing reg in insn 248
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 292
changing reg in insn 295
changing reg in insn 294
changing reg in insn 295
changing reg in insn 299
changing reg in insn 306
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 305
changing reg in insn 305
changing reg in insn 306
changing reg in insn 322
changing reg in insn 321
changing reg in insn 323
changing reg in insn 322
changing reg in insn 332
changing reg in insn 334
changing reg in insn 335
changing reg in insn 336
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 350
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 417
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 424
changing reg in insn 424
changing reg in insn 424
changing reg in insn 426
changing reg in insn 432
changing reg in insn 434
changing reg in insn 434
changing reg in insn 434
changing reg in insn 436
changing reg in insn 451
changing reg in insn 450
changing reg in insn 452
changing reg in insn 451
changing reg in insn 511
changing reg in insn 513
changing reg in insn 513
changing reg in insn 538
changing reg in insn 540
changing reg in insn 540
changing reg in insn 543
changing reg in insn 546
changing reg in insn 545
changing reg in insn 546
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 552
changing reg in insn 550
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 553
changing reg in insn 553
changing reg in insn 554
changing reg in insn 554
changing reg in insn 556
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 562
changing reg in insn 560
changing reg in insn 561
changing reg in insn 561
changing reg in insn 562
changing reg in insn 562
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 564
changing reg in insn 566
changing reg in insn 566
changing reg in insn 566
changing reg in insn 567
changing reg in insn 568
changing reg in insn 570
changing reg in insn 570
changing reg in insn 570
changing reg in insn 583
changing reg in insn 572
changing reg in insn 573
changing reg in insn 573
changing reg in insn 574
changing reg in insn 574
changing reg in insn 576
changing reg in insn 576
changing reg in insn 579
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 580
changing reg in insn 580
changing reg in insn 581
changing reg in insn 582
changing reg in insn 583
changing reg in insn 589
changing reg in insn 591
changing reg in insn 591
changing reg in insn 591
changing reg in insn 604
changing reg in insn 593
changing reg in insn 594
changing reg in insn 594
changing reg in insn 595
changing reg in insn 595
changing reg in insn 597
changing reg in insn 597
changing reg in insn 600
changing reg in insn 599
changing reg in insn 600
changing reg in insn 600
changing reg in insn 601
changing reg in insn 601
changing reg in insn 602
changing reg in insn 603
changing reg in insn 604
changing reg in insn 619
changing reg in insn 618
changing reg in insn 620
changing reg in insn 619
changing reg in insn 677
changing reg in insn 680
changing reg in insn 684
changing reg in insn 685
changing reg in insn 685
changing reg in insn 686
changing reg in insn 686
changing reg in insn 687
changing reg in insn 689
changing reg in insn 692
changing reg in insn 728
changing reg in insn 731
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 737
changing reg in insn 737
changing reg in insn 738
changing reg in insn 740
changing reg in insn 743
changing reg in insn 9
changing reg in insn 254
changing reg in insn 268
changing reg in insn 259
changing reg in insn 259
changing reg in insn 257
changing reg in insn 10
changing reg in insn 270
changing reg in insn 288
changing reg in insn 279
changing reg in insn 279
changing reg in insn 277
changing reg in insn 11
changing reg in insn 328
changing reg in insn 342
changing reg in insn 333
changing reg in insn 333
changing reg in insn 331
changing reg in insn 12
changing reg in insn 344
changing reg in insn 362
changing reg in insn 353
changing reg in insn 353
changing reg in insn 351
changing reg in insn 244
changing reg in insn 239
changing reg in insn 247
changing reg in insn 318
changing reg in insn 313
changing reg in insn 321
changing reg in insn 447
changing reg in insn 442
changing reg in insn 450
changing reg in insn 615
changing reg in insn 610
changing reg in insn 618
changing reg in insn 19
changing reg in insn 22
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 37
changing reg in insn 39
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 52
changing reg in insn 54
changing reg in insn 64
changing reg in insn 67
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 79
changing reg in insn 82
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 94
changing reg in insn 97
changing reg in insn 95
changing reg in insn 97
changing reg in insn 99
changing reg in insn 109
changing reg in insn 112
changing reg in insn 110
changing reg in insn 112
changing reg in insn 114
changing reg in insn 124
changing reg in insn 127
changing reg in insn 125
changing reg in insn 127
changing reg in insn 129
changing reg in insn 139
changing reg in insn 142
changing reg in insn 140
changing reg in insn 142
changing reg in insn 144
changing reg in insn 154
changing reg in insn 157
changing reg in insn 155
changing reg in insn 157
changing reg in insn 159
changing reg in insn 178
changing reg in insn 179
changing reg in insn 201
changing reg in insn 202
changing reg in insn 256
changing reg in insn 9
changing reg in insn 257
changing reg in insn 276
changing reg in insn 10
changing reg in insn 277
changing reg in insn 330
changing reg in insn 11
changing reg in insn 331
changing reg in insn 350
changing reg in insn 12
changing reg in insn 351
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 112
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 127
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 156
changing reg in insn 157
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
changing reg in insn 191
changing reg in insn 192
changing reg in insn 196
changing reg in insn 197
changing reg in insn 195
changing reg in insn 196
changing reg in insn 210
changing reg in insn 211
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 230
changing reg in insn 231
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 272
changing reg in insn 275
changing reg in insn 276
changing reg in insn 287
changing reg in insn 288
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 301
changing reg in insn 304
changing reg in insn 305
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 344
changing reg in insn 345
changing reg in insn 346
changing reg in insn 349
changing reg in insn 350
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 370
changing reg in insn 366
changing reg in insn 371
changing reg in insn 367
changing reg in insn 372
changing reg in insn 368
changing reg in insn 373
changing reg in insn 369
changing reg in insn 374
changing reg in insn 376
changing reg in insn 377
changing reg in insn 378
changing reg in insn 383
changing reg in insn 379
changing reg in insn 384
changing reg in insn 380
changing reg in insn 385
changing reg in insn 381
changing reg in insn 386
changing reg in insn 382
changing reg in insn 387
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 395
changing reg in insn 392
changing reg in insn 396
changing reg in insn 393
changing reg in insn 398
changing reg in insn 394
changing reg in insn 399
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 408
changing reg in insn 404
changing reg in insn 409
changing reg in insn 405
changing reg in insn 410
changing reg in insn 406
changing reg in insn 411
changing reg in insn 407
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 416
changing reg in insn 417
changing reg in insn 419
changing reg in insn 420
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 433
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 461
changing reg in insn 462
changing reg in insn 459
changing reg in insn 460
changing reg in insn 469
changing reg in insn 470
changing reg in insn 474
changing reg in insn 475
changing reg in insn 477
changing reg in insn 480
changing reg in insn 482
changing reg in insn 483
changing reg in insn 487
changing reg in insn 492
changing reg in insn 488
changing reg in insn 493
changing reg in insn 489
changing reg in insn 494
changing reg in insn 490
changing reg in insn 495
changing reg in insn 491
changing reg in insn 496
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 505
changing reg in insn 501
changing reg in insn 506
changing reg in insn 502
changing reg in insn 507
changing reg in insn 503
changing reg in insn 508
changing reg in insn 504
changing reg in insn 509
changing reg in insn 513
changing reg in insn 514
changing reg in insn 512
changing reg in insn 513
changing reg in insn 515
changing reg in insn 519
changing reg in insn 516
changing reg in insn 520
changing reg in insn 517
changing reg in insn 522
changing reg in insn 518
changing reg in insn 523
changing reg in insn 525
changing reg in insn 526
changing reg in insn 527
changing reg in insn 532
changing reg in insn 528
changing reg in insn 533
changing reg in insn 529
changing reg in insn 534
changing reg in insn 530
changing reg in insn 535
changing reg in insn 531
changing reg in insn 536
changing reg in insn 540
changing reg in insn 541
changing reg in insn 539
changing reg in insn 540
changing reg in insn 542
changing reg in insn 543
changing reg in insn 544
changing reg in insn 545
changing reg in insn 546
changing reg in insn 547
changing reg in insn 555
changing reg in insn 556
changing reg in insn 565
changing reg in insn 566
changing reg in insn 569
changing reg in insn 570
changing reg in insn 571
changing reg in insn 572
changing reg in insn 575
changing reg in insn 576
changing reg in insn 577
changing reg in insn 578
changing reg in insn 590
changing reg in insn 591
changing reg in insn 592
changing reg in insn 593
changing reg in insn 596
changing reg in insn 597
changing reg in insn 598
changing reg in insn 599
changing reg in insn 633
changing reg in insn 634
changing reg in insn 638
changing reg in insn 639
changing reg in insn 641
changing reg in insn 644
changing reg in insn 646
changing reg in insn 649
changing reg in insn 647
changing reg in insn 650
changing reg in insn 652
changing reg in insn 655
changing reg in insn 653
changing reg in insn 656
changing reg in insn 658
changing reg in insn 659
changing reg in insn 664
changing reg in insn 665
changing reg in insn 669
changing reg in insn 670
changing reg in insn 672
changing reg in insn 675
changing reg in insn 678
changing reg in insn 681
changing reg in insn 683
changing reg in insn 684
changing reg in insn 687
changing reg in insn 689
changing reg in insn 689
changing reg in insn 688
changing reg in insn 689
changing reg in insn 690
changing reg in insn 693
changing reg in insn 695
changing reg in insn 698
changing reg in insn 696
changing reg in insn 699
changing reg in insn 701
changing reg in insn 704
changing reg in insn 702
changing reg in insn 705
changing reg in insn 707
changing reg in insn 708
changing reg in insn 715
changing reg in insn 716
changing reg in insn 720
changing reg in insn 721
changing reg in insn 723
changing reg in insn 726
changing reg in insn 729
changing reg in insn 732
changing reg in insn 734
changing reg in insn 735
changing reg in insn 738
changing reg in insn 740
changing reg in insn 740
changing reg in insn 739
changing reg in insn 740
changing reg in insn 741
changing reg in insn 744
changing reg in insn 746
changing reg in insn 749
changing reg in insn 747
changing reg in insn 750
changing reg in insn 752
changing reg in insn 755
changing reg in insn 753
changing reg in insn 756
changing reg in insn 758
changing reg in insn 759
changing reg in insn 763
changing reg in insn 764
deleting insn with uid = 24.
deleting insn with uid = 39.
deleting insn with uid = 54.
deleting insn with uid = 69.
deleting insn with uid = 84.
deleting insn with uid = 99.
deleting insn with uid = 114.
deleting insn with uid = 129.
deleting insn with uid = 144.
deleting insn with uid = 159.
deleting insn with uid = 371.
deleting insn with uid = 372.
deleting insn with uid = 373.
deleting insn with uid = 384.
deleting insn with uid = 385.
deleting insn with uid = 386.
deleting insn with uid = 398.
deleting insn with uid = 409.
deleting insn with uid = 410.
deleting insn with uid = 411.
deleting insn with uid = 493.
deleting insn with uid = 494.
deleting insn with uid = 495.
deleting insn with uid = 506.
deleting insn with uid = 507.
deleting insn with uid = 508.
deleting insn with uid = 522.
deleting insn with uid = 533.
deleting insn with uid = 534.
deleting insn with uid = 535.
deleting insn with uid = 553.
deleting insn with uid = 563.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 375.
verify found no changes in insn with uid = 388.
verify found no changes in insn with uid = 400.
verify found no changes in insn with uid = 413.
verify found no changes in insn with uid = 476.
verify found no changes in insn with uid = 481.
verify found no changes in insn with uid = 484.
verify found no changes in insn with uid = 497.
verify found no changes in insn with uid = 510.
verify found no changes in insn with uid = 524.
verify found no changes in insn with uid = 537.
verify found no changes in insn with uid = 640.
verify found no changes in insn with uid = 645.
verify found no changes in insn with uid = 651.
verify found no changes in insn with uid = 657.
verify found no changes in insn with uid = 660.
verify found no changes in insn with uid = 671.
verify found no changes in insn with uid = 676.
verify found no changes in insn with uid = 682.
verify found no changes in insn with uid = 694.
verify found no changes in insn with uid = 700.
verify found no changes in insn with uid = 706.
verify found no changes in insn with uid = 709.
verify found no changes in insn with uid = 722.
verify found no changes in insn with uid = 727.
verify found no changes in insn with uid = 733.
verify found no changes in insn with uid = 745.
verify found no changes in insn with uid = 751.
verify found no changes in insn with uid = 757.
verify found no changes in insn with uid = 760.


inters

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={205d,180u} r1={77d,47u,2e} r2={51d,21u} r4={53d,23u} r5={67d,37u} r6={1d,294u} r7={1d,78u} r8={30d} r9={30d} r10={30d} r11={30d} r12={30d} r13={30d} r14={30d} r15={30d} r16={2e} r17={128d,40u} r18={30d} r19={30d} r20={1d,1u} r21={97d,82u,2e} r22={60d,33u,8e} r23={35d,4u} r24={31d} r25={31d} r26={31d} r27={31d} r28={31d} r29={30d} r30={30d} r31={30d} r32={30d} r33={30d} r34={30d} r35={30d} r36={30d} r37={39d,9u} r38={31d,1u} r39={31d} r40={31d} r41={1d} r42={1d} r43={1d} r44={1d} r45={30d} r46={30d} r47={30d} r48={30d} r49={30d} r50={30d} r51={30d} r52={30d} r53={30d} r54={30d} r55={30d} r56={30d} r57={30d} r58={30d} r59={30d} r60={30d} r61={30d} r62={30d} r63={30d} r64={30d} r65={30d} r66={30d} r67={30d} r68={30d} r69={30d} r70={30d} r71={30d} r72={30d} r73={30d} r74={30d} r75={30d} r76={30d} r77={30d} r78={30d} r79={30d} r80={30d} 
;;    total ref usage 3551{2687d,850u,14e} in 599{569 regular + 30 call} insns.
(note 1 0 13 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97 101 105 109 113 117 121 125
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 103 104 107 108 111 112 115 116 119 120 123 124 237 238 242 243 247 248 252 253 257 258 262 263 267 268 272 273 277 278 282 283 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327
(note 13 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 13 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [16 ok+0 S8 A64])
        (reg:DI 5 di [ ok ])) "../src/spline.f":691 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])
        (reg:DI 4 si [ ss1 ])) "../src/spline.f":691 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])
        (reg:DI 1 dx [ ss2 ])) "../src/spline.f":691 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -720 [0xfffffffffffffd30])) [5 x1+0 S8 A64])
        (reg:DI 2 cx [ x1 ])) "../src/spline.f":691 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [5 xs1+0 S8 A64])
        (reg:DI 37 r8 [ xs1 ])) "../src/spline.f":691 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [5 y1+0 S8 A64])
        (reg:DI 38 r9 [ y1 ])) "../src/spline.f":691 81 {*movdi_internal}
     (nil))
(note 8 7 15 2 NOTE_INSN_FUNCTION_BEG)
(insn 15 8 16 2 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [293]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":692 82 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 0 ax [294])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":692 145 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.105+0 S8 A64])
        (reg:DI 0 ax [294])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 19 18 21 2 (set (reg:DI 0 ax [orig:237 size.106_173 ] [237])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.105+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 21 19 20 2 (set (reg:DI 1 dx [295])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 20 21 22 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:237 size.106_173 ] [237])
            (const_int 0 [0]))) "../src/spline.f":692 4 {*cmpdi_ccno_1}
     (nil))
(insn 22 20 25 2 (set (reg:DI 0 ax [orig:238 size.106_174 ] [238])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:237 size.106_173 ] [237])
            (reg:DI 1 dx [295]))) "../src/spline.f":692 967 {*movdicc_noc}
     (nil))
(insn 25 22 26 2 (set (reg:DI 39 r10 [orig:89 _3 ] [89])
        (reg:DI 0 ax [orig:88 size.258_2 ] [88])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 26 25 30 2 (set (reg:DI 40 r11 [ _3+8 ])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 30 26 31 2 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [296]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":693 82 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:DI 0 ax [297])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":693 145 {*extendsidi2_rex64}
     (nil))
(insn 33 32 34 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.107+0 S8 A64])
        (reg:DI 0 ax [297])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 34 33 36 2 (set (reg:DI 0 ax [orig:242 size.108_180 ] [242])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.107+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 36 34 35 2 (set (reg:DI 1 dx [298])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 35 36 37 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:242 size.108_180 ] [242])
            (const_int 0 [0]))) "../src/spline.f":693 4 {*cmpdi_ccno_1}
     (nil))
(insn 37 35 40 2 (set (reg:DI 0 ax [orig:243 size.108_181 ] [243])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:242 size.108_180 ] [242])
            (reg:DI 1 dx [298]))) "../src/spline.f":693 967 {*movdicc_noc}
     (nil))
(insn 40 37 41 2 (set (reg:DI 41 r12 [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 size.260_6 ] [92])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 41 40 45 2 (set (reg:DI 42 r13 [ _7+8 ])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 45 41 46 2 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [299]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":692 82 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:DI 0 ax [300])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":692 145 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.109+0 S8 A64])
        (reg:DI 0 ax [300])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 49 48 51 2 (set (reg:DI 0 ax [orig:247 size.110_186 ] [247])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.109+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 51 49 50 2 (set (reg:DI 1 dx [301])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 50 51 52 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:247 size.110_186 ] [247])
            (const_int 0 [0]))) "../src/spline.f":692 4 {*cmpdi_ccno_1}
     (nil))
(insn 52 50 55 2 (set (reg:DI 0 ax [orig:248 size.110_187 ] [248])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:247 size.110_186 ] [247])
            (reg:DI 1 dx [301]))) "../src/spline.f":692 967 {*movdicc_noc}
     (nil))
(insn 55 52 56 2 (set (reg:DI 43 r14 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.262_10 ] [96])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 56 55 60 2 (set (reg:DI 44 r15 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 60 56 61 2 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [302]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":692 82 {*movsi_internal}
     (nil))
(insn 62 61 63 2 (set (reg:DI 0 ax [303])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "../src/spline.f":692 145 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 ubound.113+0 S8 A64])
        (reg:DI 0 ax [303])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 64 63 66 2 (set (reg:DI 0 ax [orig:252 size.114_192 ] [252])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 ubound.113+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 66 64 65 2 (set (reg:DI 1 dx [304])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 65 66 67 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:252 size.114_192 ] [252])
            (const_int 0 [0]))) "../src/spline.f":692 4 {*cmpdi_ccno_1}
     (nil))
(insn 67 65 70 2 (set (reg:DI 0 ax [orig:253 size.114_193 ] [253])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:252 size.114_192 ] [252])
            (reg:DI 1 dx [304]))) "../src/spline.f":692 967 {*movdicc_noc}
     (nil))
(insn 70 67 71 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [8 %sfp+-720 S8 A128])
        (reg:DI 0 ax [orig:100 size.264_14 ] [100])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 71 70 75 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -744 [0xfffffffffffffd18])) [8 %sfp+-712 S8 A64])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 75 71 76 2 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 76 75 77 2 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (reg/f:DI 0 ax [305]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":693 82 {*movsi_internal}
     (nil))
(insn 77 76 78 2 (set (reg:DI 0 ax [306])
        (sign_extend:DI (reg:SI 0 ax [orig:103 _17 ] [103]))) "../src/spline.f":693 145 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [2 ubound.111+0 S8 A64])
        (reg:DI 0 ax [306])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 79 78 81 2 (set (reg:DI 0 ax [orig:257 size.112_198 ] [257])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [2 ubound.111+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 81 79 80 2 (set (reg:DI 1 dx [307])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 80 81 82 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:257 size.112_198 ] [257])
            (const_int 0 [0]))) "../src/spline.f":693 4 {*cmpdi_ccno_1}
     (nil))
(insn 82 80 85 2 (set (reg:DI 0 ax [orig:258 size.112_199 ] [258])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:257 size.112_198 ] [257])
            (reg:DI 1 dx [307]))) "../src/spline.f":693 967 {*movdicc_noc}
     (nil))
(insn 85 82 86 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [8 %sfp+-736 S8 A128])
        (reg:DI 0 ax [orig:104 size.266_18 ] [104])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 86 85 90 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -760 [0xfffffffffffffd08])) [8 %sfp+-728 S8 A64])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 90 86 91 2 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 91 90 92 2 (set (reg:SI 0 ax [orig:107 _21 ] [107])
        (mem:SI (reg/f:DI 0 ax [308]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":693 82 {*movsi_internal}
     (nil))
(insn 92 91 93 2 (set (reg:DI 0 ax [309])
        (sign_extend:DI (reg:SI 0 ax [orig:107 _21 ] [107]))) "../src/spline.f":693 145 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [2 ubound.115+0 S8 A64])
        (reg:DI 0 ax [309])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 94 93 96 2 (set (reg:DI 0 ax [orig:262 size.116_204 ] [262])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [2 ubound.115+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 96 94 95 2 (set (reg:DI 1 dx [310])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 95 96 97 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:262 size.116_204 ] [262])
            (const_int 0 [0]))) "../src/spline.f":693 4 {*cmpdi_ccno_1}
     (nil))
(insn 97 95 100 2 (set (reg:DI 0 ax [orig:263 size.116_205 ] [263])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:262 size.116_204 ] [262])
            (reg:DI 1 dx [310]))) "../src/spline.f":693 967 {*movdicc_noc}
     (nil))
(insn 100 97 101 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [8 %sfp+-752 S8 A128])
        (reg:DI 0 ax [orig:108 size.268_22 ] [108])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 101 100 105 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [8 %sfp+-744 S8 A64])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 105 101 106 2 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 106 105 107 2 (set (reg:SI 0 ax [orig:111 _25 ] [111])
        (mem:SI (reg/f:DI 0 ax [311]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":692 82 {*movsi_internal}
     (nil))
(insn 107 106 108 2 (set (reg:DI 0 ax [312])
        (sign_extend:DI (reg:SI 0 ax [orig:111 _25 ] [111]))) "../src/spline.f":692 145 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [2 ubound.117+0 S8 A64])
        (reg:DI 0 ax [312])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 109 108 111 2 (set (reg:DI 0 ax [orig:267 size.118_210 ] [267])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [2 ubound.117+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 111 109 110 2 (set (reg:DI 1 dx [313])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 110 111 112 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:267 size.118_210 ] [267])
            (const_int 0 [0]))) "../src/spline.f":692 4 {*cmpdi_ccno_1}
     (nil))
(insn 112 110 115 2 (set (reg:DI 0 ax [orig:268 size.118_211 ] [268])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:267 size.118_210 ] [267])
            (reg:DI 1 dx [313]))) "../src/spline.f":692 967 {*movdicc_noc}
     (nil))
(insn 115 112 116 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [8 %sfp+-768 S8 A128])
        (reg:DI 0 ax [orig:112 size.270_26 ] [112])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 116 115 120 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -792 [0xfffffffffffffce8])) [8 %sfp+-760 S8 A64])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 120 116 121 2 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 121 120 122 2 (set (reg:SI 0 ax [orig:115 _29 ] [115])
        (mem:SI (reg/f:DI 0 ax [314]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":692 82 {*movsi_internal}
     (nil))
(insn 122 121 123 2 (set (reg:DI 0 ax [315])
        (sign_extend:DI (reg:SI 0 ax [orig:115 _29 ] [115]))) "../src/spline.f":692 145 {*extendsidi2_rex64}
     (nil))
(insn 123 122 124 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [2 ubound.121+0 S8 A64])
        (reg:DI 0 ax [315])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 124 123 126 2 (set (reg:DI 0 ax [orig:272 size.122_216 ] [272])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [2 ubound.121+0 S8 A64])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 126 124 125 2 (set (reg:DI 1 dx [316])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 125 126 127 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:272 size.122_216 ] [272])
            (const_int 0 [0]))) "../src/spline.f":692 4 {*cmpdi_ccno_1}
     (nil))
(insn 127 125 130 2 (set (reg:DI 0 ax [orig:273 size.122_217 ] [273])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:272 size.122_216 ] [272])
            (reg:DI 1 dx [316]))) "../src/spline.f":692 967 {*movdicc_noc}
     (nil))
(insn 130 127 131 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [8 %sfp+-784 S8 A128])
        (reg:DI 0 ax [orig:116 size.272_30 ] [116])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 131 130 135 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [8 %sfp+-776 S8 A64])
        (const_int 0 [0])) "../src/spline.f":692 81 {*movdi_internal}
     (nil))
(insn 135 131 136 2 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 136 135 137 2 (set (reg:SI 0 ax [orig:119 _33 ] [119])
        (mem:SI (reg/f:DI 0 ax [317]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":693 82 {*movsi_internal}
     (nil))
(insn 137 136 138 2 (set (reg:DI 0 ax [318])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _33 ] [119]))) "../src/spline.f":693 145 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [2 ubound.119+0 S8 A64])
        (reg:DI 0 ax [318])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 139 138 141 2 (set (reg:DI 0 ax [orig:277 size.120_222 ] [277])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [2 ubound.119+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 141 139 140 2 (set (reg:DI 1 dx [319])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 140 141 142 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:277 size.120_222 ] [277])
            (const_int 0 [0]))) "../src/spline.f":693 4 {*cmpdi_ccno_1}
     (nil))
(insn 142 140 145 2 (set (reg:DI 0 ax [orig:278 size.120_223 ] [278])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:277 size.120_222 ] [277])
            (reg:DI 1 dx [319]))) "../src/spline.f":693 967 {*movdicc_noc}
     (nil))
(insn 145 142 146 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [8 %sfp+-800 S8 A128])
        (reg:DI 0 ax [orig:120 size.274_34 ] [120])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 146 145 150 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [8 %sfp+-792 S8 A64])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 150 146 151 2 (set (reg/f:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 151 150 152 2 (set (reg:SI 0 ax [orig:123 _37 ] [123])
        (mem:SI (reg/f:DI 0 ax [320]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":693 82 {*movsi_internal}
     (nil))
(insn 152 151 153 2 (set (reg:DI 0 ax [321])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _37 ] [123]))) "../src/spline.f":693 145 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [2 ubound.123+0 S8 A64])
        (reg:DI 0 ax [321])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 154 153 156 2 (set (reg:DI 0 ax [orig:282 size.124_228 ] [282])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [2 ubound.123+0 S8 A64])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 156 154 155 2 (set (reg:DI 1 dx [322])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 155 156 157 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:282 size.124_228 ] [282])
            (const_int 0 [0]))) "../src/spline.f":693 4 {*cmpdi_ccno_1}
     (nil))
(insn 157 155 160 2 (set (reg:DI 0 ax [orig:283 size.124_229 ] [283])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:282 size.124_228 ] [282])
            (reg:DI 1 dx [322]))) "../src/spline.f":693 967 {*movdicc_noc}
     (nil))
(insn 160 157 161 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [8 %sfp+-816 S8 A128])
        (reg:DI 0 ax [orig:124 size.276_38 ] [124])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 161 160 165 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [8 %sfp+-808 S8 A64])
        (const_int 0 [0])) "../src/spline.f":693 81 {*movdi_internal}
     (nil))
(insn 165 161 166 2 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [16 ok+0 S8 A64])) "../src/spline.f":704 81 {*movdi_internal}
     (nil))
(insn 166 165 167 2 (set (mem:SI (reg/f:DI 0 ax [323]) [9 *ok_233(D)+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":704 82 {*movsi_internal}
     (nil))
(insn 167 166 168 2 (set (reg:SF 21 xmm0 [324])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC21") [flags 0x2]) [3  S4 A32])) "../src/spline.f":707 127 {*movsf_internal}
     (nil))
(insn 168 167 169 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [3 rs1+0 S4 A64])
        (reg:SF 21 xmm0 [324])) "../src/spline.f":707 127 {*movsf_internal}
     (nil))
(insn 169 168 170 2 (set (reg:SF 21 xmm0 [325])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC21") [flags 0x2]) [3  S4 A32])) "../src/spline.f":708 127 {*movsf_internal}
     (nil))
(insn 170 169 171 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [3 rs2+0 S4 A32])
        (reg:SF 21 xmm0 [325])) "../src/spline.f":708 127 {*movsf_internal}
     (nil))
(insn 171 170 172 2 (set (reg:SF 21 xmm0 [326])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":709 127 {*movsf_internal}
     (nil))
(insn 172 171 173 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [3 ds1+0 S4 A128])
        (reg:SF 21 xmm0 [326])) "../src/spline.f":709 127 {*movsf_internal}
     (nil))
(insn 173 172 174 2 (set (reg:SF 21 xmm0 [327])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC8") [flags 0x2]) [3  S4 A32])) "../src/spline.f":710 127 {*movsf_internal}
     (nil))
(insn 174 173 175 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [3 ds2+0 S4 A32])
        (reg:SF 21 xmm0 [327])) "../src/spline.f":710 127 {*movsf_internal}
     (nil))
(insn 175 174 628 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 iter+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":712 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              38 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 287
(code_label 628 175 176 3 209 (nil) [1 uses])
(note 176 628 177 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [1 iter+0 S4 A32])
            (const_int 12 [0xc]))) "../src/spline.f":712 7 {*cmpsi_1}
     (nil))
(insn 178 177 179 3 (set (reg:QI 0 ax [orig:287 _242 ] [287])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":712 613 {*setcc_qi}
     (nil))
(insn 179 178 180 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:287 _242 ] [287])
            (const_int 0 [0]))) "../src/spline.f":712 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 180 179 181 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 803)
            (pc))) "../src/spline.f":712 617 {*jcc_1}
     (nil)
 -> 803)
;;  succ:       45
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 328 329 330 331 332 333 334 335 336
(note 181 180 182 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 183 4 (set (reg:SF 21 xmm0 [328])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC3") [flags 0x2]) [3  S4 A32])) "../src/spline.f":714 127 {*movsf_internal}
     (nil))
(insn 183 182 184 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 rlx+0 S4 A32])
        (reg:SF 21 xmm0 [328])) "../src/spline.f":714 127 {*movsf_internal}
     (nil))
(insn 184 183 185 4 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":715 81 {*movdi_internal}
     (nil))
(insn 185 184 186 4 (set (reg:SF 21 xmm0 [330])
        (mem:SF (reg/f:DI 0 ax [329]) [3 *ss1_244(D)+0 S4 A32])) "../src/spline.f":715 127 {*movsf_internal}
     (nil))
(insn 186 185 187 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -140 [0xffffffffffffff74])) [3 ss1old+0 S4 A32])
        (reg:SF 21 xmm0 [330])) "../src/spline.f":715 127 {*movsf_internal}
     (nil))
(insn 187 186 188 4 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":716 81 {*movdi_internal}
     (nil))
(insn 188 187 189 4 (set (reg:SF 21 xmm0 [332])
        (mem:SF (reg/f:DI 0 ax [331]) [3 *ss2_246(D)+0 S4 A32])) "../src/spline.f":716 127 {*movsf_internal}
     (nil))
(insn 189 188 190 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 ss2old+0 S4 A32])
        (reg:SF 21 xmm0 [332])) "../src/spline.f":716 127 {*movsf_internal}
     (nil))
(insn 190 189 191 4 (set (reg:SF 22 xmm1 [orig:127 rs1.278_41 ] [127])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [3 rs1+0 S4 A64])) "../src/spline.f":717 127 {*movsf_internal}
     (nil))
(insn 191 190 192 4 (set (reg:V4SF 21 xmm0 [334])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":717 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 192 191 193 4 (parallel [
            (set (reg:SF 21 xmm0 [333])
                (abs:SF (reg:SF 22 xmm1 [orig:127 rs1.278_41 ] [127])))
            (use (reg:V4SF 21 xmm0 [334]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":717 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:127 rs1.278_41 ] [127]))
        (nil)))
(insn 193 192 194 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [3 rs1old+0 S4 A32])
        (reg:SF 21 xmm0 [333])) "../src/spline.f":717 127 {*movsf_internal}
     (nil))
(insn 194 193 195 4 (set (reg:SF 22 xmm1 [orig:128 rs2.279_42 ] [128])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [3 rs2+0 S4 A32])) "../src/spline.f":718 127 {*movsf_internal}
     (nil))
(insn 195 194 196 4 (set (reg:V4SF 21 xmm0 [336])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":718 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 196 195 197 4 (parallel [
            (set (reg:SF 21 xmm0 [335])
                (abs:SF (reg:SF 22 xmm1 [orig:128 rs2.279_42 ] [128])))
            (use (reg:V4SF 21 xmm0 [336]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":718 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:128 rs2.279_42 ] [128]))
        (nil)))
(insn 197 196 198 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [3 rs2old+0 S4 A32])
        (reg:SF 21 xmm0 [335])) "../src/spline.f":718 127 {*movsf_internal}
     (nil))
(insn 198 197 464 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 irlx+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":720 82 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              31 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 288
(code_label 464 198 199 5 202 (nil) [1 uses])
(note 199 464 200 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [1 irlx+0 S4 A32])
            (const_int 16 [0x10]))) "../src/spline.f":720 7 {*cmpsi_1}
     (nil))
(insn 201 200 202 5 (set (reg:QI 0 ax [orig:288 _251 ] [288])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":720 613 {*setcc_qi}
     (nil))
(insn 202 201 203 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:288 _251 ] [288])
            (const_int 0 [0]))) "../src/spline.f":720 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 203 202 204 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 806)
            (pc))) "../src/spline.f":720 617 {*jcc_1}
     (nil)
 -> 806)
;;  succ:       46
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131 132 133 134 135 136 337 338 339 340
(note 204 203 205 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 206 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [9 clip1+0 S4 A32])
        (const_int 0 [0])) "../src/spline.f":722 82 {*movsi_internal}
     (nil))
(insn 206 205 207 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [9 clip2+0 S4 A32])
        (const_int 0 [0])) "../src/spline.f":723 82 {*movsi_internal}
     (nil))
(insn 207 206 208 6 (set (reg:SF 21 xmm0 [orig:129 ds1.280_43 ] [129])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [3 ds1+0 S4 A128])) "../src/spline.f":724 127 {*movsf_internal}
     (nil))
(insn 208 207 209 6 (set (reg:SF 21 xmm0 [orig:130 _44 ] [130])
        (mult:SF (reg:SF 21 xmm0 [orig:129 ds1.280_43 ] [129])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [3 rlx+0 S4 A32]))) "../src/spline.f":724 802 {*fop_sf_comm}
     (nil))
(insn 209 208 210 6 (set (reg:SF 21 xmm0 [orig:131 _45 ] [131])
        (plus:SF (reg:SF 21 xmm0 [orig:130 _44 ] [130])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -140 [0xffffffffffffff74])) [3 ss1old+0 S4 A32]))) "../src/spline.f":724 802 {*fop_sf_comm}
     (nil))
(insn 210 209 211 6 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":724 81 {*movdi_internal}
     (nil))
(insn 211 210 212 6 (set (mem:SF (reg/f:DI 0 ax [337]) [3 *ss1_244(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:131 _45 ] [131])) "../src/spline.f":724 127 {*movsf_internal}
     (nil))
(insn 212 211 213 6 (set (reg:SF 21 xmm0 [orig:132 ds2.281_46 ] [132])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [3 ds2+0 S4 A32])) "../src/spline.f":725 127 {*movsf_internal}
     (nil))
(insn 213 212 214 6 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (mult:SF (reg:SF 21 xmm0 [orig:132 ds2.281_46 ] [132])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [3 rlx+0 S4 A32]))) "../src/spline.f":725 802 {*fop_sf_comm}
     (nil))
(insn 214 213 215 6 (set (reg:SF 21 xmm0 [orig:134 _48 ] [134])
        (plus:SF (reg:SF 21 xmm0 [orig:133 _47 ] [133])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])) [3 ss2old+0 S4 A32]))) "../src/spline.f":725 802 {*fop_sf_comm}
     (nil))
(insn 215 214 216 6 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":725 81 {*movdi_internal}
     (nil))
(insn 216 215 217 6 (set (mem:SF (reg/f:DI 0 ax [338]) [3 *ss2_246(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:134 _48 ] [134])) "../src/spline.f":725 127 {*movsf_internal}
     (nil))
(insn 217 216 218 6 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":727 81 {*movdi_internal}
     (nil))
(insn 218 217 219 6 (set (reg:SF 22 xmm1 [orig:135 _49 ] [135])
        (mem:SF (reg/f:DI 0 ax [339]) [3 *ss1_244(D)+0 S4 A32])) "../src/spline.f":727 127 {*movsf_internal}
     (nil))
(insn 219 218 220 6 (set (reg/f:DI 0 ax [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":727 81 {*movdi_internal}
     (nil))
(insn 220 219 221 6 (set (reg:SF 21 xmm0 [orig:136 _50 ] [136])
        (mem:SF (reg/f:DI 0 ax [340]) [3 *s1_256(D)+0 S4 A32])) "../src/spline.f":727 127 {*movsf_internal}
     (nil))
(insn 221 220 222 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:136 _50 ] [136])
            (reg:SF 22 xmm1 [orig:135 _49 ] [135]))) "../src/spline.f":727 51 {*cmpiusf}
     (nil))
(jump_insn 222 221 223 6 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) "../src/spline.f":727 617 {*jcc_1}
     (nil)
 -> 237)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 141 341 342 343
(note 223 222 224 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 7 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":727 81 {*movdi_internal}
     (nil))
(insn 225 224 226 7 (set (reg:SF 21 xmm0 [orig:137 _51 ] [137])
        (mem:SF (reg/f:DI 0 ax [341]) [3 *ss1_244(D)+0 S4 A32])) "../src/spline.f":727 127 {*movsf_internal}
     (nil))
(insn 226 225 227 7 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":727 81 {*movdi_internal}
     (nil))
(insn 227 226 228 7 (set (reg:SI 0 ax [orig:138 _52 ] [138])
        (mem:SI (reg/f:DI 0 ax [342]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":727 82 {*movsi_internal}
     (nil))
(insn 228 227 229 7 (set (reg:DI 0 ax [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 _52 ] [138]))) "../src/spline.f":727 145 {*extendsidi2_rex64}
     (nil))
(insn 229 228 230 7 (parallel [
            (set (reg:DI 1 dx [orig:140 _54 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":727 218 {*adddi_1}
     (nil))
(insn 230 229 231 7 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":727 81 {*movdi_internal}
     (nil))
(insn 231 230 232 7 (set (reg:SF 22 xmm1 [orig:141 _55 ] [141])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:140 _54 ] [140])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [343])) [3 *s1_256(D) S4 A32])) "../src/spline.f":727 127 {*movsf_internal}
     (nil))
(insn 232 231 233 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:137 _51 ] [137])
            (reg:SF 22 xmm1 [orig:141 _55 ] [141]))) "../src/spline.f":727 51 {*cmpiusf}
     (nil))
(jump_insn 233 232 237 7 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 788)
            (pc))) "../src/spline.f":727 617 {*jcc_1}
     (nil)
 -> 788)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 233
(code_label 237 233 238 8 182 (nil) [1 uses])
(note 238 237 239 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 789 8 (set (reg:QI 0 ax [orig:233 iftmp.282_158 ] [233])
        (const_int 1 [0x1])) "../src/spline.f":727 84 {*movqi_internal}
     (nil))
(jump_insn 789 239 790 8 (set (pc)
        (label_ref 245)) "../src/spline.f":727 649 {jump}
     (nil)
 -> 245)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 233

(barrier 790 789 788)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 233
(code_label 788 790 243 9 217 (nil) [1 uses])
(note 243 788 244 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 9 (set (reg:QI 0 ax [orig:233 iftmp.282_158 ] [233])
        (const_int 0 [0])) "../src/spline.f":727 84 {*movqi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 233

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 233
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 233
;; lr  def 	 17 [flags] 142
(code_label 245 244 246 10 185 (nil) [1 uses])
(note 246 245 247 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 10 (set (reg:SI 0 ax [orig:142 iftmp.283_56 ] [142])
        (zero_extend:SI (reg:QI 0 ax [orig:233 iftmp.282_158 ] [233]))) "../src/spline.f":727 136 {*zero_extendqisi2}
     (nil))
(insn 248 247 249 10 (parallel [
            (set (reg:SI 0 ax [orig:142 iftmp.283_56 ] [142])
                (and:SI (reg:SI 0 ax [orig:142 iftmp.283_56 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":727 391 {*andsi_1}
     (nil))
(insn 249 248 250 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:142 iftmp.283_56 ] [142])
            (const_int 0 [0]))) "../src/spline.f":727 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 250 249 251 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 289)
            (pc))) "../src/spline.f":727 617 {*jcc_1}
     (nil)
 -> 289)
;;  succ:       11 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 143 144 145 229 289 344 345
(note 251 250 252 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 252 251 253 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [9 clip1+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":728 82 {*movsi_internal}
     (nil))
(insn 253 252 254 11 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":729 81 {*movdi_internal}
     (nil))
(insn 254 253 255 11 (set (reg:SF 21 xmm0 [orig:229 M.125_154 ] [229])
        (mem:SF (reg/f:DI 0 ax [344]) [3 *ss1_244(D)+0 S4 A32])) "../src/spline.f":729 127 {*movsf_internal}
     (nil))
(insn 255 254 256 11 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":729 81 {*movdi_internal}
     (nil))
(insn 256 255 257 11 (set (reg:SF 22 xmm1 [orig:289 _262 ] [289])
        (mem:SF (reg/f:DI 0 ax [345]) [3 *s1_256(D)+0 S4 A32])) "../src/spline.f":729 127 {*movsf_internal}
     (nil))
(insn 257 256 258 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [orig:289 _262 ] [289])
            (reg:SF 21 xmm0 [orig:229 M.125_154 ] [229]))) "../src/spline.f":729 51 {*cmpiusf}
     (nil))
(insn 258 257 259 11 (set (reg:QI 1 dx [orig:143 _57 ] [143])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":729 613 {*setcc_qi}
     (nil))
(insn 259 258 260 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:229 M.125_154 ] [229])
            (reg:SF 21 xmm0 [orig:229 M.125_154 ] [229]))) "../src/spline.f":729 51 {*cmpiusf}
     (nil))
(insn 260 259 261 11 (set (reg:QI 0 ax [orig:144 _58 ] [144])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":729 613 {*setcc_qi}
     (nil))
(insn 261 260 262 11 (parallel [
            (set (reg:QI 0 ax [orig:145 _59 ] [145])
                (ior:QI (reg:QI 0 ax [orig:144 _58 ] [144])
                    (reg:QI 1 dx [orig:143 _57 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":729 423 {*iorqi_1}
     (nil))
(insn 262 261 263 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:145 _59 ] [145])
            (const_int 0 [0]))) "../src/spline.f":729 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 263 262 264 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "../src/spline.f":729 617 {*jcc_1}
     (nil)
 -> 265)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229 289

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 289
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 289
;; lr  def 	 229
(note 264 263 9 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 9 264 265 12 (set (reg:SF 21 xmm0 [orig:229 M.125_154 ] [229])
        (reg:SF 22 xmm1 [orig:289 _262 ] [289])) "../src/spline.f":729 127 {*movsf_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  def 	 17 [flags] 146 147 148 149 150 151 230 290 346 347 348 349
(code_label 265 9 266 13 187 (nil) [1 uses])
(note 266 265 267 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 13 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":729 81 {*movdi_internal}
     (nil))
(insn 268 267 269 13 (set (mem:SF (reg/f:DI 0 ax [346]) [3 *ss1_244(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:229 M.125_154 ] [229])) "../src/spline.f":729 127 {*movsf_internal}
     (nil))
(insn 269 268 270 13 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":730 81 {*movdi_internal}
     (nil))
(insn 270 269 271 13 (set (reg:SF 21 xmm0 [orig:230 M.126_155 ] [230])
        (mem:SF (reg/f:DI 0 ax [347]) [3 *ss1_244(D)+0 S4 A32])) "../src/spline.f":730 127 {*movsf_internal}
     (nil))
(insn 271 270 272 13 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":730 81 {*movdi_internal}
     (nil))
(insn 272 271 273 13 (set (reg:SI 0 ax [orig:146 _60 ] [146])
        (mem:SI (reg/f:DI 0 ax [348]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":730 82 {*movsi_internal}
     (nil))
(insn 273 272 274 13 (set (reg:DI 0 ax [orig:147 _61 ] [147])
        (sign_extend:DI (reg:SI 0 ax [orig:146 _60 ] [146]))) "../src/spline.f":730 145 {*extendsidi2_rex64}
     (nil))
(insn 274 273 275 13 (parallel [
            (set (reg:DI 1 dx [orig:148 _62 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 _61 ] [147])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":730 218 {*adddi_1}
     (nil))
(insn 275 274 276 13 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":730 81 {*movdi_internal}
     (nil))
(insn 276 275 277 13 (set (reg:SF 22 xmm1 [orig:290 _267 ] [290])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:148 _62 ] [148])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [349])) [3 *s1_256(D) S4 A32])) "../src/spline.f":730 127 {*movsf_internal}
     (nil))
(insn 277 276 278 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:230 M.126_155 ] [230])
            (reg:SF 22 xmm1 [orig:290 _267 ] [290]))) "../src/spline.f":730 51 {*cmpiusf}
     (nil))
(insn 278 277 279 13 (set (reg:QI 1 dx [orig:149 _63 ] [149])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":730 613 {*setcc_qi}
     (nil))
(insn 279 278 280 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:230 M.126_155 ] [230])
            (reg:SF 21 xmm0 [orig:230 M.126_155 ] [230]))) "../src/spline.f":730 51 {*cmpiusf}
     (nil))
(insn 280 279 281 13 (set (reg:QI 0 ax [orig:150 _64 ] [150])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":730 613 {*setcc_qi}
     (nil))
(insn 281 280 282 13 (parallel [
            (set (reg:QI 0 ax [orig:151 _65 ] [151])
                (ior:QI (reg:QI 0 ax [orig:150 _64 ] [150])
                    (reg:QI 1 dx [orig:149 _63 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":730 423 {*iorqi_1}
     (nil))
(insn 282 281 283 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:151 _65 ] [151])
            (const_int 0 [0]))) "../src/spline.f":730 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 283 282 284 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) "../src/spline.f":730 617 {*jcc_1}
     (nil)
 -> 285)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 230 290

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290
;; lr  def 	 230
(note 284 283 10 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 10 284 285 14 (set (reg:SF 21 xmm0 [orig:230 M.126_155 ] [230])
        (reg:SF 22 xmm1 [orig:290 _267 ] [290])) "../src/spline.f":730 127 {*movsf_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 230

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 230
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 230
;; lr  def 	 350
(code_label 285 10 286 15 188 (nil) [1 uses])
(note 286 285 287 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 15 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":730 81 {*movdi_internal}
     (nil))
(insn 288 287 289 15 (set (mem:SF (reg/f:DI 0 ax [350]) [3 *ss1_244(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:230 M.126_155 ] [230])) "../src/spline.f":730 127 {*movsf_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       10
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 351 352
(code_label 289 288 290 16 186 (nil) [1 uses])
(note 290 289 291 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 16 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":732 81 {*movdi_internal}
     (nil))
(insn 292 291 293 16 (set (reg:SF 22 xmm1 [orig:152 _66 ] [152])
        (mem:SF (reg/f:DI 0 ax [351]) [3 *ss2_246(D)+0 S4 A32])) "../src/spline.f":732 127 {*movsf_internal}
     (nil))
(insn 293 292 294 16 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":732 81 {*movdi_internal}
     (nil))
(insn 294 293 295 16 (set (reg:SF 21 xmm0 [orig:153 _67 ] [153])
        (mem:SF (reg/f:DI 0 ax [352]) [3 *s2_270(D)+0 S4 A32])) "../src/spline.f":732 127 {*movsf_internal}
     (nil))
(insn 295 294 296 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:153 _67 ] [153])
            (reg:SF 22 xmm1 [orig:152 _66 ] [152]))) "../src/spline.f":732 51 {*cmpiusf}
     (nil))
(jump_insn 296 295 297 16 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 311)
            (pc))) "../src/spline.f":732 617 {*jcc_1}
     (nil)
 -> 311)
;;  succ:       18
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 158 353 354 355
(note 297 296 298 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 17 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":732 81 {*movdi_internal}
     (nil))
(insn 299 298 300 17 (set (reg:SF 21 xmm0 [orig:154 _68 ] [154])
        (mem:SF (reg/f:DI 0 ax [353]) [3 *ss2_246(D)+0 S4 A32])) "../src/spline.f":732 127 {*movsf_internal}
     (nil))
(insn 300 299 301 17 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":732 81 {*movdi_internal}
     (nil))
(insn 301 300 302 17 (set (reg:SI 0 ax [orig:155 _69 ] [155])
        (mem:SI (reg/f:DI 0 ax [354]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":732 82 {*movsi_internal}
     (nil))
(insn 302 301 303 17 (set (reg:DI 0 ax [orig:156 _70 ] [156])
        (sign_extend:DI (reg:SI 0 ax [orig:155 _69 ] [155]))) "../src/spline.f":732 145 {*extendsidi2_rex64}
     (nil))
(insn 303 302 304 17 (parallel [
            (set (reg:DI 1 dx [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":732 218 {*adddi_1}
     (nil))
(insn 304 303 305 17 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":732 81 {*movdi_internal}
     (nil))
(insn 305 304 306 17 (set (reg:SF 22 xmm1 [orig:158 _72 ] [158])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:157 _71 ] [157])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [355])) [3 *s2_270(D) S4 A32])) "../src/spline.f":732 127 {*movsf_internal}
     (nil))
(insn 306 305 307 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:154 _68 ] [154])
            (reg:SF 22 xmm1 [orig:158 _72 ] [158]))) "../src/spline.f":732 51 {*cmpiusf}
     (nil))
(jump_insn 307 306 311 17 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 791)
            (pc))) "../src/spline.f":732 617 {*jcc_1}
     (nil)
 -> 791)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 234
(code_label 311 307 312 18 189 (nil) [1 uses])
(note 312 311 313 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 313 312 792 18 (set (reg:QI 0 ax [orig:234 iftmp.284_159 ] [234])
        (const_int 1 [0x1])) "../src/spline.f":732 84 {*movqi_internal}
     (nil))
(jump_insn 792 313 793 18 (set (pc)
        (label_ref 319)) "../src/spline.f":732 649 {jump}
     (nil)
 -> 319)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 234

(barrier 793 792 791)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 234
(code_label 791 793 317 19 218 (nil) [1 uses])
(note 317 791 318 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 19 (set (reg:QI 0 ax [orig:234 iftmp.284_159 ] [234])
        (const_int 0 [0])) "../src/spline.f":732 84 {*movqi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 234

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 234
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 234
;; lr  def 	 17 [flags] 159
(code_label 319 318 320 20 192 (nil) [1 uses])
(note 320 319 321 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 321 320 322 20 (set (reg:SI 0 ax [orig:159 iftmp.285_73 ] [159])
        (zero_extend:SI (reg:QI 0 ax [orig:234 iftmp.284_159 ] [234]))) "../src/spline.f":732 136 {*zero_extendqisi2}
     (nil))
(insn 322 321 323 20 (parallel [
            (set (reg:SI 0 ax [orig:159 iftmp.285_73 ] [159])
                (and:SI (reg:SI 0 ax [orig:159 iftmp.285_73 ] [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":732 391 {*andsi_1}
     (nil))
(insn 323 322 324 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:159 iftmp.285_73 ] [159])
            (const_int 0 [0]))) "../src/spline.f":732 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 324 323 325 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 363)
            (pc))) "../src/spline.f":732 617 {*jcc_1}
     (nil)
 -> 363)
;;  succ:       21 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 162 231 291 356 357
(note 325 324 326 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [9 clip2+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":733 82 {*movsi_internal}
     (nil))
(insn 327 326 328 21 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":734 81 {*movdi_internal}
     (nil))
(insn 328 327 329 21 (set (reg:SF 21 xmm0 [orig:231 M.127_156 ] [231])
        (mem:SF (reg/f:DI 0 ax [356]) [3 *ss2_246(D)+0 S4 A32])) "../src/spline.f":734 127 {*movsf_internal}
     (nil))
(insn 329 328 330 21 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":734 81 {*movdi_internal}
     (nil))
(insn 330 329 331 21 (set (reg:SF 22 xmm1 [orig:291 _276 ] [291])
        (mem:SF (reg/f:DI 0 ax [357]) [3 *s2_270(D)+0 S4 A32])) "../src/spline.f":734 127 {*movsf_internal}
     (nil))
(insn 331 330 332 21 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [orig:291 _276 ] [291])
            (reg:SF 21 xmm0 [orig:231 M.127_156 ] [231]))) "../src/spline.f":734 51 {*cmpiusf}
     (nil))
(insn 332 331 333 21 (set (reg:QI 1 dx [orig:160 _74 ] [160])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":734 613 {*setcc_qi}
     (nil))
(insn 333 332 334 21 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:231 M.127_156 ] [231])
            (reg:SF 21 xmm0 [orig:231 M.127_156 ] [231]))) "../src/spline.f":734 51 {*cmpiusf}
     (nil))
(insn 334 333 335 21 (set (reg:QI 0 ax [orig:161 _75 ] [161])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":734 613 {*setcc_qi}
     (nil))
(insn 335 334 336 21 (parallel [
            (set (reg:QI 0 ax [orig:162 _76 ] [162])
                (ior:QI (reg:QI 0 ax [orig:161 _75 ] [161])
                    (reg:QI 1 dx [orig:160 _74 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":734 423 {*iorqi_1}
     (nil))
(insn 336 335 337 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:162 _76 ] [162])
            (const_int 0 [0]))) "../src/spline.f":734 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 337 336 338 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 339)
            (pc))) "../src/spline.f":734 617 {*jcc_1}
     (nil)
 -> 339)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 231 291

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 291
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 291
;; lr  def 	 231
(note 338 337 11 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 11 338 339 22 (set (reg:SF 21 xmm0 [orig:231 M.127_156 ] [231])
        (reg:SF 22 xmm1 [orig:291 _276 ] [291])) "../src/spline.f":734 127 {*movsf_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 231

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 231
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 231
;; lr  def 	 17 [flags] 163 164 165 166 167 168 232 292 358 359 360 361
(code_label 339 11 340 23 194 (nil) [1 uses])
(note 340 339 341 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 23 (set (reg/f:DI 0 ax [358])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":734 81 {*movdi_internal}
     (nil))
(insn 342 341 343 23 (set (mem:SF (reg/f:DI 0 ax [358]) [3 *ss2_246(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:231 M.127_156 ] [231])) "../src/spline.f":734 127 {*movsf_internal}
     (nil))
(insn 343 342 344 23 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":735 81 {*movdi_internal}
     (nil))
(insn 344 343 345 23 (set (reg:SF 21 xmm0 [orig:232 M.128_157 ] [232])
        (mem:SF (reg/f:DI 0 ax [359]) [3 *ss2_246(D)+0 S4 A32])) "../src/spline.f":735 127 {*movsf_internal}
     (nil))
(insn 345 344 346 23 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":735 81 {*movdi_internal}
     (nil))
(insn 346 345 347 23 (set (reg:SI 0 ax [orig:163 _77 ] [163])
        (mem:SI (reg/f:DI 0 ax [360]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":735 82 {*movsi_internal}
     (nil))
(insn 347 346 348 23 (set (reg:DI 0 ax [orig:164 _78 ] [164])
        (sign_extend:DI (reg:SI 0 ax [orig:163 _77 ] [163]))) "../src/spline.f":735 145 {*extendsidi2_rex64}
     (nil))
(insn 348 347 349 23 (parallel [
            (set (reg:DI 1 dx [orig:165 _79 ] [165])
                (plus:DI (reg:DI 0 ax [orig:164 _78 ] [164])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":735 218 {*adddi_1}
     (nil))
(insn 349 348 350 23 (set (reg/f:DI 0 ax [361])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":735 81 {*movdi_internal}
     (nil))
(insn 350 349 351 23 (set (reg:SF 22 xmm1 [orig:292 _281 ] [292])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:165 _79 ] [165])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [361])) [3 *s2_270(D) S4 A32])) "../src/spline.f":735 127 {*movsf_internal}
     (nil))
(insn 351 350 352 23 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:232 M.128_157 ] [232])
            (reg:SF 22 xmm1 [orig:292 _281 ] [292]))) "../src/spline.f":735 51 {*cmpiusf}
     (nil))
(insn 352 351 353 23 (set (reg:QI 1 dx [orig:166 _80 ] [166])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":735 613 {*setcc_qi}
     (nil))
(insn 353 352 354 23 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:232 M.128_157 ] [232])
            (reg:SF 21 xmm0 [orig:232 M.128_157 ] [232]))) "../src/spline.f":735 51 {*cmpiusf}
     (nil))
(insn 354 353 355 23 (set (reg:QI 0 ax [orig:167 _81 ] [167])
        (unordered:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) "../src/spline.f":735 613 {*setcc_qi}
     (nil))
(insn 355 354 356 23 (parallel [
            (set (reg:QI 0 ax [orig:168 _82 ] [168])
                (ior:QI (reg:QI 0 ax [orig:167 _81 ] [167])
                    (reg:QI 1 dx [orig:166 _80 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":735 423 {*iorqi_1}
     (nil))
(insn 356 355 357 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:168 _82 ] [168])
            (const_int 0 [0]))) "../src/spline.f":735 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 357 356 358 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 359)
            (pc))) "../src/spline.f":735 617 {*jcc_1}
     (nil)
 -> 359)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 232 292

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 292
;; lr  def 	 232
(note 358 357 12 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 12 358 359 24 (set (reg:SF 21 xmm0 [orig:232 M.128_157 ] [232])
        (reg:SF 22 xmm1 [orig:292 _281 ] [292])) "../src/spline.f":735 127 {*movsf_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 232

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       23
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 232
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 232
;; lr  def 	 362
(code_label 359 12 360 25 195 (nil) [1 uses])
(note 360 359 361 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 361 360 362 25 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":735 81 {*movdi_internal}
     (nil))
(insn 362 361 363 25 (set (mem:SF (reg/f:DI 0 ax [362]) [3 *ss2_246(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:232 M.128_157 ] [232])) "../src/spline.f":735 127 {*movsf_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       20
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 169 170 171 172 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389
(code_label 363 362 364 26 193 (nil) [1 uses])
(note 364 363 365 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 365 364 366 26 (set (reg:DI 5 di [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(insn 366 365 367 26 (set (reg:DI 2 cx [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(insn 367 366 368 26 (set (reg:DI 1 dx [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [5 xs1+0 S8 A64])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(insn 368 367 369 26 (set (reg:DI 4 si [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -720 [0xfffffffffffffd30])) [5 x1+0 S8 A64])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(insn 369 368 370 26 (set (reg:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(insn 370 369 374 26 (set (reg:DI 37 r8)
        (reg:DI 5 di [363])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(insn 374 370 375 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [367])) "../src/spline.f":738 81 {*movdi_internal}
     (nil))
(call_insn 375 374 376 26 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("seval_") [flags 0x403]  <function_decl 0x1427e4a00 seval>) [0 seval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":738 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 376 375 377 26 (set (reg:SF 0 ax [368])
        (reg:SF 21 xmm0)) "../src/spline.f":738 127 {*movsf_internal}
     (nil))
(insn 377 376 378 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [3 xx1+0 S4 A32])
        (reg:SF 0 ax [368])) "../src/spline.f":738 127 {*movsf_internal}
     (nil))
(insn 378 377 379 26 (set (reg:DI 5 di [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(insn 379 378 380 26 (set (reg:DI 2 cx [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(insn 380 379 381 26 (set (reg:DI 1 dx [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [5 xs2+0 S8 A64])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(insn 381 380 382 26 (set (reg:DI 4 si [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [5 x2+0 S8 A64])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(insn 382 381 383 26 (set (reg:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(insn 383 382 387 26 (set (reg:DI 37 r8)
        (reg:DI 5 di [369])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(insn 387 383 388 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [373])) "../src/spline.f":739 81 {*movdi_internal}
     (nil))
(call_insn 388 387 389 26 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("seval_") [flags 0x403]  <function_decl 0x1427e4a00 seval>) [0 seval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":739 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 389 388 390 26 (set (reg:SF 0 ax [374])
        (reg:SF 21 xmm0)) "../src/spline.f":739 127 {*movsf_internal}
     (nil))
(insn 390 389 391 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [3 xx2+0 S4 A32])
        (reg:SF 0 ax [374])) "../src/spline.f":739 127 {*movsf_internal}
     (nil))
(insn 391 390 392 26 (set (reg:DI 2 cx [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 392 391 393 26 (set (reg:DI 1 dx [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 393 392 394 26 (set (reg:DI 4 si [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [5 y1+0 S8 A64])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 394 393 395 26 (set (reg:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 395 394 396 26 (set (reg:DI 37 r8)
        (reg:DI 2 cx [375])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 396 395 397 26 (set (reg:DI 2 cx)
        (reg:DI 1 dx [376])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 397 396 399 26 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [5 ys1+0 S8 A64])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(insn 399 397 400 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [378])) "../src/spline.f":740 81 {*movdi_internal}
     (nil))
(call_insn 400 399 401 26 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("seval_") [flags 0x403]  <function_decl 0x1427e4a00 seval>) [0 seval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":740 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 401 400 402 26 (set (reg:SF 0 ax [379])
        (reg:SF 21 xmm0)) "../src/spline.f":740 127 {*movsf_internal}
     (nil))
(insn 402 401 403 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [3 yy1+0 S4 A32])
        (reg:SF 0 ax [379])) "../src/spline.f":740 127 {*movsf_internal}
     (nil))
(insn 403 402 404 26 (set (reg:DI 5 di [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(insn 404 403 405 26 (set (reg:DI 2 cx [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(insn 405 404 406 26 (set (reg:DI 1 dx [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [5 ys2+0 S8 A64])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(insn 406 405 407 26 (set (reg:DI 4 si [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [5 y2+0 S8 A64])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(insn 407 406 408 26 (set (reg:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(insn 408 407 412 26 (set (reg:DI 37 r8)
        (reg:DI 5 di [380])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(insn 412 408 413 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [384])) "../src/spline.f":741 81 {*movdi_internal}
     (nil))
(call_insn 413 412 414 26 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("seval_") [flags 0x403]  <function_decl 0x1427e4a00 seval>) [0 seval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":741 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 414 413 415 26 (set (reg:SF 0 ax [385])
        (reg:SF 21 xmm0)) "../src/spline.f":741 127 {*movsf_internal}
     (nil))
(insn 415 414 416 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [3 yy2+0 S4 A32])
        (reg:SF 0 ax [385])) "../src/spline.f":741 127 {*movsf_internal}
     (nil))
(insn 416 415 417 26 (set (reg:SF 21 xmm0 [386])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [3 xx1+0 S4 A32])) "../src/spline.f":743 127 {*movsf_internal}
     (nil))
(insn 417 416 418 26 (set (reg:SF 21 xmm0 [orig:169 _83 ] [169])
        (minus:SF (reg:SF 21 xmm0 [386])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -160 [0xffffffffffffff60])) [3 xx2+0 S4 A32]))) "../src/spline.f":743 805 {*fop_sf_1}
     (nil))
(insn 418 417 419 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [3 rs1+0 S4 A64])
        (reg:SF 21 xmm0 [orig:169 _83 ] [169])) "../src/spline.f":743 127 {*movsf_internal}
     (nil))
(insn 419 418 420 26 (set (reg:SF 21 xmm0 [387])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [3 yy1+0 S4 A32])) "../src/spline.f":744 127 {*movsf_internal}
     (nil))
(insn 420 419 421 26 (set (reg:SF 21 xmm0 [orig:170 _84 ] [170])
        (minus:SF (reg:SF 21 xmm0 [387])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [3 yy2+0 S4 A32]))) "../src/spline.f":744 805 {*fop_sf_1}
     (nil))
(insn 421 420 422 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [3 rs2+0 S4 A32])
        (reg:SF 21 xmm0 [orig:170 _84 ] [170])) "../src/spline.f":744 127 {*movsf_internal}
     (nil))
(insn 422 421 423 26 (set (reg:SF 22 xmm1 [orig:171 rs1.287_85 ] [171])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [3 rs1+0 S4 A64])) "../src/spline.f":746 127 {*movsf_internal}
     (nil))
(insn 423 422 424 26 (set (reg:V4SF 21 xmm0 [388])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":746 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 424 423 425 26 (parallel [
            (set (reg:SF 21 xmm0 [orig:172 _86 ] [172])
                (abs:SF (reg:SF 22 xmm1 [orig:171 rs1.287_85 ] [171])))
            (use (reg:V4SF 21 xmm0 [388]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":746 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:171 rs1.287_85 ] [171]))
        (nil)))
(insn 425 424 426 26 (set (reg:SF 22 xmm1 [389])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [3 rs1old+0 S4 A32])) "../src/spline.f":746 127 {*movsf_internal}
     (nil))
(insn 426 425 427 26 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [389])
            (reg:SF 21 xmm0 [orig:172 _86 ] [172]))) "../src/spline.f":746 51 {*cmpiusf}
     (nil))
(jump_insn 427 426 431 26 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 445)
            (pc))) "../src/spline.f":746 617 {*jcc_1}
     (nil)
 -> 445)
;;  succ:       27 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 174 390 391
(note 431 427 432 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 432 431 433 27 (set (reg:SF 22 xmm1 [orig:173 rs2.288_87 ] [173])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [3 rs2+0 S4 A32])) "../src/spline.f":746 127 {*movsf_internal}
     (nil))
(insn 433 432 434 27 (set (reg:V4SF 21 xmm0 [390])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":746 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 434 433 435 27 (parallel [
            (set (reg:SF 21 xmm0 [orig:174 _88 ] [174])
                (abs:SF (reg:SF 22 xmm1 [orig:173 rs2.288_87 ] [173])))
            (use (reg:V4SF 21 xmm0 [390]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":746 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:173 rs2.288_87 ] [173]))
        (nil)))
(insn 435 434 436 27 (set (reg:SF 22 xmm1 [391])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [3 rs2old+0 S4 A32])) "../src/spline.f":746 127 {*movsf_internal}
     (nil))
(insn 436 435 437 27 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [391])
            (reg:SF 21 xmm0 [orig:174 _88 ] [174]))) "../src/spline.f":746 51 {*cmpiusf}
     (nil))
(jump_insn 437 436 441 27 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 445)
            (pc))) "../src/spline.f":746 617 {*jcc_1}
     (nil)
 -> 445)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 235
(note 441 437 442 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 442 441 794 28 (set (reg:QI 0 ax [orig:235 iftmp.286_160 ] [235])
        (const_int 1 [0x1])) "../src/spline.f":746 84 {*movqi_internal}
     (nil))
(jump_insn 794 442 795 28 (set (pc)
        (label_ref 448)) "../src/spline.f":746 649 {jump}
     (nil)
 -> 448)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235

(barrier 795 794 445)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       26
;;              27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 235
(code_label 445 795 446 29 196 (nil) [2 uses])
(note 446 445 447 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 447 446 448 29 (set (reg:QI 0 ax [orig:235 iftmp.286_160 ] [235])
        (const_int 0 [0])) "../src/spline.f":746 84 {*movqi_internal}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235
;; lr  def 	 17 [flags] 175
(code_label 448 447 449 30 199 (nil) [1 uses])
(note 449 448 450 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 450 449 451 30 (set (reg:SI 0 ax [orig:175 iftmp.289_89 ] [175])
        (zero_extend:SI (reg:QI 0 ax [orig:235 iftmp.286_160 ] [235]))) "../src/spline.f":746 136 {*zero_extendqisi2}
     (nil))
(insn 451 450 452 30 (parallel [
            (set (reg:SI 0 ax [orig:175 iftmp.289_89 ] [175])
                (and:SI (reg:SI 0 ax [orig:175 iftmp.289_89 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":746 391 {*andsi_1}
     (nil))
(insn 452 451 453 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:175 iftmp.289_89 ] [175])
            (const_int 0 [0]))) "../src/spline.f":746 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 453 452 458 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 811)
            (pc))) "../src/spline.f":746 617 {*jcc_1}
     (nil)
 -> 811)
;;  succ:       47
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 46, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 392 393 394
(note 458 453 459 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 459 458 460 31 (set (reg:SF 22 xmm1 [393])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 rlx+0 S4 A32])) "../src/spline.f":749 127 {*movsf_internal}
     (nil))
(insn 460 459 461 31 (set (reg:SF 21 xmm0 [394])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC10") [flags 0x2]) [3  S4 A32])) "../src/spline.f":749 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 461 460 462 31 (set (reg:SF 21 xmm0 [392])
        (mult:SF (reg:SF 21 xmm0 [394])
            (reg:SF 22 xmm1 [393]))) "../src/spline.f":749 802 {*fop_sf_comm}
     (nil))
(insn 462 461 463 31 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [3 rlx+0 S4 A32])
        (reg:SF 21 xmm0 [392])) "../src/spline.f":749 127 {*movsf_internal}
     (nil))
(insn 463 462 796 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [1 irlx+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [1 irlx+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":720 217 {*addsi_1}
     (nil))
(jump_insn 796 463 797 31 (set (pc)
        (label_ref 464)) "../src/spline.f":720 649 {jump}
     (nil)
 -> 464)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 797 796 806)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 32, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 806 797 805 46 220 (nil) [1 uses])
(note 805 806 807 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 807 805 467 46 (const_int 0 [0]) "../src/spline.f":751 682 {nop}
     (nil))
;;  succ:       32 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 47, flags: (RTL, MODIFIED)
;;  pred:       46 [100.0%]  (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 395 396 397 398
(code_label 467 807 468 32 181 (nil) [0 uses])
(note 468 467 469 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 32 (set (reg/f:DI 0 ax [395])
        (symbol_ref/f:DI ("*lC15") [flags 0x2]  <var_decl 0x143540c60 *lC15>)) "../src/spline.f":752 81 {*movdi_internal}
     (nil))
(insn 470 469 471 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [12 dt_parm.129.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [395])) "../src/spline.f":752 81 {*movdi_internal}
     (nil))
(insn 471 470 472 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [1 dt_parm.129.common.line+0 S4 A128])
        (const_int 752 [0x2f0])) "../src/spline.f":752 82 {*movsi_internal}
     (nil))
(insn 472 471 473 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [1 dt_parm.129.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "../src/spline.f":752 82 {*movsi_internal}
     (nil))
(insn 473 472 474 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -684 [0xfffffffffffffd54])) [1 dt_parm.129.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/spline.f":752 82 {*movsi_internal}
     (nil))
(insn 474 473 475 32 (parallel [
            (set (reg:DI 0 ax [396])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":752 218 {*adddi_1}
     (nil))
(insn 475 474 476 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [396])) "../src/spline.f":752 81 {*movdi_internal}
     (nil))
(call_insn 476 475 477 32 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":752 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 477 476 478 32 (parallel [
            (set (reg:DI 0 ax [397])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":752 218 {*adddi_1}
     (nil))
(insn 478 477 479 32 (set (reg:SI 1 dx)
        (const_int 37 [0x25])) "../src/spline.f":752 82 {*movsi_internal}
     (nil))
(insn 479 478 480 32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC22") [flags 0x2]  <var_decl 0x143594ea0 *lC22>)) "../src/spline.f":752 81 {*movdi_internal}
     (nil))
(insn 480 479 481 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [397])) "../src/spline.f":752 81 {*movdi_internal}
     (nil))
(call_insn 481 480 482 32 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":752 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 482 481 483 32 (parallel [
            (set (reg:DI 0 ax [398])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":752 218 {*adddi_1}
     (nil))
(insn 483 482 484 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [398])) "../src/spline.f":752 81 {*movdi_internal}
     (nil))
(call_insn 484 483 808 32 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/spline.f":752 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 808 484 809 32 (set (pc)
        (label_ref 485)) 649 {jump}
     (nil)
 -> 485)
;;  succ:       33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 809 808 811)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 33, flags: (RTL, MODIFIED)
;;  pred:       30
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 811 809 810 47 221 (nil) [1 uses])
(note 810 811 812 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 812 810 485 47 (const_int 0 [0]) "../src/spline.f":747 682 {nop}
     (nil))
;;  succ:       33 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 34, flags: (RTL, MODIFIED)
;;  pred:       47 [100.0%]  (FALLTHRU)
;;              32
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432
(code_label 485 812 486 33 201 (nil) [1 uses])
(note 486 485 487 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 487 486 488 33 (set (reg:DI 5 di [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(insn 488 487 489 33 (set (reg:DI 2 cx [400])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(insn 489 488 490 33 (set (reg:DI 1 dx [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [5 xs1+0 S8 A64])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(insn 490 489 491 33 (set (reg:DI 4 si [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -720 [0xfffffffffffffd30])) [5 x1+0 S8 A64])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(insn 491 490 492 33 (set (reg:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(insn 492 491 496 33 (set (reg:DI 37 r8)
        (reg:DI 5 di [399])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(insn 496 492 497 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [403])) "../src/spline.f":755 81 {*movdi_internal}
     (nil))
(call_insn 497 496 498 33 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("deval_") [flags 0x403]  <function_decl 0x1427e4900 deval>) [0 deval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":755 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 498 497 499 33 (set (reg:SF 0 ax [404])
        (reg:SF 21 xmm0)) "../src/spline.f":755 127 {*movsf_internal}
     (nil))
(insn 499 498 500 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [3 a11+0 S4 A32])
        (reg:SF 0 ax [404])) "../src/spline.f":755 127 {*movsf_internal}
     (nil))
(insn 500 499 501 33 (set (reg:DI 5 di [405])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(insn 501 500 502 33 (set (reg:DI 2 cx [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(insn 502 501 503 33 (set (reg:DI 1 dx [407])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [5 xs2+0 S8 A64])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(insn 503 502 504 33 (set (reg:DI 4 si [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [5 x2+0 S8 A64])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(insn 504 503 505 33 (set (reg:DI 0 ax [409])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(insn 505 504 509 33 (set (reg:DI 37 r8)
        (reg:DI 5 di [405])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(insn 509 505 510 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [409])) "../src/spline.f":756 81 {*movdi_internal}
     (nil))
(call_insn 510 509 511 33 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("deval_") [flags 0x403]  <function_decl 0x1427e4900 deval>) [0 deval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":756 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 511 510 512 33 (set (reg:SF 22 xmm1 [orig:176 _90 ] [176])
        (reg:SF 21 xmm0)) "../src/spline.f":756 127 {*movsf_internal}
     (nil))
(insn 512 511 513 33 (set (reg:V4SF 21 xmm0 [411])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC23") [flags 0x2]) [3  S16 A128])) "../src/spline.f":756 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 513 512 514 33 (parallel [
            (set (reg:SF 21 xmm0 [410])
                (neg:SF (reg:SF 22 xmm1 [orig:176 _90 ] [176])))
            (use (reg:V4SF 21 xmm0 [411]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":756 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 22 xmm1 [orig:176 _90 ] [176]))
        (nil)))
(insn 514 513 515 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [3 a12+0 S4 A32])
        (reg:SF 21 xmm0 [410])) "../src/spline.f":756 127 {*movsf_internal}
     (nil))
(insn 515 514 516 33 (set (reg:DI 2 cx [412])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 516 515 517 33 (set (reg:DI 1 dx [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 517 516 518 33 (set (reg:DI 4 si [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [5 y1+0 S8 A64])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 518 517 519 33 (set (reg:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 519 518 520 33 (set (reg:DI 37 r8)
        (reg:DI 2 cx [412])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 520 519 521 33 (set (reg:DI 2 cx)
        (reg:DI 1 dx [413])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 521 520 523 33 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [5 ys1+0 S8 A64])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(insn 523 521 524 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [415])) "../src/spline.f":757 81 {*movdi_internal}
     (nil))
(call_insn 524 523 525 33 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("deval_") [flags 0x403]  <function_decl 0x1427e4900 deval>) [0 deval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":757 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 525 524 526 33 (set (reg:SF 0 ax [416])
        (reg:SF 21 xmm0)) "../src/spline.f":757 127 {*movsf_internal}
     (nil))
(insn 526 525 527 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [3 a21+0 S4 A32])
        (reg:SF 0 ax [416])) "../src/spline.f":757 127 {*movsf_internal}
     (nil))
(insn 527 526 528 33 (set (reg:DI 5 di [417])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(insn 528 527 529 33 (set (reg:DI 2 cx [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(insn 529 528 530 33 (set (reg:DI 1 dx [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [5 ys2+0 S8 A64])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(insn 530 529 531 33 (set (reg:DI 4 si [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [5 y2+0 S8 A64])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(insn 531 530 532 33 (set (reg:DI 0 ax [421])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(insn 532 531 536 33 (set (reg:DI 37 r8)
        (reg:DI 5 di [417])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(insn 536 532 537 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [421])) "../src/spline.f":758 81 {*movdi_internal}
     (nil))
(call_insn 537 536 538 33 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("deval_") [flags 0x403]  <function_decl 0x1427e4900 deval>) [0 deval S1 A8])
            (const_int 0 [0]))) "../src/spline.f":758 665 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 538 537 539 33 (set (reg:SF 22 xmm1 [orig:177 _91 ] [177])
        (reg:SF 21 xmm0)) "../src/spline.f":758 127 {*movsf_internal}
     (nil))
(insn 539 538 540 33 (set (reg:V4SF 21 xmm0 [423])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC23") [flags 0x2]) [3  S16 A128])) "../src/spline.f":758 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 540 539 541 33 (parallel [
            (set (reg:SF 21 xmm0 [422])
                (neg:SF (reg:SF 22 xmm1 [orig:177 _91 ] [177])))
            (use (reg:V4SF 21 xmm0 [423]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":758 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 22 xmm1 [orig:177 _91 ] [177]))
        (nil)))
(insn 541 540 542 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [3 a22+0 S4 A32])
        (reg:SF 21 xmm0 [422])) "../src/spline.f":758 127 {*movsf_internal}
     (nil))
(insn 542 541 543 33 (set (reg:SF 21 xmm0 [424])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [3 a11+0 S4 A32])) "../src/spline.f":760 127 {*movsf_internal}
     (nil))
(insn 543 542 544 33 (set (reg:SF 21 xmm0 [orig:178 _92 ] [178])
        (mult:SF (reg:SF 21 xmm0 [424])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -184 [0xffffffffffffff48])) [3 a22+0 S4 A32]))) "../src/spline.f":760 802 {*fop_sf_comm}
     (nil))
(insn 544 543 545 33 (set (reg:SF 22 xmm1 [425])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [3 a12+0 S4 A32])) "../src/spline.f":760 127 {*movsf_internal}
     (nil))
(insn 545 544 546 33 (set (reg:SF 22 xmm1 [orig:179 _93 ] [179])
        (mult:SF (reg:SF 22 xmm1 [425])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -180 [0xffffffffffffff4c])) [3 a21+0 S4 A32]))) "../src/spline.f":760 802 {*fop_sf_comm}
     (nil))
(insn 546 545 547 33 (set (reg:SF 21 xmm0 [426])
        (minus:SF (reg:SF 21 xmm0 [orig:178 _92 ] [178])
            (reg:SF 22 xmm1 [orig:179 _93 ] [179]))) "../src/spline.f":760 805 {*fop_sf_1}
     (nil))
(insn 547 546 548 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -188 [0xffffffffffffff44])) [3 det+0 S4 A32])
        (reg:SF 21 xmm0 [426])) "../src/spline.f":760 127 {*movsf_internal}
     (nil))
(insn 548 547 549 33 (set (reg:SF 21 xmm0 [orig:180 rs1.290_94 ] [180])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [3 rs1+0 S4 A64])) "../src/spline.f":761 127 {*movsf_internal}
     (nil))
(insn 549 548 550 33 (set (reg:SF 21 xmm0 [orig:181 _95 ] [181])
        (mult:SF (reg:SF 21 xmm0 [orig:180 rs1.290_94 ] [180])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -184 [0xffffffffffffff48])) [3 a22+0 S4 A32]))) "../src/spline.f":761 802 {*fop_sf_comm}
     (nil))
(insn 550 549 551 33 (set (reg:SF 22 xmm1 [orig:182 rs2.291_96 ] [182])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [3 rs2+0 S4 A32])) "../src/spline.f":761 127 {*movsf_internal}
     (nil))
(insn 551 550 552 33 (set (reg:SF 22 xmm1 [orig:183 _97 ] [183])
        (mult:SF (reg:SF 22 xmm1 [orig:182 rs2.291_96 ] [182])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -176 [0xffffffffffffff50])) [3 a12+0 S4 A32]))) "../src/spline.f":761 802 {*fop_sf_comm}
     (nil))
(insn 552 551 554 33 (set (reg:SF 21 xmm0 [orig:184 _98 ] [184])
        (minus:SF (reg:SF 21 xmm0 [orig:181 _95 ] [181])
            (reg:SF 22 xmm1 [orig:183 _97 ] [183]))) "../src/spline.f":761 805 {*fop_sf_1}
     (nil))
(insn 554 552 555 33 (set (reg:SF 21 xmm0 [orig:186 _100 ] [186])
        (div:SF (reg:SF 21 xmm0 [orig:185 _99 ] [185])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -188 [0xffffffffffffff44])) [3 det+0 S4 A32]))) "../src/spline.f":761 805 {*fop_sf_1}
     (nil))
(insn 555 554 556 33 (set (reg:V4SF 22 xmm1 [427])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC23") [flags 0x2]) [3  S16 A128])) "../src/spline.f":761 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 556 555 557 33 (parallel [
            (set (reg:SF 21 xmm0 [orig:187 _101 ] [187])
                (neg:SF (reg:SF 21 xmm0 [orig:186 _100 ] [186])))
            (use (reg:V4SF 22 xmm1 [427]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":761 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:186 _100 ] [186]))
        (nil)))
(insn 557 556 558 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [3 ds1+0 S4 A128])
        (reg:SF 21 xmm0 [orig:187 _101 ] [187])) "../src/spline.f":761 127 {*movsf_internal}
     (nil))
(insn 558 557 559 33 (set (reg:SF 21 xmm0 [orig:188 rs2.292_102 ] [188])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [3 rs2+0 S4 A32])) "../src/spline.f":762 127 {*movsf_internal}
     (nil))
(insn 559 558 560 33 (set (reg:SF 21 xmm0 [orig:189 _103 ] [189])
        (mult:SF (reg:SF 21 xmm0 [orig:188 rs2.292_102 ] [188])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [3 a11+0 S4 A32]))) "../src/spline.f":762 802 {*fop_sf_comm}
     (nil))
(insn 560 559 561 33 (set (reg:SF 22 xmm1 [orig:190 rs1.293_104 ] [190])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [3 rs1+0 S4 A64])) "../src/spline.f":762 127 {*movsf_internal}
     (nil))
(insn 561 560 562 33 (set (reg:SF 22 xmm1 [orig:191 _105 ] [191])
        (mult:SF (reg:SF 22 xmm1 [orig:190 rs1.293_104 ] [190])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -180 [0xffffffffffffff4c])) [3 a21+0 S4 A32]))) "../src/spline.f":762 802 {*fop_sf_comm}
     (nil))
(insn 562 561 564 33 (set (reg:SF 21 xmm0 [orig:192 _106 ] [192])
        (minus:SF (reg:SF 21 xmm0 [orig:189 _103 ] [189])
            (reg:SF 22 xmm1 [orig:191 _105 ] [191]))) "../src/spline.f":762 805 {*fop_sf_1}
     (nil))
(insn 564 562 565 33 (set (reg:SF 21 xmm0 [orig:194 _108 ] [194])
        (div:SF (reg:SF 21 xmm0 [orig:193 _107 ] [193])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -188 [0xffffffffffffff44])) [3 det+0 S4 A32]))) "../src/spline.f":762 805 {*fop_sf_1}
     (nil))
(insn 565 564 566 33 (set (reg:V4SF 22 xmm1 [428])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC23") [flags 0x2]) [3  S16 A128])) "../src/spline.f":762 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 566 565 567 33 (parallel [
            (set (reg:SF 21 xmm0 [orig:195 _109 ] [195])
                (neg:SF (reg:SF 21 xmm0 [orig:194 _108 ] [194])))
            (use (reg:V4SF 22 xmm1 [428]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":762 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:194 _108 ] [194]))
        (nil)))
(insn 567 566 568 33 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [3 ds2+0 S4 A32])
        (reg:SF 21 xmm0 [orig:195 _109 ] [195])) "../src/spline.f":762 127 {*movsf_internal}
     (nil))
(insn 568 567 569 33 (set (reg:SF 22 xmm1 [orig:196 ds1.295_110 ] [196])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [3 ds1+0 S4 A128])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 569 568 570 33 (set (reg:V4SF 21 xmm0 [429])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":764 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 570 569 571 33 (parallel [
            (set (reg:SF 22 xmm1 [orig:197 _111 ] [197])
                (abs:SF (reg:SF 22 xmm1 [orig:196 ds1.295_110 ] [196])))
            (use (reg:V4SF 21 xmm0 [429]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":764 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:196 ds1.295_110 ] [196]))
        (nil)))
(insn 571 570 572 33 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":764 81 {*movdi_internal}
     (nil))
(insn 572 571 573 33 (set (reg:SI 0 ax [orig:198 _112 ] [198])
        (mem:SI (reg/f:DI 0 ax [430]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":764 82 {*movsi_internal}
     (nil))
(insn 573 572 574 33 (set (reg:DI 0 ax [orig:199 _113 ] [199])
        (sign_extend:DI (reg:SI 0 ax [orig:198 _112 ] [198]))) "../src/spline.f":764 145 {*extendsidi2_rex64}
     (nil))
(insn 574 573 575 33 (parallel [
            (set (reg:DI 1 dx [orig:200 _114 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 _113 ] [199])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":764 218 {*adddi_1}
     (nil))
(insn 575 574 576 33 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":764 81 {*movdi_internal}
     (nil))
(insn 576 575 577 33 (set (reg:SF 21 xmm0 [orig:201 _115 ] [201])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:200 _114 ] [200])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [431])) [3 *s1_256(D) S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 577 576 578 33 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":764 81 {*movdi_internal}
     (nil))
(insn 578 577 579 33 (set (reg:SF 23 xmm2 [orig:202 _116 ] [202])
        (mem:SF (reg/f:DI 0 ax [432]) [3 *s1_256(D)+0 S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 579 578 580 33 (set (reg:SF 21 xmm0 [orig:203 _117 ] [203])
        (minus:SF (reg:SF 21 xmm0 [orig:201 _115 ] [201])
            (reg:SF 23 xmm2 [orig:202 _116 ] [202]))) "../src/spline.f":764 805 {*fop_sf_1}
     (nil))
(insn 580 579 581 33 (set (reg:SF 23 xmm2 [orig:204 _118 ] [204])
        (reg:SF 21 xmm0 [orig:203 _117 ] [203])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 581 580 582 33 (set (reg:SF 21 xmm0 [orig:205 eps.296_119 ] [205])
        (mem/c:SF (symbol_ref:DI ("eps.4319") [flags 0x1c02]  <var_decl 0x14325ce10 eps>) [3 eps+0 S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 582 581 583 33 (set (reg:SF 21 xmm0 [orig:206 _120 ] [206])
        (mult:SF (reg:SF 21 xmm0 [orig:205 eps.296_119 ] [205])
            (reg:SF 23 xmm2 [orig:204 _118 ] [204]))) "../src/spline.f":764 802 {*fop_sf_comm}
     (nil))
(insn 583 582 584 33 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:206 _120 ] [206])
            (reg:SF 22 xmm1 [orig:197 _111 ] [197]))) "../src/spline.f":764 51 {*cmpiusf}
     (nil))
(jump_insn 584 583 588 33 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 613)
            (pc))) "../src/spline.f":764 617 {*jcc_1}
     (nil)
 -> 613)
;;  succ:       34 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 209 210 211 212 213 214 215 216 217 433 434 435 436
(note 588 584 589 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 34 (set (reg:SF 22 xmm1 [orig:207 ds2.297_121 ] [207])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [3 ds2+0 S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 590 589 591 34 (set (reg:V4SF 21 xmm0 [433])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":764 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 591 590 592 34 (parallel [
            (set (reg:SF 22 xmm1 [orig:208 _122 ] [208])
                (abs:SF (reg:SF 22 xmm1 [orig:207 ds2.297_121 ] [207])))
            (use (reg:V4SF 21 xmm0 [433]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":764 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:207 ds2.297_121 ] [207]))
        (nil)))
(insn 592 591 593 34 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":764 81 {*movdi_internal}
     (nil))
(insn 593 592 594 34 (set (reg:SI 0 ax [orig:209 _123 ] [209])
        (mem:SI (reg/f:DI 0 ax [434]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":764 82 {*movsi_internal}
     (nil))
(insn 594 593 595 34 (set (reg:DI 0 ax [orig:210 _124 ] [210])
        (sign_extend:DI (reg:SI 0 ax [orig:209 _123 ] [209]))) "../src/spline.f":764 145 {*extendsidi2_rex64}
     (nil))
(insn 595 594 596 34 (parallel [
            (set (reg:DI 1 dx [orig:211 _125 ] [211])
                (plus:DI (reg:DI 0 ax [orig:210 _124 ] [210])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":764 218 {*adddi_1}
     (nil))
(insn 596 595 597 34 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":764 81 {*movdi_internal}
     (nil))
(insn 597 596 598 34 (set (reg:SF 21 xmm0 [orig:212 _126 ] [212])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:211 _125 ] [211])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [435])) [3 *s2_270(D) S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 598 597 599 34 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":764 81 {*movdi_internal}
     (nil))
(insn 599 598 600 34 (set (reg:SF 23 xmm2 [orig:213 _127 ] [213])
        (mem:SF (reg/f:DI 0 ax [436]) [3 *s2_270(D)+0 S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 600 599 601 34 (set (reg:SF 21 xmm0 [orig:214 _128 ] [214])
        (minus:SF (reg:SF 21 xmm0 [orig:212 _126 ] [212])
            (reg:SF 23 xmm2 [orig:213 _127 ] [213]))) "../src/spline.f":764 805 {*fop_sf_1}
     (nil))
(insn 601 600 602 34 (set (reg:SF 23 xmm2 [orig:215 _129 ] [215])
        (reg:SF 21 xmm0 [orig:214 _128 ] [214])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 602 601 603 34 (set (reg:SF 21 xmm0 [orig:216 eps.298_130 ] [216])
        (mem/c:SF (symbol_ref:DI ("eps.4319") [flags 0x1c02]  <var_decl 0x14325ce10 eps>) [3 eps+0 S4 A32])) "../src/spline.f":764 127 {*movsf_internal}
     (nil))
(insn 603 602 604 34 (set (reg:SF 21 xmm0 [orig:217 _131 ] [217])
        (mult:SF (reg:SF 21 xmm0 [orig:216 eps.298_130 ] [216])
            (reg:SF 23 xmm2 [orig:215 _129 ] [215]))) "../src/spline.f":764 802 {*fop_sf_comm}
     (nil))
(insn 604 603 605 34 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:217 _131 ] [217])
            (reg:SF 22 xmm1 [orig:208 _122 ] [208]))) "../src/spline.f":764 51 {*cmpiusf}
     (nil))
(jump_insn 605 604 609 34 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 613)
            (pc))) "../src/spline.f":764 617 {*jcc_1}
     (nil)
 -> 613)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 236
(note 609 605 610 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 610 609 798 35 (set (reg:QI 0 ax [orig:236 iftmp.294_161 ] [236])
        (const_int 1 [0x1])) "../src/spline.f":764 84 {*movqi_internal}
     (nil))
(jump_insn 798 610 799 35 (set (pc)
        (label_ref 616)) "../src/spline.f":764 649 {jump}
     (nil)
 -> 616)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 236

(barrier 799 798 613)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       33
;;              34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 236
(code_label 613 799 614 36 203 (nil) [2 uses])
(note 614 613 615 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 615 614 616 36 (set (reg:QI 0 ax [orig:236 iftmp.294_161 ] [236])
        (const_int 0 [0])) "../src/spline.f":764 84 {*movqi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 236

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;;              35 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 236
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 236
;; lr  def 	 17 [flags] 218
(code_label 616 615 617 37 206 (nil) [1 uses])
(note 617 616 618 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 618 617 619 37 (set (reg:SI 0 ax [orig:218 iftmp.299_132 ] [218])
        (zero_extend:SI (reg:QI 0 ax [orig:236 iftmp.294_161 ] [236]))) "../src/spline.f":764 136 {*zero_extendqisi2}
     (nil))
(insn 619 618 620 37 (parallel [
            (set (reg:SI 0 ax [orig:218 iftmp.299_132 ] [218])
                (and:SI (reg:SI 0 ax [orig:218 iftmp.299_132 ] [218])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":764 391 {*andsi_1}
     (nil))
(insn 620 619 621 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:218 iftmp.299_132 ] [218])
            (const_int 0 [0]))) "../src/spline.f":764 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 621 620 626 37 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 816)
            (pc))) "../src/spline.f":764 617 {*jcc_1}
     (nil)
 -> 816)
;;  succ:       48
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 45, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 626 621 627 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 627 626 800 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [1 iter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [1 iter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":712 217 {*addsi_1}
     (nil))
(jump_insn 800 627 801 38 (set (pc)
        (label_ref 628)) "../src/spline.f":712 649 {jump}
     (nil)
 -> 628)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 801 800 803)
;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 39, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 803 801 802 45 219 (nil) [1 uses])
(note 802 803 804 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 804 802 631 45 (const_int 0 [0]) "../src/spline.f":767 682 {nop}
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 40, flags: (RTL, MODIFIED)
;;  pred:       45 [100.0%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 437 438 439 440 441 442 443 444
(code_label 631 804 632 39 180 (nil) [0 uses])
(note 632 631 633 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 633 632 634 39 (set (reg/f:DI 0 ax [437])
        (symbol_ref/f:DI ("*lC15") [flags 0x2]  <var_decl 0x143540c60 *lC15>)) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(insn 634 633 635 39 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [12 dt_parm.130.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [437])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(insn 635 634 636 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [1 dt_parm.130.common.line+0 S4 A128])
        (const_int 768 [0x300])) "../src/spline.f":768 82 {*movsi_internal}
     (nil))
(insn 636 635 637 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [1 dt_parm.130.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "../src/spline.f":768 82 {*movsi_internal}
     (nil))
(insn 637 636 638 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -684 [0xfffffffffffffd54])) [1 dt_parm.130.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/spline.f":768 82 {*movsi_internal}
     (nil))
(insn 638 637 639 39 (parallel [
            (set (reg:DI 0 ax [438])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 639 638 640 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [438])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(call_insn 640 639 641 39 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":768 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 641 640 642 39 (parallel [
            (set (reg:DI 0 ax [439])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 642 641 643 39 (set (reg:SI 1 dx)
        (const_int 33 [0x21])) "../src/spline.f":768 82 {*movsi_internal}
     (nil))
(insn 643 642 644 39 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC24") [flags 0x2]  <var_decl 0x143594f30 *lC24>)) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(insn 644 643 645 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [439])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(call_insn 645 644 646 39 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":768 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 646 645 647 39 (parallel [
            (set (reg:DI 2 cx [440])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -200 [0xffffffffffffff38])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 647 646 648 39 (parallel [
            (set (reg:DI 0 ax [441])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 648 647 649 39 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":768 82 {*movsi_internal}
     (nil))
(insn 649 648 650 39 (set (reg:DI 4 si)
        (reg:DI 2 cx [440])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(insn 650 649 651 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [441])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(call_insn 651 650 652 39 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":768 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 652 651 653 39 (parallel [
            (set (reg:DI 2 cx [442])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -204 [0xffffffffffffff34])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 653 652 654 39 (parallel [
            (set (reg:DI 0 ax [443])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 654 653 655 39 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":768 82 {*movsi_internal}
     (nil))
(insn 655 654 656 39 (set (reg:DI 4 si)
        (reg:DI 2 cx [442])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(insn 656 655 657 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [443])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(call_insn 657 656 658 39 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":768 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 658 657 659 39 (parallel [
            (set (reg:DI 0 ax [444])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":768 218 {*adddi_1}
     (nil))
(insn 659 658 660 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [444])) "../src/spline.f":768 81 {*movdi_internal}
     (nil))
(call_insn 660 659 661 39 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/spline.f":768 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 661 660 662 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [9 clip1+0 S4 A32])
            (const_int 0 [0]))) "../src/spline.f":769 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 662 661 663 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 710)
            (pc))) "../src/spline.f":769 617 {*jcc_1}
     (nil)
 -> 710)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 219 220 221 222 223 445 446 447 448 449 450 451 452 453 454 455 456 457
(note 663 662 664 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 664 663 665 40 (set (reg/f:DI 0 ax [445])
        (symbol_ref/f:DI ("*lC15") [flags 0x2]  <var_decl 0x143540c60 *lC15>)) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 665 664 666 40 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [12 dt_parm.131.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [445])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 666 665 667 40 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [1 dt_parm.131.common.line+0 S4 A128])
        (const_int 770 [0x302])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 667 666 668 40 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [1 dt_parm.131.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 668 667 669 40 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -684 [0xfffffffffffffd54])) [1 dt_parm.131.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 669 668 670 40 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 670 669 671 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [446])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 671 670 672 40 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 672 671 673 40 (parallel [
            (set (reg:DI 0 ax [447])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 673 672 674 40 (set (reg:SI 1 dx)
        (const_int 16 [0x10])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 674 673 675 40 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC25") [flags 0x2]  <var_decl 0x1435c3000 *lC25>)) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 675 674 676 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [447])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 676 675 677 40 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 677 676 678 40 (set (reg/f:DI 2 cx [orig:219 _133 ] [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 678 677 679 40 (parallel [
            (set (reg:DI 0 ax [448])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 679 678 680 40 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 680 679 681 40 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:219 _133 ] [219])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 681 680 682 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [448])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 682 681 683 40 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 683 682 684 40 (set (reg/f:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n1+0 S8 A64])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 684 683 685 40 (set (reg:SI 0 ax [orig:220 _134 ] [220])
        (mem:SI (reg/f:DI 0 ax [449]) [1 *n1_171(D)+0 S4 A32])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 685 684 686 40 (set (reg:DI 0 ax [orig:221 _135 ] [221])
        (sign_extend:DI (reg:SI 0 ax [orig:220 _134 ] [220]))) "../src/spline.f":770 145 {*extendsidi2_rex64}
     (nil))
(insn 686 685 687 40 (parallel [
            (set (reg:DI 0 ax [orig:222 _136 ] [222])
                (plus:DI (reg:DI 0 ax [orig:221 _135 ] [221])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 687 686 688 40 (parallel [
            (set (reg:DI 1 dx [450])
                (ashift:DI (reg:DI 0 ax [orig:222 _136 ] [222])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 512 {*ashldi3_1}
     (nil))
(insn 688 687 689 40 (set (reg/f:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s1+0 S8 A64])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 689 688 690 40 (parallel [
            (set (reg/f:DI 2 cx [orig:223 _137 ] [223])
                (plus:DI (reg:DI 1 dx [450])
                    (reg/f:DI 0 ax [451])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [5 s1+0 S8 A64])
            (reg:DI 1 dx [450]))
        (nil)))
(insn 690 689 691 40 (parallel [
            (set (reg:DI 0 ax [452])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 691 690 692 40 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 692 691 693 40 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:223 _137 ] [223])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 693 692 694 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [452])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 694 693 695 40 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 695 694 696 40 (set (reg:DI 2 cx [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [4 ss1+0 S8 A64])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 696 695 697 40 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 697 696 698 40 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 698 697 699 40 (set (reg:DI 4 si)
        (reg:DI 2 cx [453])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 699 698 700 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [454])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 700 699 701 40 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 701 700 702 40 (parallel [
            (set (reg:DI 2 cx [455])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 702 701 703 40 (parallel [
            (set (reg:DI 0 ax [456])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 703 702 704 40 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":770 82 {*movsi_internal}
     (nil))
(insn 704 703 705 40 (set (reg:DI 4 si)
        (reg:DI 2 cx [455])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(insn 705 704 706 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [456])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 706 705 707 40 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 707 706 708 40 (parallel [
            (set (reg:DI 0 ax [457])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":770 218 {*adddi_1}
     (nil))
(insn 708 707 709 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [457])) "../src/spline.f":770 81 {*movdi_internal}
     (nil))
(call_insn 709 708 710 40 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/spline.f":770 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       39
;;              40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 710 709 711 41 210 (nil) [1 uses])
(note 711 710 712 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 712 711 713 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [9 clip2+0 S4 A32])
            (const_int 0 [0]))) "../src/spline.f":771 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 713 712 714 41 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 761)
            (pc))) "../src/spline.f":771 617 {*jcc_1}
     (nil)
 -> 761)
;;  succ:       42 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 224 225 226 227 228 458 459 460 461 462 463 464 465 466 467 468 469 470
(note 714 713 715 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 715 714 716 42 (set (reg/f:DI 0 ax [458])
        (symbol_ref/f:DI ("*lC15") [flags 0x2]  <var_decl 0x143540c60 *lC15>)) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 716 715 717 42 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [12 dt_parm.132.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [458])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 717 716 718 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [1 dt_parm.132.common.line+0 S4 A128])
        (const_int 772 [0x304])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 718 717 719 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [1 dt_parm.132.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 719 718 720 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -684 [0xfffffffffffffd54])) [1 dt_parm.132.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 720 719 721 42 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 721 720 722 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [459])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 722 721 723 42 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 723 722 724 42 (parallel [
            (set (reg:DI 0 ax [460])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 724 723 725 42 (set (reg:SI 1 dx)
        (const_int 16 [0x10])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 725 724 726 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC26") [flags 0x2]  <var_decl 0x1435c3090 *lC26>)) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 726 725 727 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [460])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 727 726 728 42 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 728 727 729 42 (set (reg/f:DI 2 cx [orig:224 _138 ] [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 729 728 730 42 (parallel [
            (set (reg:DI 0 ax [461])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 730 729 731 42 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 731 730 732 42 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:224 _138 ] [224])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 732 731 733 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [461])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 733 732 734 42 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 734 733 735 42 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 80 [0x50])) [6 n2+0 S8 A64])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 735 734 736 42 (set (reg:SI 0 ax [orig:225 _139 ] [225])
        (mem:SI (reg/f:DI 0 ax [462]) [1 *n2_178(D)+0 S4 A32])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 736 735 737 42 (set (reg:DI 0 ax [orig:226 _140 ] [226])
        (sign_extend:DI (reg:SI 0 ax [orig:225 _139 ] [225]))) "../src/spline.f":772 145 {*extendsidi2_rex64}
     (nil))
(insn 737 736 738 42 (parallel [
            (set (reg:DI 0 ax [orig:227 _141 ] [227])
                (plus:DI (reg:DI 0 ax [orig:226 _140 ] [226])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 738 737 739 42 (parallel [
            (set (reg:DI 1 dx [463])
                (ashift:DI (reg:DI 0 ax [orig:227 _141 ] [227])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 512 {*ashldi3_1}
     (nil))
(insn 739 738 740 42 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [5 s2+0 S8 A64])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 740 739 741 42 (parallel [
            (set (reg/f:DI 2 cx [orig:228 _142 ] [228])
                (plus:DI (reg:DI 1 dx [463])
                    (reg/f:DI 0 ax [464])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 56 [0x38])) [5 s2+0 S8 A64])
            (reg:DI 1 dx [463]))
        (nil)))
(insn 741 740 742 42 (parallel [
            (set (reg:DI 0 ax [465])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 742 741 743 42 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 743 742 744 42 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:228 _142 ] [228])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 744 743 745 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [465])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 745 744 746 42 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 746 745 747 42 (set (reg:DI 2 cx [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [4 ss2+0 S8 A64])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 747 746 748 42 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 748 747 749 42 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 749 748 750 42 (set (reg:DI 4 si)
        (reg:DI 2 cx [466])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 750 749 751 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [467])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 751 750 752 42 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 752 751 753 42 (parallel [
            (set (reg:DI 2 cx [468])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -196 [0xffffffffffffff3c])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 753 752 754 42 (parallel [
            (set (reg:DI 0 ax [469])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 754 753 755 42 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "../src/spline.f":772 82 {*movsi_internal}
     (nil))
(insn 755 754 756 42 (set (reg:DI 4 si)
        (reg:DI 2 cx [468])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(insn 756 755 757 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [469])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 757 756 758 42 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x1427d4d00 _gfortran_transfer_real_write>) [0 _gfortran_transfer_real_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 758 757 759 42 (parallel [
            (set (reg:DI 0 ax [470])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -688 [0xfffffffffffffd50])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":772 218 {*adddi_1}
     (nil))
(insn 759 758 760 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [470])) "../src/spline.f":772 81 {*movdi_internal}
     (nil))
(call_insn 760 759 761 42 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/spline.f":772 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 48, flags: (RTL, MODIFIED)
;;  pred:       41
;;              42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 471
(code_label 761 760 762 43 211 (nil) [1 uses])
(note 762 761 763 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 763 762 764 43 (set (reg/f:DI 0 ax [471])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [16 ok+0 S8 A64])) "../src/spline.f":773 81 {*movdi_internal}
     (nil))
(insn 764 763 787 43 (set (mem:SI (reg/f:DI 0 ax [471]) [9 *ok_233(D)+0 S4 A32])
        (const_int 0 [0])) "../src/spline.f":773 82 {*movsi_internal}
     (nil))
(insn 787 764 813 43 (const_int 0 [0]) "../src/spline.f":775 682 {nop}
     (nil))
(jump_insn 813 787 814 43 (set (pc)
        (label_ref 769)) "../src/spline.f":775 649 {jump}
     (nil)
 -> 769)
;;  succ:       44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 814 813 816)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 44, flags: (RTL, MODIFIED)
;;  pred:       37
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 816 814 815 48 222 (nil) [1 uses])
(note 815 816 817 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 817 815 769 48 (const_int 0 [0]) "../src/spline.f":765 682 {nop}
     (nil))
;;  succ:       44 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL, MODIFIED)
;;  pred:       48 [100.0%]  (FALLTHRU)
;;              43
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 769 817 770 44 179 (nil) [1 uses])
(note 770 769 818 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 818 770 0 NOTE_INSN_DELETED)

;; Function nearpt (nearpt_, funcdef_no=17, decl_uid=4429, cgraph_uid=17, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=672, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=624, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 62:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 74:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (2) 0  (3) rm {*movdicc_noc}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 96:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 1 in insn 97:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 98:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 112:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 124:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 144:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 147:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 148:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 151:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 154
	 Choosing alt 1 in insn 154:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 155
	 Choosing alt 1 in insn 155:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 156:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 159:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 1 in insn 164:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 165:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 168:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 1 in insn 172:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 173:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 179:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 1 in insn 180:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 1 in insn 181:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 182:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 183:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 184:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 185:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =Yv  (1) 0  (2) Yvm {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 187:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 189:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 190:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 192:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 193:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) v  (1) vm {movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) Yv  (1) Yv  (2) 0 {*absnegsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 196:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) v  (1) vm {*cmpiusf}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 200:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 206:  (0) r  (1) i {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 207:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 211:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 214:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 216:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 219:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 8
EBB 6
EBB 9
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 229: point = 0, n_alt = -1
  BB 6
   Insn 235: point = 0, n_alt = -1
   Insn 221: point = 0, n_alt = 0
   Insn 220: point = 0, n_alt = -1
   Insn 219: point = 1, n_alt = 3
   Insn 218: point = 2, n_alt = 0
   Insn 217: point = 2, n_alt = -1
   Insn 216: point = 3, n_alt = 4
   Insn 215: point = 3, n_alt = 0
   Insn 214: point = 3, n_alt = 3
   Insn 213: point = 4, n_alt = 0
   Insn 212: point = 4, n_alt = -1
   Insn 211: point = 5, n_alt = 3
   Insn 210: point = 6, n_alt = 1
   Insn 209: point = 6, n_alt = 1
   Insn 208: point = 6, n_alt = 1
   Insn 207: point = 6, n_alt = 5
   Insn 206: point = 7, n_alt = 4
  BB 8
   Insn 234: point = 8, n_alt = -1
  BB 9
   Insn 239: point = 8, n_alt = -1
  BB 4
   Insn 198: point = 8, n_alt = -1
   Insn 197: point = 8, n_alt = 1
   Insn 196: point = 9, n_alt = 7
   Insn 195: point = 10, n_alt = 1
   Insn 194: point = 12, n_alt = 2
   Insn 193: point = 13, n_alt = 7
   Insn 192: point = 14, n_alt = 8
   Insn 191: point = 15, n_alt = 3
   Insn 190: point = 16, n_alt = 1
   Insn 189: point = 18, n_alt = 7
   Insn 188: point = 20, n_alt = 3
   Insn 187: point = 21, n_alt = 8
   Insn 186: point = 22, n_alt = 0
   Insn 185: point = 24, n_alt = 2
   Insn 184: point = 25, n_alt = 2
   Insn 183: point = 27, n_alt = 7
   Insn 182: point = 28, n_alt = 8
   Insn 181: point = 29, n_alt = 1
   Insn 180: point = 31, n_alt = 1
   Insn 179: point = 33, n_alt = 7
   Insn 178: point = 34, n_alt = -1
   Insn 177: point = 36, n_alt = 2
   Insn 176: point = 38, n_alt = 7
   Insn 175: point = 40, n_alt = 3
   Insn 174: point = 41, n_alt = 7
   Insn 173: point = 42, n_alt = 1
   Insn 172: point = 44, n_alt = 1
   Insn 171: point = 46, n_alt = 7
   Insn 170: point = 47, n_alt = -1
   Insn 169: point = 49, n_alt = 2
   Insn 168: point = 51, n_alt = 7
   Insn 167: point = 53, n_alt = 3
   Insn 166: point = 54, n_alt = 7
   Insn 165: point = 55, n_alt = 1
   Insn 164: point = 57, n_alt = 1
   Insn 163: point = 59, n_alt = 7
   Insn 162: point = 60, n_alt = -1
   Insn 161: point = 62, n_alt = 7
   Insn 160: point = 63, n_alt = 1
   Insn 159: point = 65, n_alt = 7
   Insn 158: point = 66, n_alt = -1
   Insn 157: point = 68, n_alt = 7
   Insn 156: point = 69, n_alt = 8
   Insn 155: point = 70, n_alt = 1
   Insn 154: point = 72, n_alt = 1
   Insn 153: point = 74, n_alt = 7
   Insn 152: point = 75, n_alt = -1
   Insn 151: point = 77, n_alt = 2
   Insn 150: point = 79, n_alt = 7
   Insn 149: point = 81, n_alt = 3
   Insn 148: point = 82, n_alt = 7
   Insn 147: point = 83, n_alt = 1
   Insn 146: point = 85, n_alt = 7
   Insn 145: point = 86, n_alt = -1
   Insn 144: point = 88, n_alt = 2
   Insn 143: point = 90, n_alt = 7
   Insn 142: point = 92, n_alt = 3
   Insn 141: point = 93, n_alt = 7
   Insn 140: point = 94, n_alt = 0
   Insn 139: point = 94, n_alt = 0
   Insn 138: point = 94, n_alt = -1
   Insn 137: point = 95, n_alt = -1
   Insn 136: point = 96, n_alt = 3
   Insn 135: point = 96, n_alt = -1
   Insn 134: point = 97, n_alt = -1
   Insn 133: point = 98, n_alt = -1
   Insn 132: point = 99, n_alt = 0
   Insn 131: point = 100, n_alt = 3
   Insn 130: point = 101, n_alt = 0
   Insn 129: point = 102, n_alt = 3
   Insn 128: point = 103, n_alt = 3
   Insn 127: point = 104, n_alt = 3
   Insn 126: point = 105, n_alt = 3
   Insn 125: point = 106, n_alt = 3
   Insn 124: point = 107, n_alt = 3
   Insn 123: point = 108, n_alt = 0
   Insn 122: point = 108, n_alt = 0
   Insn 121: point = 108, n_alt = -1
   Insn 120: point = 109, n_alt = -1
   Insn 119: point = 110, n_alt = -1
   Insn 118: point = 111, n_alt = -1
   Insn 117: point = 112, n_alt = -1
   Insn 116: point = 113, n_alt = -1
   Insn 115: point = 114, n_alt = 0
   Insn 114: point = 115, n_alt = 3
   Insn 113: point = 116, n_alt = 0
   Insn 112: point = 117, n_alt = 3
   Insn 111: point = 118, n_alt = 3
   Insn 110: point = 119, n_alt = 3
   Insn 109: point = 120, n_alt = 3
   Insn 108: point = 121, n_alt = 3
   Insn 107: point = 122, n_alt = 3
   Insn 106: point = 123, n_alt = 3
  BB 3
   Insn 104: point = 124, n_alt = -1
   Insn 103: point = 124, n_alt = 0
   Insn 102: point = 125, n_alt = 0
   Insn 101: point = 126, n_alt = 0
  BB 5
   Insn 230: point = 126, n_alt = -1
   Insn 200: point = 126, n_alt = 1
  BB 2
   Insn 99: point = 126, n_alt = 1
   Insn 98: point = 126, n_alt = 8
   Insn 97: point = 127, n_alt = 1
   Insn 96: point = 129, n_alt = 7
   Insn 95: point = 130, n_alt = -1
   Insn 94: point = 132, n_alt = 2
   Insn 93: point = 134, n_alt = 7
   Insn 92: point = 136, n_alt = 3
   Insn 91: point = 137, n_alt = 7
   Insn 90: point = 139, n_alt = 3
   Insn 89: point = 140, n_alt = 3
   Insn 88: point = 142, n_alt = 0
   Insn 87: point = 144, n_alt = 0
   Insn 86: point = 146, n_alt = 3
   Insn 82: point = 147, n_alt = 2
   Insn 81: point = 148, n_alt = 3
   Insn 80: point = 149, n_alt = -1
   Insn 78: point = 151, n_alt = 1
   Insn 76: point = 153, n_alt = 0
   Insn 77: point = 153, n_alt = 2
   Insn 75: point = 154, n_alt = 3
   Insn 74: point = 155, n_alt = 5
   Insn 73: point = 156, n_alt = 0
   Insn 72: point = 158, n_alt = 0
   Insn 71: point = 160, n_alt = 3
   Insn 67: point = 161, n_alt = 2
   Insn 66: point = 162, n_alt = 3
   Insn 65: point = 163, n_alt = -1
   Insn 63: point = 165, n_alt = 1
   Insn 61: point = 167, n_alt = 0
   Insn 62: point = 167, n_alt = 2
   Insn 60: point = 168, n_alt = 3
   Insn 59: point = 169, n_alt = 5
   Insn 58: point = 170, n_alt = 0
   Insn 57: point = 172, n_alt = 0
   Insn 56: point = 174, n_alt = 3
   Insn 52: point = 175, n_alt = 2
   Insn 51: point = 176, n_alt = 3
   Insn 50: point = 177, n_alt = -1
   Insn 48: point = 179, n_alt = 1
   Insn 46: point = 181, n_alt = 0
   Insn 47: point = 181, n_alt = 2
   Insn 45: point = 182, n_alt = 3
   Insn 44: point = 183, n_alt = 5
   Insn 43: point = 184, n_alt = 0
   Insn 42: point = 186, n_alt = 0
   Insn 41: point = 188, n_alt = 3
   Insn 37: point = 189, n_alt = 5
   Insn 36: point = 190, n_alt = 5
   Insn 35: point = 191, n_alt = -1
   Insn 33: point = 193, n_alt = 1
   Insn 31: point = 195, n_alt = 0
   Insn 32: point = 195, n_alt = 2
   Insn 30: point = 196, n_alt = 3
   Insn 29: point = 197, n_alt = 5
   Insn 28: point = 198, n_alt = 0
   Insn 27: point = 200, n_alt = 0
   Insn 26: point = 202, n_alt = 3
   Insn 22: point = 203, n_alt = 5
   Insn 21: point = 204, n_alt = 5
   Insn 20: point = 205, n_alt = -1
   Insn 18: point = 207, n_alt = 1
   Insn 16: point = 209, n_alt = 0
   Insn 17: point = 209, n_alt = 2
   Insn 15: point = 210, n_alt = 3
   Insn 14: point = 211, n_alt = 5
   Insn 13: point = 212, n_alt = 0
   Insn 12: point = 214, n_alt = 0
   Insn 11: point = 216, n_alt = 3
   Insn 7: point = 217, n_alt = 5
   Insn 6: point = 217, n_alt = 5
   Insn 5: point = 217, n_alt = 5
   Insn 4: point = 217, n_alt = 5
   Insn 3: point = 217, n_alt = 5
   Insn 2: point = 217, n_alt = 5
 r87: [213..214]
 r88: [204..205]
 r89: [203..217]
 r91: [199..200]
 r92: [190..191]
 r93: [189..217]
 r95: [185..186]
 r96: [176..177]
 r97: [175..217]
 r99: [171..172]
 r100: [162..163]
 r101: [161..217]
 r103: [157..158]
 r104: [148..149]
 r105: [147..217]
 r107: [143..144]
 r108: [141..142]
 r109: [138..140]
 r110: [133..137]
 r111: [133..134]
 r112: [131..132]
 r113: [128..130]
 r114: [89..93]
 r115: [89..90]
 r116: [87..88]
 r117: [84..86]
 r118: [84..85]
 r119: [71..83]
 r120: [78..82]
 r121: [78..79]
 r122: [76..77]
 r123: [73..75]
 r124: [73..74]
 r125: [71..72]
 r126: [67..68]
 r127: [64..66]
 r128: [64..65]
 r129: [56..63]
 r130: [61..62]
 r131: [58..60]
 r132: [58..59]
 r133: [56..57]
 r134: [43..55]
 r135: [50..54]
 r136: [50..51]
 r137: [48..49]
 r138: [45..47]
 r139: [45..46]
 r140: [43..44]
 r141: [30..42]
 r142: [37..41]
 r143: [37..38]
 r144: [35..36]
 r145: [32..34]
 r146: [32..33]
 r147: [30..31]
 r148: [23..25]
 r149: [17..18]
 r150: [14..16]
 r151: [8..10]
 r152: [208..210]
 r153: [206..207]
 r157: [194..196]
 r158: [192..193]
 r162: [180..182]
 r163: [178..179]
 r167: [166..168]
 r168: [164..165]
 r172: [152..154]
 r173: [150..151]
 r177: [124..125]
 r178: [215..216]
 r179: [211..212]
 r180: [208..209]
 r181: [201..202]
 r182: [197..198]
 r183: [194..195]
 r184: [187..188]
 r185: [183..184]
 r186: [180..181]
 r187: [173..174]
 r188: [169..170]
 r189: [166..167]
 r190: [159..160]
 r191: [155..156]
 r192: [152..153]
 r193: [145..146]
 r194: [138..139]
 r195: [135..136]
 r196: [126..127]
 r197: [128..129]
 r198: [113..123]
 r199: [112..122]
 r200: [111..121]
 r201: [110..120]
 r202: [109..119]
 r203: [108..118]
 r204: [116..117]
 r205: [114..115]
 r206: [98..107]
 r207: [97..106]
 r208: [96..105]
 r209: [95..104]
 r210: [94..103]
 r211: [101..102]
 r212: [99..100]
 r213: [91..92]
 r214: [80..81]
 r215: [69..70]
 r216: [52..53]
 r217: [39..40]
 r218: [28..29]
 r219: [26..27]
 r220: [21..22]
 r221: [23..24]
 r222: [19..20]
 r223: [14..15]
 r224: [11..13]
 r225: [11..12]
 r226: [8..9]
 r227: [6..7]
 r228: [4..5]
 r229: [2..3]
 r230: [0..1]
Compressing live ranges: from 218 to 164 - 75%
Ranges after the compression:
 r87: [160..161]
 r88: [152..153]
 r89: [152..163]
 r91: [148..149]
 r92: [140..141]
 r93: [140..163]
 r95: [136..137]
 r96: [128..129]
 r97: [128..163]
 r99: [124..125]
 r100: [116..117]
 r101: [116..163]
 r103: [112..113]
 r104: [104..105]
 r105: [104..163]
 r107: [100..101]
 r108: [98..99]
 r109: [96..97]
 r110: [92..95]
 r111: [92..93]
 r112: [90..91]
 r113: [88..89]
 r114: [72..75]
 r115: [72..73]
 r116: [70..71]
 r117: [68..69]
 r118: [68..69]
 r119: [58..67]
 r120: [64..67]
 r121: [64..65]
 r122: [62..63]
 r123: [60..61]
 r124: [60..61]
 r125: [58..59]
 r126: [54..55]
 r127: [52..53]
 r128: [52..53]
 r129: [46..51]
 r130: [50..51]
 r131: [48..49]
 r132: [48..49]
 r133: [46..47]
 r134: [36..45]
 r135: [42..45]
 r136: [42..43]
 r137: [40..41]
 r138: [38..39]
 r139: [38..39]
 r140: [36..37]
 r141: [26..35]
 r142: [32..35]
 r143: [32..33]
 r144: [30..31]
 r145: [28..29]
 r146: [28..29]
 r147: [26..27]
 r148: [20..21]
 r149: [14..15]
 r150: [12..13]
 r151: [8..9]
 r152: [156..157]
 r153: [154..155]
 r157: [144..145]
 r158: [142..143]
 r162: [132..133]
 r163: [130..131]
 r167: [120..121]
 r168: [118..119]
 r172: [108..109]
 r173: [106..107]
 r177: [84..85]
 r178: [162..163]
 r179: [158..159]
 r180: [156..157]
 r181: [150..151]
 r182: [146..147]
 r183: [144..145]
 r184: [138..139]
 r185: [134..135]
 r186: [132..133]
 r187: [126..127]
 r188: [122..123]
 r189: [120..121]
 r190: [114..115]
 r191: [110..111]
 r192: [108..109]
 r193: [102..103]
 r194: [96..97]
 r195: [94..95]
 r196: [86..87]
 r197: [88..89]
 r198: [80..83]
 r199: [80..83]
 r200: [80..83]
 r201: [80..83]
 r202: [80..83]
 r203: [80..83]
 r204: [82..83]
 r205: [80..81]
 r206: [76..79]
 r207: [76..79]
 r208: [76..79]
 r209: [76..79]
 r210: [76..79]
 r211: [78..79]
 r212: [76..77]
 r213: [74..75]
 r214: [66..67]
 r215: [56..57]
 r216: [44..45]
 r217: [34..35]
 r218: [24..25]
 r219: [22..23]
 r220: [18..19]
 r221: [20..21]
 r222: [16..17]
 r223: [12..13]
 r224: [10..11]
 r225: [10..11]
 r226: [8..9]
 r227: [6..7]
 r228: [4..5]
 r229: [2..3]
 r230: [0..1]

********** Assignment #1: **********

  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 89
  Slot 1 regnos (width = 0):	 93
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #22
Changing spilled pseudos to memory in insn #36
Changing spilled pseudos to memory in insn #37
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 8
EBB 6
EBB 9
EBB 7

********** Pseudo live ranges #2: **********

  BB 7
   Insn 229: point = 0, n_alt = -1
  BB 6
   Insn 235: point = 0, n_alt = -1
   Insn 221: point = 0, n_alt = 0
   Insn 220: point = 0, n_alt = -1
   Insn 219: point = 1, n_alt = 3
   Insn 218: point = 2, n_alt = 0
   Insn 217: point = 2, n_alt = -1
   Insn 216: point = 3, n_alt = 4
   Insn 215: point = 3, n_alt = 0
   Insn 214: point = 3, n_alt = 3
   Insn 213: point = 4, n_alt = 0
   Insn 212: point = 4, n_alt = -1
   Insn 211: point = 5, n_alt = 3
   Insn 210: point = 6, n_alt = 1
   Insn 209: point = 6, n_alt = 1
   Insn 208: point = 6, n_alt = 1
   Insn 207: point = 6, n_alt = 5
   Insn 206: point = 7, n_alt = 4
  BB 8
   Insn 234: point = 8, n_alt = -1
  BB 9
   Insn 239: point = 8, n_alt = -1
  BB 4
   Insn 198: point = 8, n_alt = -1
   Insn 197: point = 8, n_alt = 1
   Insn 196: point = 9, n_alt = 7
   Insn 195: point = 10, n_alt = 1
   Insn 194: point = 12, n_alt = 2
   Insn 193: point = 13, n_alt = 7
   Insn 192: point = 14, n_alt = 8
   Insn 191: point = 15, n_alt = 3
   Insn 190: point = 16, n_alt = 1
   Insn 189: point = 18, n_alt = 7
   Insn 188: point = 20, n_alt = 3
   Insn 187: point = 21, n_alt = 8
   Insn 186: point = 22, n_alt = 0
   Insn 185: point = 24, n_alt = 2
   Insn 184: point = 25, n_alt = 2
   Insn 183: point = 27, n_alt = 7
   Insn 182: point = 28, n_alt = 8
   Insn 181: point = 29, n_alt = 1
   Insn 180: point = 31, n_alt = 1
   Insn 179: point = 33, n_alt = 7
   Insn 178: point = 34, n_alt = -1
   Insn 177: point = 36, n_alt = 2
   Insn 176: point = 38, n_alt = 7
   Insn 175: point = 40, n_alt = 3
   Insn 174: point = 41, n_alt = 7
   Insn 173: point = 42, n_alt = 1
   Insn 172: point = 44, n_alt = 1
   Insn 171: point = 46, n_alt = 7
   Insn 170: point = 47, n_alt = -1
   Insn 169: point = 49, n_alt = 2
   Insn 168: point = 51, n_alt = 7
   Insn 167: point = 53, n_alt = 3
   Insn 166: point = 54, n_alt = 7
   Insn 165: point = 55, n_alt = 1
   Insn 164: point = 57, n_alt = 1
   Insn 163: point = 59, n_alt = 7
   Insn 162: point = 60, n_alt = -1
   Insn 161: point = 62, n_alt = 7
   Insn 160: point = 63, n_alt = 1
   Insn 159: point = 65, n_alt = 7
   Insn 158: point = 66, n_alt = -1
   Insn 157: point = 68, n_alt = 7
   Insn 156: point = 69, n_alt = 8
   Insn 155: point = 70, n_alt = 1
   Insn 154: point = 72, n_alt = 1
   Insn 153: point = 74, n_alt = 7
   Insn 152: point = 75, n_alt = -1
   Insn 151: point = 77, n_alt = 2
   Insn 150: point = 79, n_alt = 7
   Insn 149: point = 81, n_alt = 3
   Insn 148: point = 82, n_alt = 7
   Insn 147: point = 83, n_alt = 1
   Insn 146: point = 85, n_alt = 7
   Insn 145: point = 86, n_alt = -1
   Insn 144: point = 88, n_alt = 2
   Insn 143: point = 90, n_alt = 7
   Insn 142: point = 92, n_alt = 3
   Insn 141: point = 93, n_alt = 7
   Insn 140: point = 94, n_alt = 0
   Insn 139: point = 94, n_alt = 0
   Insn 138: point = 94, n_alt = -1
   Insn 137: point = 95, n_alt = -1
   Insn 136: point = 96, n_alt = 3
   Insn 135: point = 96, n_alt = -1
   Insn 134: point = 97, n_alt = -1
   Insn 133: point = 98, n_alt = -1
   Insn 132: point = 99, n_alt = 0
   Insn 131: point = 100, n_alt = 3
   Insn 130: point = 101, n_alt = 0
   Insn 129: point = 102, n_alt = 3
   Insn 128: point = 103, n_alt = 3
   Insn 127: point = 104, n_alt = 3
   Insn 126: point = 105, n_alt = 3
   Insn 125: point = 106, n_alt = 3
   Insn 124: point = 107, n_alt = 3
   Insn 123: point = 108, n_alt = 0
   Insn 122: point = 108, n_alt = 0
   Insn 121: point = 108, n_alt = -1
   Insn 120: point = 109, n_alt = -1
   Insn 119: point = 110, n_alt = -1
   Insn 118: point = 111, n_alt = -1
   Insn 117: point = 112, n_alt = -1
   Insn 116: point = 113, n_alt = -1
   Insn 115: point = 114, n_alt = 0
   Insn 114: point = 115, n_alt = 3
   Insn 113: point = 116, n_alt = 0
   Insn 112: point = 117, n_alt = 3
   Insn 111: point = 118, n_alt = 3
   Insn 110: point = 119, n_alt = 3
   Insn 109: point = 120, n_alt = 3
   Insn 108: point = 121, n_alt = 3
   Insn 107: point = 122, n_alt = 3
   Insn 106: point = 123, n_alt = 3
  BB 3
   Insn 104: point = 124, n_alt = -1
   Insn 103: point = 124, n_alt = 0
   Insn 102: point = 125, n_alt = 0
   Insn 101: point = 126, n_alt = 0
  BB 5
   Insn 230: point = 126, n_alt = -1
   Insn 200: point = 126, n_alt = 1
  BB 2
   Insn 99: point = 126, n_alt = 1
   Insn 98: point = 126, n_alt = 8
   Insn 97: point = 127, n_alt = 1
   Insn 96: point = 129, n_alt = 7
   Insn 95: point = 130, n_alt = -1
   Insn 94: point = 132, n_alt = 2
   Insn 93: point = 134, n_alt = 7
   Insn 92: point = 136, n_alt = 3
   Insn 91: point = 137, n_alt = 7
   Insn 90: point = 139, n_alt = 3
   Insn 89: point = 140, n_alt = 3
   Insn 88: point = 142, n_alt = 0
   Insn 87: point = 144, n_alt = 0
   Insn 86: point = 146, n_alt = 3
   Insn 82: point = 147, n_alt = 2
   Insn 81: point = 148, n_alt = 3
   Insn 80: point = 149, n_alt = -1
   Insn 78: point = 151, n_alt = 1
   Insn 76: point = 153, n_alt = 0
   Insn 77: point = 153, n_alt = 2
   Insn 75: point = 154, n_alt = 3
   Insn 74: point = 155, n_alt = 5
   Insn 73: point = 156, n_alt = 0
   Insn 72: point = 158, n_alt = 0
   Insn 71: point = 160, n_alt = 3
   Insn 67: point = 161, n_alt = 2
   Insn 66: point = 162, n_alt = 3
   Insn 65: point = 163, n_alt = -1
   Insn 63: point = 165, n_alt = 1
   Insn 61: point = 167, n_alt = 0
   Insn 62: point = 167, n_alt = 2
   Insn 60: point = 168, n_alt = 3
   Insn 59: point = 169, n_alt = 5
   Insn 58: point = 170, n_alt = 0
   Insn 57: point = 172, n_alt = 0
   Insn 56: point = 174, n_alt = 3
   Insn 52: point = 175, n_alt = 2
   Insn 51: point = 176, n_alt = 3
   Insn 50: point = 177, n_alt = -1
   Insn 48: point = 179, n_alt = 1
   Insn 46: point = 181, n_alt = 0
   Insn 47: point = 181, n_alt = 2
   Insn 45: point = 182, n_alt = 3
   Insn 44: point = 183, n_alt = 5
   Insn 43: point = 184, n_alt = 0
   Insn 42: point = 186, n_alt = 0
   Insn 41: point = 188, n_alt = 3
   Insn 37: point = 189, n_alt = 5
   Insn 36: point = 189, n_alt = 5
   Insn 35: point = 190, n_alt = -1
   Insn 33: point = 192, n_alt = 1
   Insn 31: point = 194, n_alt = 0
   Insn 32: point = 194, n_alt = 2
   Insn 30: point = 195, n_alt = 3
   Insn 29: point = 196, n_alt = 5
   Insn 28: point = 197, n_alt = 0
   Insn 27: point = 199, n_alt = 0
   Insn 26: point = 201, n_alt = 3
   Insn 22: point = 202, n_alt = 5
   Insn 21: point = 202, n_alt = 5
   Insn 20: point = 203, n_alt = -1
   Insn 18: point = 205, n_alt = 1
   Insn 16: point = 207, n_alt = 0
   Insn 17: point = 207, n_alt = 2
   Insn 15: point = 208, n_alt = 3
   Insn 14: point = 209, n_alt = 5
   Insn 13: point = 210, n_alt = 0
   Insn 12: point = 212, n_alt = 0
   Insn 11: point = 214, n_alt = 3
   Insn 7: point = 215, n_alt = 5
   Insn 6: point = 215, n_alt = 5
   Insn 5: point = 215, n_alt = 5
   Insn 4: point = 215, n_alt = 5
   Insn 3: point = 215, n_alt = 5
   Insn 2: point = 215, n_alt = 5
 r87: [211..212]
 r88: [202..203]
 r91: [198..199]
 r92: [189..190]
 r95: [185..186]
 r96: [176..177]
 r97: [175..215]
 r99: [171..172]
 r100: [162..163]
 r101: [161..215]
 r103: [157..158]
 r104: [148..149]
 r105: [147..215]
 r107: [143..144]
 r108: [141..142]
 r109: [138..140]
 r110: [133..137]
 r111: [133..134]
 r112: [131..132]
 r113: [128..130]
 r114: [89..93]
 r115: [89..90]
 r116: [87..88]
 r117: [84..86]
 r118: [84..85]
 r119: [71..83]
 r120: [78..82]
 r121: [78..79]
 r122: [76..77]
 r123: [73..75]
 r124: [73..74]
 r125: [71..72]
 r126: [67..68]
 r127: [64..66]
 r128: [64..65]
 r129: [56..63]
 r130: [61..62]
 r131: [58..60]
 r132: [58..59]
 r133: [56..57]
 r134: [43..55]
 r135: [50..54]
 r136: [50..51]
 r137: [48..49]
 r138: [45..47]
 r139: [45..46]
 r140: [43..44]
 r141: [30..42]
 r142: [37..41]
 r143: [37..38]
 r144: [35..36]
 r145: [32..34]
 r146: [32..33]
 r147: [30..31]
 r148: [23..25]
 r149: [17..18]
 r150: [14..16]
 r151: [8..10]
 r152: [206..208]
 r153: [204..205]
 r157: [193..195]
 r158: [191..192]
 r162: [180..182]
 r163: [178..179]
 r167: [166..168]
 r168: [164..165]
 r172: [152..154]
 r173: [150..151]
 r177: [124..125]
 r178: [213..214]
 r179: [209..210]
 r180: [206..207]
 r181: [200..201]
 r182: [196..197]
 r183: [193..194]
 r184: [187..188]
 r185: [183..184]
 r186: [180..181]
 r187: [173..174]
 r188: [169..170]
 r189: [166..167]
 r190: [159..160]
 r191: [155..156]
 r192: [152..153]
 r193: [145..146]
 r194: [138..139]
 r195: [135..136]
 r196: [126..127]
 r197: [128..129]
 r198: [113..123]
 r199: [112..122]
 r200: [111..121]
 r201: [110..120]
 r202: [109..119]
 r203: [108..118]
 r204: [116..117]
 r205: [114..115]
 r206: [98..107]
 r207: [97..106]
 r208: [96..105]
 r209: [95..104]
 r210: [94..103]
 r211: [101..102]
 r212: [99..100]
 r213: [91..92]
 r214: [80..81]
 r215: [69..70]
 r216: [52..53]
 r217: [39..40]
 r218: [28..29]
 r219: [26..27]
 r220: [21..22]
 r221: [23..24]
 r222: [19..20]
 r223: [14..15]
 r224: [11..13]
 r225: [11..12]
 r226: [8..9]
 r227: [6..7]
 r228: [4..5]
 r229: [2..3]
 r230: [0..1]
Compressing live ranges: from 216 to 164 - 75%
Ranges after the compression:
 r87: [160..161]
 r88: [152..153]
 r91: [148..149]
 r92: [140..141]
 r95: [136..137]
 r96: [128..129]
 r97: [128..163]
 r99: [124..125]
 r100: [116..117]
 r101: [116..163]
 r103: [112..113]
 r104: [104..105]
 r105: [104..163]
 r107: [100..101]
 r108: [98..99]
 r109: [96..97]
 r110: [92..95]
 r111: [92..93]
 r112: [90..91]
 r113: [88..89]
 r114: [72..75]
 r115: [72..73]
 r116: [70..71]
 r117: [68..69]
 r118: [68..69]
 r119: [58..67]
 r120: [64..67]
 r121: [64..65]
 r122: [62..63]
 r123: [60..61]
 r124: [60..61]
 r125: [58..59]
 r126: [54..55]
 r127: [52..53]
 r128: [52..53]
 r129: [46..51]
 r130: [50..51]
 r131: [48..49]
 r132: [48..49]
 r133: [46..47]
 r134: [36..45]
 r135: [42..45]
 r136: [42..43]
 r137: [40..41]
 r138: [38..39]
 r139: [38..39]
 r140: [36..37]
 r141: [26..35]
 r142: [32..35]
 r143: [32..33]
 r144: [30..31]
 r145: [28..29]
 r146: [28..29]
 r147: [26..27]
 r148: [20..21]
 r149: [14..15]
 r150: [12..13]
 r151: [8..9]
 r152: [156..157]
 r153: [154..155]
 r157: [144..145]
 r158: [142..143]
 r162: [132..133]
 r163: [130..131]
 r167: [120..121]
 r168: [118..119]
 r172: [108..109]
 r173: [106..107]
 r177: [84..85]
 r178: [162..163]
 r179: [158..159]
 r180: [156..157]
 r181: [150..151]
 r182: [146..147]
 r183: [144..145]
 r184: [138..139]
 r185: [134..135]
 r186: [132..133]
 r187: [126..127]
 r188: [122..123]
 r189: [120..121]
 r190: [114..115]
 r191: [110..111]
 r192: [108..109]
 r193: [102..103]
 r194: [96..97]
 r195: [94..95]
 r196: [86..87]
 r197: [88..89]
 r198: [80..83]
 r199: [80..83]
 r200: [80..83]
 r201: [80..83]
 r202: [80..83]
 r203: [80..83]
 r204: [82..83]
 r205: [80..81]
 r206: [76..79]
 r207: [76..79]
 r208: [76..79]
 r209: [76..79]
 r210: [76..79]
 r211: [78..79]
 r212: [76..77]
 r213: [74..75]
 r214: [66..67]
 r215: [56..57]
 r216: [44..45]
 r217: [34..35]
 r218: [24..25]
 r219: [22..23]
 r220: [18..19]
 r221: [20..21]
 r222: [16..17]
 r223: [12..13]
 r224: [10..11]
 r225: [10..11]
 r226: [8..9]
 r227: [6..7]
 r228: [4..5]
 r229: [2..3]
 r230: [0..1]

********** Assignment #2: **********


********** Undoing inheritance #2: **********


********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=704, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=656, prev_offset=0)
Can eliminate 20 to 6 (offset=-32, prev_offset=-32)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 20
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 51
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 66
changing reg in insn 72
changing reg in insn 73
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 81
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 94
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 141
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 147
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 151
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 160
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 165
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 173
changing reg in insn 166
changing reg in insn 169
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 184
changing reg in insn 186
changing reg in insn 186
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 195
changing reg in insn 197
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 60
changing reg in insn 63
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 75
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 80
changing reg in insn 102
changing reg in insn 103
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 96
changing reg in insn 106
changing reg in insn 116
changing reg in insn 107
changing reg in insn 117
changing reg in insn 108
changing reg in insn 118
changing reg in insn 109
changing reg in insn 119
changing reg in insn 110
changing reg in insn 120
changing reg in insn 111
changing reg in insn 121
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 124
changing reg in insn 133
changing reg in insn 125
changing reg in insn 134
changing reg in insn 126
changing reg in insn 135
changing reg in insn 127
changing reg in insn 137
changing reg in insn 128
changing reg in insn 138
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 142
changing reg in insn 143
changing reg in insn 149
changing reg in insn 150
changing reg in insn 155
changing reg in insn 156
changing reg in insn 167
changing reg in insn 168
changing reg in insn 175
changing reg in insn 176
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 195
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 206
changing reg in insn 207
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 217
changing reg in insn 219
changing reg in insn 220
deleting insn with uid = 20.
deleting insn with uid = 35.
deleting insn with uid = 50.
deleting insn with uid = 65.
deleting insn with uid = 80.
deleting insn with uid = 116.
deleting insn with uid = 117.
deleting insn with uid = 118.
deleting insn with uid = 119.
deleting insn with uid = 120.
deleting insn with uid = 137.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 221.


nearpt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 21 [xmm0] 22 [xmm1] 23 [xmm2] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  ref usage 	r0={49d,48u} r1={16d,11u} r2={10d,5u} r4={9d,4u} r5={14d,9u} r6={1d,91u} r7={7d,22u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={28d,8u} r18={5d} r19={5d} r20={1d,1u} r21={39d,33u,1e} r22={18d,12u,1e} r23={13d,7u} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={9d,4u} r38={8d,3u} r39={6d} r40={6d} r41={1d} r42={1d} r43={1d} r44={1d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 798{538d,258u,2e} in 183{178 regular + 5 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 97 101 105
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9] 89 93 97 101 105
;; lr  def 	 17 [flags] 87 88 91 92 95 96 99 100 103 104 107 108 109 110 111 112 113 152 153 157 158 162 163 167 168 172 173 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [4 xpnt+0 S8 A64])
        (reg:DI 5 di [ xpnt ])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [4 ypnt+0 S8 A64])
        (reg:DI 4 si [ ypnt ])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [4 snear+0 S8 A64])
        (reg:DI 1 dx [ snear ])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [5 x+0 S8 A64])
        (reg:DI 2 cx [ x ])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -648 [0xfffffffffffffd78])) [5 xp+0 S8 A64])
        (reg:DI 37 r8 [ xp ])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [5 y+0 S8 A64])
        (reg:DI 38 r9 [ y ])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [178]) [1 *n_70(D)+0 S4 A32])) "../src/spline.f":782 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [179])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _1 ] [87]))) "../src/spline.f":782 145 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.133+0 S8 A64])
        (reg:DI 0 ax [179])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 0 ax [orig:152 size.134_72 ] [152])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 ubound.133+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 17 15 16 2 (set (reg:DI 1 dx [180])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 16 17 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:152 size.134_72 ] [152])
            (const_int 0 [0]))) "../src/spline.f":782 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 16 21 2 (set (reg:DI 0 ax [orig:153 size.134_73 ] [153])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:152 size.134_72 ] [152])
            (reg:DI 1 dx [180]))) "../src/spline.f":782 967 {*movdicc_noc}
     (nil))
(insn 21 18 22 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [8 %sfp+-640 S8 A128])
        (reg:DI 0 ax [orig:88 size.300_2 ] [88])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 22 21 26 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -664 [0xfffffffffffffd68])) [8 %sfp+-632 S8 A64])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 26 22 27 2 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (reg/f:DI 0 ax [181]) [1 *n_70(D)+0 S4 A32])) "../src/spline.f":782 82 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [182])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "../src/spline.f":782 145 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.135+0 S8 A64])
        (reg:DI 0 ax [182])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 30 29 32 2 (set (reg:DI 0 ax [orig:157 size.136_78 ] [157])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 ubound.135+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 32 30 31 2 (set (reg:DI 1 dx [183])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 31 32 33 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:157 size.136_78 ] [157])
            (const_int 0 [0]))) "../src/spline.f":782 4 {*cmpdi_ccno_1}
     (nil))
(insn 33 31 36 2 (set (reg:DI 0 ax [orig:158 size.136_79 ] [158])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:157 size.136_78 ] [157])
            (reg:DI 1 dx [183]))) "../src/spline.f":782 967 {*movdicc_noc}
     (nil))
(insn 36 33 37 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [8 %sfp+-656 S8 A128])
        (reg:DI 0 ax [orig:92 size.302_6 ] [92])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 37 36 41 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [8 %sfp+-648 S8 A64])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 41 37 42 2 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (reg/f:DI 0 ax [184]) [1 *n_70(D)+0 S4 A32])) "../src/spline.f":782 82 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 0 ax [185])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "../src/spline.f":782 145 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.137+0 S8 A64])
        (reg:DI 0 ax [185])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:DI 0 ax [orig:162 size.138_84 ] [162])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 ubound.137+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 47 45 46 2 (set (reg:DI 1 dx [186])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 46 47 48 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:162 size.138_84 ] [162])
            (const_int 0 [0]))) "../src/spline.f":782 4 {*cmpdi_ccno_1}
     (nil))
(insn 48 46 51 2 (set (reg:DI 0 ax [orig:163 size.138_85 ] [163])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:162 size.138_84 ] [162])
            (reg:DI 1 dx [186]))) "../src/spline.f":782 967 {*movdicc_noc}
     (nil))
(insn 51 48 52 2 (set (reg:DI 43 r14 [orig:97 _11 ] [97])
        (reg:DI 0 ax [orig:96 size.304_10 ] [96])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 52 51 56 2 (set (reg:DI 44 r15 [ _11+8 ])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 56 52 57 2 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [187]) [1 *n_70(D)+0 S4 A32])) "../src/spline.f":782 82 {*movsi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:DI 0 ax [188])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "../src/spline.f":782 145 {*extendsidi2_rex64}
     (nil))
(insn 59 58 60 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.139+0 S8 A64])
        (reg:DI 0 ax [188])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 60 59 62 2 (set (reg:DI 0 ax [orig:167 size.140_90 ] [167])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [2 ubound.139+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 62 60 61 2 (set (reg:DI 1 dx [189])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 61 62 63 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:167 size.140_90 ] [167])
            (const_int 0 [0]))) "../src/spline.f":782 4 {*cmpdi_ccno_1}
     (nil))
(insn 63 61 66 2 (set (reg:DI 0 ax [orig:168 size.140_91 ] [168])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:167 size.140_90 ] [167])
            (reg:DI 1 dx [189]))) "../src/spline.f":782 967 {*movdicc_noc}
     (nil))
(insn 66 63 67 2 (set (reg:DI 41 r12 [orig:101 _15 ] [101])
        (reg:DI 0 ax [orig:100 size.306_14 ] [100])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 67 66 71 2 (set (reg:DI 42 r13 [ _15+8 ])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 71 67 72 2 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (reg/f:DI 0 ax [190]) [1 *n_70(D)+0 S4 A32])) "../src/spline.f":782 82 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:DI 0 ax [191])
        (sign_extend:DI (reg:SI 0 ax [orig:103 _17 ] [103]))) "../src/spline.f":782 145 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.141+0 S8 A64])
        (reg:DI 0 ax [191])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 75 74 77 2 (set (reg:DI 0 ax [orig:172 size.142_96 ] [172])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 ubound.141+0 S8 A64])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 77 75 76 2 (set (reg:DI 1 dx [192])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 76 77 78 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:172 size.142_96 ] [172])
            (const_int 0 [0]))) "../src/spline.f":782 4 {*cmpdi_ccno_1}
     (nil))
(insn 78 76 81 2 (set (reg:DI 0 ax [orig:173 size.142_97 ] [173])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:172 size.142_96 ] [172])
            (reg:DI 1 dx [192]))) "../src/spline.f":782 967 {*movdicc_noc}
     (nil))
(insn 81 78 82 2 (set (reg:DI 39 r10 [orig:105 _19 ] [105])
        (reg:DI 0 ax [orig:104 size.308_18 ] [104])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 82 81 86 2 (set (reg:DI 40 r11 [ _19+8 ])
        (const_int 0 [0])) "../src/spline.f":782 81 {*movdi_internal}
     (nil))
(insn 86 82 87 2 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":795 81 {*movdi_internal}
     (nil))
(insn 87 86 88 2 (set (reg:SI 0 ax [orig:107 _21 ] [107])
        (mem:SI (reg/f:DI 0 ax [193]) [1 *n_70(D)+0 S4 A32])) "../src/spline.f":795 82 {*movsi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:DI 0 ax [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 0 ax [orig:107 _21 ] [107]))) "../src/spline.f":795 145 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg:DI 1 dx [orig:109 _23 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 _22 ] [108])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":795 218 {*adddi_1}
     (nil))
(insn 90 89 91 2 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s+0 S8 A64])) "../src/spline.f":795 81 {*movdi_internal}
     (nil))
(insn 91 90 92 2 (set (reg:SF 21 xmm0 [orig:110 _24 ] [110])
        (mem:SF (plus:DI (mult:DI (reg:DI 1 dx [orig:109 _23 ] [109])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [194])) [3 *s_101(D) S4 A32])) "../src/spline.f":795 127 {*movsf_internal}
     (nil))
(insn 92 91 93 2 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s+0 S8 A64])) "../src/spline.f":795 81 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (set (reg:SF 22 xmm1 [orig:111 _25 ] [111])
        (mem:SF (reg/f:DI 0 ax [195]) [3 *s_101(D)+0 S4 A32])) "../src/spline.f":795 127 {*movsf_internal}
     (nil))
(insn 94 93 95 2 (set (reg:SF 21 xmm0 [orig:112 _26 ] [112])
        (minus:SF (reg:SF 21 xmm0 [orig:110 _24 ] [110])
            (reg:SF 22 xmm1 [orig:111 _25 ] [111]))) "../src/spline.f":795 805 {*fop_sf_1}
     (nil))
(insn 95 94 96 2 (set (reg:SF 22 xmm1 [orig:113 _27 ] [113])
        (reg:SF 21 xmm0 [orig:112 _26 ] [112])) "../src/spline.f":795 127 {*movsf_internal}
     (nil))
(insn 96 95 97 2 (set (reg:SF 21 xmm0 [197])
        (mem/u/c:SF (symbol_ref/u:DI ("*lC27") [flags 0x2]) [3  S4 A32])) "../src/spline.f":795 127 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 9.99999974737875163555145263671875e-5 [0x0.d1b717p-13])
        (nil)))
(insn 97 96 98 2 (set (reg:SF 21 xmm0 [196])
        (mult:SF (reg:SF 21 xmm0 [197])
            (reg:SF 22 xmm1 [orig:113 _27 ] [113]))) "../src/spline.f":795 802 {*fop_sf_comm}
     (nil))
(insn 98 97 99 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 eps+0 S4 A32])
        (reg:SF 21 xmm0 [196])) "../src/spline.f":795 127 {*movsf_internal}
     (nil))
(insn 99 98 201 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 ipass+0 S4 A32])
        (const_int 1 [0x1])) "../src/spline.f":798 82 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              5 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177
(code_label 201 99 100 3 226 (nil) [1 uses])
(note 100 201 101 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [1 ipass+0 S4 A32])
            (const_int 10 [0xa]))) "../src/spline.f":798 7 {*cmpsi_1}
     (nil))
(insn 102 101 103 3 (set (reg:QI 0 ax [orig:177 _104 ] [177])
        (gt:QI (reg:CCGC 17 flags)
            (const_int 0 [0]))) "../src/spline.f":798 613 {*setcc_qi}
     (nil))
(insn 103 102 104 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:177 _104 ] [177])
            (const_int 0 [0]))) "../src/spline.f":798 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 104 103 105 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 233)
            (pc))) "../src/spline.f":798 617 {*jcc_1}
     (nil)
 -> 233)
;;  succ:       8
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226
(note 105 104 106 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 4 (parallel [
            (set (reg:DI 38 r9 [198])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -108 [0xffffffffffffff94])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":799 218 {*adddi_1}
     (nil))
(insn 107 106 108 4 (set (reg:DI 37 r8 [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":799 81 {*movdi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DI 2 cx [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s+0 S8 A64])) "../src/spline.f":799 81 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:DI 1 dx [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -648 [0xfffffffffffffd78])) [5 xp+0 S8 A64])) "../src/spline.f":799 81 {*movdi_internal}
     (nil))
(insn 110 109 111 4 (set (reg:DI 4 si [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [5 x+0 S8 A64])) "../src/spline.f":799 81 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [4 snear+0 S8 A64])) "../src/spline.f":799 81 {*movdi_internal}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 5 di [204])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":799 218 {*adddi_1}
     (nil))
(insn 113 112 114 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 5 di [204])) "../src/spline.f":799 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 114 113 115 4 (parallel [
            (set (reg:DI 5 di [205])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":799 218 {*adddi_1}
     (nil))
(insn 115 114 121 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 5 di [205])) "../src/spline.f":799 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 121 115 122 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [203])) "../src/spline.f":799 81 {*movdi_internal}
     (nil))
(call_insn 122 121 123 4 (call (mem:QI (symbol_ref:DI ("sevall_") [flags 0x403]  <function_decl 0x1427e4800 sevall>) [0 sevall S1 A8])
        (const_int 16 [0x10])) "../src/spline.f":799 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 123 122 124 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":799 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 124 123 125 4 (parallel [
            (set (reg:DI 37 r8 [206])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":800 218 {*adddi_1}
     (nil))
(insn 125 124 126 4 (set (reg:DI 5 di [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [6 n+0 S8 A64])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 126 125 127 4 (set (reg:DI 1 dx [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [5 s+0 S8 A64])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 127 126 128 4 (set (reg:DI 4 si [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [5 y+0 S8 A64])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 128 127 129 4 (set (reg:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [4 snear+0 S8 A64])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 129 128 130 4 (parallel [
            (set (reg:DI 2 cx [211])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":800 218 {*adddi_1}
     (nil))
(insn 130 129 131 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 2 cx [211])) "../src/spline.f":800 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 131 130 132 4 (parallel [
            (set (reg:DI 2 cx [212])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":800 218 {*adddi_1}
     (nil))
(insn 132 131 133 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [5  S8 A64])
        (reg:DI 2 cx [212])) "../src/spline.f":800 57 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 133 132 134 4 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [206])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DI 37 r8)
        (reg:DI 5 di [207])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (set (reg:DI 2 cx)
        (reg:DI 1 dx [208])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 136 135 138 4 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [5 yp+0 S8 A64])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(insn 138 136 139 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [210])) "../src/spline.f":800 81 {*movdi_internal}
     (nil))
(call_insn 139 138 140 4 (call (mem:QI (symbol_ref:DI ("sevall_") [flags 0x403]  <function_decl 0x1427e4800 sevall>) [0 sevall S1 A8])
        (const_int 16 [0x10])) "../src/spline.f":800 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 140 139 141 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":800 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 141 140 142 4 (set (reg:SF 21 xmm0 [orig:114 xxi.310_28 ] [114])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xxi+0 S4 A32])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 142 141 143 4 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [4 xpnt+0 S8 A64])) "../src/spline.f":803 81 {*movdi_internal}
     (nil))
(insn 143 142 144 4 (set (reg:SF 22 xmm1 [orig:115 _29 ] [115])
        (mem:SF (reg/f:DI 0 ax [213]) [3 *xpnt_112(D)+0 S4 A32])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 144 143 145 4 (set (reg:SF 21 xmm0 [orig:116 _30 ] [116])
        (minus:SF (reg:SF 21 xmm0 [orig:114 xxi.310_28 ] [114])
            (reg:SF 22 xmm1 [orig:115 _29 ] [115]))) "../src/spline.f":803 805 {*fop_sf_1}
     (nil))
(insn 145 144 146 4 (set (reg:SF 22 xmm1 [orig:117 _31 ] [117])
        (reg:SF 21 xmm0 [orig:116 _30 ] [116])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 146 145 147 4 (set (reg:SF 21 xmm0 [orig:118 xpi.311_32 ] [118])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xpi+0 S4 A64])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 147 146 148 4 (set (reg:SF 22 xmm1 [orig:119 _33 ] [119])
        (mult:SF (reg:SF 22 xmm1 [orig:117 _31 ] [117])
            (reg:SF 21 xmm0 [orig:118 xpi.311_32 ] [118]))) "../src/spline.f":803 802 {*fop_sf_comm}
     (nil))
(insn 148 147 149 4 (set (reg:SF 21 xmm0 [orig:120 yyi.312_34 ] [120])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 yyi+0 S4 A64])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 149 148 150 4 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [4 ypnt+0 S8 A64])) "../src/spline.f":803 81 {*movdi_internal}
     (nil))
(insn 150 149 151 4 (set (reg:SF 23 xmm2 [orig:121 _35 ] [121])
        (mem:SF (reg/f:DI 0 ax [214]) [3 *ypnt_113(D)+0 S4 A32])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 151 150 152 4 (set (reg:SF 21 xmm0 [orig:122 _36 ] [122])
        (minus:SF (reg:SF 21 xmm0 [orig:120 yyi.312_34 ] [120])
            (reg:SF 23 xmm2 [orig:121 _35 ] [121]))) "../src/spline.f":803 805 {*fop_sf_1}
     (nil))
(insn 152 151 153 4 (set (reg:SF 23 xmm2 [orig:123 _37 ] [123])
        (reg:SF 21 xmm0 [orig:122 _36 ] [122])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 153 152 154 4 (set (reg:SF 21 xmm0 [orig:124 ypi.313_38 ] [124])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 ypi+0 S4 A32])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 154 153 155 4 (set (reg:SF 21 xmm0 [orig:125 _39 ] [125])
        (mult:SF (reg:SF 21 xmm0 [orig:124 ypi.313_38 ] [124])
            (reg:SF 23 xmm2 [orig:123 _37 ] [123]))) "../src/spline.f":803 802 {*fop_sf_comm}
     (nil))
(insn 155 154 156 4 (set (reg:SF 21 xmm0 [215])
        (plus:SF (reg:SF 21 xmm0 [orig:125 _39 ] [125])
            (reg:SF 22 xmm1 [orig:119 _33 ] [119]))) "../src/spline.f":803 802 {*fop_sf_comm}
     (nil))
(insn 156 155 157 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 res+0 S4 A32])
        (reg:SF 21 xmm0 [215])) "../src/spline.f":803 127 {*movsf_internal}
     (nil))
(insn 157 156 158 4 (set (reg:SF 21 xmm0 [orig:126 xpi.314_40 ] [126])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xpi+0 S4 A64])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 158 157 159 4 (set (reg:SF 22 xmm1 [orig:127 _41 ] [127])
        (reg:SF 21 xmm0 [orig:126 xpi.314_40 ] [126])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 159 158 160 4 (set (reg:SF 21 xmm0 [orig:128 xpi.315_42 ] [128])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [3 xpi+0 S4 A64])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 160 159 161 4 (set (reg:SF 22 xmm1 [orig:129 _43 ] [129])
        (mult:SF (reg:SF 22 xmm1 [orig:127 _41 ] [127])
            (reg:SF 21 xmm0 [orig:128 xpi.315_42 ] [128]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 161 160 162 4 (set (reg:SF 21 xmm0 [orig:130 ypi.316_44 ] [130])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 ypi+0 S4 A32])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 162 161 163 4 (set (reg:SF 23 xmm2 [orig:131 _45 ] [131])
        (reg:SF 21 xmm0 [orig:130 ypi.316_44 ] [130])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 163 162 164 4 (set (reg:SF 21 xmm0 [orig:132 ypi.317_46 ] [132])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 ypi+0 S4 A32])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 164 163 165 4 (set (reg:SF 21 xmm0 [orig:133 _47 ] [133])
        (mult:SF (reg:SF 21 xmm0 [orig:132 ypi.317_46 ] [132])
            (reg:SF 23 xmm2 [orig:131 _45 ] [131]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 165 164 166 4 (set (reg:SF 22 xmm1 [orig:134 _48 ] [134])
        (plus:SF (reg:SF 22 xmm1 [orig:129 _43 ] [129])
            (reg:SF 21 xmm0 [orig:133 _47 ] [133]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 166 165 167 4 (set (reg:SF 21 xmm0 [orig:135 xxi.318_49 ] [135])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [3 xxi+0 S4 A32])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 167 166 168 4 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [4 xpnt+0 S8 A64])) "../src/spline.f":806 81 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:SF 23 xmm2 [orig:136 _50 ] [136])
        (mem:SF (reg/f:DI 0 ax [216]) [3 *xpnt_112(D)+0 S4 A32])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 169 168 170 4 (set (reg:SF 21 xmm0 [orig:137 _51 ] [137])
        (minus:SF (reg:SF 21 xmm0 [orig:135 xxi.318_49 ] [135])
            (reg:SF 23 xmm2 [orig:136 _50 ] [136]))) "../src/spline.f":806 805 {*fop_sf_1}
     (nil))
(insn 170 169 171 4 (set (reg:SF 23 xmm2 [orig:138 _52 ] [138])
        (reg:SF 21 xmm0 [orig:137 _51 ] [137])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 171 170 172 4 (set (reg:SF 21 xmm0 [orig:139 x2i.319_53 ] [139])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [3 x2i+0 S4 A32])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 172 171 173 4 (set (reg:SF 21 xmm0 [orig:140 _54 ] [140])
        (mult:SF (reg:SF 21 xmm0 [orig:139 x2i.319_53 ] [139])
            (reg:SF 23 xmm2 [orig:138 _52 ] [138]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 173 172 174 4 (set (reg:SF 22 xmm1 [orig:141 _55 ] [141])
        (plus:SF (reg:SF 22 xmm1 [orig:134 _48 ] [134])
            (reg:SF 21 xmm0 [orig:140 _54 ] [140]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 174 173 175 4 (set (reg:SF 21 xmm0 [orig:142 yyi.320_56 ] [142])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [3 yyi+0 S4 A64])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 175 174 176 4 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [4 ypnt+0 S8 A64])) "../src/spline.f":806 81 {*movdi_internal}
     (nil))
(insn 176 175 177 4 (set (reg:SF 23 xmm2 [orig:143 _57 ] [143])
        (mem:SF (reg/f:DI 0 ax [217]) [3 *ypnt_113(D)+0 S4 A32])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 177 176 178 4 (set (reg:SF 21 xmm0 [orig:144 _58 ] [144])
        (minus:SF (reg:SF 21 xmm0 [orig:142 yyi.320_56 ] [142])
            (reg:SF 23 xmm2 [orig:143 _57 ] [143]))) "../src/spline.f":806 805 {*fop_sf_1}
     (nil))
(insn 178 177 179 4 (set (reg:SF 23 xmm2 [orig:145 _59 ] [145])
        (reg:SF 21 xmm0 [orig:144 _58 ] [144])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 179 178 180 4 (set (reg:SF 21 xmm0 [orig:146 y2i.321_60 ] [146])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [3 y2i+0 S4 A128])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 180 179 181 4 (set (reg:SF 21 xmm0 [orig:147 _61 ] [147])
        (mult:SF (reg:SF 21 xmm0 [orig:146 y2i.321_60 ] [146])
            (reg:SF 23 xmm2 [orig:145 _59 ] [145]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 181 180 182 4 (set (reg:SF 21 xmm0 [218])
        (plus:SF (reg:SF 21 xmm0 [orig:147 _61 ] [147])
            (reg:SF 22 xmm1 [orig:141 _55 ] [141]))) "../src/spline.f":806 802 {*fop_sf_comm}
     (nil))
(insn 182 181 183 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [3 res_s+0 S4 A32])
        (reg:SF 21 xmm0 [218])) "../src/spline.f":806 127 {*movsf_internal}
     (nil))
(insn 183 182 184 4 (set (reg:SF 21 xmm0 [219])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [3 res+0 S4 A32])) "../src/spline.f":808 127 {*movsf_internal}
     (nil))
(insn 184 183 185 4 (set (reg:SF 21 xmm0 [orig:148 _62 ] [148])
        (div:SF (reg:SF 21 xmm0 [219])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [3 res_s+0 S4 A32]))) "../src/spline.f":808 805 {*fop_sf_1}
     (nil))
(insn 185 184 186 4 (set (reg:V4SF 22 xmm1 [221])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC23") [flags 0x2]) [3  S16 A128])) "../src/spline.f":808 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 186 185 187 4 (parallel [
            (set (reg:SF 21 xmm0 [220])
                (neg:SF (reg:SF 21 xmm0 [orig:148 _62 ] [148])))
            (use (reg:V4SF 22 xmm1 [221]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":808 470 {*absnegsf2}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:148 _62 ] [148]))
        (nil)))
(insn 187 186 188 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 dsn+0 S4 A32])
        (reg:SF 21 xmm0 [220])) "../src/spline.f":808 127 {*movsf_internal}
     (nil))
(insn 188 187 189 4 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [4 snear+0 S8 A64])) "../src/spline.f":809 81 {*movdi_internal}
     (nil))
(insn 189 188 190 4 (set (reg:SF 21 xmm0 [orig:149 _63 ] [149])
        (mem:SF (reg/f:DI 0 ax [222]) [3 *snear_105(D)+0 S4 A32])) "../src/spline.f":809 127 {*movsf_internal}
     (nil))
(insn 190 189 191 4 (set (reg:SF 21 xmm0 [orig:150 _64 ] [150])
        (plus:SF (reg:SF 21 xmm0 [orig:149 _63 ] [149])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [3 dsn+0 S4 A32]))) "../src/spline.f":809 802 {*fop_sf_comm}
     (nil))
(insn 191 190 192 4 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [4 snear+0 S8 A64])) "../src/spline.f":809 81 {*movdi_internal}
     (nil))
(insn 192 191 193 4 (set (mem:SF (reg/f:DI 0 ax [223]) [3 *snear_105(D)+0 S4 A32])
        (reg:SF 21 xmm0 [orig:150 _64 ] [150])) "../src/spline.f":809 127 {*movsf_internal}
     (nil))
(insn 193 192 194 4 (set (reg:SF 22 xmm1 [224])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [3 dsn+0 S4 A32])) "../src/spline.f":810 127 {*movsf_internal}
     (nil))
(insn 194 193 195 4 (set (reg:V4SF 21 xmm0 [225])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*lC13") [flags 0x2]) [3  S16 A128])) "../src/spline.f":810 1225 {movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 195 194 196 4 (parallel [
            (set (reg:SF 21 xmm0 [orig:151 _65 ] [151])
                (abs:SF (reg:SF 22 xmm1 [224])))
            (use (reg:V4SF 21 xmm0 [225]))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":810 470 {*absnegsf2}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [224]))
        (nil)))
(insn 196 195 197 4 (set (reg:SF 22 xmm1 [226])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [3 eps+0 S4 A32])) "../src/spline.f":810 127 {*movsf_internal}
     (nil))
(insn 197 196 198 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 22 xmm1 [226])
            (reg:SF 21 xmm0 [orig:151 _65 ] [151]))) "../src/spline.f":810 51 {*cmpiusf}
     (nil))
(jump_insn 198 197 199 4 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 238)
            (pc))) "../src/spline.f":810 617 {*jcc_1}
     (nil)
 -> 238)
;;  succ:       9
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 8, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 199 198 200 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 230 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [1 ipass+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [1 ipass+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":798 217 {*addsi_1}
     (nil))
(jump_insn 230 200 231 5 (set (pc)
        (label_ref 201)) "../src/spline.f":798 649 {jump}
     (nil)
 -> 201)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 231 230 233)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 233 231 232 8 228 (nil) [1 uses])
(note 232 233 234 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 234 232 204 8 (const_int 0 [0]) "../src/spline.f":812 682 {nop}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 227 228 229 230
(code_label 204 234 205 6 224 (nil) [0 uses])
(note 205 204 206 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 6 (set (reg/f:DI 0 ax [227])
        (symbol_ref/f:DI ("*lC15") [flags 0x2]  <var_decl 0x143540c60 *lC15>)) "../src/spline.f":813 81 {*movdi_internal}
     (nil))
(insn 207 206 208 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [12 dt_parm.143.common.filename+0 S8 A64])
        (reg/f:DI 0 ax [227])) "../src/spline.f":813 81 {*movdi_internal}
     (nil))
(insn 208 207 209 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [1 dt_parm.143.common.line+0 S4 A128])
        (const_int 813 [0x32d])) "../src/spline.f":813 82 {*movsi_internal}
     (nil))
(insn 209 208 210 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [1 dt_parm.143.common.flags+0 S4 A128])
        (const_int 128 [0x80])) "../src/spline.f":813 82 {*movsi_internal}
     (nil))
(insn 210 209 211 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -604 [0xfffffffffffffda4])) [1 dt_parm.143.common.unit+0 S4 A32])
        (const_int 6 [0x6])) "../src/spline.f":813 82 {*movsi_internal}
     (nil))
(insn 211 210 212 6 (parallel [
            (set (reg:DI 0 ax [228])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":813 218 {*adddi_1}
     (nil))
(insn 212 211 213 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [228])) "../src/spline.f":813 81 {*movdi_internal}
     (nil))
(call_insn 213 212 214 6 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x1427e0800 _gfortran_st_write>) [0 _gfortran_st_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":813 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 214 213 215 6 (parallel [
            (set (reg:DI 0 ax [229])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":813 218 {*adddi_1}
     (nil))
(insn 215 214 216 6 (set (reg:SI 1 dx)
        (const_int 42 [0x2a])) "../src/spline.f":813 82 {*movsi_internal}
     (nil))
(insn 216 215 217 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*lC28") [flags 0x2]  <var_decl 0x1435da2d0 *lC28>)) "../src/spline.f":813 81 {*movdi_internal}
     (nil))
(insn 217 216 218 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [229])) "../src/spline.f":813 81 {*movdi_internal}
     (nil))
(call_insn 218 217 219 6 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_character_write") [flags 0x41]  <function_decl 0x1427d4900 _gfortran_transfer_character_write>) [0 _gfortran_transfer_character_write S1 A8])
        (const_int 0 [0])) "../src/spline.f":813 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 219 218 220 6 (parallel [
            (set (reg:DI 0 ax [230])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "../src/spline.f":813 218 {*adddi_1}
     (nil))
(insn 220 219 221 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [230])) "../src/spline.f":813 81 {*movdi_internal}
     (nil))
(call_insn 221 220 235 6 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x1427e4300 _gfortran_st_write_done>) [0 _gfortran_st_write_done S1 A8])
        (const_int 0 [0])) "../src/spline.f":813 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 235 221 236 6 (set (pc)
        (label_ref 222)) "../src/spline.f":816 649 {jump}
     (nil)
 -> 222)
;;  succ:       7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 236 235 238)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 238 236 237 9 229 (nil) [1 uses])
(note 237 238 239 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 239 237 222 9 (const_int 0 [0]) "../src/spline.f":813 682 {nop}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              6
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 222 239 223 7 225 (nil) [1 uses])
(note 223 222 229 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 229 223 240 7 (const_int 0 [0]) "../src/spline.f":816 682 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 240 229 0 NOTE_INSN_DELETED)
